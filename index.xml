<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2020-09-27:/</id>
	<updated>2020-09-28T10:08:55+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Authenticator と AAL</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/authenticator-and-aal/" />
		<id>tag:text.Baldanders.info,2020-09-27:/remark/2020/09/authenticator-and-aal/</id>
		<published>2020-09-27T10:45:38+00:00</published>
		<updated>2020-09-27T11:01:38+00:00</updated>
		<summary>どうも日本の金融界は「リスク感度が鈍い」そうなので，自衛のためにも2017年にリリースされた NIST SP 800-63-3 をベースに少しお勉強しておく。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どうも日本の金融界は「&lt;a href=&#34;https://japan.cnet.com/article/35160001/&#34; title=&#34;ゆうちょ池田社長「リスク感度が鈍かった」--被害は約6000万円に拡大、2017年から発生 - CNET Japan&#34;&gt;リスク感度が鈍い&lt;/a&gt;」そうなので，自衛のためにも2017年にリリースされた &lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;NIST SP 800-63-3&lt;/a&gt; をベースに少しお勉強しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63-3.html&#34;&gt;NIST Special Publication 800-63-3: Digital Identity Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63a.html&#34;&gt;NIST Special Publication 800-63A: Enrollment and Identity Proofing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34;&gt;NIST Special Publication 800-63B: Authentication and Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63c.html&#34;&gt;NIST Special Publication 800-63C: Federation and Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;SP 800-63-3&lt;/a&gt; といえばパスワード運用で当時は話題になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/changes-in-password-best-practices/&#34;&gt;「パスワードのベストプラクティス」が変わる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このパスワード話が出てくるのが &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; だが，このドキュメントでは Authenticator 全体について色々と書かれている。&lt;/p&gt;
&lt;h2&gt;Authenticator&lt;/h2&gt;
&lt;p&gt;Authenticator について適切な日本語が見当たらないが，強いて言うなら「認証機能」あるいは「認証器」といったところだろうか。
たとえばパスワードも Authenticator だし，スマホにインストールした TOTP アプリも Authenticator だ。
Yubikey なんかの暗号デバイスも Authenticator に含まれる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; では Authenticator を以下の9つに分類している。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;種別名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;認証要素&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Memorized Secrets&lt;br&gt;記憶シークレット&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;知識&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Look-Up Secrets&lt;br&gt;ルックアップ・シークレット&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Out-of-Band Devices&lt;br&gt;経路外デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor OTP Device&lt;br&gt;単要素 OTP デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor OTP Devices&lt;br&gt;多要素 OTP デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor Cryptographic Software&lt;br&gt;単要素暗号ソフトウェア&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor Cryptographic Devices&lt;br&gt;単要素暗号デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor Cryptographic Software&lt;br&gt;多要素暗号ソフトウェア&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor Cryptographic Devices&lt;br&gt;多要素暗号デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;また，各 Authenticator の例としては以下のものが挙げられる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Authenticator&lt;/th&gt;
&lt;th&gt;具体例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;記憶シークレット&lt;/td&gt;
&lt;td&gt;パスワード，PINコード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ルックアップ・シークレット&lt;/td&gt;
&lt;td&gt;乱数表，認証失敗時のリカバリコード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;経路外デバイス&lt;/td&gt;
&lt;td&gt;SMS によるコード送信， QR コード（電子メールや VoIP は認められない）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素 OTP デバイス&lt;/td&gt;
&lt;td&gt;アクティベーションを必要としない OTP デバイスまたはソフトウェア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素 OTP デバイス&lt;/td&gt;
&lt;td&gt;アクティベーションを行った上で利用可能な OTP デバイスまたはソフトウェア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素暗号ソフトウェア&lt;/td&gt;
&lt;td&gt;セキュアなストレージ上で保護されている暗号鍵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素暗号デバイス&lt;/td&gt;
&lt;td&gt;FIDO U2F の USB ドングル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素暗号ソフトウェア&lt;/td&gt;
&lt;td&gt;単要素暗号ソフトウェアに対して追加のアクティベーションを必要とするもの&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素暗号デバイス&lt;/td&gt;
&lt;td&gt;単要素暗号デバイスに対して追加のアクティベーションを必要とするもの&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Authenticator Assurance Level&lt;/h2&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; では AAL (Authenticator Assurance Level) を定義している。
AAL は 1 〜 3 の3段階あり，それぞれ以下に示す  Authenticator の組み合わせを許容している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AAL 1 では9種の Authenticator 全て許容され，単要素の認証で OK&lt;/li&gt;
&lt;li&gt;AAL 2 では以下に示す通り複数の認証要素による多要素認証が必要：
&lt;ul&gt;
&lt;li&gt;多要素 OTP デバイス&lt;/li&gt;
&lt;li&gt;多要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;多要素暗号デバイス&lt;/li&gt;
&lt;li&gt;記憶シークレット＋以下
&lt;ul&gt;
&lt;li&gt;ルックアップ・シークレット&lt;/li&gt;
&lt;li&gt;経路外デバイス&lt;/li&gt;
&lt;li&gt;単要素 OTP デバイス&lt;/li&gt;
&lt;li&gt;単要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素暗号デバイス&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AAL 3 では以下に示す通り，暗号鍵の所持証明要素とハードウェア関与を含む複数の認証要素による多要素認証が必要：
&lt;ul&gt;
&lt;li&gt;多要素暗号デバイス&lt;/li&gt;
&lt;li&gt;単要素暗号デバイス＋記憶シークレット&lt;/li&gt;
&lt;li&gt;多要素OTPデバイス(SW/HW)＋単要素暗号デバイス&lt;/li&gt;
&lt;li&gt;多要素OTPデバイス(HW)＋単要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素OTPデバイス(HW)＋多要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素OTPデバイス(HW)＋単暗号ソフトウェア＋記憶シークレット&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AAL の各レベルごとに要求されるセキュリティ事項（一部）は以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要求事項&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中間者攻撃耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verifier なりすまし耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verifier 改ざん耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リプレイ耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;認証意図（AuthN Inbtent）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;推奨&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;レコード保持ポリシー&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;プライバシー統制&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;金融系サービスの subscriber 確認で乗っ取りやなりすましを防ぎたいなら AAL 3 で何らかの物理暗号デバイスが必要だと思うけどねー。&lt;/p&gt;
&lt;h2&gt;格子型の乱数表は NG&lt;/h2&gt;
&lt;p&gt;現在は使ってるところはないだろうが，かつてネットバンキングでよく見られた格子型の乱数表はルックアップ・シークレットとしても NG だそうだ。
まぁ，当然だよな。&lt;/p&gt;
&lt;h2&gt;SMS 認証は非推奨？&lt;/h2&gt;
&lt;p&gt;NIST は SMS によるコード送信について， &lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;SP 800-63-3&lt;/a&gt; のドラフト段階では非推奨にするつもりだったらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/07/26/20160725nist-declares-the-age-of-sms-based-2-factor-authentication-over/&#34;&gt;SMSを使った二要素認証を非推奨〜禁止へ、米国立技術規格研究所NISTの新ガイダンス案 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしその後，激しい議論があったようで，最終的には “&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html#restricted&#34;&gt;Restricted Authenticator&lt;/a&gt;” という位置づけまで緩和されたようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Currently, authenticators leveraging the public switched telephone network, including phone- and Short Message Service (SMS)-based one-time passwords (OTPs) are restricted. Other authenticator types may be added as additional threats emerge. Note that, among other requirements, even when using phone- and SMS-based OTPs, the agency also has to verify that the OTP is being directed to a phone and not an IP address, such as with VoIP, as these accounts are not typically protected with multi-factor authentication&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-FAQ/#q-b01&#34;&gt;NIST SP 800-63 Digital Identity Guidelines-FAQ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;（スマホを含む）電話機に依存した認証は，プライバシーも絡めて考えると筋が悪い。
ぶっちゃけ SMS 認証を含む経路外デバイスを使った認証は排除するか（ルックアップ・シークレットのように）優先順位を下げて非常時のみ使えるようにするのがいいと思う。
もちろん&lt;a href=&#34;https://japan.cnet.com/article/35159898/&#34; title=&#34;Twitterに集団訴訟--電話番号がターゲティング広告に不正利用された可能性 - CNET Japan&#34;&gt;電話番号を広告に流用&lt;/a&gt;するなど以っての外である。&lt;/p&gt;
&lt;h2&gt;生体情報は Authenticator として使えるか&lt;/h2&gt;
&lt;p&gt;Authenticator の分類を見れば分かるように，生体情報は単独では認証手段としては使えないという認識のようだ。
そもそも&lt;strong&gt;生体情報は秘密情報ではない&lt;/strong&gt;のだから当たり前といえば当たり前かな。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/usnistgov/800-63-3&#34;&gt;usnistgov/800-63-3: Home to public development of NIST Special Publication 800-63-3: Digital Authentication Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/kthrtty/20171027-nist-sp80063bkthrtty-81333156&#34;&gt;NIST SP800-63-3翻訳版63-Bパートの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.nic.ad.jp/sc-sendai/program/iwsc-sendai-d2-6.pdf&#34;&gt;認証にまつわるセキュリティの新常識 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.trustlogin.com/hc/ja/articles/115004031154-%E4%B8%96%E7%95%8C%E3%81%AE%E9%9B%BB%E5%AD%90%E8%AA%8D%E8%A8%BC%E5%9F%BA%E6%BA%96%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8B-NIST-SP800-63-3%E3%82%92%E8%AA%AD%E3%81%BF%E8%A7%A3%E3%81%8F&#34;&gt;世界の電子認証基準が変わる：NIST SP800-63-3を読み解く – サポート − トラスト・ログイン byGMO【旧SKUID(スクイド)】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-25-phishing-resistant-sms-autofill/&#34;&gt;Phishing Resistant SMS Autofill - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
</content>
	</entry><entry>
		<title>2020-09-27 のブックマーク</title>
		<category term="bookmarks" label="bookmarks" scheme="https://text.baldanders.info/bookmarks/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/bookmarks/2020/09/27-bookmarks/" />
		<id>tag:text.Baldanders.info,2020-09-27:/bookmarks/2020/09/27-bookmarks/</id>
		<published>2020-09-27T05:55:41+00:00</published>
		<updated>2020-09-27T05:56:29+00:00</updated>
		<summary>「Lua 5.4 のバイナリが出てた！」他</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;セキュリティ＆プライバシー関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.computerworld.com/article/3575510/at-this-point-5g-is-a-bad-joke.html&#34;&gt;At this point, 5G is a bad joke | Computerworld&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/09/5g.html&#34;&gt;ブログ: 現時点で、5Gは悪い冗談です&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20200918-passport-instagram-hacker/&#34;&gt;飛行機の搭乗券が写った写真から個人情報を抜き出すまでの記録、オーストラリアの元首相の場合 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/21/2020-09-20-encryption-backdoor-bill-dangerous-lofgren/&#34;&gt;上院の暗号バックドア法案は「米国人にとって危険」だと下院議員が警告  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/blog/no-moving-your-ssh-port-isnt-security-by-obscurity/&#34;&gt;No, Moving Your SSH Port Isn&amp;rsquo;t Security by Obscurity | Daniel Miessler&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/09/ssh.html&#34;&gt;ブログ: SSHポートの移動は隠蔽によるセキュリティではない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itmedia.co.jp/news/articles/2009/23/news073.html&#34;&gt;セキュリティ企業が描き出す「歪曲された」実態　大学研究者が検証 - ITmedia NEWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/interview-with-the-author-of-the-2000-love-bug-virus.html&#34;&gt;Interview with the Author of the 2000 Love Bug Virus - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35159912/&#34;&gt;ゆうちょ銀行、デビットカード「mijica」で不正送金&amp;ndash;被害額は約332万円 - CNET Japan&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35160001/&#34;&gt;ゆうちょ池田社長「リスク感度が鈍かった」&amp;ndash;被害は約6000万円に拡大、2017年から発生 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159900/&#34;&gt;富士通研究所、顔写真などによる「なりすまし」を防止する技術を開発 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35159898/&#34;&gt;Twitterに集団訴訟&amp;ndash;電話番号がターゲティング広告に不正利用された可能性 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wired.jp/2020/09/23/kid-smartwatch-security-vulnerabilities/&#34;&gt;いまだに“放置”されている「子ども用スマートウォッチ」の脆弱性には、盗聴やなりすましの危険性も潜んでいる | WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/iranian-government-hacking-android.html&#34;&gt;Iranian Government Hacking Android - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-24-lightning-qa-devsecops-in-five-with-maya-kaczorowski/&#34;&gt;Lightning Q&amp;amp;A: DevSecOps in five with Maya Kaczorowski - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/26/2020-09-25-twitter-developer-keys-exposed/&#34;&gt;Twitterが開発者の秘密鍵やアカウントトークンの漏洩を警告  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;天文関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://moonstation.jp/blog/lpex-general/sankei-shimbun-says-japanese-lawmakers-will-submit-a-bill-to-promote-space-resources-utilization&#34;&gt;日本でも宇宙資源についての法整備実施へ – 産経新聞報道 | 月探査情報ステーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nasa.gov/feature/jpl/comet-discovered-to-have-its-own-northern-lights/&#34;&gt;Comet Discovered to Have Its Own Northern Lights | NASA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.u-tokyo.ac.jp/focus/ja/articles/z0508_00080.html&#34;&gt;小惑星リュウグウ上に見つかった衝突天体の破片 | 東京大学&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.it-chiba.ac.jp/topics/pr20200922/&#34;&gt;小惑星探査機「はやぶさ２」観測成果論文の Nature Astronomy誌掲載について | Topics/お知らせ | 千葉工業大学&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nasa.gov/feature/goddard/2020/bennu-vesta-meteorites/&#34;&gt;OSIRIS-REx Finds Vesta Meteorites on Asteroid Bennu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitaltrends.com/features/big-data-search-for-extraterrestrial-intelligence/&#34;&gt;Big Data and the Search for Extraterrestrial Intelligence | Digital Trends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alma-telescope.jp/news/aspecs-202009?doing_wp_cron=1601182346.6225140094757080078125&#34;&gt;ニュース - 宇宙最盛期を支える銀河の原材料　～約100億年前の銀河たちが持つ分子ガス - アルマ望遠鏡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.irishtimes.com/news/science/ireland-ready-to-answer-et-s-call-1.4333148&#34;&gt;Ireland ready to answer ET’s call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alma-telescope.jp/news/press/salt-202009&#34;&gt;プレスリリース - 塩と熱い水蒸気に包まれる巨大赤ちゃん星のペア - アルマ望遠鏡&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nao.ac.jp/news/science/2020/20200925-alma.html&#34;&gt;塩と熱い水蒸気に包まれる巨大赤ちゃん星のペア | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;知財関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/nintendo-hits-xxx-rated-peachs-unknown-tale-game-with-copyright-complaint-200921/&#34;&gt;Nintendo Hits XXX-Rated &amp;lsquo;Peach&amp;rsquo;s Unknown Tale&amp;rsquo; Game With Copyright Complaint * TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.yahoo.co.jp/byline/kuriharakiyoshi/20200919-00199122/&#34;&gt;バンクシーの「花束を投げる人」の欧州商標登録が無効に(栗原潔) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/copyright-troll-loses-legal-battle-and-must-pay-172173-200920/&#34;&gt;&amp;lsquo;Copyright Troll&amp;rsquo; Loses Legal Battle and Must Pay $172,173 * TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Linux または Ubuntu に関する話題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20200922-material-shell/&#34;&gt;マテリアルデザインなデスクトップがヌルヌル動くLinuxのGNOME Shell拡張「Material Shell」レビュー - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://libreoffice-dev.blogspot.com/2020/09/the-best-libreoffice-extensions-yaru.html&#34;&gt;LibreOffice Information: The best LibreOffice extensions. Yaru icon theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxjournal.com/content/linux-journal-back&#34;&gt;Linux Journal is Back | Linux Journal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/09/ubuntu-2004-179-lenovoubuntupc27ubuntupc.html&#34;&gt;Ubuntu 20.04 その179 - LenovoからUbuntuプリインストールPCが多数登場・27モデルがUbuntuプリインストールPCの対象に - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/09/ubuntu-2004-178-gnome-shellgnome-shell.html&#34;&gt;Ubuntu 20.04 その178 - GNOME Shell拡張とGNOME Shell拡張の入手方法 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/09/ubuntu-2004-180-gnome-shell.html&#34;&gt;Ubuntu 20.04 その180 - GNOME Shell ExtensionsからGNOME Shell拡張をインストールするには - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/09/ubuntu-2004-181-gnome-shell-gnome-shell.html&#34;&gt;Ubuntu 20.04 その181 - インストール済みのGNOME Shell拡張を確認するには・GNOME Shell拡張を管理するには - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Go 言語関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/20200922133154.htm&#34;&gt;Big Sky :: プログラマーのための新しい情報共有コミュニティ Zenn で本を書いてみた。&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/mattn/books/4c7de85ec42cb44cf285&#34;&gt;Go 言語にやってくる Generics は我々に何をもたらすのか | Zenn&lt;/a&gt; : 購入！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mdaliyan/icache&#34;&gt;mdaliyan/icache: golang type and thread safe key-value in memory cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-goroutine-leak-detector-61a949beb88&#34;&gt;Go: Goroutine Leak Detector. A goroutine leak can easily be detected… | by Vincent Blanchon | A Journey With Go | Sep, 2020 | Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lakefs.io/2020/09/23/in-process-caching-in-go-scaling-lakefs-to-100k-requests-second/&#34;&gt;In-process caching in Go: scaling lakeFS to 100k requests/second&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/mattn/articles/c08072b42f7a5cdcd749&#34;&gt;Facebook の ent を使って簡単なウェブアプリケーションを作る | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/f-secure-foundry/tamago&#34;&gt;f-secure-foundry/tamago: TamaGo - bare metal Go for ARM SoCs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Rust 言語関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rust-lang.org/2020/09/21/Scheduling-2021-Roadmap.html&#34;&gt;Call for 2021 Roadmap Blogs Ending Soon | Rust Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/22/2020-09-21-twitter-and-zoom-algorithmic-bias-issues/&#34;&gt;TwitterとZoomのアルゴリズムに偏見問題が浮上  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/morinokami/articles/hello-github-cli&#34;&gt;GitHub CLI 1.0 がリリースされたので使ってみた | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dequeuniversity.com/rules/axe/3.5/meta-viewport&#34;&gt;Zooming and scaling must not be disabled  Axe Rules | Deque University | Deque Systems&lt;/a&gt; : HTML でズーム機能を無効にしたらあかんよ，という話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/22/2020-09-21-pandemic-accelerated-cord-cutting-making-2020-the-worst-ever-year-for-pay-tv/&#34;&gt;2020年米国の有料テレビ契約が過去最大の減少、新型コロナで消費者離れが加速  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/linuxmicorosft_edge_on_linuxignite_2020.html&#34;&gt;［速報］マイクロソフト、Linux対応の「Micorosft Edge on Linux」、来月プレビュー公開へ。Ignite 2020 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/vmwareazure_vmware_solutionignite_2020.html&#34;&gt;［速報］マイクロソフトが構築したVMware環境「Azure VMware Solution」正式サービス開始。Ignite 2020 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/rpawindowspower_automate_desktopignite_2020.html&#34;&gt;［速報］マイクロソフト、RPA機能でWindowsアプリ操作を自動化する「Power Automate Desktop」パブリックプレビュー開始、日本語版も。Ignite 2020 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/tomosta/books/84d4a18cf9372fe1f539&#34;&gt;TypeScriptで学ぶ JavaScript（ES6） | Zenn&lt;/a&gt; ：購入！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblog.thebase.in/entry/kokoni-hasamio&#34;&gt;GitHub ActionsでGitHub Project運用でのIssue作成作業をカイゼンする - BASEプロダクトチームブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1278352.html&#34;&gt;「Zoom」v5.3.0が公開 ～ユーザー側から参加するブレイクアウトルームを選択可能に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159905/&#34;&gt;キヤノン、富士通製スーパーコンピューターを導入へ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/23/2020-09-22-tesla-is-building-a-cathode-plant-and-getting-into-the-lithium-mining-business/&#34;&gt;テスラが1万エーカーのリチウム粘土鉱床の権利を取得、リチウム採掘事業に自ら参入へ  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/cloudskewwebawsazuregcpkubernetesoracle_cloud.html&#34;&gt;クラウドのアーキテクチャ図作成ツール「CloudSkew」、Webブラウザから無料で利用可能。AWS／Azure／GCP／Kubernetes／Oracle Cloudなどマルチクラウド対応 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/net_5ignite_2020.html&#34;&gt;マイクロソフト、全プラットフォームを統合する「.NET 5」フレームワーク、リリース候補版を公開。Ignite 2020 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://cruel.org/books/simonrationality/simonrationality.pdf&#34;&gt;人間活動における理性 Reason in Human Affairs &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cruel.hatenablog.com/entry/2020/09/23/143332&#34;&gt;ハーバート・Ａ・サイモン『人間活動における理性』(1982)　改訳終わった。 - 山形浩生の「経済のトリセツ」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1278624.html&#34;&gt;Mozilla、「Flash」の廃止計画を更新 ～2021年1月公開予定の「Firefox 85」で完全削除へ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/terrierscript/articles/2020-09-23-internal-admin-tools-auth-slack&#34;&gt;社内向けの管理画面の認証にSlack認証を使うと便利だった | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-23-github-mobile-and-graphql/&#34;&gt;GitHub Mobile and GraphQL - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/24/2020-09-15-ibm-publishes-its-quantum-roadmap-says-it-will-have-a-1000-qubit-machine-in-2023/&#34;&gt;IBMが量子ロードマップを公開、2023年には1000量子ビットマシンを実現へ  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://applica.info/zoom-android&#34;&gt;ZoomのAndroidスマホでの使い方！アプリのダウンロードや設定方法を解説！ | アプリやWebの疑問に答えるメディア&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zetamatta.hatenablog.com/entry/2020/09/16/200319&#34;&gt;ShellExecute でネットワーク上の実行ファイルを呼び出そうとするとエラーになる - 標準愚痴出力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zetamatta.hatenablog.com/entry/2020/07/25/171204&#34;&gt;Lua 5.4 のバイナリが出てた！ - 標準愚痴出力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35160044/&#34;&gt;海洋研究開発機構、「次期地球シミュレータ」でマルチアーキテクチャーを採用 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35160003/&#34;&gt;パナソニック、プロダクトのレシピをGitHubで全公開&amp;ndash;「D+IO」という新たなモノづくりの形 - CNET Japan&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/panasonic-corporation&#34;&gt;panasonic-corporation · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/satoru_takeuchi/articles/fb824d7c59ccdb6a0b38&#34;&gt;bashの組込みコマンド自作によるスクリプトの高速化 | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://owenlynch.org/posts/2020-09-16-haskells-children/&#34;&gt;Owen&amp;rsquo;s Blog &amp;ndash; Haskell&amp;rsquo;s Children&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/09/haskell.html&#34;&gt;ブログ: Haskellの子供たち&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/matsu7089/books/gas-account-book&#34;&gt;VueとGASでつくる！サーバーレス家計簿📔 | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1278901.html&#34;&gt;無償版“IFTTT”で利用可能なアプレットは3つまでに ～超過分は10月8日にアーカイブ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/swiftwindowswindows.html&#34;&gt;Swift言語がWindowsのサポートを開始。コンパイラやライブラリなどWindows対応に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1279037.html&#34;&gt;フリーのネットワーク解析ツール「Wireshark」v3.2.7/v3.0.14/v2.6.20が公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>Go 言語に関するブックマーク（退避分）</title>
		<category term="bookmarks" label="bookmarks" scheme="https://text.baldanders.info/bookmarks/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/bookmarks/golang/" />
		<id>tag:text.Baldanders.info,2020-09-27:/bookmarks/golang/</id>
		<published>2020-09-26T15:00:00+00:00</published>
		<updated>2020-09-28T10:08:55+00:00</updated>
		<summary>今まで Go 言語用に溜めていた旧ブックマークの大部分を退避させている。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今まで &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用に溜めていた&lt;a href=&#34;https://text.baldanders.info/golang/bookmark/&#34;&gt;旧ブックマーク&lt;/a&gt;の大部分を退避させている。&lt;/p&gt;
&lt;h2&gt;ニュース関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/22662f43b6a6e8728798&#34;&gt;動的言語だけやってた僕が、38日間Go言語を書いて学んだこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ksato9700/items/6228d4eb6d5b282f82f6&#34;&gt;Go言語で幸せになれる10のテクニック - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.wacul.co.jp/blog/2014/08/22/go/&#34;&gt;これからGoを始める人のためのTips集 | The Wacul Blog&lt;/a&gt; : ちゃんと開発環境を整備したい場合には参考になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mrpepper/items/95c428f2b3c25be6b3e2&#34;&gt;Golang ファーストインプレッション - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kayac.com/news/2014/07/golang&#34;&gt;2014年夏、カヤックは、Go言語を積極的に推進していきます。 ｜ニュース｜面白法人カヤック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akiradeveloper.hatenadiary.com/entry/2014/07/22/205515&#34;&gt;(go report) Goが本当はすごかったので, 謝罪する - テストステ論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TakaakiFuruse/items/0fec78e5ecbcbe4337e8&#34;&gt;Golang のインスコでハマった件 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/a5d1a309733e765533ce&#34;&gt;Go Conference 2015 summer - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yamadagenki/items/5032cf853f6b136b533f&#34;&gt;最新versionのgolangをぶち込む方法について - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hostingadvice.com/how-to/install-golang-on-ubuntu/&#34;&gt;7 Easy Steps to Install Go (Golang) on Ubuntu - HostingAdvice.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/herokugo.html&#34;&gt;Heroku、Go言語の正式サポートを発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/google_app_enginego_1.html&#34;&gt;Google App Engineも「Go言語」の正式サポートを発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hiconyan/items/7656e9fb2d5bf5c794be&#34;&gt;Sensuでネットワーク監視やってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/open/i18n4go/&#34;&gt;i18n4go - developerWorks Open&lt;/a&gt; : IBM の &lt;a href=&#34;https://developer.ibm.com/open/&#34;&gt;developerWorks Open&lt;/a&gt; プロジェクトのひとつ。「&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1507/23/news058.html&#34;&gt;プログラムを国際化するための汎用ツール&lt;/a&gt;」らしい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/0e33a4959250d1a55045&#34;&gt;Go言語の初心者が見ると幸せになれる場所 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/an-introduction-to-llvm-in-go/&#34;&gt;Go言語で利用するLLVM入門 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160808013725.htm&#34;&gt;Big Sky :: 「みんなのGo言語」の執筆に参加させて頂きました。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/235/1235262/&#34;&gt;ASCII.jp：Goならわかるシステムプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35094856/&#34;&gt;グーグルの「Go」、2016年のプログラミング言語大賞に輝く - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kannokanno.hatenablog.com/entry/2017/02/28/011159&#34;&gt;Go言語でWebアプリを作りかけて辞めた話 - ぼっち勉強会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/survey2016-results&#34;&gt;Go 2016 Survey Results - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/etc/gocon2017autumn.htm&#34;&gt;Big Sky :: GoCon に初参加してきた。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/17/aws_lambdanetgoaws_reinvent_2017.html&#34;&gt;［速報］AWS Lambdaが機能強化。.NETとGo言語をサポート、サーバレスアプリケーションのリポジトリも登場。AWS re:Invent 2017 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/18/aws_lambdagoc.html&#34;&gt;サーバレスアーキテクチャのAWS Lambda、Go言語とC#の.NET Core 2.0サポートを開始 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;言語仕様および標準パッケージに関すること&lt;/h2&gt;
&lt;h3&gt;はじめての [Go 言語]&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/dev/feature/01/go_4beginners&#34;&gt;はじめてのGo―シンプルな言語仕様，型システム，並行処理：特集｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kazusa-qooq/items/40f9ea3e72406d845b10&#34;&gt;Golangの基本文法をおさえてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/makoto_kw/items/0638c0af1002647e3f7a&#34;&gt;忙しい人のためのA Tour of Go - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taji-taji/items/5a4f17bcf5b819954cc1&#34;&gt;import 書き方まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/awakia/items/c81c7816b9aea5422250&#34;&gt;GoのEnumイディオム - Qiita&lt;/a&gt; : あらかじめ Enum 用の type を作成し、その type に対する &lt;code&gt;String()&lt;/code&gt; メソッドを定義する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20151212021608.htm&#34;&gt;Big Sky :: golang では for ループの中で defer してはいけない。&lt;/a&gt; : ループ内で defer が必要になるということは refactoring のチャンス&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/modal_soul/items/e49480e5692597fda975&#34;&gt;Goのfor rangeで思った値が取れなかった話 - Qiita&lt;/a&gt; : ちょっとしたミス&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/02/23/165341&#34;&gt;Goで再帰使うと遅くなりますがそれが何だ - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yunabe.jp/docs/golang_pitfall.html&#34;&gt;Go言語(Golang) はまりどころと解決策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20140501172821.htm&#34;&gt;Big Sky :: Golang のオフィシャルが提供するインタフェースまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hkurokawa/items/a4d402d3182dff387674&#34;&gt;Go の定数の話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/7c70e3451ac783999b4f&#34;&gt;init関数のふしぎ #golang - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/astronoka/items/aa2f271d280863cedf5e&#34;&gt;packageに複数のinitがあるときの挙動 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170406003909.htm&#34;&gt;Big Sky :: golang では変数の宣言位置が大事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/20160126101358.htm&#34;&gt;Big Sky :: Names&lt;/a&gt; : Golang の開発者 Russ Cox 氏による記事の抄訳。「変数名の長さ」について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/weloan/items/ce6e6dce36a6f774d841&#34;&gt;Go言語のキーワードが少ない理由 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Nabetani/items/21ea926bb532cb0ac094&#34;&gt;Go の、型のない定数の精度 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/junjis0203/items/de55bb69945f08a9166c&#34;&gt;Goを読むその1：go installの流れ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/junjis0203/items/616c00086eb336153f4f&#34;&gt;Goを読むその2：compileコマンド（構文解析まで）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#34;https://budougumi0617.github.io/2019/10/06/imported-declared-not-used-error/&#34;&gt;imported and not usedエラー・declared and not usedエラーとの向き合いかた - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/akif999/items/a94dd8a6fe29dda2b560&#34;&gt;C から Go へコードを移植してハマった話 (そして言語仕様へ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/gos-declaration-syntax&#34;&gt;Go&amp;rsquo;s Declaration Syntax - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/11/10/switch-statement-in-go/&#34;&gt;タグなし switchは switch true {&amp;hellip;}と等しい - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://micnncim.com/post/2019/12/11/go-naming-conventions/&#34;&gt;Go の命名規則 | micnncim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-how-are-loops-translated-to-assembly-835b985309b3&#34;&gt;Go: How Are Loops Translated to Assembly? - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-inlining-strategy-limitation-6b6d7fc3b1be&#34;&gt;Go: Inlining Strategy &amp;amp; Limitation - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pace.dev/blog/2020/02/12/why-you-shouldnt-use-func-main-in-golang-by-mat-ryer&#34;&gt;Why you shouldn&amp;rsquo;t use func main in Go by Mat Ryer - PACE.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaoriya.net/blog/2020/06/16/&#34;&gt;proxy.golang.org の挙動調査メモ — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-built-in-functions-optimizations-70c5abb3a680&#34;&gt;Go: Built-in Functions Optimizations | by Vincent Blanchon | A Journey With Go | Aug, 2020 | Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;オブジェクトに関すること&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/16acb36e94cfe3b02aa1&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマること - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sona-tar/items/2b4b70694fd680f6297c&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマる点を整理してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2014/01/15/220136&#34;&gt;Go言語に継承は無いんですか【golang】 - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/22910a4bae6cb716a391&#34;&gt;Goにatexitやグローバルなデストラクタがない理由 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;メモリ管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-memory-management-and-allocation-a7396d430f44&#34;&gt;Go: Memory Management and Allocation - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-how-does-the-garbage-collector-mark-the-memory-72cfc12c6976&#34;&gt;Go: How Does the Garbage Collector Mark the Memory?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-memory-management-and-memory-sweep-cc71b484de05&#34;&gt;Go: Memory Management and Memory Sweep - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;型と &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atsaki/items/3554f5a0609c59a3e10d&#34;&gt;Go言語の型とreflect - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/bba69d84a1e0b67c4db8&#34;&gt;埋込みとインタフェース #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/stsn/items/73714caf8458b1d973f2&#34;&gt;Golang: nil Pointer Receiverの話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skatsuta.github.io/2015/12/29/value-receiver-pointer-receiver/&#34;&gt;Go 言語の値レシーバとポインタレシーバ | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20130919023425.htm&#34;&gt;Big Sky :: Go言語でインタフェースの変更がそれ程問題にならない理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chimatter/items/b0879401d6666589ab71&#34;&gt;Go で interface {} の中身がポインタならその参照先を取得する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nirasan/items/d1b80ecc7a7a7f0af2b7&#34;&gt;Go で型を抽象的に扱うには - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://niconegoto.hatenadiary.jp/entry/2017/12/03/222922&#34;&gt;GoのInterfaceとは何者なのか #golang #go - niconegoto Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tenntenn/items/eac962a49c56b2b15ee8&#34;&gt;インタフェースの実装パターン #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20190702104455.htm&#34;&gt;Big Sky :: Go で型がインタフェースを実装している事を保証するには&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lostfind/items/ad7bfc1a4860bb108b9c&#34;&gt;Goの基本的な型変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/07/07/prevent-runtime-error-by-pointer/&#34;&gt;Sliceを含んだ構造体が等値演算子（==）でpanicを引き起こすのを回避する #golang - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/weloan/items/de3b1bcabd329ec61709&#34;&gt;Go言語のInterfaceの考え方、Accept interfaces,return structs - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/02/01/go-named-type-and-type-alias/&#34;&gt;Named typeとType aliasを使い分ける - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;数値型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tanaka0325/items/9c61a022cd32be0c65a6&#34;&gt;Golang の 数値型 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/wannabe/items/87200a2cfc62cd7859bb&#34;&gt;Go言語での初期化における&amp;amp;とnewの挙動の違い - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swlh/using-go-interfaces-for-testable-code-d2e11b02dea&#34;&gt;Using Go Interfaces for Testable Code - The Startup - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;文字列型と操作・変換&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;Strings, bytes, runes and characters in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knightso.hateblo.jp/entry/2014/06/24/090719&#34;&gt;Go言語のstring, runeの正体とは？ - golang - The Round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/d8aaaf5442d84a7961e1&#34;&gt;Go小ネタ: 正規表現を全角半角問わずマッチするよう変換する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Sheile/items/ba51ac9091e09927b95c&#34;&gt;Go言語は空文字に対してstrings.splitを掛けると1要素の配列を返す - Qiita&lt;/a&gt; : コメントに別解あり&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hokaccha/items/3d3f45b5927b4584dbac&#34;&gt;golang - Goでマルチバイトが混在した文字列をtruncateする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matope.hatenablog.com/entry/2014/04/22/101127&#34;&gt;Golangでの文字列・数値変換 - 小野マトペの納豆ペペロンチーノ日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/540c2af34b1c381c37c1&#34;&gt;Go で euc-jp や sjis の csv ファイルを読み込むには変換用のリーダーを1つかませるだけでよかった - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/2bb83b29baeae2433a79&#34;&gt;Goでは文字列連結はコストの高い操作 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37&#34;&gt;Goの文字列結合のパフォーマンス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yoya/items/23ac2c490625c5d47ad9&#34;&gt;Go言語で SplitMultiSep (複数種の区切り文字列で分解) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakielastic/items/01a4fb691c572dd71a19&#34;&gt;Go で UTF-8 の文字列を扱う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yyoshiki41/items/79882e269ca6af4c2236&#34;&gt;Go言語 Gmailのsubjectの日本語文字化けに対応する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/normalization&#34;&gt;Text normalization in Go - The Go Blog&lt;/a&gt; : Unicode 正規化について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.serendip.ws/archives/6307&#34;&gt;Go言語で文字列の変換(全角・半角、ひらがな・カタカナ)をする : Serendip - Webデザイン・プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ktashiro/items/da5cbee3129acc74e5d7&#34;&gt;Goで全角英数字を半角にする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hnw/items/ec3da327c37e3ad8c875&#34;&gt;Goのstring型が思ったより容量食いだった話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mattn/items/176459728ff4f854b165&#34;&gt;golang で string を []byte にキャストしてもメモリコピーが走らない方法を考えてみる - Qiita&lt;/a&gt; : &lt;code&gt;unsafe&lt;/code&gt; パッケージで無理やり処理（笑）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/catatsuy/items/bccc2c76be501e98382a&#34;&gt;utf8としてvalidなバイト列を判定する方法をGoから見る - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/catatsuy/items/7a9773f9ea3db7069fc1&#34;&gt;Go言語で文字列がASCIIコード内であるか判定したい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@channaly/string-interpolation-in-golang-ecb3bcb2d600&#34;&gt;String interpolation in Golang – Ly Channa – Medium&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/KEINOS/items/baef1be88f15515026ec&#34;&gt;Golang の文字列内で変数を展開する方法（各種） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20190806152526.htm&#34;&gt;Big Sky :: Go で大文字小文字無視の文字列比較ベンチマーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/po3rin/items/07d51249629390a6201a&#34;&gt;Go の strings.Index の内部実装と Rabin-Karp アルゴリズム - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-string-conversion-optimization-767b019b75ef&#34;&gt;Go: String &amp;amp; Conversion Optimization - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;配列と &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/golang-slice-internals2&#34;&gt;Go のスライスでハマッたところ - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/egnr-in-6matroom/items/282aa2fd117aab9469bd&#34;&gt;golang - go言語のslice操作をまとめてみた（shiftしたりpushしたり） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hi-nakamura/items/5671eae147ffa68c4466&#34;&gt;sliceの重複チェックを高速化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/seihmd/items/d9bc98a4f4f606ecaef7&#34;&gt;Goのarrayとsliceを理解するときがきた - Qiita&lt;/a&gt; : この説明は分かりやすい。おススメ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/joniyjoniy/items/cbfb7d5c49aec5bf63c0&#34;&gt;uint64型を[]bytes型に変換する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pod.hatenablog.com/entry/2016/07/30/204357&#34;&gt;golangのequalityの評価について - podhmo&amp;rsquo;s diary&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/karupanerura/items/03d6766fd8568c15fc90&#34;&gt;Goで違うmapであることをテストする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/smith_30/items/eec0ba2e4ec63fe879a0&#34;&gt;文字列をn個後ろにずらす処理を本気でやる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cipepser.hatenablog.com/entry/go-map-slice&#34;&gt;Golangのmapとsliceはどちらが速いのか - 逆さまにした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/imdario/mergo&#34;&gt;GitHub - imdario/mergo: Mergo: merging Go structs and maps since 2013.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1oqfPIEJlw1u0GStHPEJFMtq2FPFUGDVSgMW2sLsXZF8/mobilepresent#slide=id.g7a74c7c8ae_0_298&#34;&gt;Go理解度チェック - Google スライド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/03/06/go-array-with-the-ellipsis/&#34;&gt;省略記号（&amp;hellip;）を使った配列宣言の仕方 - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-slice-and-memory-management-670498bb52be&#34;&gt;Go: Slice and Memory Management - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;入出力処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/a53b701c8827fe4bfec7&#34;&gt;Go ファイルや標準入力から一行ずつ読み込む - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/5c8cfce81933c5eb9fd0&#34;&gt;Goでファイルを読んで別のgoroutineに渡す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kroton/items/431e6dad9e5e4dbc44cf&#34;&gt;「連結されたgzipを1行ずつ見る」をgolangでやったらハマった - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34;&gt;compress/gzip&lt;/a&gt; と入出力処理の関係&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/curious-eyes/items/2d4b6c20ea47e3efc47b&#34;&gt;bufio.Scannerのend-of-line判断を変更してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kobegdg.blogspot.jp/2013/05/go.html&#34;&gt;KOBE GDG: Go言語　バイナリファイルを扱う&lt;/a&gt; : 任意のオブジェクトをバイト列に変換してファイルに格納&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/catatsuy/items/41d3c49248b517b5af96&#34;&gt;ファイル書き込みの度にファイルを開いたらどれくらい遅いのか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tanksuzuki/items/e712717675faf4efb07a&#34;&gt;Golangで標準入力がパイプで渡されたものか判定する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/b9c0f92851454dc6d461&#34;&gt;Go言語: ファイルの存在をちゃんとチェックする実装? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/e5e78e6864a60dc851a6&#34;&gt;Golangで、ファイル一覧取得（最新順出力） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/m0a/items/bba395b2fc9cd160e441&#34;&gt;大きなファイルのアップロードを省メモリで行いたい(io.Pipeを使う) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20171026101727.htm&#34;&gt;Big Sky :: net/http でレスポンスの内容を確認したいなら io.TeeReader を使おう&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/io/#TeeReader&#34;&gt;&lt;code&gt;io.TeeReader&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20151030131242.htm&#34;&gt;Big Sky :: golang で UNIX コマンドパイプラインを扱う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;並行処理と並列処理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://divan.github.io/posts/go_concurrency_visualize/&#34;&gt;Visualizing Concurrency in Go · divan&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20130414/1365960707&#34;&gt;Go の並行処理 - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/eca21ed935115e5da2e8&#34;&gt;Go: 計算なしのFizzBuzz - Qiita&lt;/a&gt; : channel の説明するのにいいかも&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuki2006/items/3f90e53ce74c6cff1608&#34;&gt;Goのchannelの送受信用の型について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hondata/items/64776c79063e93bea9ed&#34;&gt;Go言語のChannelは送信時にもブロックする - Qiita&lt;/a&gt; : 意外と見落とす channel 送信時のブロック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/da3ca2db58734a966cac&#34;&gt;select loop の小ネタ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/67d4cad08fe88dcb9a6d&#34;&gt;Goのforとgoroutineでやりがちなミスとたった一つの冴えたgo vetと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/c0ffdd28001ee0e9320d&#34;&gt;x/net/context の実装パターン - Qiita&lt;/a&gt; : &lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;golang.org/x/net/context&lt;/a&gt; を使って並行処理を細かく制御。 Domain-Driven あるいは Context-Driven な設計でも使えそう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/najeira/items/71a0bcd079c9066347b4&#34;&gt;Go言語でチャネルとselect - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/arc279/items/c44d4a18a851ff454c64&#34;&gt;golangでシグナルを拾ってgracefulにgoroutineを停めたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/arc279/items/bc55cdf436c544e91c05&#34;&gt;golang の channel のブロックがよくわからん - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/awakia/items/f8afa070c96d1c9a04c9&#34;&gt;GoのChannelを使いこなせるようになるための手引 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/54f0dbdec0d48082a5b1&#34;&gt;Goでスレッド（goroutine）セーフなプログラムを書くために必ず注意しなければいけない点 - Qiita&lt;/a&gt; : &lt;code&gt;sync.Mutex&lt;/code&gt; にも言及&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shunsukeaihara/items/f9ef7c8d430f63d79d40&#34;&gt;複数のgroutineが生えてるStructの安全な終了方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go_concurrency_visualize/&#34;&gt;Go言語の並行性を映像化する | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shanxia1218/items/7fb15f50ec645f114bc7&#34;&gt;Go言語でプロセス間同期処理 - Qiita&lt;/a&gt; : Windows の Mutex を使ってプロセス間通信を行う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hhatto/items/c8eb987b0516a45db754&#34;&gt;Goで並行処理のベンチマークをとる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Vermee81/items/88c9e28dec83d43e7883&#34;&gt;go言語初心者が図を書きながらgo routineやgo channelを理解する(Part 1) - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Vermee81/items/30ad42a7265375b1b7b1&#34;&gt;go言語初心者が図を書きながらgoroutineやgo channelを理解する(Part2) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/takuyaueda967/goroutine-channel-go&#34;&gt;Goroutineと channelから はじめるgo言語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/a289628d8b2d0af6152d&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 前編 - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/dc8db894ac270a79ef2b&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 後編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/castaneai/items/7815f3563b256ae9b18d&#34;&gt;goroutine を安全に止める方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/igtm/items/8b5343272bc35cd3bc0b&#34;&gt;Goの同時関数呼び出しを１回で済ませられるライブラリ 「SingleFlight」 が便利 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/32hiko/items/3be36dad2d651399ba1b&#34;&gt;【コンピュータ将棋】ゴルーチンでお手軽持ち時間管理＆並行探索 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/scheduler/&#34;&gt;Goのワークスティーリング型スケジューラ | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ryskiwt/items/b721f6aecc5b3d680462&#34;&gt;goの並行処理パターンについてのリンク集 - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.rdy.jp/2015/03/25/chan_tips/&#34;&gt;chanの使い方パターンメモ。 - GolangRdyJp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160706165757.htm&#34;&gt;Big Sky :: golang の channel を使ったテクニックあれこれ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/arihitohagiwara/items/4bb2ae6a1a43384b4f60&#34;&gt;go1.9のsyncmapを試してみた - Qiita&lt;/a&gt; : 並行処理に使える同期型の map&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nathanleclaire.com/blog/2014/08/24/handling-ctrl-c-interrupt-signal-in-golang-programs/&#34;&gt;Handling CTRL-C (interrupt signal) in Golang Programs | I care, I share, I&amp;rsquo;m Nathan LeClaire.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/YmgchiYt/items/abc6c0a8f57b47fdfcae&#34;&gt;Go context.Context interfaceに Cancelが含まれていない理由 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/i_yudai/items/3336a503079ac5749c35&#34;&gt;Goroutineハンターが過労死する前に - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2017/12/04/091403&#34;&gt;or-done-channelでコードの可読性を上げる - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/meta_closure/items/dd228e49aef8b67e872e&#34;&gt;go1.9から追加されたsync.Mapを使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tanksuzuki.com/entries/golang-syncmap/&#34;&gt;Go1.9から追加されたsync.Mapのパフォーマンス – Straightforward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20171221111857.htm&#34;&gt;Big Sky :: 簡単に goroutine の実行個数を制限する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180124171404.htm&#34;&gt;Big Sky :: goroutine でドハマリした。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180531104907.htm&#34;&gt;Big Sky :: Go 言語の非同期パターン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hirano00o/items/828393342efcd80aa2e6&#34;&gt;goroutineとチャネルの動きを図を使って理解する(和訳) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/smith-30/items/67c4f894bec45a6fd82a&#34;&gt;goleakでgoroutine leakのリスクを減らす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/po3rin/items/18a6621f39e9a6f6f7c4&#34;&gt;Go の -race option は内部で何をしているのか。何を検知しないのか。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/rungo/achieving-concurrency-in-go-3f84cbf870ca&#34;&gt;Achieving concurrency in Go - RunGo - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-goroutine-os-thread-and-cpu-management-2f5a5eaf518a&#34;&gt;Go: Goroutine, OS Thread and CPU Management - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-gomaxprocs-live-updates-407ad08624e1&#34;&gt;Go: GOMAXPROCS &amp;amp; Live Updates - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-goroutine-and-preemption-d6bc2aa2f4b7&#34;&gt;Go: Goroutine and Preemption - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-concurrency-scheduler-affinity-3b678f490488&#34;&gt;Go: Concurrency &amp;amp; Scheduler Affinity - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-how-does-go-recycle-goroutines-f047a79ab352&#34;&gt;Go: How Does Go Recycle Goroutines? - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-how-does-a-goroutine-start-and-exit-2b3303890452&#34;&gt;Go: How Does a Goroutine Start and Exit? - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go 言語で複数 CPU を使った並列処理を行うには明示的な設定が必要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/07/30/golang-parallel-by-cpu/&#34;&gt;Go言語でCPU数に応じて並列処理数を制限する | SOTA&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ymko/items/554e3630fefdc29393a8&#34;&gt;やはり俺のgolangがCPUを一つしか使わないのはまちがっている。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hama_du/items/fce4ee1e4b5c2c2d24df&#34;&gt;Goでお手軽に行列の積を爆速並列計算 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Logging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kosuda/items/988c505c2abc5321aba8&#34;&gt;Golang logging library - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.satotaichi.info/logging-frameworks-for-go/&#34;&gt;go言語におけるロギングについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Ets/items/49e8f781990a3b0b3821&#34;&gt;Golangで簡単にログを吐くことを考える - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/cihub/seelog&#34;&gt;seelog&lt;/a&gt; について解説している。私は XML には全くアレルギーがないので無問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sbjib/items/2cef51e572eef0795bc2&#34;&gt;Go言語でdebugログの実現方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/cedbf546ae2db8a63c3d&#34;&gt;loggingについて話そう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/74th/items/441ffcab80a6a28f7ee3&#34;&gt;golangでlogを標準出力とテキストファイルの2箇所の出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/303a0bfa9f0296eb544f&#34;&gt;gorpで実行されるSQLをログに出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/c542e1b59bc94dc741e3&#34;&gt;Goのバッチで統計を取得するAPIを用意しておくと便利 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kazuma1107/items/009454fca4f56af6e411&#34;&gt;golangのloggerを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/emonuh/items/28dbee9bf2fe51d28153&#34;&gt;golangの高速な構造化ログライブラリ「zap」の使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/emonuh/items/cb3a730979dba7d76920&#34;&gt;zapでログレベルでログの出力先を振り分ける方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shinsa82/items/c05a0e8544ecdb87c442&#34;&gt;go-logging における &amp;ldquo;module&amp;rdquo; の意味 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tetsu_koba/items/8401f99a39c9757fcff1&#34;&gt;Golangでlogのタイムスタンプをマイクロ秒単位にする方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mackee_w/items/3c0940733b6c0922554c&#34;&gt;ええっ！？　文字列で書くの！？　ログレベル付きロガーhashicorp/logutilsのご紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rs/zerolog&#34;&gt;rs/zerolog: Zero Allocation JSON Logger&lt;/a&gt; : JSON 形式でログを吐く。おススメ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/ltsvlog&#34;&gt;hnakamur/ltsvlog: a minimalist LTSV logging library in Go&lt;/a&gt; : LTSV 形式でログを吐く
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/2016/06/13/wrote_go_ltsvlog_library/&#34;&gt;GoでLTSV形式でログ出力するライブラリを書いた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/&#34;&gt;zerologを参考にしてltsvlogを改良してみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エラーハンドリング&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20140416212413.htm&#34;&gt;Big Sky :: golang で複数のエラーをハンドリングする方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dsas.blog.klab.org/archives/go-errors.html&#34;&gt;DSAS開発者の部屋:Go ではエラーを文字列比較する？という話について&lt;/a&gt; : エラーハンドリングには，定数との比較， conversion 構文による型の比較，エラー文字列の比較がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/ff98ded599d97cf6646e&#34;&gt;panicはともかくrecoverに使いどころはほとんどない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kyoh86/items/6cadd79de08cc597b65a&#34;&gt;go で AggregationException(.NET)的なことをする - Qiita&lt;/a&gt; : ループ等でエラーを集約してからまとめて処理する方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/5f2bcfe06eb83830ee55&#34;&gt;echoのAPIサーバ実装とエラーハンドリングの落とし穴 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2016/04/25/go-pkg-errors/&#34;&gt;Golangのエラー処理とpkg/errors | SOTA&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/deeeet/items/dacc71932393ab35d9f8&#34;&gt;Golangでエラー時にスタックトレースを表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/safu9/items/b8c94bb911cb0a39d5aa&#34;&gt;Ginのミドルウェアを使ったエラーハンドリング - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Struct タグについて&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/modal_soul/items/83b0930d90d44e006768&#34;&gt;Goのencoding/jsonでタグが反映されなくてハマったしょうもない話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiyosi.tumblr.com/post/100922038678/go-%E3%81%A7-struct-%E3%81%AE%E3%82%BF%E3%82%B0%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B&#34;&gt;Go で struct のタグ情報を取得する - hiyosi&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.restartr.com/2014/08/13/golang-json-marshal-unmarshal/&#34;&gt;Goのjson.Marshal/Unmarshalの仕様を整理してみる - I Will Survive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/niiyz/items/3f522c0e5a32de916ec6&#34;&gt;GoでJsonファイルを読み込んで構造体として扱う。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;BurntSushi/tomlを使ってハマったこと - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;BurntSushi/toml&lt;/a&gt; にバグがあるという話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/ba363e82332d4dbdf34a&#34;&gt;GoでJSONの一部分を利用者が定義した構造体に読み込める便利な手法を見つけた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaoriya.net/blog/2016/06/25/&#34;&gt;golang は ゆるふわに JSON を扱えまぁす! — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minagoro0522/items/dc524e38073ed8e3831b&#34;&gt;Go言語でJSONに泣かないためのコーディングパターン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/iktakahiro/items/2e240147ca3188948a17&#34;&gt;Go 言語 1つの構造体に複数の validation を適応する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nirasan/items/7b96f080cd286c324033&#34;&gt;Go で関数の引数用構造体のバリデーションと初期化をするメソッドをタグから生成するツールを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/oikyn/items/26808b03997797f1b342&#34;&gt;Goでsql.NullStringを含む構造体をjson.Marshalする方法 - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/catatsuy/items/745237b4e797c5d9d4fb&#34;&gt;GoでJSONのnullをいい感じに扱いたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/toast-uz/items/52f0c86716493ad3ca12&#34;&gt;Go言語でJSON内の整数は10進数6桁しか表現できない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/damele0n/items/92a9b845c991b1b29aea&#34;&gt;JSONSchemaからstructのようなコードを生成する&amp;quot;structr&amp;quot;というのを書いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dangerous-animal141.hatenablog.com/entry/2017/01/19/004650&#34;&gt;GolangでEnumをフィールドに持つstructをいい感じにjsonエンコード / デコードする - 一から勉強させてください(￣ω￣;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/dolpher/items/024af13c37926218c3f5&#34;&gt;golang xml.Marshal でxmlタグで出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://m-shige1979.hatenablog.com/entry/2016/02/19/080000&#34;&gt;golangでajaxを使用してrssのデータを取得する - m_shige1979のささやかな抵抗と欲望の日々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20161101151118.htm&#34;&gt;Big Sky :: GolangでAPI Clientを実装する、の続き&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://deeeet.com/writing/2016/11/01/go-api-client/&#34;&gt;GolangでAPI Clientを実装する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masa23/items/e781124a7e0305bc40c4&#34;&gt;Golang 日付のフォーマットでハマった話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ushio_s/items/3e270933641710bbd88e&#34;&gt;golangのtime.Timeの当日00:00:00を取得する方法とベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tetsu_koba/items/1599408f537cb513b250&#34;&gt;Golangで周期的に実行するときのパターン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-timers-life-cycle-403f3580093a&#34;&gt;Go: Timers’ Life Cycle. ℹ️ This article is based on Go 1.14. | by Vincent Blanchon | A Journey With Go | Jul, 2020 | Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; および &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/naoina/items/7966f73f3a807b3d25d6&#34;&gt;Go と reflect と generate - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kwi/items/185bb3fe0d60ca765ab0&#34;&gt;unsafe が unsafe なケース (1) - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kwi/items/d06f49c9cf7e5ace8692&#34;&gt;unsafe が unsafe なケース (2) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taksatou@github/items/d721a62158f554b8e399&#34;&gt;Goで関数型プログラミング - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;reflect&lt;/a&gt; パッケージを使って高階関数を表現できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; はバージョン 1.7 から標準パッケージに組み込まれた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2016/07/22/context/&#34;&gt;Go1.7のcontextパッケージ | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2017/02/23/go-context-value/&#34;&gt;Golangのcontext.Valueの使い方 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/69d3de8622eabe8da6a2&#34;&gt;contextの使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hogedigo/items/a26d816395b7545ce5f8&#34;&gt;context.Contextでリクエストスコープな値を持ち回す - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/context/&#34;&gt;context&lt;/a&gt; の使い方って（名前からいって）本来こっちだよね&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Kei-Kamikawa/items/620f9504daf2ec53f0b5&#34;&gt;goroutine にシグナルを送信する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/po3rin/items/3556c36182e0c635791c&#34;&gt;Go言語のContextパッケージのTODO( )って何？いつ使うの？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ayasuda.github.io/pages/what_is_context_at_go.html&#34;&gt;Go 言語 context パッケージ誕生の背景と使用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/02/21/use-context/&#34;&gt;context.TODO()を使って漸進的にcontext対応を始める - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;開発支援&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tooru/items/a55bcdac0500d9a93f39&#34;&gt;GoのSSA最適化制御オプション - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20181217000056.htm&#34;&gt;Big Sky :: gocode やめます(そして Language Server へ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/c/20191112100330.htm&#34;&gt;Big Sky :: Go 言語の Language Server「gopls」が completeUnimported に対応した。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デバッガ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tetsuok.hatenablog.com/entry/2012/07/01/062325&#34;&gt;golang でビルド時に最適化をオフにする - tetsuok の旅 blog&lt;/a&gt; : gdb でデバッグする際は最適化を off にするといいという話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/satorutakeuchi18/go-53685632&#34;&gt;Go言語のトラブルシューティング用機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/e3b35f09fb49e9217924&#34;&gt;Go で利用できるプロファイリングツール pprof の読み方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing/&#34;&gt;Goでfunctionが実行された順番を追いかける - sgykfjsm.github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohac/items/0aa8eb6ff8ee5f599dcd&#34;&gt;Go言語でプリント文デバッグするときのTips - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;GitHub - derekparker/delve: Delve is a debugger for the Go programming language.&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/minamijoyo/items/4da68467c1c5d94c8cd7&#34;&gt;Golangのデバッガdelveの使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gold-kou/items/201a19d9d0c760cc2104&#34;&gt;Go言語のバリデーションチェックライブラリ(ozzo-validation)を分かりやすくまとめてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/RunEagler/items/ad79fc860c3689797ccc&#34;&gt;go-playground/validator リクエストパラメータ向けValidationパターンまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gold-kou/items/81562f9142323b364a60&#34;&gt;Go言語のモック(gomock)を触ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;テスト・フレームワーク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/8717a5982547cfa54ebc&#34;&gt;Go の Test に対する考え方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://straitwalk.hatenablog.com/entry/2014/09/18/232810&#34;&gt;Goでテストを書く - 成らぬは人の為さぬなりけり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/0d589cca7e89b89c29a8&#34;&gt;golang 1.4で追加されたtestingの便利機能(テストの初期化とお片づけ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/11897f6284159919f65a&#34;&gt;gojiのレスポンス結果をテストする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/24fc34ec0c31f6474e6d&#34;&gt;Go Mockでインタフェースのモックを作ってテストする #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20131123/1385189088&#34;&gt;Go でベンチマーク - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Mulyu/items/ed585f2777496f29a725&#34;&gt;go言語でベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/peroli-hirayama/items/f1419db7264fa9f9fe8f&#34;&gt;プロダクト開発でのGoのテストとモック活用事例 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/12/21/go-fuzz/&#34;&gt;Go言語でファジング | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yosukesuzuki/items/c9e5c19df97d2ad5595a&#34;&gt;GAE/GoとGojiの組み合わせでテストを書く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/AkihiroSuda/items/0fd83df29182d4f5cdef&#34;&gt;&lt;code&gt;go test -count n -timeout t&lt;/code&gt; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160328114637.htm&#34;&gt;Big Sky :: Re: golangでIOへのテストを行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.eure.jp/tech/go1_7-subtests/&#34;&gt;Golang におけるサブテストの並行処理実装について | eureka tech blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ttyokoyama/items/5b99299ec112b580f03b&#34;&gt;GAE/Goのテストを実行するために必要なこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chisso/items/1dcc52f404b88d274f29&#34;&gt;Golangでテストしやすいコードをかく - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/zaru/items/0bee6c19b056dc72948d&#34;&gt;Go な WebAPI のテスト＆ドキュメントの模索 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ninxit.com/blog/2017/12/08/091108&#34;&gt;GAE/Goで書いたアプリのテストが何故か固まるのでgo testのコードをチラ見したメモ - utahta &amp;raquo; log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/theoden9014/items/ac8763381758148e8ce5&#34;&gt;Go言語のHTTPサーバのテスト事始め - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Blufe/items/09b63eb113b5ba0064a8&#34;&gt;golang で実際にメール送信せず smtp.SendMail を試すためのモック作り - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/take_cheeze/items/4c987cbde09807f8806b&#34;&gt;Goのテスト結果をCIでちょっと詳しく表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/eureka-engineering/-dabccd4571ea&#34;&gt;go vet の shadow を知る – Eureka Engineering – Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/myoshimi/items/62bc89b8065e08834b02&#34;&gt;Ginkgoでgolangのビヘイビア駆動(BDD)開発入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2018/08/19/go-testing2018/&#34;&gt;Goのtestを理解する in 2018 #go - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-fuzz-testing-in-go-deb36abc971f&#34;&gt;Go: Fuzz Testing in Go - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/30/go-testing2019/&#34;&gt;Goのtestを理解する in 2019 - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/05/29/go-testing-httptest/&#34;&gt;Goのtestを理解する - httptestサブパッケージ編 - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ドキュメント・フレームワーク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/megu_ma/items/2066aef2f8c7f0ce2cc3&#34;&gt;Go で godoc を使えるようにする〜godoc のインストール〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/26/go-code-review/&#34;&gt;Go言語のコードレビュー | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://papaeye.tumblr.com/post/92328649161/go&#34;&gt;Go コードのレビュー時によくされるコメント - build error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20131101/1383285018&#34;&gt;testingパッケージのExamplesについて - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swdyh.tumblr.com/post/55771477125/go-example&#34;&gt;GoのExampleテストが便利 : swdyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20140225/1393302743&#34;&gt;godoc.org への掲載方法を調べた - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/pei0804/items/3a0b481d1e47e5a72078&#34;&gt;[swaggo]GoのGoDocを書いたら、Swaggerを出せるやばいやつ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/knsh14/items/8b73b31822c109d4c497&#34;&gt;Go CodeReviewComments 日本語翻訳 #golang  - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shibukawa/items/8c70fdd1972fad76a5ce&#34;&gt;チョットできるGoプログラマーになるための詳解GoDoc - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Refactoring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minodisk/items/d96a0673223f36315ce7&#34;&gt;ジェネレートしたコードを gofmt / goimports する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20150113141338.htm&#34;&gt;Big Sky :: golang のリファクタリングには gofmt ではなく、gorename を使おう。&lt;/a&gt; : リファクタリングには gofmt よりも gorename が使えるという話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kyoh86/items/1f2022b63372b84f1a27&#34;&gt;golintと闘いたいけど心の折れてしまった勇者のための隠しダンジョン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/238f6f0ee27bdf1de2a0&#34;&gt;gometalinter で楽々 lint - Qiita&lt;/a&gt; : 各種 lint を統合的に扱える&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kyoh86/items/97911180d6254d5fc90c&#34;&gt;golangのループ変数の使い方をチェックするlinter作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Continuous Integration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dmnlk/items/3fb4e0abb98e39fee275&#34;&gt;Go + Travis CI + Coveralls でCI環境を作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sue445.hatenablog.com/entry/2013/06/01/170607&#34;&gt;GithubにあるリポジトリをTravis CI連携する手順 #junitbook - くりにっき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uchimanajet7.hatenablog.com/entry/2015/03/20/211352&#34;&gt;golangでTravis CIを使ってクロスコンパイルするときにハマったところ #golang #travisci - uchimanajet7のメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atotto/items/b796c31c1755dbec13db&#34;&gt;Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kaneshin/items/163626c09c1ad9818c6c&#34;&gt;Go+Webアプリケーション+CircleCIで静的解析・テスト・バイナリリリースを効率良く行なう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Sekky0905/items/7f9aa94261e17e4fd040&#34;&gt;Circle CI 2.0の基礎的な設定まとめてみた(GAE/Goのサンプル付き) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/goreleaser/goreleaser&#34;&gt;goreleaser/goreleaser: Deliver Go binaries as fast and easily as possible&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.shibayu36.org/entry/2017/10/04/193000&#34;&gt;goreleaserを使ってGoで書いたツールのバイナリをGithub Releasesで配布する - $shibayu36-&amp;gt;blog;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rnitame.hatenablog.com/entry/automate-golang-binary-distribution&#34;&gt;goreleaser と Travis CI で Golang のバイナリ配布を自動化する - /storage/tummy.log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ks888/items/65d3be0f05e1aecc817b&#34;&gt;Go言語利用のレポジトリをInspecodeで静的解析＋テストしてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/x-color/items/f60025c20a547a7355b5&#34;&gt;【GitHub Actions】Go言語の自動テストからリリースまでを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;クロス環境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://unknownplace.org/archives/golang-cross-compiling.html&#34;&gt;Goはクロスコンパイルが簡単 - unknownplace.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/02185f51162e92759ebe&#34;&gt;Go のクロスコンパイル環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2015/03/06/&#34;&gt;golang でのクロスコンパイルの留意事項 — KaoriYa&lt;/a&gt; : Windows 環境でクロス環境を構築する際の注意点。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yanolab/items/5a6dfb3c07c94f7c760d&#34;&gt;Golang + Raspberry Pi + LPS331AP で気圧・温度を測定してみた - Qiita&lt;/a&gt; : Raspberry Pi 用のクロス環境例。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gobot.io/&#34;&gt;Gobot - Golang framework for robotics, physical computing, and the Internet of Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/19/gox/&#34;&gt;複数プラットフォームにGoアプリケーションを配布する | SOTA&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/07/22/go1_5-cross-compile/&#34;&gt;Go1.5はクロスコンパイルがより簡単 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ttsuzo/items/64e29dd7caa635ac7863&#34;&gt;MacOS X でGo言語のクロスコンパイルを試したらハマった - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/mitchellh/gox&#34;&gt;gox&lt;/a&gt; を使う方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/e44961a8bcbb2578cfe7&#34;&gt;Goで64bitと32bitの実行ファイルを同一Windows機で作成するために講じたこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/f8c5a5f2209739daf44e&#34;&gt;Travis-CI で Go の Windows 用バイナリを Github release に登録する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shizu/items/c8a28e0d2299868dafa9&#34;&gt;gopherjs + electron テスト - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/gopherjs/gopherjs&#34;&gt;&lt;code&gt;gopherjs/gopherjs&lt;/code&gt;&lt;/a&gt; を使って Go のコードから javaScript コードを生成できるらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/rerofumi/items/d6a8ba08270acb61b31c&#34;&gt;Raspberry PI ２ 用の consul を作る (201512版 - Qiita&lt;/a&gt; : Raspberry PI 上でビルドするより Linux のクロス環境を使ったほうが速いらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/m0a/items/d933982293dcadd4998c&#34;&gt;RaspberryPi1(2とzeroも)で動かすgolang製アプリをクロスコンパイル(onMac) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mjhd-devlion/items/5e6f6f2f40ecb4ad4217&#34;&gt;GoでFPGAしてみる(Reconfigure.io) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/marumaru-n/items/13ef552adad2d3a4ed1e&#34;&gt;GoでCLIツールを作成してRaspberryPiで実行する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;C 言語との連携&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2014/c-in-golang-with-cgo.html&#34;&gt;cgoでGoのコードからCの関数を利用する - 1000ch.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://beatsync.net/main/log20141022.html&#34;&gt;cgoでGolangとC++ライブラリをリンクするとき、何が起きているのか - beatsync.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Satachito/items/5a0d7dd228d3272e0780&#34;&gt;GO 1.5 と C++ を SWIG でブリッジさせる方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yugui/items/e71d3d0b3d654a110188&#34;&gt;cgoを使ったCとGoのリンクの裏側 (1) - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yugui/items/e71d3d0b3d654a110188#_reference-b69de9de7311c6e17e7f&#34;&gt;cgoを使ったCとGoのリンクの裏側 (1) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/flowtumn/items/2df066ca776023bcc687&#34;&gt;Golang で Static Library を作る際、stringをparameterで受け取るならコピーしよう。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nothingcosmos/items/b5dc76aa953222bbdb5c&#34;&gt;マルチプラットフォーム対応したライブラリ Golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160405114638.htm&#34;&gt;Big Sky :: golang の Windows 版が buildmode=c-archive をサポートした。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/asm/items/6184cf5dcca637670e0e&#34;&gt;Golang で過去の遺物的(cp932)DLLを利用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160921010820.htm&#34;&gt;Big Sky :: Golang で Windows の DLL を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/48ba74a58f1e6530e305&#34;&gt;GoでShared Libraryをビルドしてみた(簡単ドキュメント指向DB) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shunsukuda/items/e9646e1a6acc863f3594&#34;&gt;cgoやってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/74th/items/0362bea2012ef253c539&#34;&gt;GoとCの間のポインタ渡し - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2017/12/04/013819&#34;&gt;Cgoを使ったパッケージと「Docker as Bug Report/Reproduce」というOSS運用について - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;組込み開発&lt;/h3&gt;
&lt;p&gt;主なものは「&lt;a href=&#34;https://text.baldanders.info/golang/embedded-engineering-with-golang/&#34;&gt;組込みで Go&lt;/a&gt;」に移動。
以下は携帯端末開発に関するブックマーク：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://unokun.hatenablog.jp/entry/2015/08/01/150628&#34;&gt;go 1.5でgomobile(android) - unokun’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.rdy.jp/2015/09/21/ios-gomobile/&#34;&gt;gomobileでiOSアプリをビルドする手順まとめ - GolangRdyJp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/bowz_standard/items/5a9c987f9242777fff30&#34;&gt;gomobileで日本語フォントを扱ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/WaToI/items/16938a611f7c026c477d&#34;&gt;GoでBenchmarking Raspberry Pi Zero W GPIO Speed - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shibta/items/97369fa4ca8c5361ddf3&#34;&gt;Raspberry Pi 3 Model B+のUbuntu 64bitに golang の導入を試みて失敗した話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ビルド時に情報を各種埋め込みたい&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/d643a0ccb6270e8e3734&#34;&gt;Go言語: ビルド時にバージョン情報を埋め込みたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/09/08/211626&#34;&gt;Golangビルド時に、サブパッケージ内の変数をいじる - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6b32370532c3eafe1f0e&#34;&gt;Goでビルドバージョン情報を参照できるようにする(Go1.5) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/c02d84cfd00f8f442500&#34;&gt;go-bindata でコンパイル時にリソースを埋め込んじゃおう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ymko/items/c2e3c8fe25bce425136d&#34;&gt;ソースを実行ファイルに埋め込む方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/konohazuku/items/131b251a5fa29213ac5e&#34;&gt;Golangで静的ファイルをバイナリに含めるライブラリを書いてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/wadahiro/items/4173788d54f028936723&#34;&gt;GolangのGin/bindataでシングルバイナリを試してみた(+React) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ueokande/items/fac0d1219dbbc8f44db7&#34;&gt;Goで任意のbuild tagsをつけてビルドファイルを切り替える - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Targityen/items/6125d4fa83fca28879a9&#34;&gt;Goでビルドしたバイナリに製品名やファイルバージョンを追加する方法&lt;/a&gt; : Windows 専用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Build Tools for Golang&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/constabulary/gb&#34;&gt;constabulary/gb&lt;/a&gt; を使ってプロジェクトベースの環境構築&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/ac0591fef95c2c6e936e&#34;&gt;golang - gbを知ったのでgojiを使ったWEBアプリケーションプロジェクトを管理してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://walledcity.com/supermighty/building-go-projects-with-gb&#34;&gt;Building Go projects with gb - Supermighty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/FiloSottile/gvt&#34;&gt;FiloSottile/gvt&lt;/a&gt; というのがあるらしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34;&gt;Masterminds/glide&lt;/a&gt; と Go 1.5 の Vendoring 機能を組み合わせてパッケージ管理できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パッケージ依存解決ツールというのがあるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170125023240.htm&#34;&gt;Big Sky :: golang オフィシャル謹製のパッケージ依存解決ツール「dep」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kwmt@github/items/0f77e083494ca94d782b&#34;&gt;dep(Go dependency tool)を自作ライブラリに使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;direnv で開発環境を切り替える&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://direnv.net/&#34;&gt;direnv - unclutter your .profile&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/06/18/010449&#34;&gt;direnvで解決するGOPATHの3つの問題点 - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aminamid/items/5a0e9461385c80d0c8a6&#34;&gt;さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Integrated Development Environment (IDE)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codezine.jp/article/detail/8374&#34;&gt;EclipseでGoプログラミング！ GoClipseのインストールとGojiフレームワークを使ったWeb APIの作成 （1/6）：CodeZine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ngsm3/items/67620fc4e39219235a23&#34;&gt;WindowsでGolang開発環境構築　IntelliJ IDEA - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/dev/serial/01/android_studio/0001&#34;&gt;第1回　Android Studio，そしてベースとなる「IntelliJ IDEA」とは何か？：Android Studio最速入門～効率的にコーディングするための使い方｜gihyo.jp … 技術評論社&lt;/a&gt; : IntelliJ IDEA についての解説&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/makoto2468/items/3ced77de947ea997e72f&#34;&gt;Go入門@環境構築編(IntelliJ IDEA 14.1.4) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/peka2/items/cdc9d508dcbf4a131271&#34;&gt;WindowsにIntelliJ IDEAでgoの開発環境を作りましたよ　ついでにgit連携もいたしましたよ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ryo-endo/items/e8cb4987b4af9ddc24d5&#34;&gt;Cloud9にGo言語でHelloWorldを実装・実行してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/go/&#34;&gt;GoLand: Capable and Ergonomic Go IDE by JetBrains&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ATOM で Go&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://notchained.hatenablog.com/entry/2014/09/20/104829&#34;&gt;AtomでGoを書く環境を整える（Windows） - Technically, technophobic.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/MakoTano/items/3d807a96c3933ac8aa13&#34;&gt;AtomでのGo言語開発環境セットアップ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Visual Studio Code で Go&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/evalphobia/items/f68396d573c7caf2065b&#34;&gt;VisualStudioCode - Visual Studio CodeでGo言語の設定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/llaughlin/16305f0b91356e93a1c4&#34;&gt;VSCode+Golang&lt;/a&gt; : task.json の設定&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/m0a/items/ebcf964effbc7d50a489&#34;&gt;VisualStudioCodeでGAE/Goの環境設定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Emacs で Go&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koki_cheese/items/2e2ead918a1f1ac5bf6e&#34;&gt;emacsでGoの環境構築をやる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Vim で Go&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masa23/items/db184871c78311566434&#34;&gt;Vim で golang を書く環境を整える - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/vim/20200106103137.htm&#34;&gt;Big Sky :: Vim で Go 言語を書くために行った引越し作業 2020年度版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/07/18/use_fillstruct_of_goplus_on_vim/&#34;&gt;gopls 0.4.3で構造体を初期化（&amp;ldquo;fillstruct&amp;rdquo;）しようとしても、&amp;ldquo;No code actions found&amp;quot;とだけ表示される - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/07/24/make_vimrc_with_lsp/&#34;&gt;vim-goを使わず、LSP（gopls）を使ってVimのGo開発環境を構築する - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CLI; Command Line Interface&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yuuki.hatenablog.com/entry/go-cli-unix&#34;&gt;Go言語によるCLIツール開発とUNIX哲学について - ゆううきブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tellme.tokyo/post/2015/06/23/unix_cli_tool_go/&#34;&gt;開発者から見た UNIX 哲学とコマンドラインツールと Go言語 - TELLME.TOKYO&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/b4b4r07/items/df660d82e2de715acda5&#34;&gt;Qiita 版&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uokada/items/f0e069a751679dcf616d&#34;&gt;コマンドライン引数 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/04/17/232753&#34;&gt;Go言語のflagパッケージを使う - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/flaflasun/items/df5ebb057697da062a08&#34;&gt;Go を使ってコマンドラインツール wordc を作ってみた - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;codegangsta/cli&lt;/a&gt; についての言及あり&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/isaoshimizu/items/71dd2ca2a08ddb607e31&#34;&gt;GoでCLIツール作るのに便利そうなパッケージを集めてみました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/07/15/232207&#34;&gt;C言語とGo言語で標準出力が端末を参照しているかどうかを判定する - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/04/17/panicwrap/&#34;&gt;Go言語のCLIツールのpanicをラップしてクラッシュレポートをつくる | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kumatch/items/258d7984c0270f6dd73a&#34;&gt;flag 並にシンプルでより強力な CLI パーサ kingpin の紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuroyoro/items/9358cd25b5f7fe9dd37f&#34;&gt;Goで外部コマンドをパイプして実行する - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20151030131242.htm&#34;&gt;Big Sky :: golang で UNIX コマンドパイプラインを扱う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tanksuzuki/items/9205ff70c57c4c03b5e5&#34;&gt;Golangで外部コマンドを実行する方法まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;spf13/cobra: A Commander for modern Go CLI interactions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lab.flama.co.jp/archives/1536/&#34;&gt;GolangでCLIの場合にcobraを使うことにした件 | FLAMA技術Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minamijoyo/items/cfd22e9e6d3581c5d81f&#34;&gt;GolangでwebサービスのAPIを叩くCLIツールを作ろう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Peranikov/items/4376633bb72492051336&#34;&gt;GoでMySQLにCA証明書を使ってアクセスする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/unchemist/items/3cdeafcde2bd98612428&#34;&gt;Golangのコマンドライブラリcobraを使って少しうまく実装する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GUI; Graphical User Interface&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sago35/items/cc9ed3dc38d0b2f19bf9&#34;&gt;Go用のGoogle製のGUIツールキットgxuiのインストール(Windows版) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/20bc61175ce4a33b7365&#34;&gt;goでwindowsでwindow - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hachi8833/items/463264f531474a856064&#34;&gt;今後イケそうなデスクトップGUIフレームワーク - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/miketheprogrammer/go-thrust/&#34;&gt;go-thrust&lt;/a&gt; について言及&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/58f6a421462b93dec471&#34;&gt;GolangのOpenGL事情(WebGLも含むよ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tetuyoko/items/746599e36ca4985d9e1a&#34;&gt;Goで3Dモデル変換してプレビュー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/cd8d122dfeb41e1608d1&#34;&gt;Go最後の秘宝「GUI」を探しに行く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/intelf___/items/2207c02c306a495d99e6&#34;&gt;golangのGUIパッケージgo-gtkを試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/zenwerk/items/97ebd5e470bdafdb6e42&#34;&gt;gocui の基本的な使い方 - Qiita&lt;/a&gt; : CUI (Console User Interface)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nozo_moto/items/40e0fd89bd7fc3eb8b5d&#34;&gt;GolangでクロスプラットフォームGUIアプリを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gocv.io/&#34;&gt;GoCV - Golang Computer Vision Using OpenCV 4&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/besood/items/0045c62b3bc09332c421&#34;&gt;golangでOpenCVを使おう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Web Microframework for Golang&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masatsugumatsus/items/e28254ff52963705ce7f&#34;&gt;Mithril＋golang Gin を試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20141021134209.htm&#34;&gt;Big Sky :: golang で最近お気に入りの WAF「Goji」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/a038f1b99e0caee97d3e&#34;&gt;gojiのMiddlewareの使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sys_cat/items/1b8581de1344cc5db6bb&#34;&gt;Gojiを使ってWebビーコン作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/845fcfc58cfd0b30020a&#34;&gt;Google App EngineでGoのウェブアプリケーションをまず動かしてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/45ab414fc11959fc27c7&#34;&gt;Go言語(Go-Json-Rest)でAPIサーバーを立てるときのCORS設定 (Basic認証機能付きも) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/e6597c66c3494d545686&#34;&gt;Goでwebサーバー作るときに考えたこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tchssk/items/cb208f9ccd0a1819bbfa&#34;&gt;Golang の net/url で # を含む文字列を Parse() する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kkdd/items/bd653e3d02546d1aa340&#34;&gt;Golang で OpenStreetMap ファイル（osm.pbf）の読み込み（osmpbf 利用） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masahikoofjoyto/items/f60188f4252e455541d4&#34;&gt;GoのWEBアプリケーション運用について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hachi8833/items/315642ceecb378cabcb4&#34;&gt;go-qmlのWebViewでローカルWebサイトを表示するときの注意 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/2e5fabb707355253b187&#34;&gt;http.Clientのタイムアウトの時間を変更 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kenjiszk/items/7ae842415ec392822612&#34;&gt;golangでhttpを監視するscriptを書いて結果をslackにpostする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/65c4a473a1fdbbf931f0&#34;&gt;Go言語(Go-Json-Rest)のCORSでのハマり。Safariだけでハマった話。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yodatomato/items/8013f728bbf4358e9425&#34;&gt;GoでGoogleCalendarAPIv3を叩く（APIキー） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/curious-eyes/items/3dae99e5e0feb6b9f642&#34;&gt;Golang で iso-2022-jp メールのデコード - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mpyw/items/cb0f824d618d8fed384e&#34;&gt;Go言語の練習用にTwitterのOAuth認証をフルスクラッチしてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/fumizp/items/63243cf418d27898f208&#34;&gt;Goとtesseractで簡易OCRサーバを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikuwow/items/c8f494bbd16adf6db142&#34;&gt;Go言語で簡単にHTTPリクエストを送ってJSONをパースするサンプル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hiratara/items/0f0b6103a0dc9280cea9&#34;&gt;UnixListener.Closeでソケットファイルが消えて困っている - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ToruFukui/items/eb0d3593b20a5e2f15c6&#34;&gt;Goフレームワークのパフォーマンス比較 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uokada/items/c30e26cd8bdee7dfe7eb&#34;&gt;一定時間だけ立ち上がるサーバーを書いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20151120113437.htm&#34;&gt;Big Sky :: golang のミドルウェアとして組み込むだけでパフォーマンス改善が見込める「HTTP Coala」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/6c0de3e31642dfd17695&#34;&gt;Go付属のツールでオレオレ証明書を生成する - Qiita&lt;/a&gt; : なるほど（笑）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/6006e1d8cf94bc40f8e8&#34;&gt;Go http.RoundTripper 実装ガイド - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/skitaoka/items/a2b55cb08060aa8d6a52&#34;&gt;Go で静的 HTTP サーバを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ponchi/items/7e474041484841ee1ce6&#34;&gt;[golang]RevelでCSRFの対策 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ryurock/items/f55db5944397619735bf&#34;&gt;net/httpでポート443のHTTPSサーバーを立ち上げるまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jumbOS5/items/45f86db15a5a6c8a0622&#34;&gt;概観からGoのWebFrameworkを選ぶ（2016/02） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jumbOS5/items/d817bc95279877e72b24&#34;&gt;Revel(Golang)でViewを理解する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160224103638.htm&#34;&gt;Big Sky :: golang で画像アップロードが簡単に出来る go-imageupload を使ってみた。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/okataitai/items/db6999ea1ab39ec0bd3e&#34;&gt;Go言語のスクレイピング系ライブラリまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/keika299/items/62e806ae42828bb3567a&#34;&gt;Go の echo ってWebサーバーでサクッと REST しちゃう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/795a008d1b12ee657d9a&#34;&gt;nginx+circus+gojiによるgolang webアプリケーションの動作環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160329094503.htm&#34;&gt;Big Sky :: golang で HTTP を使った処理を4倍速くする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/5ea3395b35e68fd0d3b3&#34;&gt;GolangのフレームワークEchoの話とHelloWorldサンプルを読み解くだけ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/5e276ddc0412cefef7e3&#34;&gt;Golang+Echo+dbrでMySQLのCRUDをする／JSONでDBの値を返却する話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/lanevok/items/dbf591a3916070fcba0d&#34;&gt;Gin(Golang)におけるHTMLテンプレート記述方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kent_ocean/items/45e153d2c5467501a20b&#34;&gt;GoLang で html/template を使っていて遭遇したエラーとその解決 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/naoki_koreeda/items/8c818a3e9f6138ddbb87&#34;&gt;GAE/Go (echoフレームワーク)で Line Message API 使って Bot を作る。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/701279c43b33ce923613&#34;&gt;Go製のフレームワークechoを使ってJSONを返すWebサーバーを作り、GoogleAppEngineで動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/bcb4730c6efeb838c4a7&#34;&gt;go+ginでローカルで作ったWebアプリをGoogleAppEngineに載せる時に注意することまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nozaq/items/9cd9bf7ee6118779bda9&#34;&gt;社内のバックエンド開発にgRPCを導入してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/85b06c0856c33e716c75&#34;&gt;Echoはver.3で結局のところ何が変わったのか？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/GushiSnow/items/97c1f64c003b27c6b98a&#34;&gt;Go言語のWEBフレームワークRevelを使用してセキュアなAPIを作成 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dtan4/items/8c417b629b6b2033a541&#34;&gt;Go でツール書くときの Makefile 晒す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/6638ee8b6978aef50d65&#34;&gt;goa でデザイン・ファーストをシュッとする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Kei-Kamikawa/items/a6cb72251b95c8f5baa1&#34;&gt;echo 初心者でも簡単!! echo で扱うアセットファイル群を簡単にバイナリにまとめて使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jyagaimo_qiita_/items/93d195ca65982b75e205&#34;&gt;Go ライブラリによる CGIプログラム内ルーチング - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takatoshiono.hatenablog.com/entry/2017/02/06/013323&#34;&gt;Go 言語で Apache Bench (ab) を実装してみた - takatoshiono&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/h2push&#34;&gt;HTTP/2 Server Push - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yutasuzuki/items/fa7e78a8f4d8cb3e83b3&#34;&gt;Go + echoでfetch APIを使ってPOSTする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170112181052.htm&#34;&gt;Big Sky :: golang の http.Client を速くする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170119180147.htm&#34;&gt;Big Sky :: Re: Go でシングルバイナリな Web アプリを開発しているときに webpack &amp;ndash;watch をうまいところやる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zenwerk/items/729ab53ad6925d80dafa&#34;&gt;gopher-lua でサーバーの設定を動的に変更する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/momotaro98/items/90d12c10a655f4026d82&#34;&gt;【Go言語】gothでWebアプリを外部サービス認証ログインできるようにする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/miya-masa/items/1fefa42458857013b519&#34;&gt;Goでマイクロサービスやってみる〜gokit〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yyoshiki41/items/a0354d9ad70c1b8225b6&#34;&gt;GoでHTTPクライアントを書く時のURLの組み立て方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tjun/items/3eea798905b597ec83c0&#34;&gt;goでWebサーバを書くためのシンプルなライブラリchiの紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cipepser.hatenablog.com/entry/2017/07/29/083729&#34;&gt;Golangでパーセントエンコーディング - 逆さまにした&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cipepser.hatenablog.com/entry/2017/08/05/095807&#34;&gt;Golangでパーセントエンコーディングをデコードする - 逆さまにした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shibukawa/items/c0730092371c0e243f62&#34;&gt;encodeURIComponentが世界基準だと誤解してた話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/muroon/items/1c9ad59653c00d8d5e3d&#34;&gt;gRPCとREST APIでスループットを比較する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180330093346.htm&#34;&gt;Big Sky :: Golang と Vue.js で簡単なアプリケーションを作ってみた。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/witchy/items/85768165eb1038e045ec&#34;&gt;【echo】ファイルのアップロード方法で詰まった話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yossy6954/items/a0afd2e1082d2f0cafa3&#34;&gt;いつの間にか go の http/net が renegotiation に対応していた話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180418222903.htm&#34;&gt;Big Sky :: golang の html/template でレイアウトを扱う方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gaku3601/items/afb4bcd6e854e93e67e1&#34;&gt;ぼくのかんがえたさいきょうのまいくろさーびすあーきてくちゃ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/huji0327/items/b8fee669323777a6d41a&#34;&gt;【Go】ファイルアップロード - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/k-kurikuri/items/f46356b70fe3e7e8da7d&#34;&gt;Go製WebToolKit Buffalo[概要編] - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/daisukeoda/items/b02aefa4f464e63729b5&#34;&gt;Go+Echoの環境にNewRelicを導入する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/fk2000/golangechonow-3kic&#34;&gt;golangのechoで静的なサイトを建てるならNowがお手軽という話 - DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/micropig3402/items/ff2a3fd7673e849c5982&#34;&gt;golangでWebアプリケーションのルーティングを実装する！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/minoritea/items/afaf10de3c5b6ebafa84&#34;&gt;Goのhttpルーター「Chi」の紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/keiichi-hikita/items/0cebf00e85f47858c948&#34;&gt;go で gorma を使ってAPI開発してみる。まずはgoa編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nisitanisubaru/items/abe11ff4248997d1fee2&#34;&gt;grpc-gatewayでgRPCのREST対応を試しました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nijuya_o/items/392cd3e4fa5641b3dec1&#34;&gt;Go言語のRESTサーバーを Clean Architecture で作ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/myoshimi/items/8337aab1b17d89938be0&#34;&gt;SSOサービスKeycloakとgolangのHTTPサーバを連携する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/inexp_eng4432/items/50d05262eb6ccbcfda1f&#34;&gt;Go 言語のフレームワーク比較 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/daijuk/items/d5c52b780e90387f2390&#34;&gt;Go言語のnet/httpクライアントでリダイレクトをやめる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/goemp/items/91dcc8b50d7a61ce98bc&#34;&gt;ブラウザレンダリングの仕組み - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/06/21/record_response_body/&#34;&gt;HTTPレスポンスボディの内容をログに残したい - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;他サービスとの連携&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/f66a38b28ec58bc5c4da&#34;&gt;マイナンバーのチェックデジットをGoで計算する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/arc279/items/5f277aa5cce3de5247e5&#34;&gt;golangでImageMagickを触りたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/otiai10/items/83b186596897705ce392&#34;&gt;Go言語でRedshiftとつなぐ（というかただのPostgreSQL） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yyoshiki41/items/1159e1a70ffaa8fd84ed&#34;&gt;Gmail API for Goで、下書き生成ツールを作りました。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170111165324.htm&#34;&gt;Big Sky :: Windows からも ssh でリモートコマンド実行したい、それ golang で出来るよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ieee0824/items/13435fc6de5f22cdb2f4&#34;&gt;コマンドラインからググれてもいいと思ったので作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Iwark/items/726dfb2d15a883e389b6&#34;&gt;GoでSpreadsheetを操作するパッケージを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nayuneko/items/ca2651e3a613c8e3256a&#34;&gt;Go言語で東京メトロAPIを叩く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dbsparkle/items/72fc1ad50ba6000f2630&#34;&gt;Twilio使って、入力した電話番号をチェックする方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mau4x/items/424fe7964e70a3a99965&#34;&gt;Windows+GoでNFC/Felicaにアクセスしてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/4d3316490a571e5d79ed&#34;&gt;UnityのネイティブプラグインをGoで書く #golang #unity - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yyoshiki41/items/f81442d7dc2d0ddcf15b&#34;&gt;radikoの録音ツールをGoで書いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mochizukikotaro/items/b09116e0ad2d30e37098&#34;&gt;Golang の DB 操作 ORM をいろいろしらべてみたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/100%E4%B8%87%E5%9B%9E%E3%81%AEwebsocket%E6%8E%A5%E7%B6%9A%E3%81%A8go/&#34;&gt;100万回のWebSocket接続とGo | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@mlowicki/http-s-proxy-in-golang-in-less-than-100-lines-of-code-6a51c2f2c38c&#34;&gt;HTTP(S) Proxy in Golang in less than 100 lines of code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;DB 連携&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/najeira/items/8310fecf4b70c918f855&#34;&gt;Go言語でBigQueryのクエリを実行してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chimatter/items/1a5fb2f03477f2ada520&#34;&gt;Go の DB アクセス用のパッケージを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/d79600c34191adb09c79&#34;&gt;MySQLでのトランザクション処理をGolang+dbrで実現してゆく話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tukiyo3/items/89c773fd7ffce2adfadd&#34;&gt;(メモ)mattn/go-sqlite3を使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gougyan/items/5295e4a30697a73868b5&#34;&gt;GOのORM sqlboiler 使ってみた　 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hanenao/items/103774f76abdbc853abf&#34;&gt;GoでMySQLにアクセスしてみる（gorp編） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.web-apps.tech/go-sqlrow/&#34;&gt;go-sqlrow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/goccy/items/a54af6db3b8623e90c38&#34;&gt;Go言語のために、すべてのORMに対応できるデータベースシャーディングライブラリを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/iz-j/items/09097c494292e0f03636&#34;&gt;GoのGORMでiterate - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/ml/20190512003509.htm&#34;&gt;Big Sky :: SQLite3 でロジスティック回帰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/daijuk/items/2b43781c5a38923f864b&#34;&gt;golang-migrate/migrateパッケージを使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/istsh/items/72b0f2c0ef345e57aaf4&#34;&gt;GoのアプリケーションにDatadogAPMを導入する。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ryer/gofalsedbraiburarinituitediao-betemita&#34;&gt;GoのDBライブラリについて調べてみた - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;DB 連携 with GraphQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/graphql-go/graphql&#34;&gt;graphql-go/graphql: An implementation of GraphQL for Go / Golang&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mitubaEX328/items/77ccc4f6ac0ad2e76996&#34;&gt;golangでGraphQLの素振りを行った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GAE/Go&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hogedigo/items/342217982f267ccd234d&#34;&gt;GAE/GoでCMSつくった - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/silverfox/items/81769425e51f24e676d2%5D&#34;&gt;Go+GAE+Cloud Datastoreで簡単なREST APIを構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/walkers/items/e407386d7ef184ec830a&#34;&gt;Google App Engine SDK for Goを使ってGAE上でアプリを動かすまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mako0715/items/259659e5e2935d2afc10&#34;&gt;GAE/Goで形態素解析してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ryutah/items/d864310c62f0385d876d&#34;&gt;GAE/Go+glide的な構成での環境構築 ~ローカルサーバー立ち上げまで~ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eaglesakura/items/b7e92281735569c528a6&#34;&gt;Go言語の依存管理ツールを作って、開発環境構築を覚えた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/wezardnet/items/daf520b82e2199d16f4f&#34;&gt;GAE/Go で Google Cloud Spanner を操作する（前編） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hogedigo/items/f0f409ee944c4b2107c3&#34;&gt;GAE/Goでもgoroutine使おうぜ！というハナシ - Qiita&lt;/a&gt; : GAE/Go の API には非同期版がないので積極的に goroutine 使おうよ，という話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kenichi_odo/items/074f1b9541dd0487f1d8&#34;&gt;CircleCI 2.0でGlide管理のGoをGAEにデプロイする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ynozue/items/d12c1da13bbdb9213ba4&#34;&gt;GAE(Google App Engine) で Golang を開発するための環境を構築する #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ynozue/items/22967c3c8e12129d7527&#34;&gt;GAE(Google App Engine) で Golang 初めての REST API #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gotokatsuya/items/7f3bd1f71aa825264851&#34;&gt;Go×GAE×Dockerで作るGoogleOAuth認証アプリ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/keitaro_1020/items/667bb1396015d32df09e&#34;&gt;GAE/Goでメールを受信する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/IJN-Penguin/items/782a23662d68aab1316c&#34;&gt;GAE Go 開発環境の構築からテストアプリのデプロイまで【MacOS】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shinkiro/items/6d79b12d06de34119b46&#34;&gt;Go 言語で Google Cloud Storage の既存のバケットにオブジェクトを保存する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sky0621/items/8a42ee24cb417940228c&#34;&gt;GAE/Go1.11試行（その1：「クイックスタート」） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/KMim/items/f6e14cdaed8ad1907930&#34;&gt;Go言語でGoogle Drive APIとGmail APIを使う方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;AWS Lambda&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/curepine/items/bd67276c9cae543bc0b8&#34;&gt;AWS LambdaのGoサポートについて今知れるいくつかのこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Excel との連携&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mikeshimura/items/b60823e923fb6d0840c0&#34;&gt;Go で簡単に Excelを作成するライブラリ。 色、罫線、網掛けを事前定義済 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kaorumori/items/fa37130065d0450d6342&#34;&gt;Go言語でエクセルファイル (.xlsx) を読み込む - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/tealeg/xlsx&#34;&gt;&lt;code&gt;github.com/tealeg/xlsx&lt;/code&gt;&lt;/a&gt; パッケージを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tebakane/items/2f2ed2558357c274c478&#34;&gt;Go言語でExcel操作ライブラリを書いてみた - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/loadoff/excl&#34;&gt;&lt;code&gt;github.com/loadoff/excl&lt;/code&gt;&lt;/a&gt; パッケージの説明&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pineplanter.moo.jp/non-it-salaryman/2017/06/18/go-read-excel/&#34;&gt;Go言語でExcelファイルを処理するのが超簡単だった | 非IT企業に勤める中年サラリーマンのIT日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Go で数学&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/c47b9e3ea8d028e95588&#34;&gt;大学入試問題をGoで解いてみる - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/math/big/&#34;&gt;math/big&lt;/a&gt; パッケージを使って大きな数を計算する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ciruzzo/items/144bc1874947441f9fb8&#34;&gt;golangで数独を解いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/06fff7b224d77517c08f&#34;&gt;golang で AB x CD / E - F * G * H = 2016 になる全パターン洗い出し - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yumura_s/items/68760d6b902aee9c78f0&#34;&gt;Go で 0 から始まる連続する n 個の整数を重複無く k 個選んだ時の組み合わせの列挙 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nirasan/items/69643d0ddf8a7345cf7c&#34;&gt;ピーマンとハトと数学を Go 言語で試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/k-yamada@github/items/0a7baa61bd668c3cb3dc&#34;&gt;golangでニュートン法を使って平方根の計算をする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/cia_rana/items/dca5b008fcee67adda50&#34;&gt;重み付き乱択アルゴリズムを整数だけで完結させる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/jun68ykt/items/2b7d788d21a4cc5c9a56&#34;&gt;宣教師と人食い人種の問題をGolangで再帰するクロージャ使って書いてみた。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/G0nta/items/7455fd0656693dd17ef6&#34;&gt;golangによるグラフ理論ライブラリの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180825013735.htm&#34;&gt;Big Sky :: golang で tensorflow のススメ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20181108123756.htm&#34;&gt;Big Sky :: Golang だけでやる機械学習と画像分類&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20190307190947.htm&#34;&gt;Big Sky :: TensorFlow Lite の Go binding を書いた。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mattn/items/b01f9bb5c2fa3678734a&#34;&gt;Go による機械学習 推論フレームワークの最新動向 2019 - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/ml/20190516010115.htm&#34;&gt;Big Sky :: Go 言語で TensorFlow の学習&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/po3rin/items/82c9c0195f9e3e38e2f1&#34;&gt;Go + gonum を使った行列計算まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ken_sumi1019/items/cdf5ee01a4e2c725c185&#34;&gt;Goで作った数値計算の関数をまとめとく - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;ソートアルゴリズム&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sugyan/items/fd7138a756c1a409f5fd&#34;&gt;sliceのシャッフル - Qiita&lt;/a&gt; : &lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher–Yates shuffle&lt;/a&gt; というアルゴリズムらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nyamadandan/items/2c82011801b148c98e52&#34;&gt;Go言語でバイトニックソート実装してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohkawa/items/269507985b3ae10cbff9&#34;&gt;Goでバケットソートアルゴリズム(ビット列を使用) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tchssk/items/b61f1f06d22a6232d4c8&#34;&gt;interface{} をソートする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20161004092237.htm&#34;&gt;Big Sky :: golang の sort インタフェース難しい問題が解決した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;暗号技術関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/11/10/go-crypto/&#34;&gt;Go言語と暗号技術（AESからTLS） | SOTA&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/go-crypto&#34;&gt;tcnksm/go-crypto&lt;/a&gt; : サンプルコード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下は &lt;a href=&#34;https://github.com/skatsuta&#34;&gt;Soshi Katsuta&lt;/a&gt; さんによるテキスト。
丁寧な内容でとても参考になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://skatsuta.github.io/2016/01/02/hyuki-crypt-book-go-1/&#34;&gt;Go 言語で学ぶ『暗号技術入門』Part 1 -DES, Triple DES- | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://skatsuta.github.io/2016/01/19/hyuki-crypt-book-go-2/&#34;&gt;Go 言語で学ぶ『暗号技術入門』Part 2 -AES- | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://skatsuta.github.io/2016/03/06/hyuki-crypt-book-go-3/&#34;&gt;Go 言語で学ぶ『暗号技術入門』Part 3 -CBC Mode- | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Garbage Collection の話&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/golangs-real-time-gc-in-theory-and-practice/&#34;&gt;Go言語のリアルタイムGC　理論と実践 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/gos-march-to-low-latency-gc/&#34;&gt;Go言語の低レイテンシGC実現のための取り組み | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/dimolto/items/3dbc5c20ce3c18d976c1&#34;&gt;引数で既存メソッドを渡した場合とlambdaで渡した場合でGCAllocに差がでた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deeeet.com/writing/2016/05/08/gogc-2016/&#34;&gt;GolangのGCを追う | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他 四方山話&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/235/1235262/&#34;&gt;GASCII.jp：Goならわかるシステムプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/YmgchiYt/items/420eaf2bcf7bee4ae152&#34;&gt;O&amp;rsquo;Reilly Concurrency in Goの読書メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/golang-clean-archithecture/&#34;&gt;Goでクリーンアーキテクチャを試す | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tetsu_koba/items/bb3f2801373f64fbc661&#34;&gt;Golangの最新版をソースからビルドする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/knsh14/items/8b73b31822c109d4c497&#34;&gt;#golang CodeReviewComments 日本語翻訳  - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Sekky0905/items/1ff4979d80b163e0aeb6&#34;&gt;Goにおける等値と等価の考察(struct1==struct2と&amp;amp;struct1==&amp;amp;struct2とreflect.DeepEqual(struct1,struct2)とreflect.DeepEqual(&amp;amp;struct1,&amp;amp;struct2)) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tetsu_koba/items/d9447eadf9c419264603&#34;&gt;golangのruntimeからアクセスする/etcのファイル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/18/gowebassemblygoarchwasmgoosjs.html&#34;&gt;Go言語がWebAssemblyをサポートへ。GOARCHは「wasm」、GOOSは「js」に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Nabetani/items/e850ad92ba79640bfcd7&#34;&gt;Go にとても長い式を食べさせると死ぬ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/matchlang&#34;&gt;Language and Locale Matching in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yunabe.jp/docs/golang_pitfall.html&#34;&gt;Go言語(Golang) はまりどころと解決策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/31362332/creating-call-graph-in-golang#31369718&#34;&gt;go - Creating call graph in golang - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/qushot/items/306a9c9c0321304def8e&#34;&gt;Goのインクリメントとデクリメントのベンチマーク比較 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/osamu329/items/3ac05c3b71f495fc1e61&#34;&gt;Goの shortcircuit 最適化パスを読んだので解説する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/rubyu/items/d78470be2ddd9e86ebb5&#34;&gt;goumlでgoプロジェクトのUML図を出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kubo39/items/4319fa243fd18acc0981&#34;&gt;Goとrdtscの謎を追う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yuukive/items/27593cd6f3e7f264516b&#34;&gt;Go言語のアプリケーション設定・環境変数をStructにまとめる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/better-programming/how-a-go-program-compiles-down-to-machine-code-e4532dc8b8ca&#34;&gt;How a Go Program Compiles down to Machine Code - Better Programming - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/05/jrits-why-go-how-is-go/&#34;&gt;[発表資料] 第138回RITS技術交流会『なぜ私たちはGoを書くのか。今あらためて考えるGo言語の良さと実際』 - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/matchlang&#34;&gt;Language and Locale Matching in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/12/04/introduce_go-scp/&#34;&gt;OWASP/Go-SCPを読んでセキュアプログラミングとGoを学ぶ - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/03/13/shortcut-keys-on-the-go-playground/&#34;&gt;The Go Playground（play.golang.org）のショートカットキー - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/2020/02/23/the-zen-of-go&#34;&gt;The Zen of Go | Dave Cheney&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/03/go-zen-of-go.html&#34;&gt;ブログ: Goの禅 (The Zen of Go)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.mercari.com/entry/2020/03/17/120137&#34;&gt;「プログラミング言語Go完全入門」の期間限定公開のお知らせ - Mercari Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech-blog.abeja.asia/entry/2020/04/09/115152&#34;&gt;Go vs Rust : 特徴量DBに適するのはどっち！？ - ABEJA Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;他言語との比較もしくは移行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/soranoba/items/68d57b4635a2917f3c73&#34;&gt;ErlangとGolangを比較してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/the-way-of-the-gopher/&#34;&gt;Gopherの道を歩む – Node.jsからGo言語への移行 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/2017/03/20/why-go&#34;&gt;Why Go? | Dave Cheney&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/b627f20457873a504638&#34;&gt;[翻訳] Why Go? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/grj_achm/items/679b3f3af2cf377f0f02&#34;&gt;RubyからGoの関数をつかう → はやい - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/B73W56H84/items/20a67b74bb646d140f7d&#34;&gt;Perl6からGoの関数をつかう → はやい? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yujiorama_at_github/items/3f7cab906969764cc805&#34;&gt;GroovyからGoの関数を使う→はやい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/20151106194958.htm&#34;&gt;Big Sky :: RubyからGoの関数をつかわなくても再帰をやめる → はやい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/EastResident/items/f41fd0285fe270e7d3d5&#34;&gt;Ruby + mecabが遅いのでGoを経由する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;[Go 言語]に Generics がない理由&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170309201506.htm&#34;&gt;Big Sky :: golang と Generics と私&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuroyoro/items/6bf33f3cd4bb35469e0b&#34;&gt;golang と Generics と吾 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t2y/items/139c6a38173d7750ddfc&#34;&gt;Java の Generics にもの思い - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;なぜ [Go 言語]はイケてないか？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/why-go-is-a-poorly-designed-language/&#34;&gt;なぜGo言語は設計が悪いのか – Go愛好者の見地から | 未分類 | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/why-go-is-not-good/&#34;&gt;Go言語がダメな理由 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Why Everyone Hates Go · npf.io](Why Everyone Hates Go · npf.io)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hirokidaichi/items/adccebb41f77eaa6132f&#34;&gt;[翻訳]なんでGoってみんなに嫌われてるの？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;小手先のテクニックもしくはプログラミングパターン&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160804131744.htm&#34;&gt;Big Sky :: golang の遅いコードをたった1行で高速化するテクニック&lt;/a&gt; : 実際にはちょっと速くなるくらいらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/circus/items/450254c59d194cbf22d7&#34;&gt;Go言語で作った実行ファイルを小さくしよう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/jp/news/2016/03/go-patterns&#34;&gt;Goのプログラミングパターン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go-best-practices-2016/&#34;&gt;6年間におけるGoのベストプラクティス | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/weloan/items/56f1c7792088b5ede136&#34;&gt;Go言語のFunctional Option Pattern - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20171024130616.htm&#34;&gt;Big Sky :: Golang で物理ファイルの操作に path/filepath でなく path を使うと爆発します。&lt;/a&gt; : URL の操作には &lt;code&gt;http.ServeFile&lt;/code&gt; を使うとかあるらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pospome.hatenablog.com/entry/2017/08/12/195032&#34;&gt;golang の 引数、戻り値、レシーバをポインタにすべきか、値にすべきかの判断基準について迷っている - pospomeのプログラミング日記&lt;/a&gt; : ケースバイケースだよねぇ。もしくはプロジェクトごとにポリシーを決めるか&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/po3rin/items/0d8fef14bfe222f334b7&#34;&gt;Goを始めて1年間で最高にお世話になったGo関連ブックマークを晒します。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/practical-go&#34;&gt;Practical Go | Dave Cheney&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他，分類困難で未整理（もしくは一時保管場所）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/bfc1eb6407cbdfebbd18&#34;&gt;goでLチカの練習　その２ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/rubytomato@github/items/638299aabb7922cbef59&#34;&gt;Revel templatesを使ったサンプルアプリケーション - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.daisukeyamashita.com/post/1209.html&#34;&gt;Go言語でパッケージを作成して世界に公開する方法 at ミネルヴァの梟は黄昏とともに飛び始める（山下 大介 公式ブログ）&lt;/a&gt; : パッケージの作り方なんだけど情報が古い。「昔はこうだった」くらいの感じで&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/9f05679f25cfc9c3ecfc&#34;&gt;goでwindowsでキースキャン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/51b0f45496e5143e2e63&#34;&gt;Google ChromeのテキストエリアをEmacsで編集する&amp;rsquo;Edit with Emacs&amp;rsquo;から任意のエディタを起動するデーモンをGo 1.4 for Windowsで書いてみたわけだが、エディタがブラウザの後ろに出てしまってダメかもしれない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/9db22c9684cc0586b737&#34;&gt;golangでprivateなエイリアスのポインタを元の型に戻す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/8f56f663d6da4dee9f64&#34;&gt;Go の expvar パッケージを使ってアプリケーションのメトリクスを公開する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/8845musign/items/5c4b32f82c2df08acd93&#34;&gt;cmd.Envを設定してexecしたらコケた - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; パッケージを使う際には環境変数に注意&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/1l0/sumeragi&#34;&gt;1l0/sumeragi&lt;/a&gt; : 皇紀や元号を出力するパッケージ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/enokidoK/items/a3aff4c05e494b004ef8&#34;&gt;goのmgoでfindするときの処理 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/miyabishi/items/09a55b10953c9dbe7ee3&#34;&gt;Go + QML + QChart.js で素敵なチャートを表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mikeshimura/items/d149bbd869683e820579&#34;&gt;Goで帳票をPDFに作成するライブラリ。 請求書などの複雑なフォーマットにも対応 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/morikuni/items/ad8d900f56ddeb223101&#34;&gt;GoでANSIエスケープコードを扱うライブラリを作った(色付け・カーソル移動等) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/letusfly85/items/5f479e5b072a05dbcf53&#34;&gt;Golangでreduce関数を提供しているライブラリugoを眺めてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/b4b4r07/items/3a790fe7e925b4ba14f3&#34;&gt;Go 言語で rm 用ごみ箱ツール gomi を作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/lufia/items/8f3cc32f26168702e2f4&#34;&gt;パッケージのimport pathを好みのURLにする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yamamoto-febc/items/0ce30e2dba32c60bbf66&#34;&gt;Terraform for さくらのクラウド - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160910001214.htm&#34;&gt;Big Sky :: golang で slim テンプレートエンジン書いてる。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/deeeet/items/1e2164f89ccfc29d7b11&#34;&gt;独自のfmt.Formatterを実装する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takatoshiono.hatenablog.com/entry/2016/09/22/024605&#34;&gt;Go 言語で wc を実装してみた - takatoshiono&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/a312d2c5381e36cf4cd3&#34;&gt;簡単な式の評価機を作ってみる #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mackee_w/items/71d7685852bb5bdda465&#34;&gt;Goのコード生成のためのテンプレートエンジン seyfert を書いてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/bamchoh/items/49e230db51e7237b1ce9&#34;&gt;nagomeのplugin ngm-polly 作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yagitatsu/items/264aa3e167bf4650e705&#34;&gt;Go言語でコレクション処理のメソッドを作ってみた　#golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/13340f2845316532b55a&#34;&gt;ASTを取得する方法を調べる #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/868704380455c5090d4b&#34;&gt;goパッケージで簡単に静的解析して世界を広げよう #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nirasan/items/bb0a239641028312b4db&#34;&gt;こわくない！今日からはじめるGo言語コード生成 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170227010706.htm&#34;&gt;Big Sky :: レーベンシュタイン距離を使ったあいまい grep コマンド「lsdgrep」作ってみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/cia_rana/items/18c78e0233e117b22af6&#34;&gt;Re:ゼロから始めないAPNGエンコーダ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sao_rio/items/8801b78ba60acbb0ae41&#34;&gt;Go言語を使用して簡単なLineBotを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/pyjama/items/a61844b11086ab6cbd76&#34;&gt;Go言語でコマンドを実行し、一定時間内に終了しなかったらプロセスを強制終了する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/toas555/items/763bddbd1992502e62b5&#34;&gt;golangでQRコードを生成するパッケージを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sky_jokerxx/items/091a70d7b51fc33fe71e&#34;&gt;goでwindowsのWMI経由からディスクIOPSを取得してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20171108182710.htm&#34;&gt;Big Sky :: Golang で優先度を変えてプロセスを起動する。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tetsuyanh/items/7d807110f602ab150d46&#34;&gt;GoでORMライブラリまわりを綺麗に書く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hiroykam/items/31862832a562388d876b&#34;&gt;ECHO+GORMでJWTとGraphQLの環境を構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tenntenn/items/0cbc6f1f00dc579fcd8c&#34;&gt;Goの抽象構文木（AST）を手入力してHello, Worldを作る #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/pinzolo/items/5bb88f0fc7343d3a59c6&#34;&gt;go-bindata が awesome-go から削除された - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tiechel/items/b81305694424b3bf6b3c&#34;&gt;go-twitterでUserStreamingを取得する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/craftone/items/aa05a104440529b27cdb&#34;&gt;GolangでのUDP処理メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/vvakame/items/9310bcb5a4e87888d505&#34;&gt;ぼくが かんがえた さいきょうの でーたすとあ らっぱー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/YmgchiYt/items/cc97142614f5b61a69e9&#34;&gt;Goからlocalのtest用DB(MySQL)をdockerで起動する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kurkuru/items/65614fd3524fefccf576&#34;&gt;GoでHTMLをPDFに出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/YmgchiYt/items/fe5936ccbc440cbb6214&#34;&gt;golang 3ways to iterate - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/pinzolo/items/970b0b980396a1ba0fa0&#34;&gt;flagdayという日本の祝日を Go で扱うライブラリを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yellow/items/829863d7344e7808d8ac&#34;&gt;machineryについて - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/c-bata/items/54eee079cfe3cda02eee&#34;&gt;go-prompt v0.2.0の新機能紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gericass/items/fa794bfac5c6bd3e0aab&#34;&gt;GoアプリケーションをSupervisorでデーモン化😘 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ekzemplaro/items/b306a3c08c5fd83b5208&#34;&gt;Facebook の Graph API で自分の投稿を取得する (go) - Qiita&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ekzemplaro/items/c269d3e43463b82a81b9&#34;&gt;Facebook の Graph API で 団体の情報を得る (go) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kurkuru/items/65614fd3524fefccf576&#34;&gt;GoでHTMLをPDFに出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ruyoumo/items/699634f6c62447669f2b&#34;&gt;GoでLet&amp;rsquo;s Encryptの証明書を自動で取得するサーバーを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@skdomino/taring-untaring-files-in-go-6b07cf56bc07&#34;&gt;How to Tar and Un-tar files in Golang – Steve Domino – Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.wnotes.net/blog/article/golang-realtime-log-tailing-tool&#34;&gt;[Golang]リアルタイムログ転送+閲覧ツール作った | ブログ :: Web notes.log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180315230112.htm&#34;&gt;Big Sky :: Go言語で ping を打って「にゃーん」を表示させる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tetsu_koba/items/aa2d245a61db98299a89&#34;&gt;Linuxのユーザーランドをinitから全てまるごとgolangで書く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hideshi/items/3280ae6616319a78c8e3&#34;&gt;Go言語でAWKを作ってみました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/secondarykey/items/2a5bbd35a98153e1b72f&#34;&gt;パズルゲームをGoで作ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shotasakamoto/items/97c17f37c152bb83c654&#34;&gt;Goでゼロからニューラルネットワークを組んでみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/aimof/items/2220bc1f1f0754f62870&#34;&gt;ブラックジャックをGoで実装してみた。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lufia/items/e5344596975676865c3b&#34;&gt;golang.org/x/oauth2で色々な認可フローや方言に対応する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/iwaaya/items/59a51706644a6b86b5d6&#34;&gt;io.Pipe関数の２つのdeadlockポイント - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/soy-curd/items/f5757f6a654c51e75deb&#34;&gt;golangで計算量オーダーを実感する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/uobikiemukot/items/4a34de27a694d9e33649&#34;&gt;CLI で esa.io の記事を作成するツール esautils を作りました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kaminashi.jp/&#34;&gt;KAMINASHI（カミナシ） | 誰でも使える食品工場管理アプリ&lt;/a&gt; : バックエンドは Go 言語で書かれているらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hiro9/items/ff9333fcf66c8a3f1c3c&#34;&gt;Go GoCSVでShift_JISでCRLFなCSVを作る&lt;/a&gt; : &lt;code&gt;github.com/gocarina/gocsv&lt;/code&gt; というパッケージが便利っぽい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yutsuki/items/7de97e09289a915f86b9&#34;&gt;Golangでグラフを描く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/youtanagai/items/73557a8be4f643d044b8&#34;&gt;grpcの練習がてらgoのディレクトリ転送パッケージを作成した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/jp_ibis/items/506911b0deaa5ff94687&#34;&gt;Goでods(Open Office Spreadsheet)ファイルを読み込む - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shibukawa/items/f0e4df597e62372fe7d5&#34;&gt;golangでi18n - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tobita0000/items/f0c2e69a00773cdac9c0&#34;&gt;Golangで日本語PDFを出力する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/k4saNova/items/61f41a2e56a786cd75b8&#34;&gt;Go初心者が書くarXiv APIを使って論文リストから論文を取ってくるアプリ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/k-motoyan/items/89755685349cbfa956b4&#34;&gt;Golangでメソッド呼び出しによる部分適用 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/xuri/items/73488c5f5f8aa02f240c&#34;&gt;Excelize version 2.0.0 Released - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kazu22002/items/3e7e167fb238cc4779d7&#34;&gt;golangでtemplateの読み込みパスを複数定義する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/maniju/items/0dd9c4c1ae901ce60605&#34;&gt;Dropbox SDK for Goを使ったファイルのアップロードやダウンロード - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ikeponsu/items/bb2fc22a2a7969cb622c&#34;&gt;Go言語で日本語フォーマットをpdf出力 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tao_s/items/be145dc85169689a2a4f&#34;&gt;Go 1.12でgopdf使ってテンプレートのPDFに色々埋め込み - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20120322190727.htm&#34;&gt;Big Sky :: 如何にしてけしからん画像を超高速でダウンロードするか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/es-h-sugihara/items/a376380dd2ef9b353d99&#34;&gt;goceleryを使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shohei-ojs/items/dcc24bf1928fff575838&#34;&gt;golangにおけるJSONPの解析 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2019/10/18/launch-layer-for-the-layered-achitectures/&#34;&gt;レイヤードアーキテクチャの階層構造を守らないimportを警告するlinterを作った - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/a-journey-with-go/go-elasticsearch-clients-study-case-dbaee1e02c7&#34;&gt;Go: ElasticSearch Clients Study Case - A Journey With Go - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/navel3/items/2f464163cc0a07458bb1&#34;&gt;Go の標準パッケージにないシステムコールを使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://budougumi0617.github.io/2020/05/08/go-cmp-diif-with-ignore-fields/&#34;&gt;一部のフィールドを無視して構造体を比較したいときはgo-cmpを使う - My External Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>次期 Go 言語で導入される総称型について予習する（その3）</title>
		<category term="golang" label="golang" scheme="https://text.baldanders.info/golang/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/generics-in-go-2-update-update/" />
		<id>tag:text.Baldanders.info,2020-09-26:/golang/generics-in-go-2-update-update/</id>
		<published>2020-09-26T14:21:12+00:00</published>
		<updated>2020-09-27T11:45:21+00:00</updated>
		<summary>Go が総称型を得ることで更に独自に発展することを期待している。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/generics-in-go-2/&#34;&gt;次期 Go 言語で導入される（かもしれない）総称型について予習する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/generics-in-go-2-update/&#34;&gt;次期 Go 言語で導入される総称型について予習する（その2）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/generics-in-go-2-update-update/&#34;&gt;次期 Go 言語で導入される総称型について予習する（その3）&lt;/a&gt; ←イマココ&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/generics-in-go-2-update/&#34; title=&#34;次期 Go 言語で導入される総称型について予習する（その2）&#34;&gt;前回&lt;/a&gt;紹介した “&lt;a href=&#34;https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-type-parameters.md&#34;&gt;Type Parameters - Draft Design&lt;/a&gt;” が 2020-09-21 にアップデートされたらしい。
どうやらこれが最終案になりそうだ。&lt;/p&gt;
&lt;p&gt;早ければ2021年8月にリリース予定の &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.17 で&lt;a href=&#34;https://blog.golang.org/generics-next-step&#34; title=&#34;The Next Step for Generics - The Go Blog&#34;&gt;お披露目&lt;/a&gt;というスケジュールは変わらない模様。
また総称型（generics）に対応した Playground も最終案の仕様で稼働中である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go2goplay.golang.org/&#34;&gt;&lt;code&gt;https://go2goplay.golang.org/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;前回からの変更点&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/generics-in-go-2-update/&#34; title=&#34;次期 Go 言語で導入される総称型について予習する（その2）&#34;&gt;前回&lt;/a&gt;は，たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ordered&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ordered&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のような記述だったが，今回は型パラメータ（type parameter）の記述がちょっと変わったようで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ordered&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;float32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ordered&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と角括弧 &lt;code&gt;[...]&lt;/code&gt; で囲まれている。
どうしても山括弧 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; はイヤみたい（笑）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; キーワードは不要になった。&lt;/p&gt;
&lt;h2&gt;組込み済みの制約&lt;/h2&gt;
&lt;p&gt;組込み済みの interface 型として &lt;code&gt;error&lt;/code&gt; が定義されているように，組込み済みの制約（constraint）として &lt;code&gt;any&lt;/code&gt; と &lt;code&gt;comparable&lt;/code&gt; が追加されるようだ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;any&lt;/code&gt; はあらゆる型を包摂する。
むしろ「制約がない」ことを示す制約というべきか。
強いて書くなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;といったところだろうか。
たとえば&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Print prints the elements of any slice.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Print has a type parameter T and has a single (non-type)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// parameter s which is a slice of that type parameter.
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/&amp;#43;/refs/heads/master/design/go2draft-type-parameters.md&#34;&gt;Type Parameters - Draft Design&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;みたいな感じに使える。
どうやら型パラメータの指定で制約を省略することはできないようなので，制約がない場合は &lt;code&gt;any&lt;/code&gt; を付けることになりそうだ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;comparable&lt;/code&gt; は演算子 &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; が使える型を示す制約だ。
これを使って&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;comparable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;coffee&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;tea&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;coffee&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;//false
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;                   &lt;span class=&#34;c1&#34;&gt;//true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://blog.yongweilun.me/go-generics-draft-design-final&#34;&gt;Go Generics draft design Final&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;のように書ける。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;any&lt;/code&gt; も &lt;code&gt;comparable&lt;/code&gt; も制約としてのみ使用可能で，通常の inteface 型としては使えないようだ。&lt;/p&gt;
&lt;p&gt;なお， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の総称型について詳しくは以下の「本」がオススメである。
色々な事例が載っているのでかなり参考になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/mattn/books/4c7de85ec42cb44cf285&#34;&gt;Go 言語にやってくる Generics は我々に何をもたらすのか | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この本を買うために &lt;a href=&#34;https://zenn.dev/&#34;&gt;Zenn&lt;/a&gt; のアカウントを取ってもいいかも（クレカが通ればだけど）。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; は Nearly Java になるか&lt;/h2&gt;
&lt;p&gt;上述の「本」に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;その慎重な Go が今、Generics を取り入れ、Better C から Nearly Java へと変わろうとしています。Java がそうであった様に、Go は Generics の導入により多くのアルゴリズムが汎用的に実装され便利になっていくでしょう&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/mattn/books/4c7de85ec42cb44cf285&#34;&gt;Go 言語にやってくる Generics は我々に何をもたらすのか&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とある。
標準の &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; パッケージのように型ごとに似たようなコードをゴリゴリ書くのではなく，汎化されたアルゴリズムに集約されていく期待感はあるが，それが Nearly Java になるかについては懐疑的である。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴のひとつは「汎化」の実装として Java や Rust のような公称型の部分型付け（nominal subtyping）ではなく構造型の部分型付け（structural subtyping）を採用していることにある。
当然ながらこれは総称型を使ったアルゴリズムの実装にも大きな影響を与える筈である。&lt;/p&gt;
&lt;p&gt;私は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; が総称型を得ることで更に独自に発展することを期待している。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.yongweilun.me/go-generics-draft-design-final?guid=none&amp;amp;deviceId=0389b3ed-c102-4f48-ba65-49e5f54124a4&#34;&gt;Go Generics draft design Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/04/subtyping/&#34;&gt;それは Duck Typing ぢゃない（らしい）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>整いました！</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/assemble-a-living-pc/" />
		<id>tag:text.Baldanders.info,2020-09-24:/remark/2020/09/assemble-a-living-pc/</id>
		<published>2020-09-24T12:55:47+00:00</published>
		<updated>2020-09-25T21:14:53+00:00</updated>
		<summary>これで新しいリビング PC の完成である。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;久しぶりに Go 言語関連のイベントに参加しようと&lt;a href=&#34;https://gpl-reading.connpass.com/event/188380/&#34; title=&#34;第5回『プログラミング言語Go』オンライン読書会 - connpass&#34;&gt;エントリした&lt;/a&gt;のだが，このご時世でオンラインイベントなのですよ。&lt;/p&gt;
&lt;p&gt;そんで Zoom 環境を用意しなければならないんだけど，ぶっちゃけ自分のパソコンは使いたくない。
なので&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/install-ubuntu-to-second-hand-pc/&#34; title=&#34;中古 PC に Ubuntu 環境を導入する&#34;&gt;昨年買った中古ノート&lt;/a&gt;に入れようと久〜しぶりに電源を入れたら OS が起動しない！？ どうやら内蔵ストレージが完全にお亡くなりになっているらしい &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参加をキャンセルすることも考えたが，地元でもオンラインもくもく会やるみたいな話も聞こえてくるし（まだアナウンスがないし立ち消えかな？），諦めて新しいマシンを買うことにした。
失業してるのにお金が出ていくばっかりだよ&amp;hellip;&lt;/p&gt;
&lt;h2&gt;あまり選択肢はないらしい&lt;/h2&gt;
&lt;p&gt;取り敢えず今回は予算を「3万円」に決めて，最初に中古ノート PC を物色してみたのだが，今回の反省を踏まえて考えると，1年位で故障しそうなのばかり（笑） 多分この価格帯のマシンは「部品取り」用なのだろう。
ホンマ，&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/install-ubuntu-to-second-hand-pc/&#34; title=&#34;中古 PC に Ubuntu 環境を導入する&#34;&gt;昨年のアレ&lt;/a&gt;は「安物買いの銭失い」だったんだなぁ&amp;hellip;&lt;/p&gt;
&lt;p&gt;となるとタブレットか Chromebook か，それともラズパイで自作するか。&lt;/p&gt;
&lt;p&gt;自作は興味あるけど絶対にドツボに嵌まるから今回はパス。
Chromebook も同じく興味はあるが「できること」の範囲がよく分からないので，これもパス。
となるとタブレットか。&lt;/p&gt;
&lt;p&gt;タブレットの選択肢は3つ。
Android 機か iPad か Windows 機か。
と思ったのだが，予算的に Android 機以外は無理，と判明した（笑）&lt;/p&gt;
&lt;p&gt;そこで Android タブレットに絞って探してみたのだが&amp;hellip; ぶっちゃけ HUAWEI 社以外の製品は「なし」だわ。
でも HUAWEI 社はなー。
米国大統領が再選したらいよいよヤバいんじゃね？ なんでこんなに選択肢がないのだろう。
しゃーない。
HUAWEI 社にするか。
いいたかねえけどめんどうみよう（あわれ仁吉よ，どこへ行く）&lt;/p&gt;
&lt;p&gt;さんざん悩んだ末に &lt;a href=&#34;https://www.amazon.co.jp/dp/B07KJ5S7FS?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;HUAWEI MediaPad M5 lite 10&lt;/a&gt; に決めた。
タブレットが決まれば，あとは五月雨式に決まっていく。&lt;/p&gt;
&lt;h2&gt;整いました！&lt;/h2&gt;
&lt;p&gt;というわけで&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/50376693028/&#34;&gt;&lt;img src=&#34;./50376693028_e67cc61968_e.jpg&#34; srcset=&#34;./50376693028_e67cc61968_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;整いました！ | Spiegel | Flickr&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/50376693028/&#34;&gt;整いました！ | Spiegel | Flickr&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Bluetooth 接続のキーボードとマウスと&lt;a href=&#34;https://text.baldanders.info/remark/2019/10/15th-anniversary-of-baldandersinfo/&#34; title=&#34;Baldanders.info 開設15周年記念に骨伝導スピーカーを買うたった！&#34;&gt;骨伝導ヘッドセット&lt;/a&gt;は既存のものがちゃんと繋がった。
スタンドは今回新たに購入（今まで使ってたスマホスタンドは100円のやっすいやつだった）。
スマホと兼用だが，10インチのタブレットでも問題なく支えられるようだ。
よしよし。
これで新しいリビング PC の完成である。&lt;/p&gt;
&lt;p&gt;タブレットを起動してみて思ったのだが，一応 “Powered by Android” ってなってるけど「&lt;a href=&#34;https://mo-no-log.com/emui/&#34; title=&#34;HUAWEI「EMUI」とは？機能やデザインについて徹底解説!!｜モノログ&#34;&gt;Android 風のなにか&lt;/a&gt;」だよね，これ。
Android アプリが使えるってだけで，これを Android 端末と呼ばわるのは詐欺なんじゃないかなぁ（笑）&lt;/p&gt;
&lt;p&gt;スマホもそうだけど，もう “Android” という生態系は崩壊してるのかもしれない。
なんか1990年代の UNIX 戦争を彷彿とさせるよ。
おそらく Google 的には既に生態系としての “Android” を見限っていて「タブレット買うくらいなら Chromebook にしろよ」ってとこなのだろう。&lt;/p&gt;
&lt;h2&gt;Android タブレットでコードが書けるか&lt;/h2&gt;
&lt;p&gt;ところで，折角なので今回はタブレット上でコードが書ける環境を作ろうと思っている。&lt;/p&gt;
&lt;p&gt;まずは上の写真のように &lt;a href=&#34;https://termux.com/&#34;&gt;Termux&lt;/a&gt; を導入してみた。
&lt;a href=&#34;https://termux.com/&#34;&gt;Termux&lt;/a&gt; って Windows でいうところの MSYS2 みたいな位置づけなのかな。
Linux ぽい作りでパッケージ管理に APT が使える優れものだが WSL2 みたいなサブシステムというわけではなさそうだ。
この辺はいつか記事にしよう。&lt;/p&gt;
&lt;p&gt;ほんで，テキストエディタ。
軽くググってみたが，以下の4つがよさげ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.aor.droidedit.pro&#34;&gt;DroidEdit Pro (code editor) - Apps on Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ansm.anwriter.pro&#34;&gt;anWriter text editor - Apps on Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.rhmsoft.edit.pro&#34;&gt;QuickEdit Text Editor Pro - Writer &amp;amp; Code Editor - Apps on Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.maskyn.fileeditorpro&#34;&gt;Turbo Editor PRO | Text Editor - Apps on Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;無料版でそれぞれ試してみたところ &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.rhmsoft.edit.pro&#34; title=&#34;QuickEdit Text Editor Pro - Writer &amp;amp; Code Editor - Apps on Google Play&#34;&gt;QuickEdit&lt;/a&gt; がもっとも手に馴染んだので，君に決めた！ テキストエディタは機能以前に手に馴染むかが&lt;a href=&#34;https://ameblo.jp/kikuko-inoue/entry-12212589968.html&#34;&gt;最優先事項よ！&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.termux&#34;&gt;Termux - Apps on Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.techrepublic.com/article/how-to-install-git-on-android/&#34;&gt;How to install Git on Android - TechRepublic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/termux-sshd&#34;&gt;Termux on AndroidのSSHサーバに接続する方法 | LFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techwiser.com/android-text-editor-for-programming/&#34;&gt;6 Best Android Text Editor for Programming | TechWiser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/termux&#34;&gt;いつでもLinuxコマンドが使える！Androidで動くLinux端末「Termux」【Root化不要】 | LFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.webcyou.com/?p=9476&#34;&gt;web帳 | Androidに Linuxを簡単にインストールするアプリ「UserLAnd」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/nacdd57144504&#34;&gt;耳のためにできること。1万円を切る骨伝導ヘッドセットAfterShokz OpenMoveを見てきた。｜塚本 牧生｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pc.watch.impress.co.jp/docs/topic/feature/1270376.html&#34;&gt;【特集】5万円以下のChromebookは仕事に使えるのか? ～Chromebook活用術【ビジネス編】 - PC Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1278352.html&#34;&gt;「Zoom」v5.3.0が公開 ～ユーザー側から参加するブレイクアウトルームを選択可能に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07KJ5S7FS?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51JOpzamieL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07KJ5S7FS?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;HUAWEI MediaPad M5 lite 10 タブレット 10.1インチ W-Fiモデル RAM4GB/ROM64GB タッチペン&amp;amp;オリジナルカバー同梱 【日本正規代理店品】&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;HUAWEI(ファーウェイ) (Release 2018-11-30)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B07KJ5S7FS (ASIN), 9760054766192 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;この値段で RAM 4GB が決め手。ベンダ企業がどこかは考えない（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-09-24&#34;&gt;2020-09-24&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- HUAWEI MediaPad M5 lite 10 タブレット --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07HWSDG97?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41UuRFotZAL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07HWSDG97?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Glazata アルミ製スマホ/タブレット用スタンド 折り畳み式 270°自由調整可能 デスクトップスタンド スマホ タブレット (グレー)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Glazata&lt;/dd&gt;
    &lt;dd&gt;エレクトロニクス&lt;/dd&gt;
    &lt;dd&gt;B07HWSDG97 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;10インチタブレットでも安定して支えてくれる。折りたためばコンパクトになるが，持ち運ぶ際は注意。箱は捨てないで使いましょう（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-09-24&#34;&gt;2020-09-24&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- デスクトップスタンド スマホ タブレット --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00ZP3503O?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51z5FabmkpL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00ZP3503O?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;iClever Bluetooth キーボード 折りたたみ式 薄型 スマホ タブレット 専用 無線 ワイヤレス コンパクトキーボード ポータブル iPhone/iPad/Andriod 対応 ブラック シルバー IC-BK03&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;iClever&lt;/dd&gt;
    &lt;dd&gt;エレクトロニクス&lt;/dd&gt;
    &lt;dd&gt;B00ZP3503O (ASIN), 6958446327516 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;携帯用と割り切れば特に問題なし。ふとした拍子に Bluetooth 接続が切れるのが玉に瑕。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-04-11&#34;&gt;2017-04-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- iClever Bluetooth キーボード --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00G9NIL7G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41uU9SMEAyL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00G9NIL7G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;エレコム マウス Bluetooth (iOS対応) Sサイズ 小型 3ボタン IRセンサー 省電力 シルバー M-BT12BRSV&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;エレコム (Release 2013-11-09)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B00G9NIL7G (ASIN), 4953103501997 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;まぁ，マウスは消耗品だから（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-12-01&#34;&gt;2019-12-01&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- エレコム マウス Bluetooth --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07QJB7R13?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/415zjPCtoJL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07QJB7R13?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;【2019最新版 Bluetooth5.0】Bluetooth イヤホン 骨伝導 ヘッドホン 高音質 自動ペアリング スポーツ IP56防水 耳が疲れない 超軽量 完全ワイヤレス イヤホン マイク内蔵 Siri対応 ノイズキャンセル ハンズフリー通話 ブルートゥース ヘッドホン iPhone&amp;amp;Android適用 (ブラック)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Bearoam&lt;/dd&gt;
    &lt;dd&gt;エレクトロニクス&lt;/dd&gt;
    &lt;dd&gt;B07QJB7R13 (ASIN), 0694090550660 (EAN), 694090550660 (UPC)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;廉価版だし音質には目を瞑るとして（特に低音がねー），骨伝導スピーカー最高！ もうイヤフォンには戻れない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-10-10&#34;&gt;2019-10-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Bluetooth イヤホン 骨伝導 ヘッドホン --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B011LC4LY6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51o1Irti1QL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B011LC4LY6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;めんどうみたョ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;植木 等 (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;EMIミュージック・ジャパン (Release 2015-07-22)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B011LC4LY6 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;あわれ仁吉よ，どこへ行く（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-09-24&#34;&gt;2020-09-24&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- めんどうみたョ --&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>放火魔の消防士</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/firefighter-arsonist/" />
		<id>tag:text.Baldanders.info,2020-09-24:/remark/2020/09/firefighter-arsonist/</id>
		<published>2020-09-24T00:54:14+00:00</published>
		<updated>2020-09-24T03:16:11+00:00</updated>
		<summary>「定量評価」もなく特定の事例を論って脅威を煽るだけの言動は華麗にスルーである。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;日本語で言うと「マッチポンプ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」。&lt;/p&gt;
&lt;p&gt;いやぁ，自分で書いておいてすっかり忘れてたのだが，「放火魔の消防士」というフレーズを初めて見かけたのは，セキュリティ関係の本やネット記事ではなく， AI 関連哲学書だった。
しかも3年前。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/09/the-myth-of-the-singularity/&#34;&gt;『シンギュラリティの神話』を読む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私の中で「AI」に関するポエムはあの年で完結していて，早々に「ひとり幻滅期」に入っていたのだ，と言い訳しておこう（笑）&lt;/p&gt;
&lt;p&gt;件のフレーズが出てくるのは第8章で，いわゆる GAFA について&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;これらの大企業は、自ら率先して情報技術の発展を推し進めているというのに、その情報技術こそが人間を破滅に追いやると自ら警告しているのだ。これではまるで「放火魔の消防士」ではないか。彼らは自分たちで望んで火をつけておきながら、その火を消すために先頭に立って奔走している&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と dis ってる部分（内容の妥当性は横に置いておく）。&lt;/p&gt;
&lt;p&gt;なんでこのフレーズを思い出したかというと，以下の記事を見かけたから。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itmedia.co.jp/news/articles/2009/23/news073.html&#34;&gt;セキュリティ企業が描き出す「歪曲された」実態　大学研究者が検証 - ITmedia NEWS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ホンマ今更だよね（笑）&lt;/p&gt;
&lt;p&gt;私がセキュリティ管理者だった大昔から，セキュリティ関連のマッチポンプ記事（特に広告記事）には気をつけろ，と言われてたし，特に近年は（セキュリティ企業に限らず）あらゆる企業のあからさまなセキュリティ広告が鼻について真面目に読む気をなくすほどだ。&lt;/p&gt;
&lt;p&gt;脅威から守る立場の組織・企業・個人が自らの存在を誇示し続けるのに最も効果的なのは「脅威を創りだす」ことだ。
「需要は創るもの」あるいは「&lt;a href=&#34;https://magazine-k.jp/2016/01/25/spam-and-media/&#34; title=&#34;メディアは（常に）スパムか？ « マガジン航[kɔː]&#34;&gt;注目の搾取&lt;/a&gt;」である。
個人なら歪んだ英雄願望または承認欲求の暴走といったところか。&lt;/p&gt;
&lt;p&gt;セキュリティ管理においては分析の前段階である「インシデントの収集」は割と重要で（脅威を分析・分類し定量的なリスク評価へと繋げるため），それ故にマッチポンプ記事にハマりやすい。
だからこそ「マッチポンプ記事には気をつけろ」なのである。&lt;/p&gt;
&lt;p&gt;まぁ，でも，これってセキュリティに限る話じゃないよね。
「炭素ビジネス」とか「自然エネルギー（笑）」とか。
知財関連なら「知財トロル」とかも典型的だ。
最近なら「コロナ禍」だって大抵はマッチポンプ記事だ&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;「放火魔の消防士」の言動を忌避したいなら「定量評価」に徹するしかない。
「定量評価」もなく特定の事例を論って脅威を煽るだけの言動は華麗にスルーである。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51cD7DR87IL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;そろそろ、人工知能の真実を話そう (早川書房)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ジャン＝ガブリエル ガナシア (著), 小林 重裕・他 (翻訳), 伊藤 直子 (監修)&lt;/dd&gt;
    &lt;dd&gt;早川書房 2017-05-25 (Release 2017-05-31)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B071FHBGW8 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;シンギュラリティは起きない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-02&#34;&gt;2016-07-02&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 人工知能の真実を話そう --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/430924744X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51KtN0YwWcL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/430924744X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;スパム[spam]:インターネットのダークサイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;フィン・ブラントン (著), 生貝直人 (監修), 成原慧 (監修), 松浦俊輔 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;河出書房新社 2015-12-25&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;430924744X (ASIN), 9784309247441 (EAN), 430924744X (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;今読んでるけど読みづらい。修飾語が多すぎるよ。ギリシア神話かっての。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-12-10&#34;&gt;2016-12-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- スパム --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;当時は知らなかったのだが「マッチポンプ」って和製外来語なんだって。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;私は Twitter で「新型コロナ」と「GoTo」と「コロナ禍」のキーワードについて，フォローしているユーザ以外はミュート対象にしている。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>ブログのネタをカンバン方式で管理する</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/github-issues-milestones-and-projects/" />
		<id>tag:text.Baldanders.info,2020-09-22:/remark/2020/09/github-issues-milestones-and-projects/</id>
		<published>2020-09-22T10:32:40+00:00</published>
		<updated>2020-09-22T20:47:46+00:00</updated>
		<summary>これで塩漬け案件が無闇に増えるのを防ぐわけ。このまましばらく運用してみよう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ここのブログ記事は，大体は思い付きで書いているのだが，ネタとして溜め込んでいるものもそこそこある。
今まではテキストファイルでフラットに管理していたのだが「そういや &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; って Projects 機能があるぢゃん♡」と気がついた。&lt;/p&gt;
&lt;p&gt;そこで溜め込んでるネタを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects にいったん吐き出してみる&lt;/a&gt;ことにした。
まずはネタを全部 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に書き出すところから。
書き出したらそれを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; で整理していく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の Projects 機能は，いわゆる「カンバン方式」で &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; を管理できる。
こんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;&lt;img src=&#34;./kanban.png&#34; srcset=&#34;./kanban.png 1477w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ブログのネタ帳&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;ブログのネタ帳&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とりあえず &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に上げたものは全部 “Materials” に寄せておいて，その中で着手予定のものを “Issues” へ。
実際に着手を始めたものを “WIP (Work In Progress)” へ移動し，完了したら案件を Close (自動で “Done” に移動) する。&lt;/p&gt;
&lt;p&gt;単純工程なこともあり WIP と Done はひと組しかないが，チームでやるシステム開発じゃないんだからこれで必要十分だろう。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; も &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; も期限を管理できないので &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/milestones&#34; title=&#34;Milestones - spiegel-im-spiegel/github-pages-env&#34;&gt;Milestones&lt;/a&gt; を設定する。
ここで言う期限はいわゆる「締切」ではない。
文字通りの一里塚。つまり，あるマイルストーンの期限が来たら終了してない案件を次のマイルストーンに回すか止めるか判断するわけだ。&lt;/p&gt;
&lt;p&gt;これで塩漬け案件が無闇に増えるのを防げる（筈）。
まぁ，このまましばらく運用してみよう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/srggrs/assign-one-project-github-action&#34;&gt;srggrs/assign-one-project-github-action: Automatically add an issue or pull request to specific GitHub Project(s) when you create and/or label them.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/move-with-trello/&#34;&gt;Trello で引っ越し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51gC8Tmq1kL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ＨｅｎｒｉｋＫｎｉｂｅｒｇ (著), 角谷信太郎 (著), 市谷聡啓 (翻訳), 藤原大 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オーム社 2013-10-25 (Release 2017-07-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01IGW5IIW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私はこれで勉強しました。もう一回読み直すかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-02-17&#34;&gt;2015-02-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- リーン開発の現場 --&gt;
</content>
	</entry><entry>
		<title>個人番号と個人番号カード</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/my-number-and-my-number-card/" />
		<id>tag:text.Baldanders.info,2020-09-21:/remark/2020/09/my-number-and-my-number-card/</id>
		<published>2020-09-21T10:30:40+00:00</published>
		<updated>2020-09-22T03:24:59+00:00</updated>
		<summary>「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どうしても TL に脊髄反射コメントを書いてしまう。&lt;/p&gt;
&lt;p&gt;というわけで。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/yoshiaono/n/n4cd37820faf0&#34;&gt;いろいろおかしいマイナンバーカード｜青野慶久@サイボウズ｜note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;気持ちは分かる。
共感できる。&lt;/p&gt;
&lt;p&gt;だが「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。&lt;/p&gt;
&lt;h2&gt;「個人番号」の問題&lt;/h2&gt;
&lt;p&gt;「個人番号」の問題は，ひとことで言うなら（ゼロ年代に議論になった）&lt;a href=&#34;http://www.hyuki.com/techinfo/uniqid.html&#34; title=&#34;固有IDのシンプル・シナリオ&#34;&gt;固有 ID の問題&lt;/a&gt;である。&lt;/p&gt;
&lt;p&gt;ID (Identity) には有効な「目的」と「範囲」と「期間」が必ずある。
これを逸脱するとセキュリティおよびプライバシーの問題となる。&lt;/p&gt;
&lt;p&gt;ゼロ年代に批判された「住基番号」問題の核心は，目的と範囲と期間を超えて（認証および許可トークンとして）単一の ID を使いまわしていることだ。
そして個人番号でも，当時の批判から何も学ぶことなく同じ失敗を繰り返している。&lt;/p&gt;
&lt;p&gt;昨今あたり前になりつつある「&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/&#34; title=&#34;NIST SP 800-207: “Zero Trust Architecture”&#34;&gt;セロトラスト・セキュリティ&lt;/a&gt;」と照らし合わせても「個人番号」の設計が如何にダサいか分かるだろう。
ダメダメな設計を運用（マイナンバー関連法）でカバーするってのは「動かないシステム」の典型である。&lt;/p&gt;
&lt;h2&gt;「個人番号カード」の問題&lt;/h2&gt;
&lt;p&gt;「個人番号カード」の問題は「&lt;ruby&gt;&lt;rb&gt;情報格差&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;digital divide&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」の拡大だ。&lt;/p&gt;
&lt;p&gt;5月の「特別定額給付金」でのドタバタを見れば分かるように，オンライン申請によって「できる人」と「できない人」で明確に色分けされてしまった。
もっと言うと現在稼働中の「マイナポイント」はキャッシュレス決済手段を持ってない人は（できるできない以前に）構造的に排除されている。
ぶっちゃけ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/bottleneck2/&#34; title=&#34;「特別定額給付金」申請のナニがダメだったのか（その2）&#34;&gt;お役所内部のお些末さ&lt;/a&gt;は枝葉末節に過ぎない。&lt;/p&gt;
&lt;p&gt;これで思い出すのが，最近見かけた以下の記事だ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35158575/&#34;&gt;アフターコロナの中国でネット弱者の老人にどう対応したのか - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事では「コロナ」と「老人」を切り口に語られているが，情報格差は&lt;a href=&#34;https://text.baldanders.info/remark/2016/05/its-complicated/&#34; title=&#34;『つながりっぱなしの日常を生きる』を読む&#34;&gt;世代格差よりも経済格差による影響が大きい&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;つまり，「個人番号カード」により拡大した情報格差は経済階級構造と結びつき「情報力」を背景にした階級社会を強化することになるだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/n290aa887cb52&#34;&gt;マイナンバーそのものは知られても問題ない（はず）｜塚本 牧生｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/05/information-illiterate/&#34;&gt;「情報弱者」を再々定義する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;&lt;img src=&#34;https://text.baldanders.info/images/aozora/card4307.svg&#34; width=&#34;110&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;グリゴリの捕縛&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;白田 秀彰&lt;/dd&gt;
    &lt;dd&gt; 2001-11-26 (Release 2014-09-17)&lt;/dd&gt;
    &lt;dd&gt;青空文庫&lt;/dd&gt;
    &lt;dd&gt;4307 (図書カードNo.)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;白田秀彰さんの「&lt;a href=&#34;http://orion.mt.tama.hosei.ac.jp/hideaki/kenporon.htm&#34;&gt;グリゴリの捕縛&lt;/a&gt;」が青空文庫に収録されていた。
内容は &lt;strike&gt;怪獣大決戦&lt;/strike&gt; おっと憲法（基本法）についてのお話。
古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。
その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-30&#34;&gt;2019-03-30&lt;/abbr&gt; (powered by &lt;a href=&#34;https://aozorahack.org/&#34;&gt;aozorahack&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- グリゴリの捕縛 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/616sjle5ITL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ダナ・ボイド (著), 野中 モモ (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2014-10-09 (Release 2015-07-21)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0125TZSZ0 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-10&#34;&gt;2016-05-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- つながりっぱなしの日常を生きる --&gt;
</content>
	</entry><entry>
		<title>2020-09-20 のブックマーク</title>
		<category term="bookmarks" label="bookmarks" scheme="https://text.baldanders.info/bookmarks/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/bookmarks/2020/09/20-bookmarks/" />
		<id>tag:text.Baldanders.info,2020-09-20:/bookmarks/2020/09/20-bookmarks/</id>
		<published>2020-09-20T02:37:21+00:00</published>
		<updated>2020-09-27T05:56:29+00:00</updated>
		<summary>「欧州司法裁、ネット中立性規則支持示す」他</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;リリース情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/news/0.75.0-relnotes/&#34;&gt;NPM Pack | Hugo&lt;/a&gt; : Hugo 0.75 リリース
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/tag/v0.75.0&#34;&gt;Release v0.75.0 · gohugoio/hugo · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/news/0.75.1-relnotes/&#34;&gt;Hugo 0.75.1: A couple of Bug Fixes | Hugo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/tag/v0.75.1&#34;&gt;Release v0.75.1 · gohugoio/hugo · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode/releases/tag/1.49.1&#34;&gt;Release August 2020 Recovery · microsoft/vscode · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バベルのインターネット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159744/&#34;&gt;欧州司法裁、ネット中立性規則支持示す - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/19/2020-09-18-tiktok-and-wechat-will-be-banned-in-the-u-s-from-sunday/&#34;&gt;WeChatとTikTokのダウンロードが9月20日から不可に、米商務省が発表  |  TechCrunch Japan&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/tiktoktiktok.html&#34;&gt;TikTok米事業、オラクルによる提携をトランプ大統領が暫定承認。なぜオラクルはTikTok事業を取りに行ったのか？ － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セキュリティ＆プライバシー関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1276718.html&#34;&gt;“LINE”に約7万件の不正ログイン ～一部ユーザーにパスワードの強制初期化を実施 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/interesting-attack-on-the-emv-smartcard-payment-standard.html&#34;&gt;Interesting Attack on the EMV Smartcard Payment Standard - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2020/at200037.html&#34;&gt;複数の MobileIron 製品の脆弱性に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/privacy-analysis-of-ambient-light-sensors.html&#34;&gt;Privacy Analysis of Ambient Light Sensors - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/2009/15/news007.html&#34;&gt;NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係：働き方改革時代の「ゼロトラスト」セキュリティ（6） - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159618/&#34;&gt;日本マイクロソフト、Active Directory管理者に脆弱性対策を勧告 - ZDNet Japan&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1277116.html&#34;&gt;MS、Netlogonプロトコル実装の特権昇格脆弱性に対するガイダンスを管理者向けに公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/20/2020-09-19-homeland-security-emergency-alert-critical-windows-bug/&#34;&gt;米国土安全保障省がWindowsの「緊急」レベル脆弱性に異例警告、深刻度最大のZerologon攻撃を受ける可能性  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pc.watch.impress.co.jp/docs/news/1278386.html&#34;&gt;Windowsサーバーの脆弱性、米政府機関が緊急対応を通達  - PC Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35160009/&#34;&gt;マイクロソフト、「Zerologon」脆弱性を悪用する攻撃確認 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159654/&#34;&gt;エフセキュア、企業向けフィッシング攻撃の模擬演習サービスを提供 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1277378.html&#34;&gt;「Node.js」の2020年9月セキュリティ更新 ～“Critical”1件を含む3件の脆弱性に対処 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20200915-hackers-china-targeting-microsoft-exchange/&#34;&gt;中国のハッカーがMicrosoft Exchange Serverなどの脆弱性を利用してアメリカ政府を攻撃していたことが判明 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/17/092205&#34;&gt;なりすまし口座に約1億円が流出したSBI証券の不正ログインについてまとめたみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/project_onefuzzwindowsmicorosoft_edge.html&#34;&gt;マイクロソフト、バグや脆弱性の検出を自動化する「Project OneFuzz」をオープンソース公開。すでに同社内でWindowsやMicorosoft Edgeのデバッグに利用中 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zdnet.com/article/blurtooth-vulnerability-lets-attackers-overwrite-bluetooth-authentication-keys/&#34;&gt;BLURtooth vulnerability lets attackers overwrite Bluetooth authentication keys | ZDNet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gizmodo.com/bluetooth-unveils-its-latest-security-issue-with-no-se-1845013709&#34;&gt;Bluetooth Unveils Security Issue, With No Security Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/new-bluetooth-vulnerability.html&#34;&gt;New Bluetooth Vulnerability - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/18/120000&#34;&gt;掲載一時停止となった気象庁サイトの広告掲載についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/alert20200918.html&#34;&gt;WordPress 用プラグイン「File Manager」の脆弱性対策について(CVE-2020-25213) ：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;天文関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/13/2020-09-12-rocket-startup-astras-first-orbital-launch-attempt-ends-early-due-to-first-stage-burn-failure/&#34;&gt;ロケット打ち上げスタートアップAstraの最初の打ち上げは第一段階の燃焼失敗、あと2回のテスト飛行で軌道上を目指す  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://moonstation.jp/blog/marsexp/mmx/jaxa-and-nhk-will-develop-4k-and-8k-super-resolution-camera-onboard-mmx&#34;&gt;火星探査機MMXにNHKと共同開発の4K・8Kカメラ搭載へ | 月探査情報ステーション&lt;/a&gt; : また NHK か&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tenkyo.net/information/notification/from_medicine_to_wi-fi/&#34;&gt;天文学の技術と私たちの生活　医療からWi-Fiまで」（日本語版） | 一般社団法人日本天文教育普及研究会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nissin.com/jp/news/8934&#34;&gt;「日清スペースカップヌードル」に続き、宇宙日本食認証を取得! 「日清スペースチキンラーメン」「スペース日清焼そばU.F.O.」「日清スペースキーマカレーメシ」「日清スペースハヤシメシ」が誕生 | 日清食品グループ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://moonstation.jp/blog/lunarexp/nasa-will-purchase-lunar-rock-and-regolith-from-private-businesses&#34;&gt;NASA、民間企業から月資源を購入へ | 月探査情報ステーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alma-telescope.jp/news/press/venus-202009&#34;&gt;プレスリリース - 金星にリン化水素分子を検出 ～生命の指標となる分子の研究に新たな一歩～ - アルマ望遠鏡&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nao.ac.jp/news/science/2020/20200915-alma.html&#34;&gt;金星にリン化水素分子を検出―生命の指標となる分子の研究に新たな一歩 | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/15/2020-09-14-scientists-detect-a-gas-that-typically-indicates-the-presence-of-biological-life-in-the-atmosphere-of-venus/&#34;&gt;英国王立天文学会が金星の大気に生命の存在を示す気体を検知  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.space.com/venus-life-earth-grazing-asteroid&#34;&gt;Earth life may have traveled to Venus aboard sky-skimming asteroid | Space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://subarutelescope.org/jp/results/2020/09/15/2898.html&#34;&gt;終焉期の大質量連星系がつくり出す大量の塵～赤外線観測が描き出した渦巻状の放出流 | 観測成果 | すばる望遠鏡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2020/09/20200917_01.html&#34;&gt;2020年9月17日ニュース「過去最大『あり得ない』ブラックホール衝突を観測 米欧の研究グループ」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apod.nasa.gov/apod/ap200917.html&#34;&gt;APOD: 2020 September 17 - Solar Cycle 25 Begins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://subarutelescope.org/jp/results/2020/09/15/2898.html&#34;&gt;終焉期の大質量連星系がつくり出す大量の塵～赤外線観測が描き出した渦巻状の放出流 | 観測成果 | すばる望遠鏡&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Linux または Ubuntu に関する話題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/install_nodejs_on_ubuntu_debian&#34;&gt;Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159810/&#34;&gt;CanonicalのシャトルワースCEO、「Ubuntu」コミュニティーに歩み寄り - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/09/linux-67-gnome-338gnome-338.html&#34;&gt;Linux その67 - GNOME 3.38がリリースされました・GNOME 3.38の新機能と変更点 - kledgeb&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/09/ubuntu-2010-8-gnome-338ubuntu-2010.html&#34;&gt;Ubuntu 20.10 その8 - GNOME 3.38の採用とUbuntu 20.10のリリーススケジュール  - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fsight.jp/articles/-/47314&#34;&gt;欧州「グリーン成長戦略」日本「長期戦略」かくも大きすぎる違い：岩瀬昇 | 岩瀬昇のエネルギー通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/libtorrent-adds-support-for-bittorrent-v2-a-potential-game-changer-200912/&#34;&gt;Libtorrent Adds Support for BitTorrent v2, a Potential Game-Changer * TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200914/publishers-note&#34;&gt;出版社のnote活用事例まとめ完全版（2020年9月時点） - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200914/mindfuck&#34;&gt;ケンブリッジ・アナリティカ告発本の真打クリストファー・ワイリー『マインドハッキング』と「監視資本主義」の行方 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200914/antisocia-media&#34;&gt;シヴァ・ヴァイディアナサンの反Facebook本『アンチソーシャルメディア』も出る - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/5gdevops2020.html&#34;&gt;日本において、5Gやエッジコンピューティングは過度な期待、DevOpsは幻滅期。ガートナー「日本における未来志向型インフラ・テクノロジのハイプ・サイクル：2020年」を発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emirpasic/gods&#34;&gt;emirpasic/gods: GoDS (Go Data Structures). Containers (Sets, Lists, Stacks, Maps, Trees), Sets (HashSet, TreeSet, LinkedHashSet), Lists (ArrayList, SinglyLinkedList, DoublyLinkedList), Stacks (LinkedListStack, ArrayStack), Maps (HashMap, TreeMap, HashBidiMap, TreeBidiMap, LinkedHashMap), Trees (RedBlackTree, AVLTree, BTree, BinaryHeap), Comparators, Iterators, Enumerables, Sort, JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159400/&#34;&gt;ISOの委員会がC++20の標準を承認、年内に正式公開へ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/14/2020-09-14-bytedance-wont-sell-tiktok-to-microsoft-or-oracle/&#34;&gt;マイクロソフトもオラクルもTikTokを買収することはないと中国の国家メディアが報道  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fsight.jp/articles/-/47322&#34;&gt;トランプはノーベル賞を貰えるか：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://savearm.co.uk/signatories&#34;&gt;Save Arm&lt;/a&gt; : 署名した
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/14/2020-09-13-nvidia-confirms-40b-purchase-of-arm-bringing-together-two-chip-giants/&#34;&gt;NVIDIAがArmをソフトバンクグループから4.2兆円超で買収、半導体大手2社が一体に  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/15/2020-09-14-arm-co-founder-starts-save-arm-campaign-to-keep-independence-amid-40b-nvidia-deal/&#34;&gt;Arm共同創業者が4.2兆円でのNVIDIAからの買収に反対、独立性確保のため「Save Arm」キャンペーンを開始  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35159625/&#34;&gt;PayPay銀行、2021年4月5日に誕生へ&amp;ndash;ジャパンネット銀行から商号変更 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1277214.html&#34;&gt;Mac向けに個人向け無償版を追加 ～「VMware Workstation 16」「VMware Fusion 12」が正式公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/vspherekubernetesvsphere_with_tanzuvmware.html&#34;&gt;vSphereにKubernetesを統合した「vSphere with Tanzu」、VMwareが発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/na296bf046838&#34;&gt;MSの「水中データセンターの信頼性は地上の8倍」が示すニューノーマル｜塚本 牧生｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/2020/09/16/150801&#34;&gt;Improving QUIC APIs of the TLS library in Haskell - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/awsarmgraviton_2amazon_ec2_t4g.html&#34;&gt;AWS、独自ARMプロセッサ「Graviton 2」を用いたバースト可能な「Amazon EC2 T4g」インスタンス提供開始。評価用に年内は実質無料で利用可能に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/16/2020-09-15-zenhubs-new-automation-tools-improve-developer-hand-offs-in-github/&#34;&gt;ZenHubの新しい自動化ツールはGitHub上での開発者間の連携を改善する  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/amazon_transcribeno.html&#34;&gt;音声を文字起こししてくれる「Amazon Transcribe」、言語の種類を自動識別する新機能。人間によるタグ付けが不要に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/17/2020-09-16-apple-burns-developer-goodwill-with-surprise-release-of-ios-14/&#34;&gt;アップルはiOS 14のサプライズリリースで開発者の怒りをさらに買ってしまう  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/githubmicrosoft_teamsteams.html&#34;&gt;GitHubがMicrosoft Teamsと連携可能に。Teamsのチャットからリポジトリのアクティビティ参照やコメント返信など実現 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-17-github-cli-1-0-is-now-available/&#34;&gt;GitHub CLI 1.0 is now available - The GitHub Blog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1277880.html&#34;&gt;「GitHub CLI」がベータ版を卒業、一般公開 ～“GitHub”のタスクをスクリプトで自動化 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2020/09/20200918_01.html&#34;&gt;2020年9月18日ニュース「北半球はこの夏、史上最も暑かった WMOとNOAAが発表」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://av.watch.impress.co.jp/docs/news/1277927.html&#34;&gt;AfterShokz、9,090円の骨伝導ワイヤレスイヤフォン「OpenMove」 - AV Watch&lt;/a&gt; : おおっ，廉価版！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/19/2020-09-18-mit-engineers-develop-a-totally-flat-fisheye-lens-that-could-make-wide-angle-cameras-easier-to-produce/&#34;&gt;MITの技術者チームが完全にフラットな魚眼レンズを開発、広角レンズの製造が容易になる可能性  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/18/pksha-technology-tdmelodic/&#34;&gt;日本語音声合成向けに東京式アクセントを自動推定する自然言語処理ソフト「tdmelodic」がオープンソース化  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>近ごろ流行りらしい “Zenn” のアカウントを作ってみた</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/using-zenn-with-github/" />
		<id>tag:text.Baldanders.info,2020-09-19:/remark/2020/09/using-zenn-with-github/</id>
		<published>2020-09-19T08:09:47+00:00</published>
		<updated>2020-09-22T02:03:47+00:00</updated>
		<summary>とりあえず私も Qiita に置いてる記事の一部を移行してみるか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;きっかけは &lt;a href=&#34;https://qiita.com/tsuyoshi_cho&#34; title=&#34;tsuyoshi_cho - Qiita&#34;&gt;@tsuyoshi_cho&lt;/a&gt; さんの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で，最近の更新に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;Zennへ移植改訂しました。&lt;br&gt;
&lt;a href=&#34;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&#34;&gt;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&lt;/a&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあって「&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; ってなんじゃら？」と調べてみた。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;プログラマーのための新しい情報共有サービス「Zenn」をリリースしました🎉&lt;br&gt;&lt;br&gt;コンセプトは、有益な情報を共有する人がもっと対価を得られること。&lt;br&gt;noteのようにお互いを金銭的にサポートしたり、知見を本にまとめて販売したりできるプラットフォームです。&lt;a href=&#34;https://t.co/l0lxlW24Ug&#34;&gt;https://t.co/l0lxlW24Ug&lt;/a&gt; &lt;a href=&#34;https://t.co/qrddHoCWsr&#34;&gt;pic.twitter.com/qrddHoCWsr&lt;/a&gt;&lt;/p&gt;&amp;mdash; catnose (@catnose99) &lt;a href=&#34;https://twitter.com/catnose99/status/1306160371468627968?ref_src=twsrc%5Etfw&#34;&gt;September 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;おおっ！ 最近 launch したサービスだったのか。&lt;/p&gt;
&lt;p&gt;パッと見の印象は「Qiita ＋ note」という感じ。
今や &lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200914/publishers-note&#34; title=&#34;出版社のnote活用事例まとめ完全版（2020年9月時点） - YAMDAS現更新履歴&#34;&gt;note が出版社御用達のプラットフォームになっている&lt;/a&gt;ように &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; は（決済可能な）エンジニア御用達のプラットフォームになれればいいねぇ。&lt;/p&gt;
&lt;p&gt;というわけで，とりあえずアカウントを作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel&#34;&gt;Spiegel | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本のサービスは &lt;code&gt;spiegel&lt;/code&gt; 名義でアカウントが取れるのが素敵♡&lt;/p&gt;
&lt;p&gt;ただ，決済情報は未入力のままにしてある。
できればクレカや銀行口座より PayPal 決済に対応して欲しい。
&lt;a href=&#34;https://tatsu-zine.com/&#34;&gt;達人出版会&lt;/a&gt;も PayPal 決済だし，技術系のサービスなんだからその方がいいと思うのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;“Tech” と “Idea” という色分け&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では “Tech” と “Idea” の2つの固定カテゴリが用意されていて，投稿する記事は必ずどちらかのカテゴリに含まれる。
&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34; title=&#34;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&#34;&gt;説明&lt;/a&gt;によると&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;dl&gt;
&lt;dt&gt;Tech&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;プログラミングやソフトフェア開発、インフラなどに関する技術記事ならTechを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;dt&gt;Idea&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;個人的な意見やポエム、キャリアについての記事、キュレーション記事ならIdeaを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34;&gt;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんだそうだ。
Qiita で技術記事と所謂「ポエム」が入り混じって出てくる状況を見れば妥当な措置だろう。
まぁ，悩んだら “Idea” にするのがいいんだろうねぇ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; との連携&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリから記事を deploy することができる。
具体的な手順は以下の記事を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし，いくつか制限があって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リポジトリ上の記事を削除しても &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;li&gt;一度 &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に deploy された記事の slug は変更できない（別の記事として扱われる）&lt;/li&gt;
&lt;li&gt;既に &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; でオン書きしたコンテンツは &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; でリポジトリを作る際は，リポジトリ名は任意だが， &lt;code&gt;.gitignore&lt;/code&gt; や &lt;code&gt;README.md&lt;/code&gt; は作成しなくてよい。
これらは後述する &lt;code&gt;zenn-cli&lt;/code&gt; ツールで作成される。&lt;/p&gt;
&lt;h2&gt;zenn-cli ツールの導入&lt;/h2&gt;
&lt;p&gt;まずは &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境に node.js をインストールしてしまおう（まだ導入していない場合）。
こんな感じでいいだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt install -y nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に，作成した &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリを適当な場所に &lt;code&gt;git clone&lt;/code&gt; し，リポジトリのあるディレクトリに移動する。
まずは npm の初期化から。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~/workspace
$ gh repo clone spiegel-im-spiegel/zenn-docs
$ cd zenn-docs
$ npm init --yes
Wrote to /home/username/workspace/zenn-docs/package.json:

{
  &amp;#34;name&amp;#34;: &amp;#34;zenn-docs&amp;#34;,
  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;,
  &amp;#34;description&amp;#34;: &amp;#34;## Links&amp;#34;,
  &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
  &amp;#34;scripts&amp;#34;: {
    &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
  },
  &amp;#34;repository&amp;#34;: {
    &amp;#34;type&amp;#34;: &amp;#34;git&amp;#34;,
    &amp;#34;url&amp;#34;: &amp;#34;git+https://github.com/spiegel-im-spiegel/zenn-docs.git&amp;#34;
  },
  &amp;#34;keywords&amp;#34;: [],
  &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;,
  &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;,
  &amp;#34;bugs&amp;#34;: {
    &amp;#34;url&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs/issues&amp;#34;
  },
  &amp;#34;homepage&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs#readme&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; は弄らなくて大丈夫。
続けて &lt;code&gt;zenn-cli&lt;/code&gt; ツールをインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npm install zenn-cli
...
+ zenn-cli@0.1.29
added 5 packages from 3 contributors, removed 3 packages, updated 3 packages, moved 1 package and audited 905 packages in 42.516s
found 5 low severity vulnerabilities
  run `npm audit fix` to fix them, or `npm audit` for details
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なんか不穏なメッセージが見えるが大丈夫か，これ。 &amp;hellip;まぁいいや&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
次いってみよう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zenn-cli&lt;/code&gt; ツールがインストールできたらリポジトリ内を初期化する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn init

  🎉Done!
  早速コンテンツを作成しましょう

  👇新しい記事を作成する
  $ zenn new:article

  👇新しい本を作成する
  $ zenn new:book

  👇表示をプレビューする
  $ zenn preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでリポジトリ内に &lt;code&gt;articles/&lt;/code&gt; および &lt;code&gt;books/&lt;/code&gt; ディレクトリが作成され，さらに &lt;code&gt;.gitignore&lt;/code&gt; および &lt;code&gt;README.md&lt;/code&gt; ファイルも作成される。
ちなみに &lt;code&gt;.gitignore&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;node_modules
.DS_Store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;何ともシンプルだが，これで &lt;code&gt;zenn-cli&lt;/code&gt; インストール時に作成される &lt;code&gt;node_modules/&lt;/code&gt; ディレクトリはリポジトリから除外される。&lt;/p&gt;
&lt;p&gt;ここまで出来たら一度コミットしておいたほうがいいだろう。&lt;/p&gt;
&lt;h2&gt;記事の作成&lt;/h2&gt;
&lt;p&gt;入力ファイルの作成には以下のコマンドを打つ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article
📄d309af5057a827deda35.md created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このファイル名がそのまま slug として URL のパスになる。
Slug は &lt;code&gt;zenn-cli&lt;/code&gt; ツールが適当に生成するのでユーザは考えなくともよい。&lt;/p&gt;
&lt;p&gt;もし slug を指定したいのであれば &lt;code&gt;--slug&lt;/code&gt; オプションを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article --slug hello-zenn-world
📄hello-zenn-world.md created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし slug 文字列には以下の制限がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半角英数字（a-z, 0-9）とハイフン（-）の 12〜50 字の組み合わせのみ有効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;articles&lt;/code&gt; 以下のファイルはディレクトリ階層に出来ない（フラットな構成）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;books&lt;/code&gt; の場合は「本」ごとに slug を指定できる。本の slug 以下はフラットな構成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slug 文字列が短いとエラーになるのでご注意を。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article --slug hello
エラー：slugの値（hello）が不正です。半角英数字（a-z0-9）とハイフン（-）の12〜50字の組み合わせにしてください
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作成したファイルの中身は，以下のように front matter のひな型のみが書き込まれている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emoji&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;🎉&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tech&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# tech: 技術記事 / idea: アイデア&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;published&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;emoji&lt;/code&gt; 項目は，記事のアテンションに使われるのだが，毎回ランダムな文字で初期化されるようだ。
絵文字を直接入力することはないのだが &lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34; title=&#34;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&#34;&gt;GitHub markdown&lt;/a&gt; のように文字列で指定できないものかねぇ。&lt;/p&gt;
&lt;h2&gt;プレビューが素敵！&lt;/h2&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-09-20 更新】&lt;/strong&gt;
以前プレビュー機能が動かないと書いたが，他でも &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues/37&#34; title=&#34;npx zenn preview でエラーが大量に吐き出される · Issue #37 · zenn-dev/zenn-roadmap&#34;&gt;Issue が上がっていた&lt;/a&gt;らしく，対応されていた。
感謝！&lt;/p&gt;
&lt;p&gt;この節は，以前の内容から差し替えている。
なお，障害報告は &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues&#34;&gt;zenn-dev/zenn-roadmap/issues&lt;/a&gt; に上げてほしいとのこと。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以下のコマンドでプレビュー用のローカルサーバが起動する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn preview
👀Preview on http://localhost:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;画面はこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./preview.png&#34;&gt;&lt;img src=&#34;./preview.png&#34; srcset=&#34;./preview.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;おおっ！ 間違いまで指摘してくれるのか。
こりゃあ，ええ。&lt;/p&gt;
&lt;p&gt;エディタの markdown プレビュー機能でもある程度は見れるけど，やっぱサービス立ち上げてブラウザで確認できるのがいいよね。&lt;/p&gt;
&lt;p&gt;うんうん。&lt;/p&gt;
&lt;!--
プレビュー用のローカルサーバを起動しようとしたら

```text
$ npx zenn preview
(node:126485) UnhandledPromiseRejectionWarning: Error: Could not find a valid build in the &#39;/home/username/workspace/zenn-docs/.next&#39; directory! Try building your app with &#39;next build&#39; before starting the server.
    at Server.readBuildId (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:113:355)
    at new Server (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:3:120)
    at Object.createServer [as default] (/home/username/workspace/zenn-docs/node_modules/next/dist/server/next.js:2:638)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:53:41
    at step (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:33:23)
    at Object.next (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:14:53)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:8:71
    at new Promise (&lt;anonymous&gt;)
    at __awaiter (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:4:12)
    at Object.exports.build (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:48:12)
(Use `node --trace-warnings ...` to show where the warning was created)
(node:126485) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3)
(node:126485) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

てな感じに例外を吐いて落っこちた。

まぁ，プレビューなくても問題はないのだが...
--&gt;
&lt;h2&gt;とりあえず私も&amp;hellip;&lt;/h2&gt;
&lt;p&gt;まずは Qiita に置いてる記事の一部を移行してみるか。
古すぎて使えない記事はダメだけど（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/install-zenn-cli&#34;&gt;Zenn CLIをインストールする | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/zenn-cli-guide&#34;&gt;Zenn CLIを使ってコンテンツを作成する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/markdown-guide&#34;&gt;ZennのMarkdown記法 | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-09-17-github-cli-1-0-is-now-available/&#34;&gt;GitHub CLI 1.0 is now available - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/morinokami/articles/hello-github-cli&#34;&gt;GitHub CLI 1.0 がリリースされたので使ってみた | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linuxfan.info/install_nodejs_on_ubuntu_debian&#34;&gt;Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34;&gt;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; 側に問い合わせてみたが，セキュリティ上の問題はないらしい。「あまり精神的に良いものではないのでそのうちなんとかしようと思っています」とのこと（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
