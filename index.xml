<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-03-03:/</id>
	<updated>2016-03-03T00:30:52+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>SSLv2 を有効にしている TLS 実装の脆弱性 ― 馬も鹿も暗号化する時代のセキュリティ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/vulnerability-cross-protocol-attack-on-tls-using-sslv2/" />
		<id>tag:text.Baldanders.info,2016-03-03:/remark/2016/03/vulnerability-cross-protocol-attack-on-tls-using-sslv2/</id>
		<published>2016-03-03T00:30:52+09:00</published>
		<updated>2016-03-04T12:52:56+09:00</updated>
		<summary>OpenSSL をはじめとする SSL/TLS 暗号通信の実装に複数のセキュリティ脆弱性あり。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;脆弱性の内容:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;いい加減 SSL 周りの脆弱性にはうんざりなのだが， &lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; をはじめとする SSL/TLS 暗号通信の実装に複数のセキュリティ脆弱性あり。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;CVE&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;脆弱性内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0800&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cross-protocol attack on TLS using SSLv2 (DROWN)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0705&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Double-free in DSA code&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0798&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Memory leak in SRP database lookups&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0797&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BN_hex2bn/BN_dec2bn NULL pointer deref/heap corruption&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0799&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fix memory issues in BIO_*printf functions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0702&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Side channel attack on modular exponentiation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0703&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Divide-and-conquer session key recovery in SSLv2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0704&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bleichenbacher oracle in SSLv2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;このうち特に CVE-2016-0800 のリスクが高いので紹介する。&lt;/p&gt;

&lt;h3 id=&#34;cve-2016-0800-cross-protocol-attack-on-tls-using-sslv2-drown:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;CVE-2016-0800 : Cross-protocol attack on TLS using SSLv2 (DROWN)&lt;/h3&gt;

&lt;p&gt;通称 &lt;a href=&#34;https://drownattack.com/&#34;&gt;DROWN (Decrypting RSA with Obsolete and Weakened eNcryption)&lt;/a&gt; 攻撃。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;A cross-protocol attack was discovered that could lead to decryption of TLS sessions by using a server supporting SSLv2 and EXPORT cipher suites as a Bleichenbacher RSA padding oracle.  Note that traffic between clients and non-vulnerable servers can be decrypted provided another server supporting SSLv2 and EXPORT ciphers (even with a different protocol such as SMTP, IMAP or POP) shares the RSA keys of the non-vulnerable server. This vulnerability is known as DROWN (CVE-2016-0800).&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20160301.txt&#34;&gt;OpenSSL Security Advisory [1st March 2016]&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; などで SSLv2 を有効にしている場合， SSL を使用していなくても TLS 暗号通信を中間者攻撃で攻略することができるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
ポイントは SSL サーバのみでなくサーバとネットで繋がっている他のマシンにも影響をおよぼす可能性があることだ。&lt;/p&gt;

&lt;h3 id=&#34;cve-2016-0702-side-channel-attack-on-modular-exponentiation:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;CVE-2016-0702 : Side channel attack on modular exponentiation&lt;/h3&gt;

&lt;p&gt;リスクは低いが， CVE-2016-0702 についても一応紹介しておく。
通称 &lt;a href=&#34;http://ssrg.nicta.com.au/projects/TS/cachebleed/&#34; title=&#34;CacheBleed: A Timing Attack on OpenSSL Constant Time RSA&#34;&gt;CacheBleed&lt;/a&gt; と呼ばれる side-channel 攻撃の一種である。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;A side-channel attack was found which makes use of cache-bank conflicts on the Intel Sandy-Bridge microarchitecture which could lead to the recovery of RSA keys.  The ability to exploit this issue is limited as it relies on an attacker who has control of code in a thread running on the same hyper-threaded core as the victim thread which is performing decryptions.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20160301.txt&#34;&gt;OpenSSL Security Advisory [1st March 2016]&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;どうもこれ，2013年の GnuPG の脆弱性のバリエーションらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://eprint.iacr.org/2013/448.pdf&#34;&gt;Flush&amp;#43;Reload: a High Resolution, Low Noise, L3 Cache Side-Channel Attack&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; （&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000648.shtml&#34; title=&#34;Flush+Reload: a High Resolution, Low Noise, L3 Cache Side-Channel Attack — Baldanders.info&#34;&gt;当時書いた拙文&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Side-channel 攻撃は成立条件が特殊なので，一般的にリスクは高くない。
CVSSv2 基本評価値は 2.6 (AV:L/AC:H/Au:N/C:P/I:P/A:N) なので，こういう攻略法もあるといった程度に覚えておくといいだろう。&lt;/p&gt;

&lt;h2 id=&#34;影響度-cvss:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CVSSv2 基本評価値 7.1 (AV:N/AC:H/Au:N/C:C/I:C/A:N)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“&lt;a href=&#34;https://www.kb.cert.org/vuls/id/583776&#34;&gt;Vulnerability Note VU#583776 - Network traffic encrypted using RSA-based SSL certificates over SSLv2 may be decrypted by the DROWN attack&lt;/a&gt;” より&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全面的（C）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全面的（C）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;CVSSv3 基本評価値 7.4 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://jvn.jp/vu/JVNVU90617353/&#34;&gt;JVNVU#90617353: SSLv2 の暗号通信を解読可能な脆弱性 (DROWN 攻撃)&lt;/a&gt;」より&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OpenSSL 1.0.1r およびそれ以前の 1.0.1 系列&lt;/li&gt;
&lt;li&gt;OpenSSL 1.0.2f およびそれ以前の 1.0.2 系列&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また，このバージョンの &lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; を利用している製品（Apache, Postfix, Nginx 等）も影響を受ける。
なお，公開されているサーバが &lt;a href=&#34;https://drownattack.com/&#34; title=&#34;DROWN Attack&#34;&gt;DROWN&lt;/a&gt; の影響を受けているかどうかテストするサイトがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://test.drownattack.com/&#34;&gt;test.drownattack.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; 以外にも SSLv2 が有効になっている場合は今回の脆弱性の影響を受ける可能性があり，以下の製品・バージョンについて警告されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft IIS (Windows Server) : バージョン 7 以降は既定で SSLv2 が無効化されている&lt;/li&gt;
&lt;li&gt;MNetwork Security Services (NSS) : バージョン 3.13 以降は既定で SSLv2 が無効化されている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LibreSSL は &lt;a href=&#34;https://drownattack.com/&#34; title=&#34;DROWN Attack&#34;&gt;DROWN&lt;/a&gt; の影響を受けないそうだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://undeadly.org/cgi?action=article&amp;amp;sid=20160301141941&amp;amp;mode=expanded&#34;&gt;LibreSSL not affected by DROWN attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;対策-回避策:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; に関しては最新バージョンで対策されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenSSL 1.0.1s&lt;/li&gt;
&lt;li&gt;OpenSSL 1.0.2g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SSL は既に仕様上の脆弱性を抱えており，可能な限り無効にすることをお薦めする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/vuln/ssl_crypt_config.html&#34;&gt;SSL/TLS暗号設定ガイドライン～安全なウェブサイトのために（暗号設定対策編）～：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうしても SSLv2 を有効にしなければならない場合，証明書を分けて，他のプロトコルと共用しないようにすること。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drownattack.com/&#34;&gt;DROWN (Decrypting RSA with Obsolete and Weakened eNcryption)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20160301.txt&#34;&gt;OpenSSL Security Advisory [1st March 2016]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/583776&#34;&gt;Vulnerability Note VU#583776 - Network traffic encrypted using RSA-based SSL certificates over SSLv2 may be decrypted by the DROWN attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU90617353/&#34;&gt;JVNVU#90617353: SSLv2 の暗号通信を解読可能な脆弱性 (DROWN 攻撃)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2016/at160010.html&#34;&gt;OpenSSL の複数の脆弱性に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20160301/1456849603&#34;&gt;OpenSSLの脆弱性CVE-2016-800(DROWN)やCVE-2016-0702(CacheBleed)についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gigazine.net/news/20160302-drown-attack/&#34;&gt;SSLの脆弱性で日本の大手サイトを含む全世界1100万以上のHTTPSサイトが攻撃を受け得ると判明 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078777/&#34;&gt;HTTPSサイトの3割に影響する「DROWN」脆弱性見つかる&amp;ndash;OpenSSLはパッチ公開 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1603/02/news065.html&#34;&gt;「DROWN攻撃」の脆弱性が発覚，HTTPSサイトの33％に影響 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/vulnerability/february-2016-security-releases/&#34;&gt;February 2016 Security Release Summary | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cryptographyengineering.com/2016/03/attack-of-week-drown.html&#34;&gt;A Few Thoughts on Cryptographic Engineering: Attack of the week: DROWN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arstechnica.com/security/2016/03/more-than-13-million-https-websites-imperiled-by-new-decryption-attack/&#34;&gt;More than 11 million HTTPS websites imperiled by new decryption attack | Ars Technica&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;余談-馬も鹿も暗号化する時代のセキュリティ:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;【余談】 馬も鹿も暗号化する時代のセキュリティ&lt;/h2&gt;

&lt;p&gt;一千万規模か。
意外と少ないな。
まぁ2014年に大騒ぎになった SSL 関連の脆弱性のおかげで SSL を無効にしたところも多かろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/announce/20141017-ssl.html&#34;&gt;更新：SSL 3.0 の脆弱性対策について(CVE-2014-3566)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SSL を無効に出来ないサイトの多くは古い PC やケータイを考慮しているのだろうけど，もう考慮の余地はないと思う。
セキュリティを気にせざるを得ない他のユーザに迷惑をかけるからだ。&lt;/p&gt;

&lt;p&gt;Web サイトを全て暗号化すべきという意見があって，セキュリティ専門家でも賛同者が多いが，私は懐疑的だ。
現在はセキュリティ要件が2,3年単位で変化し追従できないサービスやユーザも多い。
問題なのは，サイトが乗っ取らるなどして，暗号通信下で malware の活動を許してしまうことで，セキュリティ管理のいい加減なサービスが暗号通信を行うのはむしろ有害とさえ言える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/03/01/106/&#34;&gt;SSL VPNの9割がセキュリティ対策が不十分な状況 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160229_745799.html&#34;&gt;総SSL通信化時代のセキュリティ死角、F5ネットワークスが解説 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078634/&#34;&gt;サイバー攻撃を認識するまで平均2カ月かかる&amp;ndash;CIO意識調査 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今だに SSLv2 や SSLv3 を有効にしているサイトがあるというのなら，そのサイトはセキュリティ上は全く信用できないと断言していいと思う。
脆弱な暗号通信を使うくらいなら，いっそ暗号化していない限定機能の HTTP サイトを用意して古いマシンのユーザは（安全でないことを警告したうえで）そちらに誘導する方がよい。
個人的な感覚では Web サービス全体の &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; 程度が暗号化できていれば充分だと思う。&lt;/p&gt;

&lt;p&gt;馬も鹿も暗号化するこの時代。
国家や企業の戯れ言に耳を貸す気はないが，それが本当は何を守ってるのか，そろそろ真面目に考えないといけないのではないのだろうか。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;TLS と SSLv3 で同じ証明書を使用している場合。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-3/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-3/</id>
		<published>2016-03-01T22:02:47+09:00</published>
		<updated>2016-03-02T14:38:06+09:00</updated>
		<summary>前回で gcc を導入できたので，実際にビルドを試してみる。今回はターゲットとして pgpdump を用いる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;前回&lt;/a&gt;で gcc を導入できたので，実際にビルドを試してみる。
今回はターゲットとして &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; を用いる。&lt;/p&gt;

&lt;h2 id=&#34;pgpdump:c509a9983168e49e64441034797bfe05&#34;&gt;pgpdump&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; は山本和彦さんによる &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; パケットの&lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/ja/&#34;&gt;視覚化ツール&lt;/a&gt;。
ソースコードは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;GitHub で公開&lt;/a&gt;されているが， UNIX 系のプラットフォームを前提に作られているため &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 上でビルドを行う。&lt;/p&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のソースコードをダウンロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &#39;pgpdump&#39;...
remote: Counting objects: 492, done.
Receiving objects:  59% (291remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492 92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;32bit-版のビルド:c509a9983168e49e64441034797bfe05&#34;&gt;32bit 版のビルド&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のビルド手順は &lt;code&gt;configure&lt;/code&gt; を実行した後 make を実行する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c509a9983168e49e64441034797bfe05:conf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c509a9983168e49e64441034797bfe05:conf&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
まずは何も考えずに &lt;code&gt;configure&lt;/code&gt; の実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cd pgpdump/

$ ./configure
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &#39;Makefile.in&#39; seems to ignore the --datarootdir setting
config.status: creating config.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; ではパケット内の圧縮データを扱うため &lt;code&gt;libz&lt;/code&gt; および &lt;code&gt;libbz2&lt;/code&gt; が必要となるが，ちゃんと認識しているようだ。
これによって作成された &lt;code&gt;Makefile&lt;/code&gt; がこれ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prefix = /usr/local
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
mandir = ${prefix}/share/man
LIBS = -lbz2 -lz
CFLAGS  = -g -O2 -O -Wall
LDFLAGS =
VERSION = `git tag | tail -1 | sed -e &#39;s/v//&#39;`

RM = rm -f
INSTALL  = install

INCS = pgpdump.h
SRCS = pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c \
       buffer.c uatfunc.c
OBJS = pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o \
       buffer.o uatfunc.o
PROG = pgpdump

MAN  = pgpdump.1

CNF = config.h config.status config.cache config.log
MKF = Makefile

.c.o:
	$(CC) -c $(CFLAGS) $&amp;lt;

all: $(PROG)

$(PROG): $(OBJS)
	$(CC) $(CFLAGS) -o $(PROG) $(OBJS) $(LIBS) $(LDFLAGS)

clean:
	$(RM) $(OBJS) $(PROG)

distclean:
	$(RM) $(OBJS) $(PROG) $(CNF) $(MKF)

install: all
	$(INSTALL) -d $(DESTDIR)$(bindir)
	$(INSTALL) -cp -pm755 $(PROG) $(DESTDIR)$(bindir)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man1
	$(INSTALL) -cp -pm644 $(MAN) $(DESTDIR)$(mandir)/man1

archive:
	git archive master -o ~/pgpdump-$(VERSION).tar --prefix=pgpdump-$(VERSION)/
	gzip ~/pgpdump-$(VERSION).tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時点での問題は以下のとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; が &lt;code&gt;/usr/local&lt;/code&gt; になっている。このままでもエラーにはならないが，今回は 32bit 版と 64bit 版を分けたいので &lt;code&gt;/mingw32&lt;/code&gt; としたい&lt;/li&gt;
&lt;li&gt;リンク時のオプション（&lt;code&gt;LDFLAGS&lt;/code&gt;）に &lt;code&gt;-static&lt;/code&gt; がないため，このままビルドすると DLL に依存する構成になってしまう&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらについては &lt;code&gt;configure&lt;/code&gt; に情報を渡せばよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./configure --prefix=/mingw32 LDFLAGS=-static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;Makefile&lt;/code&gt; は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prefix = /mingw32
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
mandir = ${prefix}/share/man
LIBS = -lbz2 -lz
CFLAGS  = -g -O2 -O -Wall
LDFLAGS = -static
VERSION = `git tag | tail -1 | sed -e &#39;s/v//&#39;`

RM = rm -f
INSTALL  = install

INCS = pgpdump.h
SRCS = pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c \
       buffer.c uatfunc.c
OBJS = pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o \
       buffer.o uatfunc.o
PROG = pgpdump

MAN  = pgpdump.1

CNF = config.h config.status config.cache config.log
MKF = Makefile

.c.o:
	$(CC) -c $(CFLAGS) $&amp;lt;

all: $(PROG)

$(PROG): $(OBJS)
	$(CC) $(CFLAGS) -o $(PROG) $(OBJS) $(LIBS) $(LDFLAGS)

clean:
	$(RM) $(OBJS) $(PROG)

distclean:
	$(RM) $(OBJS) $(PROG) $(CNF) $(MKF)

install: all
	$(INSTALL) -d $(DESTDIR)$(bindir)
	$(INSTALL) -cp -pm755 $(PROG) $(DESTDIR)$(bindir)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man1
	$(INSTALL) -cp -pm644 $(MAN) $(DESTDIR)$(mandir)/man1

archive:
	git archive master -o ~/pgpdump-$(VERSION).tar --prefix=pgpdump-$(VERSION)/
	gzip ~/pgpdump-$(VERSION).tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では make を実行しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できた実行ファイルをコマンドプロンプトから起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うまくいったようである。&lt;/p&gt;

&lt;h2 id=&#34;64bit-版のビルド:c509a9983168e49e64441034797bfe05&#34;&gt;64bit 版のビルド&lt;/h2&gt;

&lt;p&gt;32bit 版で要領は分かったので一気に終わらせてしまおう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &#39;pgpdump&#39;...
remote: Counting objects: 492, done.
Receiving objects:  62% (306remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492/92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.

$ cd pgpdump/

$ ./configure --prefix=/mingw64 LDFLAGS=-static
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &#39;Makefile.in&#39; seems to ignore the --datarootdir setting
config.status: creating config.h

$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これもコマンドプロンプト上で起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題なし。&lt;/p&gt;

&lt;h2 id=&#34;動作確認:c509a9983168e49e64441034797bfe05&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;実際にちゃんと動くかどうか &lt;a href=&#34;https://www.jpcert.or.jp/jpcert-pgp.html&#34; title=&#34;JPCERT コーディネーションセンター PGP公開鍵&#34;&gt;JPCERT/CC の公開鍵&lt;/a&gt;をを使って確認してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe info-0x69ECE048.asc
Old: Public Key Packet(tag 6)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: User ID Packet(tag 13)(29 bytes)
        User ID - JPCERT/CC &amp;lt;info@jpcert.or.jp&amp;gt;
Old: Signature Packet(tag 2)(316 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: preferred symmetric algorithms(sub 11)(3 bytes)
                Sym alg - AES with 256-bit key(sym 9)
                Sym alg - CAST5(sym 3)
                Sym alg - Triple-DES(sym 2)
        Hashed Sub: key server preferences(sub 23)(4 bytes)
                Flag - No-modify
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to certify other keys
                Flag - This key may be used to sign data
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
                Flag - The private component of this key may be in the possession of more than one person
        Hashed Sub: preferred compression algorithms(sub 22)(2 bytes)
                Comp alg - ZLIB &amp;lt;RFC1950&amp;gt;(comp 2)
                Comp alg - ZIP &amp;lt;RFC1951&amp;gt;(comp 1)
        Hashed Sub: features(sub 30)(4 bytes)
                Flag - Modification detection (packets 18 and 19)
        Hashed Sub: preferred hash algorithms(sub 21)(3 bytes)
                Hash alg - SHA256(hash 8)
                Hash alg - SHA384(hash 9)
                Hash alg - SHA512(hash 10)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 16 12:51:22 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - cd 79
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(277 bytes)
        Ver 3 - old
        Hash material(5 bytes):
                Sig type - Generic certification of a User ID and Public Key packet(0x10).
                Creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Key ID - 0xE7734FA60C7BDE12
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hash left 2 bytes - e9 53
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(156 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Mon Jun 15 14:51:27 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x8C756B2E2C94D4ED
        Hash left 2 bytes - 35 fd
        RSA m^d mod n(1022 bits) - ...
                -&amp;gt; PKCS-1
Old: Public Subkey Packet(tag 14)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: Signature Packet(tag 2)(577 bytes)
        Ver 4 - new
        Sig type - Subkey Binding Signature(0x18).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:58 東京 (標準時) 2009
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
        Hashed Sub: embedded signature(sub 32)(284 bytes)
        Ver 4 - new
        Sig type - Primary Key Binding Signature(0x19).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x09D704B753BA1622
        Hash left 2 bytes - 71 2d
        RSA m^d mod n(2048 bits) - ...
                -&amp;gt; PKCS-1
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - 1d e2
        RSA m^d mod n(2046 bits) - ...
                -&amp;gt; PKCS-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うむ，問題ないようだな。
ちなみに Windows バイナリは&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/&#34;&gt;うちのサイトでも公開&lt;/a&gt;しているのでご自由にどうぞ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c509a9983168e49e64441034797bfe05:conf&#34;&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;前回&lt;/a&gt;インストールした &lt;code&gt;base-devel&lt;/code&gt; パッケージグループは今回の &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; ビルドには必要なく，インストールしなくても問題ない。まぁ今回は単純なビルドだし。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c509a9983168e49e64441034797bfe05:conf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-2/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-2/</id>
		<published>2016-03-01T22:02:44+09:00</published>
		<updated>2016-03-01T22:02:44+09:00</updated>
		<summary>いよいよ gcc をインストールする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;いよいよ gcc をインストールする。
その前に&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;pacman-によるパッケージ管理:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;pacman によるパッケージ管理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;の初期化でもちょっとだけ出てきたが， &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のパッケージ管理には pacman コマンドを使う。
pacman は元々 Arch Linux のパッケージ管理ツールで，使い方もこれと同じようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://archlinuxjp.kusakata.com/wiki/Pacman&#34;&gt;pacman - ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よく使うコマンドとしては&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;コマンドライン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;処理内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -S &amp;lt;package_name1&amp;gt; [package_name2...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定したパッケージをインストールする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Sl [repository]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージを一覧表示する（リポジトリを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Ss [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージを一覧・検索する（キーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Su&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みのパッケージを更新する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Sy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージのデータベースを更新する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Syu&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-Su&lt;/code&gt;, &lt;code&gt;-Sy&lt;/code&gt; の同時指定&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Q [package_name...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みパッケージを一覧・検索する（パッケージを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Qs [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みパッケージを一覧・検索する（をキーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -R &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定したパッケージを削除する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Rs &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;依存関係を含めて指定したパッケージを削除する（指定したパッケージにのみ依存するパッケージを削除）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;あたりか。
試しに git をインストールしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -S git
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (34) db-5.3.28-2  expat-2.1.0-2  gdbm-1.11-3  heimdal-1.5.3-8  libgdbm-1.11-3
                openssh-7.1p2-1  perl-5.22.0-2  perl-Authen-SASL-2.16-2  perl-Convert-BinHex-1.123-2
                perl-Encode-Locale-1.04-1  perl-Error-0.17024-1  perl-File-Listing-6.04-2
                perl-HTML-Parser-3.71-3  perl-HTML-Tagset-3.20-2  perl-HTTP-Cookies-6.01-2
                perl-HTTP-Daemon-6.01-2  perl-HTTP-Date-6.02-2  perl-HTTP-Message-6.06-2
                perl-HTTP-Negotiate-6.01-2  perl-IO-Socket-SSL-2.016-1  perl-IO-stringy-2.111-1
                perl-LWP-MediaTypes-6.02-2  perl-MIME-tools-5.506-1  perl-MailTools-2.14-1
                perl-Net-HTTP-6.09-1  perl-Net-SMTP-SSL-1.02-1  perl-Net-SSLeay-1.70-1
                perl-TermReadKey-2.33-1  perl-TimeDate-2.30-2  perl-URI-1.68-1
                perl-WWW-RobotRules-6.02-2  perl-libwww-6.13-1  vim-7.4.1415-2  git-2.7.1-1

合計ダウンロード容量:   24.75 MiB
合計インストール容量:  114.53 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 expat-2.1.0-2-x86_64                                  13.1 KiB  12.8M/s 00:00 [##################] 100%
 vim-7.4.1415-2-x86_64                                  6.1 MiB  1217K/s 00:05 [##################] 100%
 heimdal-1.5.3-8-x86_64                               543.7 KiB   824K/s 00:01 [##################] 100%
 openssh-7.1p2-1-x86_64                               653.4 KiB   312K/s 00:02 [##################] 100%
 db-5.3.28-2-x86_64                                    41.7 KiB  10.2M/s 00:00 [##################] 100%
 libgdbm-1.11-3-x86_64                                 20.4 KiB  9.94M/s 00:00 [##################] 100%
 gdbm-1.11-3-x86_64                                   108.5 KiB   682K/s 00:00 [##################] 100%
 perl-5.22.0-2-x86_64                                  12.4 MiB  1170K/s 00:11 [##################] 100%
 perl-Error-0.17024-1-any                              17.1 KiB  8.33M/s 00:00 [##################] 100%
 perl-Authen-SASL-2.16-2-any                           42.4 KiB  8.28M/s 00:00 [##################] 100%
 perl-Encode-Locale-1.04-1-any                          9.7 KiB  9.46M/s 00:00 [##################] 100%
 perl-HTTP-Date-6.02-2-any                              8.6 KiB  8.42M/s 00:00 [##################] 100%
 perl-File-Listing-6.04-2-any                           7.7 KiB  0.00B/s 00:00 [##################] 100%
 perl-HTML-Tagset-3.20-2-any                           10.3 KiB  10.0M/s 00:00 [##################] 100%
 perl-HTML-Parser-3.71-3-x86_64                        76.9 KiB  10.7M/s 00:00 [##################] 100%
 perl-LWP-MediaTypes-6.02-2-any                        18.0 KiB  8.81M/s 00:00 [##################] 100%
 perl-URI-1.68-1-any                                   75.6 KiB  9.22M/s 00:00 [##################] 100%
 perl-HTTP-Message-6.06-2-any                          71.3 KiB  9.94M/s 00:00 [##################] 100%
 perl-HTTP-Cookies-6.01-2-any                          20.4 KiB  20.0M/s 00:00 [##################] 100%
 perl-HTTP-Daemon-6.01-2-any                           14.2 KiB  0.00B/s 00:00 [##################] 100%
 perl-HTTP-Negotiate-6.01-2-any                        11.4 KiB  0.00B/s 00:00 [##################] 100%
 perl-Net-HTTP-6.09-1-any                              19.8 KiB  19.3M/s 00:00 [##################] 100%
 perl-WWW-RobotRules-6.02-2-any                        12.2 KiB  12.0M/s 00:00 [##################] 100%
 perl-libwww-6.13-1-any                               122.2 KiB   367K/s 00:00 [##################] 100%
 perl-TimeDate-2.30-2-any                              35.9 KiB  8.77M/s 00:00 [##################] 100%
 perl-MailTools-2.14-1-any                             58.4 KiB  9.50M/s 00:00 [##################] 100%
 perl-IO-stringy-2.111-1-any                           52.6 KiB  10.3M/s 00:00 [##################] 100%
 perl-Convert-BinHex-1.123-2-any                       30.1 KiB  9.79M/s 00:00 [##################] 100%
 perl-MIME-tools-5.506-1-any                          180.4 KiB   367K/s 00:00 [##################] 100%
 perl-Net-SSLeay-1.70-1-x86_64                        191.2 KiB   590K/s 00:00 [##################] 100%
 perl-IO-Socket-SSL-2.016-1-any                       112.5 KiB   208K/s 00:01 [##################] 100%
 perl-Net-SMTP-SSL-1.02-1-any                           3.5 KiB  22.2K/s 00:00 [##################] 100%
 perl-TermReadKey-2.33-1-x86_64                        20.9 KiB  18.7K/s 00:01 [##################] 100%
 git-2.7.1-1-x86_64                                     3.6 MiB   448K/s 00:08 [##################] 100%
(34/34) キーリングのキーを確認                                                 [##################] 100%
(34/34) パッケージの整合性をチェック                                           [##################] 100%
(34/34) パッケージファイルのロード                                             [##################] 100%
(34/34) ファイルの衝突をチェック                                               [##################] 100%
(34/34) 空き容量を確認                                                         [##################] 100%
:: パッケージの変更を処理しています...
( 1/34) インストール expat                                                     [##################] 100%
( 2/34) インストール vim                                                       [##################] 100%
( 3/34) インストール heimdal                                                   [##################] 100%
( 4/34) インストール openssh                                                   [##################] 100%
( 5/34) インストール db                                                        [##################] 100%
( 6/34) インストール libgdbm                                                   [##################] 100%
( 7/34) インストール gdbm                                                      [##################] 100%
( 8/34) インストール perl                                                      [##################] 100%
( 9/34) インストール perl-Error                                                [##################] 100%
(10/34) インストール perl-Authen-SASL                                          [##################] 100%
(11/34) インストール perl-Encode-Locale                                        [##################] 100%
(12/34) インストール perl-HTTP-Date                                            [##################] 100%
(13/34) インストール perl-File-Listing                                         [##################] 100%
(14/34) インストール perl-HTML-Tagset                                          [##################] 100%
(15/34) インストール perl-HTML-Parser                                          [##################] 100%
(16/34) インストール perl-LWP-MediaTypes                                       [##################] 100%
(17/34) インストール perl-URI                                                  [##################] 100%
(18/34) インストール perl-HTTP-Message                                         [##################] 100%
(19/34) インストール perl-HTTP-Cookies                                         [##################] 100%
(20/34) インストール perl-HTTP-Daemon                                          [##################] 100%
(21/34) インストール perl-HTTP-Negotiate                                       [##################] 100%
(22/34) インストール perl-Net-HTTP                                             [##################] 100%
(23/34) インストール perl-WWW-RobotRules                                       [##################] 100%
(24/34) インストール perl-libwww                                               [##################] 100%
perl-libwww の提案パッケージ
    perl-LWP-Protocol-HTTPS: for https:// url schemes
(25/34) インストール perl-TimeDate                                             [##################] 100%
(26/34) インストール perl-MailTools                                            [##################] 100%
(27/34) インストール perl-IO-stringy                                           [##################] 100%
(28/34) インストール perl-Convert-BinHex                                       [##################] 100%
module test... pass.
(29/34) インストール perl-MIME-tools                                           [##################] 100%
(30/34) インストール perl-Net-SSLeay                                           [##################] 100%
(31/34) インストール perl-IO-Socket-SSL                                        [##################] 100%
(32/34) インストール perl-Net-SMTP-SSL                                         [##################] 100%
(33/34) インストール perl-TermReadKey                                          [##################] 100%
(34/34) インストール git                                                       [##################] 100%
git の提案パッケージ
    python2: various helper scripts
    subversion: git svn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てか，本当に最小限しか入ってないんだな（笑） 提案パッケージについては，とりあえずスルーする。&lt;/p&gt;

&lt;h3 id=&#34;msys2-のリポジトリ:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;MSYS2 のリポジトリ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/etc/pacman.conf&lt;/code&gt; を見ると MSYS2 では &lt;code&gt;mingw32&lt;/code&gt;, &lt;code&gt;mingw64&lt;/code&gt;, &lt;code&gt;msys&lt;/code&gt; の3つのリポジトリを管理していることが分かる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;リポジトリ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参照ファイル&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw32&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw64&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;msys&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.msys&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;実際には「参照ファイル」にリポジトリへの URI が書かれている。
たとえば &lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt; ならこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;##
## 32-bit Mingw-w64 repository mirrorlist
##

## Primary
## msys2.org
Server = http://repo.msys2.org/mingw/i686
Server = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686
Server = http://www2.futureware.at/~nickoe/msys2-mirror/i686/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では実際にリポジトリの中を覗いてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -Sl | grep gcc
mingw32 mingw-w64-i686-gcc 5.3.0-2
mingw32 mingw-w64-i686-gcc-ada 5.3.0-2
mingw32 mingw-w64-i686-gcc-fortran 5.3.0-2
mingw32 mingw-w64-i686-gcc-libgfortran 5.3.0-2
mingw32 mingw-w64-i686-gcc-libs 5.3.0-2
mingw32 mingw-w64-i686-gcc-objc 5.3.0-2
mingw64 mingw-w64-x86_64-gcc 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-ada 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-fortran 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-libgfortran 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-libs 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-objc 5.3.0-2
msys gcc 4.9.2-6
msys gcc-fortran 4.9.2-6
msys gcc-libs 4.9.2-6 [インストール済み]
msys mingw-w64-cross-gcc 4.9.2-3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どれを使うかはユーザ次第だが，今回は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 内ではなく Windows 環境で動作するアプリケーションを作りたいので， &lt;code&gt;mingw32&lt;/code&gt; および &lt;code&gt;mingw64&lt;/code&gt; リポジトリのものを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chromabox/items/fd07bad3f426101fc4a6&#34;&gt;Windowsでgccなどを利用できるMSYS2の環境設定など - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gcc-のインストール:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc のインストール&lt;/h2&gt;

&lt;p&gt;では gcc のインストールを始めよう。
今回は以下のパッケージグループを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-i686-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ものすごく分かりにくいが &lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt; が 64bit 用である。
ログがかなり長くなるがご容赦。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -S base-devel mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain
:: 51 のパッケージがグループ base-devel にあります:
:: リポジトリ msys
   1) asciidoc  2) autoconf  3) autoconf2.13  4) autogen  5) automake-wrapper  6) automake1.10
   7) automake1.11  8) automake1.12  9) automake1.13  10) automake1.14  11) automake1.15
   12) automake1.6  13) automake1.7  14) automake1.8  15) automake1.9  16) bison  17) diffstat
   18) diffutils  19) dos2unix  20) file  21) flex  22) gawk  23) gdb  24) gettext  25) gperf
   26) grep  27) groff  28) help2man  29) intltool  30) lemon  31) libtool  32) libunrar  33) m4
   34) make  35) man-db  36) pacman  37) patch  38) patchutils  39) perl  40) pkg-config  41) pkgfile
   42) rcs  43) scons  44) sed  45) swig  46) texinfo  47) texinfo-tex  48) ttyrec  49) unrar
   50) wget  51) xmlto

選択して下さい (デフォルト=all):
警告: file-5.25-1 は最新です -- 再インストール
警告: flex-2.6.0-1 は最新です -- 再インストール
警告: gawk-4.1.3-1 は最新です -- 再インストール
警告: gettext-0.19.6-1 は最新です -- 再インストール
警告: grep-2.22-1 は最新です -- 再インストール
警告: m4-1.4.17-4 は最新です -- 再インストール
警告: pacman-5.0.1.6388.dcb2397-1 は最新です -- 再インストール
警告: perl-5.22.0-2 は最新です -- 再インストール
警告: pkgfile-15-1 は最新です -- 再インストール
警告: sed-4.2.2-2 は最新です -- 再インストール
:: 16 のパッケージがグループ mingw-w64-i686-toolchain にあります:
:: リポジトリ mingw32
   1) mingw-w64-i686-binutils  2) mingw-w64-i686-crt-git  3) mingw-w64-i686-gcc
   4) mingw-w64-i686-gcc-ada  5) mingw-w64-i686-gcc-fortran  6) mingw-w64-i686-gcc-libgfortran
   7) mingw-w64-i686-gcc-libs  8) mingw-w64-i686-gcc-objc  9) mingw-w64-i686-gdb
   10) mingw-w64-i686-headers-git  11) mingw-w64-i686-libmangle-git
   12) mingw-w64-i686-libwinpthread-git  13) mingw-w64-i686-make  14) mingw-w64-i686-pkg-config
   15) mingw-w64-i686-tools-git  16) mingw-w64-i686-winpthreads-git

選択して下さい (デフォルト=all): 1 2 3 7 9 10 11 12 13 14 15 16
:: 16 のパッケージがグループ mingw-w64-x86_64-toolchain にあります:
:: リポジトリ mingw64
   1) mingw-w64-x86_64-binutils  2) mingw-w64-x86_64-crt-git  3) mingw-w64-x86_64-gcc
   4) mingw-w64-x86_64-gcc-ada  5) mingw-w64-x86_64-gcc-fortran  6) mingw-w64-x86_64-gcc-libgfortran
   7) mingw-w64-x86_64-gcc-libs  8) mingw-w64-x86_64-gcc-objc  9) mingw-w64-x86_64-gdb
   10) mingw-w64-x86_64-headers-git  11) mingw-w64-x86_64-libmangle-git
   12) mingw-w64-x86_64-libwinpthread-git  13) mingw-w64-x86_64-make  14) mingw-w64-x86_64-pkg-config
   15) mingw-w64-x86_64-tools-git  16) mingw-w64-x86_64-winpthreads-git

選択して下さい (デフォルト=all): 1 2 3 7 9 10 11 12 13 14 15 16
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (143) docbook-xml-4.5-2  docbook-xsl-1.78.1-3  glib2-2.44.1-1  libassuan-2.4.2-1
                 libgc-7.2.d-1  libgcrypt-1.6.4-1  libgpg-error-1.21-1  libgpgme-1.6.0-1
                 libguile-2.0.11-3  libltdl-2.4.6-1  libpipeline-1.4.0-1  libunistring-0.9.6-1
                 libxslt-1.1.28-7  mingw-w64-i686-bzip2-1.0.6-5
                 mingw-w64-i686-ca-certificates-20150426-2
                 mingw-w64-i686-expat-2.1.0-6  mingw-w64-i686-gdbm-1.11-3
                 mingw-w64-i686-gettext-0.19.6-2  mingw-w64-i686-gmp-6.1.0-1
                 mingw-w64-i686-isl-0.15-1  mingw-w64-i686-libffi-3.2.1-3
                 mingw-w64-i686-libiconv-1.14-5  mingw-w64-i686-libsystre-1.0.1-2
                 mingw-w64-i686-libtasn1-4.7-1  mingw-w64-i686-libtre-git-r122.c2f5d13-4
                 mingw-w64-i686-mpc-1.0.3-2  mingw-w64-i686-mpfr-3.1.3.p0-2
                 mingw-w64-i686-ncurses-6.0.20160220-1  mingw-w64-i686-openssl-1.0.2.f-1
                 mingw-w64-i686-p11-kit-0.23.1-3  mingw-w64-i686-python2-2.7.11-2
                 mingw-w64-i686-readline-6.3.008-1  mingw-w64-i686-tcl-8.6.4-2
                 mingw-w64-i686-termcap-1.3.1-2  mingw-w64-i686-tk-8.6.4-2
                 mingw-w64-i686-windows-default-manifest-6.4-2  mingw-w64-i686-zlib-1.2.8-9
                 mingw-w64-x86_64-bzip2-1.0.6-5  mingw-w64-x86_64-ca-certificates-20150426-2
                 mingw-w64-x86_64-expat-2.1.0-6  mingw-w64-x86_64-gdbm-1.11-3
                 mingw-w64-x86_64-gettext-0.19.6-2  mingw-w64-x86_64-gmp-6.1.0-1
                 mingw-w64-x86_64-isl-0.15-1  mingw-w64-x86_64-libffi-3.2.1-3
                 mingw-w64-x86_64-libiconv-1.14-5  mingw-w64-x86_64-libsystre-1.0.1-2
                 mingw-w64-x86_64-libtasn1-4.7-1  mingw-w64-x86_64-libtre-git-r122.c2f5d13-4
                 mingw-w64-x86_64-mpc-1.0.3-2  mingw-w64-x86_64-mpfr-3.1.3.p0-2
                 mingw-w64-x86_64-ncurses-6.0.20160220-1  mingw-w64-x86_64-openssl-1.0.2.f-1
                 mingw-w64-x86_64-p11-kit-0.23.1-3  mingw-w64-x86_64-python2-2.7.11-2
                 mingw-w64-x86_64-readline-6.3.008-1  mingw-w64-x86_64-tcl-8.6.4-2
                 mingw-w64-x86_64-termcap-1.3.1-2  mingw-w64-x86_64-tk-8.6.4-2
                 mingw-w64-x86_64-windows-default-manifest-6.4-2  mingw-w64-x86_64-zlib-1.2.8-9
                 perl-Locale-Gettext-1.05-4  perl-Module-Build-0.4212-1  perl-Test-Pod-1.50-1
                 perl-XML-Parser-2.44-1  perl-YAML-Syck-1.29-1  python2-2.7.10-1  tar-1.28-3
                 asciidoc-8.6.9-4  autoconf-2.69-3  autoconf2.13-2.13-2  autogen-5.18.4-2
                 automake-wrapper-10-1  automake1.10-1.10.3-3  automake1.11-1.11.6-3
                 automake1.12-1.12.6-3  automake1.13-1.13.4-4  automake1.14-1.14.1-3
                 automake1.15-1.15-2  automake1.6-1.6.3-2  automake1.7-1.7.9-2  automake1.8-1.8.5-3
                 automake1.9-1.9.6-2  bison-3.0.4-1  diffstat-1.58-1  diffutils-3.3-3
                 dos2unix-7.3.3-1  file-5.25-1  flex-2.6.0-1  gawk-4.1.3-1  gdb-7.9-1
                 gettext-0.19.6-1  gperf-3.0.4-3  grep-2.22-1  groff-1.22.3-1  help2man-1.47.3-1
                 intltool-0.51.0-2  lemon-3.8.7.0-1  libtool-2.4.6-1  libunrar-5.3.7-1  m4-1.4.17-4
                 make-4.1-4  man-db-2.7.4-1  mingw-w64-i686-binutils-2.25.1-2
                 mingw-w64-i686-crt-git-5.0.0.4627.d55f21d-1  mingw-w64-i686-gcc-5.3.0-2
                 mingw-w64-i686-gcc-libs-5.3.0-2  mingw-w64-i686-gdb-7.11-1
                 mingw-w64-i686-headers-git-5.0.0.4627.6baeb9d-1
                 mingw-w64-i686-libmangle-git-5.0.0.4509.2e5a9a2-1
                 mingw-w64-i686-libwinpthread-git-5.0.0.4573.628fdbf-1
                 mingw-w64-i686-make-4.1.2351.a80a8b8-1  mingw-w64-i686-pkg-config-0.29-1
                 mingw-w64-i686-tools-git-5.0.0.4592.90b8472-1
                 mingw-w64-i686-winpthreads-git-5.0.0.4573.628fdbf-1
                 mingw-w64-x86_64-binutils-2.25.1-2  mingw-w64-x86_64-crt-git-5.0.0.4627.03684c4-1
                 mingw-w64-x86_64-gcc-5.3.0-2  mingw-w64-x86_64-gcc-libs-5.3.0-2
                 mingw-w64-x86_64-gdb-7.11-1  mingw-w64-x86_64-headers-git-5.0.0.4627.53be55d-1
                 mingw-w64-x86_64-libmangle-git-5.0.0.4509.2e5a9a2-1
                 mingw-w64-x86_64-libwinpthread-git-5.0.0.4573.628fdbf-1
                 mingw-w64-x86_64-make-4.1.2351.a80a8b8-1  mingw-w64-x86_64-pkg-config-0.29-1
                 mingw-w64-x86_64-tools-git-5.0.0.4592.90b8472-1
                 mingw-w64-x86_64-winpthreads-git-5.0.0.4573.628fdbf-1  pacman-5.0.1.6388.dcb2397-1
                 patch-2.7.5-1  patchutils-0.3.3-2  perl-5.22.0-2  pkg-config-0.28-2  pkgfile-15-1
                 rcs-5.9.4-1  scons-2.4.1-2  sed-4.2.2-2  swig-3.0.7-1  texinfo-6.0-1
                 texinfo-tex-6.0-1  ttyrec-1.0.8-1  unrar-5.3.7-1  wget-1.17.1-2  xmlto-0.0.26-2

合計ダウンロード容量:   186.38 MiB
合計インストール容量:  1221.31 MiB
最終的なアップグレード容量:  1124.41 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 mingw-w64-i686-libiconv-1.14-5-any                   602.2 KiB   929K/s 00:01 [##################] 100%
 mingw-w64-i686-gmp-6.1.0-1-any                       459.3 KiB   947K/s 00:00 [##################] 100%
 mingw-w64-i686-libwinpthread-git-5.0.0.4573.628...    27.1 KiB  8.84M/s 00:00 [##################] 100%
 mingw-w64-i686-gcc-libs-5.3.0-2-any                  609.8 KiB   944K/s 00:01 [##################] 100%
 mingw-w64-i686-bzip2-1.0.6-5-any                      75.5 KiB  9.21M/s 00:00 [##################] 100%
 mingw-w64-i686-zlib-1.2.8-9-any                      153.2 KiB   471K/s 00:00 [##################] 100%
 mingw-w64-i686-binutils-2.25.1-2-any                  10.3 MiB  1080K/s 00:10 [##################] 100%
 mingw-w64-i686-headers-git-5.0.0.4627.6baeb9d-1-any    5.0 MiB  1244K/s 00:04 [##################] 100%
 mingw-w64-i686-crt-git-5.0.0.4627.d55f21d-1-any     1701.9 KiB   888K/s 00:02 [##################] 100%
 mingw-w64-i686-isl-0.15-1-any                        539.7 KiB   843K/s 00:01 [##################] 100%
 mingw-w64-i686-mpfr-3.1.3.p0-2-any                   258.0 KiB   809K/s 00:00 [##################] 100%
 mingw-w64-i686-mpc-1.0.3-2-any                        62.3 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-i686-windows-default-manifest-6.4-2-any   1472.0   B  0.00B/s 00:00 [##################] 100%
 mingw-w64-i686-winpthreads-git-5.0.0.4573.628fd...    35.1 KiB  11.4M/s 00:00 [##################] 100%
 mingw-w64-i686-gcc-5.3.0-2-any                        24.6 MiB  1222K/s 00:21 [##################] 100%
 mingw-w64-i686-expat-2.1.0-6-any                     107.1 KiB  9.51M/s 00:00 [##################] 100%
 mingw-w64-i686-gettext-0.19.6-2-any                    3.0 MiB   808K/s 00:04 [##################] 100%
 mingw-w64-i686-gdbm-1.11-3-any                       150.1 KiB   313K/s 00:00 [##################] 100%
 mingw-w64-i686-libffi-3.2.1-3-any                     36.3 KiB  17.7M/s 00:00 [##################] 100%
 mingw-w64-i686-libtre-git-r122.c2f5d13-4-any          69.1 KiB  11.3M/s 00:00 [##################] 100%
 mingw-w64-i686-libsystre-1.0.1-2-any                   9.1 KiB  0.00B/s 00:00 [##################] 100%
 mingw-w64-i686-ncurses-6.0.20160220-1-any           1747.2 KiB   918K/s 00:02 [##################] 100%
 mingw-w64-i686-libtasn1-4.7-1-any                    171.3 KiB   268K/s 00:01 [##################] 100%
 mingw-w64-i686-p11-kit-0.23.1-3-any                  198.0 KiB   630K/s 00:00 [##################] 100%
 mingw-w64-i686-ca-certificates-20150426-2-any        382.4 KiB   797K/s 00:00 [##################] 100%
 mingw-w64-i686-openssl-1.0.2.f-1-any                   2.7 MiB   986K/s 00:03 [##################] 100%
 mingw-w64-i686-termcap-1.3.1-2-any                    12.3 KiB  12.0M/s 00:00 [##################] 100%
 mingw-w64-i686-readline-6.3.008-1-any                327.2 KiB   986K/s 00:00 [##################] 100%
 mingw-w64-i686-tcl-8.6.4-2-any                         2.8 MiB  1151K/s 00:03 [##################] 100%
 mingw-w64-i686-tk-8.6.4-2-any                       1874.2 KiB  1180K/s 00:02 [##################] 100%
 mingw-w64-i686-python2-2.7.11-2-any                   10.8 MiB  1286K/s 00:09 [##################] 100%
 mingw-w64-i686-gdb-7.11-1-any                          2.8 MiB   995K/s 00:03 [##################] 100%
 mingw-w64-i686-libmangle-git-5.0.0.4509.2e5a9a2...    16.5 KiB  8.07M/s 00:00 [##################] 100%
 mingw-w64-i686-make-4.1.2351.a80a8b8-1-any           105.3 KiB  9.34M/s 00:00 [##################] 100%
 mingw-w64-i686-pkg-config-0.29-1-any                 235.8 KiB   741K/s 00:00 [##################] 100%
 mingw-w64-i686-tools-git-5.0.0.4592.90b8472-1-any    235.1 KiB   742K/s 00:00 [##################] 100%
 mingw-w64-x86_64-libiconv-1.14-5-any                 600.2 KiB   757K/s 00:01 [##################] 100%
 mingw-w64-x86_64-gmp-6.1.0-1-any                     477.1 KiB   756K/s 00:01 [##################] 100%
 mingw-w64-x86_64-libwinpthread-git-5.0.0.4573.6...    24.2 KiB  7.87M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gcc-libs-5.3.0-2-any                541.9 KiB   845K/s 00:01 [##################] 100%
 mingw-w64-x86_64-bzip2-1.0.6-5-any                    77.9 KiB  10.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-zlib-1.2.8-9-any                    148.6 KiB   472K/s 00:00 [##################] 100%
 mingw-w64-x86_64-binutils-2.25.1-2-any                11.9 MiB  1245K/s 00:10 [##################] 100%
 mingw-w64-x86_64-headers-git-5.0.0.4627.53be55d...     5.0 MiB  1117K/s 00:05 [##################] 100%
 mingw-w64-x86_64-crt-git-5.0.0.4627.03684c4-1-any      2.6 MiB  1002K/s 00:03 [##################] 100%
 mingw-w64-x86_64-isl-0.15-1-any                      524.3 KiB   830K/s 00:01 [##################] 100%
 mingw-w64-x86_64-mpfr-3.1.3.p0-2-any                 265.2 KiB   831K/s 00:00 [##################] 100%
 mingw-w64-x86_64-mpc-1.0.3-2-any                      62.3 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-x86_64-windows-default-manifest-6.4-2-any 1484.0   B  0.00B/s 00:00 [##################] 100%
 mingw-w64-x86_64-winpthreads-git-5.0.0.4573.628...    33.2 KiB  8.11M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gcc-5.3.0-2-any                      25.1 MiB  1270K/s 00:20 [##################] 100%
 mingw-w64-x86_64-expat-2.1.0-6-any                   106.7 KiB  9.47M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gettext-0.19.6-2-any                  3.0 MiB  1214K/s 00:03 [##################] 100%
 mingw-w64-x86_64-gdbm-1.11-3-any                     151.8 KiB   315K/s 00:00 [##################] 100%
 mingw-w64-x86_64-libffi-3.2.1-3-any                   34.5 KiB  16.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-libtre-git-r122.c2f5d13-4-any        69.2 KiB  11.3M/s 00:00 [##################] 100%
 mingw-w64-x86_64-libsystre-1.0.1-2-any                 9.3 KiB  9.11M/s 00:00 [##################] 100%
 mingw-w64-x86_64-ncurses-6.0.20160220-1-any         1794.3 KiB  1133K/s 00:02 [##################] 100%
 mingw-w64-x86_64-libtasn1-4.7-1-any                  171.4 KiB   353K/s 00:00 [##################] 100%
 mingw-w64-x86_64-p11-kit-0.23.1-3-any                193.5 KiB   610K/s 00:00 [##################] 100%
 mingw-w64-x86_64-ca-certificates-20150426-2-any      382.1 KiB   799K/s 00:00 [##################] 100%
 mingw-w64-x86_64-openssl-1.0.2.f-1-any                 3.3 MiB   984K/s 00:03 [##################] 100%
 mingw-w64-x86_64-termcap-1.3.1-2-any                  12.6 KiB  12.3M/s 00:00 [##################] 100%
 mingw-w64-x86_64-readline-6.3.008-1-any              327.4 KiB   992K/s 00:00 [##################] 100%
 mingw-w64-x86_64-tcl-8.6.4-2-any                       2.8 MiB  1070K/s 00:03 [##################] 100%
 mingw-w64-x86_64-tk-8.6.4-2-any                     1869.4 KiB  1158K/s 00:02 [##################] 100%
 mingw-w64-x86_64-python2-2.7.11-2-any                 10.9 MiB  1132K/s 00:10 [##################] 100%
 mingw-w64-x86_64-gdb-7.11-1-any                        2.8 MiB  1119K/s 00:03 [##################] 100%
 mingw-w64-x86_64-libmangle-git-5.0.0.4509.2e5a9...    16.3 KiB  15.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-make-4.1.2351.a80a8b8-1-any         103.2 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-x86_64-pkg-config-0.29-1-any               226.1 KiB   691K/s 00:00 [##################] 100%
 mingw-w64-x86_64-tools-git-5.0.0.4592.90b8472-1-any  247.0 KiB   774K/s 00:00 [##################] 100%
 python2-2.7.10-1-x86_64                               10.0 MiB  1138K/s 00:09 [##################] 100%
 libgpg-error-1.21-1-x86_64                           103.8 KiB  11.3M/s 00:00 [##################] 100%
 libgcrypt-1.6.4-1-x86_64                             337.7 KiB  1014K/s 00:00 [##################] 100%
 gettext-0.19.6-1-x86_64                             1441.4 KiB  1131K/s 00:01 [##################] 100%
 libxslt-1.1.28-7-x86_64                              121.8 KiB   372K/s 00:00 [##################] 100%
 docbook-xml-4.5-2-any                                 81.4 KiB  64.8K/s 00:01 [##################] 100%
 docbook-xsl-1.78.1-3-any                             714.3 KiB   197K/s 00:04 [##################] 100%
 asciidoc-8.6.9-4-any                                 173.6 KiB  1052K/s 00:00 [##################] 100%
 gawk-4.1.3-1-x86_64                                  951.1 KiB   755K/s 00:01 [##################] 100%
 m4-1.4.17-4-x86_64                                   200.8 KiB   637K/s 00:00 [##################] 100%
 diffutils-3.3-3-x86_64                               265.7 KiB   557K/s 00:00 [##################] 100%
 autoconf-2.69-3-any                                  584.6 KiB   615K/s 00:01 [##################] 100%
 autoconf2.13-2.13-2-any                              134.8 KiB   843K/s 00:00 [##################] 100%
 libgc-7.2.d-1-x86_64                                  60.2 KiB  8.40M/s 00:00 [##################] 100%
 libltdl-2.4.6-1-x86_64                                28.0 KiB  9.13M/s 00:00 [##################] 100%
 libunistring-0.9.6-1-x86_64                          492.2 KiB   769K/s 00:01 [##################] 100%
 libguile-2.0.11-3-x86_64                               2.1 MiB   822K/s 00:03 [##################] 100%
 autogen-5.18.4-2-x86_64                              623.9 KiB   792K/s 00:01 [##################] 100%
 automake1.6-1.6.3-2-any                              253.6 KiB   793K/s 00:00 [##################] 100%
 automake1.7-1.7.9-2-any                              296.0 KiB   911K/s 00:00 [##################] 100%
 automake1.8-1.8.5-3-any                              342.9 KiB   719K/s 00:00 [##################] 100%
 automake1.9-1.9.6-2-any                              385.5 KiB   805K/s 00:00 [##################] 100%
 automake1.10-1.10.3-3-any                            439.6 KiB   698K/s 00:01 [##################] 100%
 automake1.11-1.11.6-3-any                            489.5 KiB   622K/s 00:01 [##################] 100%
 automake1.12-1.12.6-3-any                            502.4 KiB   786K/s 00:01 [##################] 100%
 automake1.13-1.13.4-4-any                            500.0 KiB   778K/s 00:01 [##################] 100%
 automake1.14-1.14.1-3-any                            502.2 KiB   792K/s 00:01 [##################] 100%
 automake1.15-1.15-2-any                              502.0 KiB   781K/s 00:01 [##################] 100%
 automake-wrapper-10-1-any                              3.0 KiB  0.00B/s 00:00 [##################] 100%
 bison-3.0.4-1-x86_64                                1045.1 KiB   914K/s 00:01 [##################] 100%
 diffstat-1.58-1-x86_64                                20.8 KiB  20.3M/s 00:00 [##################] 100%
 dos2unix-7.3.3-1-x86_64                              311.7 KiB   950K/s 00:00 [##################] 100%
 flex-2.6.0-1-x86_64                                  280.4 KiB   863K/s 00:00 [##################] 100%
 gdb-7.9-1-x86_64                                       3.4 MiB  1030K/s 00:03 [##################] 100%
 gperf-3.0.4-3-x86_64                                  93.6 KiB  9.14M/s 00:00 [##################] 100%
 grep-2.22-1-x86_64                                   220.7 KiB   655K/s 00:00 [##################] 100%
 groff-1.22.3-1-x86_64                               1776.5 KiB  1099K/s 00:02 [##################] 100%
 perl-Locale-Gettext-1.05-4-x86_64                     11.0 KiB  10.7M/s 00:00 [##################] 100%
 help2man-1.47.3-1-x86_64                             142.3 KiB   426K/s 00:00 [##################] 100%
 perl-XML-Parser-2.44-1-x86_64                        142.7 KiB   176K/s 00:01 [##################] 100%
 intltool-0.51.0-2-x86_64                              39.4 KiB  9.61M/s 00:00 [##################] 100%
 lemon-3.8.7.0-1-x86_64                                35.2 KiB  11.5M/s 00:00 [##################] 100%
 tar-1.28-3-x86_64                                    671.9 KiB   821K/s 00:01 [##################] 100%
 libtool-2.4.6-1-x86_64                               381.6 KiB   779K/s 00:00 [##################] 100%
 libunrar-5.3.7-1-x86_64                              138.8 KiB   836K/s 00:00 [##################] 100%
 make-4.1-4-x86_64                                    387.0 KiB   791K/s 00:00 [##################] 100%
 libpipeline-1.4.0-1-x86_64                            25.7 KiB  8.36M/s 00:00 [##################] 100%
 man-db-2.7.4-1-x86_64                                477.0 KiB   739K/s 00:01 [##################] 100%
 sed-4.2.2-2-x86_64                                   671.9 KiB   689K/s 00:01 [##################] 100%
 patch-2.7.5-1-x86_64                                  75.9 KiB  10.6M/s 00:00 [##################] 100%
 patchutils-0.3.3-2-x86_64                             64.7 KiB  10.5M/s 00:00 [##################] 100%
 glib2-2.44.1-1-x86_64                               1689.1 KiB   747K/s 00:02 [##################] 100%
 pkg-config-0.28-2-x86_64                             159.4 KiB   333K/s 00:00 [##################] 100%
 pkgfile-15-1-x86_64                                   21.4 KiB  10.5M/s 00:00 [##################] 100%
 rcs-5.9.4-1-x86_64                                   164.1 KiB   508K/s 00:00 [##################] 100%
 scons-2.4.1-2-any                                    786.9 KiB   448K/s 00:02 [##################] 100%
 swig-3.0.7-1-x86_64                                 1023.2 KiB   709K/s 00:01 [##################] 100%
 texinfo-6.0-1-x86_64                                 992.7 KiB   768K/s 00:01 [##################] 100%
 texinfo-tex-6.0-1-x86_64                              25.0 KiB  12.2M/s 00:00 [##################] 100%
 ttyrec-1.0.8-1-x86_64                                 17.4 KiB  17.0M/s 00:00 [##################] 100%
 unrar-5.3.7-1-x86_64                                 110.6 KiB   203K/s 00:01 [##################] 100%
 libassuan-2.4.2-1-x86_64                              91.7 KiB  35.8K/s 00:03 [##################] 100%
 libgpgme-1.6.0-1-x86_64                              175.7 KiB  84.3K/s 00:02 [##################] 100%
 wget-1.17.1-2-x86_64                                 570.7 KiB   275K/s 00:02 [##################] 100%
 perl-YAML-Syck-1.29-1-x86_64                          60.7 KiB  9.88M/s 00:00 [##################] 100%
 perl-Module-Build-0.4212-1-any                       172.0 KiB   534K/s 00:00 [##################] 100%
 perl-Test-Pod-1.50-1-any                               8.0 KiB  0.00B/s 00:00 [##################] 100%
 xmlto-0.0.26-2-x86_64                                 23.5 KiB  7.66M/s 00:00 [##################] 100%
(143/143) キーリングのキーを確認                                               [##################] 100%
(143/143) パッケージの整合性をチェック                                         [##################] 100%
(143/143) パッケージファイルのロード                                           [##################] 100%
(143/143) ファイルの衝突をチェック                                             [##################] 100%
(143/143) 空き容量を確認                                                       [##################] 100%
:: パッケージの変更を処理しています...
(  1/143) インストール python2                                                 [##################] 100%
(  2/143) インストール libgpg-error                                            [##################] 100%
(  3/143) インストール libgcrypt                                               [##################] 100%
(  4/143) 再インストール gettext                                               [##################] 100%
(  5/143) インストール libxslt                                                 [##################] 100%
(  6/143) インストール docbook-xml                                             [##################] 100%
(  7/143) インストール docbook-xsl                                             [##################] 100%
(  8/143) インストール asciidoc                                                [##################] 100%
(  9/143) 再インストール gawk                                                  [##################] 100%
( 10/143) 再インストール m4                                                    [##################] 100%
( 11/143) インストール diffutils                                               [##################] 100%
( 12/143) インストール autoconf                                                [##################] 100%
( 13/143) インストール autoconf2.13                                            [##################] 100%
( 14/143) インストール libgc                                                   [##################] 100%
( 15/143) インストール libltdl                                                 [##################] 100%
( 16/143) インストール libunistring                                            [##################] 100%
( 17/143) インストール libguile                                                [##################] 100%
( 18/143) インストール autogen                                                 [##################] 100%
( 19/143) 再インストール perl                                                  [##################] 100%
( 20/143) インストール automake1.6                                             [##################] 100%
( 21/143) インストール automake1.7                                             [##################] 100%
( 22/143) インストール automake1.8                                             [##################] 100%
( 23/143) インストール automake1.9                                             [##################] 100%
( 24/143) インストール automake1.10                                            [##################] 100%
( 25/143) インストール automake1.11                                            [##################] 100%
( 26/143) インストール automake1.12                                            [##################] 100%
( 27/143) インストール automake1.13                                            [##################] 100%
( 28/143) インストール automake1.14                                            [##################] 100%
( 29/143) インストール automake1.15                                            [##################] 100%
( 30/143) インストール automake-wrapper                                        [##################] 100%
( 31/143) インストール bison                                                   [##################] 100%
( 32/143) インストール diffstat                                                [##################] 100%
( 33/143) インストール dos2unix                                                [##################] 100%
( 34/143) 再インストール file                                                  [##################] 100%
( 35/143) 再インストール flex                                                  [##################] 100%
( 36/143) インストール gdb                                                     [##################] 100%
( 37/143) インストール gperf                                                   [##################] 100%
( 38/143) 再インストール grep                                                  [##################] 100%
( 39/143) インストール groff                                                   [##################] 100%
( 40/143) インストール perl-Locale-Gettext                                     [##################] 100%
( 41/143) インストール help2man                                                [##################] 100%
( 42/143) インストール perl-XML-Parser                                         [##################] 100%
( 43/143) インストール intltool                                                [##################] 100%
( 44/143) インストール lemon                                                   [##################] 100%
( 45/143) インストール tar                                                     [##################] 100%
( 46/143) インストール libtool                                                 [##################] 100%
( 47/143) インストール libunrar                                                [##################] 100%
( 48/143) インストール make                                                    [##################] 100%
( 49/143) インストール libpipeline                                             [##################] 100%
( 50/143) インストール man-db                                                  [##################] 100%
it&#39;s recommended to create an initial
database running as root:
&amp;quot;/usr/bin/mandb --quiet&amp;quot;
man-db の提案パッケージ
    gzip [インストール済み]
( 51/143) 再インストール sed                                                   [##################] 100%
( 52/143) 再インストール pacman                                                [##################] 100%
( 53/143) インストール patch                                                   [##################] 100%
patch の提案パッケージ
    ed: for patch -e functionality
( 54/143) インストール patchutils                                              [##################] 100%
( 55/143) インストール glib2                                                   [##################] 100%
glib2 の提案パッケージ
    gamin: for gio fam module
    python2: for gdbus-codegen and gtester-report [インストール済み]
( 56/143) インストール pkg-config                                              [##################] 100%
( 57/143) 再インストール pkgfile                                               [##################] 100%
( 58/143) インストール rcs                                                     [##################] 100%
( 59/143) インストール scons                                                   [##################] 100%
( 60/143) インストール swig                                                    [##################] 100%
( 61/143) インストール texinfo                                                 [##################] 100%
( 62/143) インストール texinfo-tex                                             [##################] 100%
( 63/143) インストール ttyrec                                                  [##################] 100%
( 64/143) インストール unrar                                                   [##################] 100%
( 65/143) インストール libassuan                                               [##################] 100%
( 66/143) インストール libgpgme                                                [##################] 100%
( 67/143) インストール wget                                                    [##################] 100%
wget の提案パッケージ
    ca-certificates: HTTPS downloads [インストール済み]
( 68/143) インストール perl-YAML-Syck                                          [##################] 100%
( 69/143) インストール perl-Module-Build                                       [##################] 100%
( 70/143) インストール perl-Test-Pod                                           [##################] 100%
( 71/143) インストール xmlto                                                   [##################] 100%
( 72/143) インストール mingw-w64-i686-libiconv                                 [##################] 100%
( 73/143) インストール mingw-w64-i686-gmp                                      [##################] 100%
( 74/143) インストール mingw-w64-i686-libwinpthread-git                        [##################] 100%
( 75/143) インストール mingw-w64-i686-gcc-libs                                 [##################] 100%
( 76/143) インストール mingw-w64-i686-bzip2                                    [##################] 100%
( 77/143) インストール mingw-w64-i686-zlib                                     [##################] 100%
( 78/143) インストール mingw-w64-i686-binutils                                 [##################] 100%
( 79/143) インストール mingw-w64-i686-headers-git                              [##################] 100%
( 80/143) インストール mingw-w64-i686-crt-git                                  [##################] 100%
( 81/143) インストール mingw-w64-i686-isl                                      [##################] 100%
( 82/143) インストール mingw-w64-i686-mpfr                                     [##################] 100%
( 83/143) インストール mingw-w64-i686-mpc                                      [##################] 100%
( 84/143) インストール mingw-w64-i686-windows-default-manifest                 [##################] 100%
( 85/143) インストール mingw-w64-i686-winpthreads-git                          [##################] 100%
( 86/143) インストール mingw-w64-i686-gcc                                      [##################] 100%
( 87/143) インストール mingw-w64-i686-expat                                    [##################] 100%
( 88/143) インストール mingw-w64-i686-gettext                                  [##################] 100%
( 89/143) インストール mingw-w64-i686-gdbm                                     [##################] 100%
( 90/143) インストール mingw-w64-i686-libffi                                   [##################] 100%
( 91/143) インストール mingw-w64-i686-libtre-git                               [##################] 100%
( 92/143) インストール mingw-w64-i686-libsystre                                [##################] 100%
( 93/143) インストール mingw-w64-i686-ncurses                                  [##################] 100%
( 94/143) インストール mingw-w64-i686-libtasn1                                 [##################] 100%
( 95/143) インストール mingw-w64-i686-p11-kit                                  [##################] 100%
( 96/143) インストール mingw-w64-i686-ca-certificates                          [##################] 100%
( 97/143) インストール mingw-w64-i686-openssl                                  [##################] 100%
( 98/143) インストール mingw-w64-i686-termcap                                  [##################] 100%
( 99/143) インストール mingw-w64-i686-readline                                 [##################] 100%
(100/143) インストール mingw-w64-i686-tcl                                      [##################] 100%
(101/143) インストール mingw-w64-i686-tk                                       [##################] 100%
(102/143) インストール mingw-w64-i686-python2                                  [##################] 100%
(103/143) インストール mingw-w64-i686-gdb                                      [##################] 100%
(104/143) インストール mingw-w64-i686-libmangle-git                            [##################] 100%
(105/143) インストール mingw-w64-i686-make                                     [##################] 100%
(106/143) インストール mingw-w64-i686-pkg-config                               [##################] 100%
(107/143) インストール mingw-w64-i686-tools-git                                [##################] 100%
(108/143) インストール mingw-w64-x86_64-libiconv                               [##################] 100%
(109/143) インストール mingw-w64-x86_64-gmp                                    [##################] 100%
(110/143) インストール mingw-w64-x86_64-libwinpthread-git                      [##################] 100%
(111/143) インストール mingw-w64-x86_64-gcc-libs                               [##################] 100%
(112/143) インストール mingw-w64-x86_64-bzip2                                  [##################] 100%
(113/143) インストール mingw-w64-x86_64-zlib                                   [##################] 100%
(114/143) インストール mingw-w64-x86_64-binutils                               [##################] 100%
(115/143) インストール mingw-w64-x86_64-headers-git                            [##################] 100%
(116/143) インストール mingw-w64-x86_64-crt-git                                [##################] 100%
(117/143) インストール mingw-w64-x86_64-isl                                    [##################] 100%
(118/143) インストール mingw-w64-x86_64-mpfr                                   [##################] 100%
(119/143) インストール mingw-w64-x86_64-mpc                                    [##################] 100%
(120/143) インストール mingw-w64-x86_64-windows-default-manifest               [##################] 100%
(121/143) インストール mingw-w64-x86_64-winpthreads-git                        [##################] 100%
(122/143) インストール mingw-w64-x86_64-gcc                                    [##################] 100%
(123/143) インストール mingw-w64-x86_64-expat                                  [##################] 100%
(124/143) インストール mingw-w64-x86_64-gettext                                [##################] 100%
(125/143) インストール mingw-w64-x86_64-gdbm                                   [##################] 100%
(126/143) インストール mingw-w64-x86_64-libffi                                 [##################] 100%
(127/143) インストール mingw-w64-x86_64-libtre-git                             [##################] 100%
(128/143) インストール mingw-w64-x86_64-libsystre                              [##################] 100%
(129/143) インストール mingw-w64-x86_64-ncurses                                [##################] 100%
(130/143) インストール mingw-w64-x86_64-libtasn1                               [##################] 100%
(131/143) インストール mingw-w64-x86_64-p11-kit                                [##################] 100%
(132/143) インストール mingw-w64-x86_64-ca-certificates                        [##################] 100%
(133/143) インストール mingw-w64-x86_64-openssl                                [##################] 100%
(134/143) インストール mingw-w64-x86_64-termcap                                [##################] 100%
(135/143) インストール mingw-w64-x86_64-readline                               [##################] 100%
(136/143) インストール mingw-w64-x86_64-tcl                                    [##################] 100%
(137/143) インストール mingw-w64-x86_64-tk                                     [##################] 100%
(138/143) インストール mingw-w64-x86_64-python2                                [##################] 100%
(139/143) インストール mingw-w64-x86_64-gdb                                    [##################] 100%
(140/143) インストール mingw-w64-x86_64-libmangle-git                          [##################] 100%
(141/143) インストール mingw-w64-x86_64-make                                   [##################] 100%
(142/143) インストール mingw-w64-x86_64-pkg-config                             [##################] 100%
(143/143) インストール mingw-w64-x86_64-tools-git                              [##################] 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;base-devel&lt;/code&gt; は面倒なので全てインストール。
一部が再インストールされたが問題はなさそう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
gcc を含む toolchain については Ada, FORTRAN, Object-C の言語パッケージを除いたものをインストールした。&lt;/p&gt;

&lt;h3 id=&#34;gcc-の動作確認:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc の動作確認&lt;/h3&gt;

&lt;p&gt;まずは 32bit 版の動作確認。
&lt;code&gt;mingw32_shell.bat&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW32&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MINGW32 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw32\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw32/bin/../lib/gcc/i686-w64-mingw32/5.3.0/lto-wrapper.exe
Target: i686-w64-mingw32
Configured with: ../gcc-5.3.0/configure --prefix=/mingw32 --with-local-prefix=/mingw32/local --build=i686-w64-mingw32 --host=i686-w64-mingw32 --target=i686-w64-mingw32 --with-native-system-header-dir=/mingw32/i686-w64-mingw32/include --libexecdir=/mingw32/lib --with-gxx-include-dir=/mingw32/include/c++/5.3.0 --enable-bootstrap --with-arch=i686 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw32 --with-mpfr=/mingw32 --with-mpc=/mingw32 --with-isl=/mingw32 --with-pkgversion=&#39;Rev2, Built by MSYS2 project&#39; --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld --disable-sjlj-exceptions --with-dwarf2
Thread model: posix
gcc version 5.3.0 (Rev2, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に 64bit 版の動作確認。
動作確認には &lt;code&gt;mingw64_shell.bat&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW64&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MINGW64 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw64\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../gcc-5.3.0/configure --prefix=/mingw64 --with-local-prefix=/mingw64/local --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --with-native-system-header-dir=/mingw64/x86_64-w64-mingw32/include --libexecdir=/mingw64/lib --with-gxx-include-dir=/mingw64/include/c++/5.3.0 --enable-bootstrap --with-arch=x86-64 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw64 --with-mpfr=/mingw64 --with-mpc=/mingw64 --with-isl=/mingw64 --with-pkgversion=&#39;Rev2, Built by MSYS2 project&#39; --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld
Thread model: posix
gcc version 5.3.0 (Rev2, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターゲット名が &lt;code&gt;x86_64-w64-mingw32&lt;/code&gt; となっていて非常に分かりにくいが， mingw32 版では &lt;code&gt;i686-w64-mingw32&lt;/code&gt; となっているので，なんとか区別して欲しい。&lt;/p&gt;

&lt;h2 id=&#34;gcc-のスレッドモデルと例外処理:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc のスレッドモデルと例外処理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; で提供される gcc のスレッドモデルと例外処理は以下のようになっているらしい。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;On MSYS2 I maintain only one configuration:&lt;br&gt;
32-bit: threads=posix, exceptions=dwarf&lt;br&gt;
64-bit: threads=posix, exceptions=seh&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://sourceforge.net/p/msys2/tickets/24/&#34;&gt;MSYS2 / Tickets / #24 Mingw64 downloads through msys2?&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のベースになっている &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のスレッドモデルには win32 と posix が提供されている。 win32 は Windows ネイティブなスレッド関連関数を使っているため速いが， C++11 の thread, mutex, future はサポートしていないらしい。
一方，例外処理には SJLJ（SetJump/LongJump）， &lt;a href=&#34;http://ja.wikipedia.org/wiki/DWARF&#34;&gt;DWARF&lt;/a&gt;2， SEH（Structured Exception Handling）があり，この中では Windows ネイティブな SEH が一番速い。ただし SEH は 64bit gcc でしか対応していないため 32bit 環境では使えない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のもうひとつの実装である &lt;a href=&#34;http://tdm-gcc.tdragon.net/&#34; title=&#34;TDM-GCC&#34;&gt;TDM-GCC&lt;/a&gt; では，スレッドモデルには posix，例外処理には SJLJ（32bit）または SEH（64bit）が設定されているようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;TDM-GCC includes a pthreads emulation layer for Microsoft Windows systems, called &#34;winpthreads&#34;. This lets you use std::thread and other C++11 concurrency features in your programs, out of the box.&lt;br&gt;
[...]&lt;br&gt;
64-bit binaries use &#34;SEH&#34;, which stands for &#34;Structured Exception Handling&#34;.&lt;br&gt;
[...]&lt;br&gt;
If you create a 32-bit binary with the TDM64 edition, it will use SJLJ exception handling. DW2 exception handling is not available in this edition.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://tdm-gcc.tdragon.net/quirks&#34;&gt;TDM-GCC : Quirks&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&#34;&gt;次回&lt;/a&gt;は実際にビルドを行う。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;ていうか，最新版が入ってるのが分かるなら，わざわざ再インストールする必要はないと思うのだが&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;ちなみにオリジナルの &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; ではインストール時にスレッドモデルと例外処理を選択できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-1/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-1/</id>
		<published>2016-03-01T22:02:41+09:00</published>
		<updated>2016-03-01T22:02:41+09:00</updated>
		<summary>MSYS の後継（？）とも言える MSYS2 では開発環境を 32bit と 64bit で併設できるらしい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;これは Qiita の以下の記事からの再構成である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/ba4e8d2418bdfe0c8049&#34;&gt;MSYS2 による gcc 開発環境の構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/877cbfb970509b272fc1&#34;&gt;MSYS2 による gcc 開発環境の構築（2） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここでは以下の3部構成になっている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;gcc-と-msys2:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;gcc と MSYS2&lt;/h2&gt;

&lt;p&gt;MSYS の後継（？）とも言える &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; ではgcc を含む開発環境を 32bit と 64bit で併設できるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msys2.github.io/&#34;&gt;MSYS2 installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msys2&#34;&gt;msys2&lt;/a&gt; : GitHub ページ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; を使って gcc 開発環境を構築する。&lt;/p&gt;

&lt;p&gt;なお，単に gcc が欲しいのであれば &lt;a href=&#34;http://tdm-gcc.tdragon.net/&#34; title=&#34;TDM-GCC&#34;&gt;TDM-GCC&lt;/a&gt; のほうがお勧めである。
そうではなく gcc を含む UNIX 互換の開発環境が欲しいのであれば，今回紹介する &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; が適切と思われる（UNIX 系のコマンドを Windows にポーティングする場合など）。
また開発環境は要らないが UNIX 互換の動作環境が欲しいだけなら &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; を導入する手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;msys2-のインストール:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;MSYS2 のインストール&lt;/h2&gt;

&lt;p&gt;では早速 64bit 版インストーラ（今回は &lt;code&gt;msys2-x86_64-20160205.exe&lt;/code&gt; を使用）でインストールを行ってみる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25210363812/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1462/25210363812_7cd554cc78.jpg&#34; alt=&#34;MSYS2 Installing (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25210363812/&#34;&gt;MSYS2 Installing (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;わお！ 日本語だ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25032985150/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1540/25032985150_5bc67480e8.jpg&#34; alt=&#34;MSYS2 Installing (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25032985150/&#34;&gt;MSYS2 Installing (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/24960938719/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1594/24960938719_0dba3ebf95.jpg&#34; alt=&#34;MSYS2 Installing (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24960938719/&#34;&gt;MSYS2 Installing (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25210363972/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1621/25210363972_b14f16a013.jpg&#34; alt=&#34;MSYS2 Installing (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25210363972/&#34;&gt;MSYS2 Installing (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25235500391/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1473/25235500391_d1bf4d5f3b.jpg&#34; alt=&#34;MSYS2 Installing (5)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25235500391/&#34;&gt;MSYS2 Installing (5)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このまま「完了」するとターミナル（&lt;a href=&#34;https://mintty.github.io/&#34; title=&#34;Mintty — Cygwin Terminal emulator&#34;&gt;mintty&lt;/a&gt;）が起動する。
のだが，ここでちょっと寄り道する。
「MSYS2 64bit を実行中」のチェックを外して「完了」しよう。&lt;/p&gt;

&lt;h3 id=&#34;msys2-起動モード:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;MSYS2 起動モード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の起動バッチには以下の3つがある（64bit 版をインストールした場合）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mingw32_shell.bat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw64_shell.bat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msys2_shell.bat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中身はターミナルエミュレータ（既定で &lt;a href=&#34;https://mintty.github.io/&#34; title=&#34;Mintty — Cygwin Terminal emulator&#34;&gt;mintty&lt;/a&gt;）の場所を探して起動するだけだが，環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; にそれぞれ以下の値をセットしている&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;バッチファイル&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セットする値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw32_shell.bat&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MINGW32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw64_shell.bat&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MINGW64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;msys2_shell.bat&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MSYS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; は &lt;code&gt;/etc/profile&lt;/code&gt; 内で参照される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MSYS2_PATH=&amp;quot;/usr/local/bin:/usr/bin:/bin&amp;quot;
MANPATH=&amp;quot;/usr/local/man:/usr/share/man:/usr/man:/share/man:${MANPATH}&amp;quot;
INFOPATH=&amp;quot;/usr/local/info:/usr/share/info:/usr/info:/share/info:${INFOPATH}&amp;quot;
MINGW_MOUNT_POINT=
if [ -n &amp;quot;$MSYSTEM&amp;quot; ]
then
  case &amp;quot;$MSYSTEM&amp;quot; in
    MINGW32)
      MINGW_MOUNT_POINT=/mingw32
      PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}:${PATH}&amp;quot;
      PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
      ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;
      MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;
    ;;
    MINGW64)
      MINGW_MOUNT_POINT=/mingw64
      PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}:${PATH}&amp;quot;
      PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
      ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;
      MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;
    ;;
    MSYS)
      PATH=&amp;quot;${MSYS2_PATH}:/opt/bin:${PATH}&amp;quot;
      PKG_CONFIG_PATH=&amp;quot;/usr/lib/pkgconfig:/usr/share/pkgconfig:/lib/pkgconfig&amp;quot;
    ;;
    *)
      PATH=&amp;quot;${MSYS2_PATH}:${PATH}&amp;quot;
    ;;
  esac
else
  PATH=&amp;quot;${MSYS2_PATH}:${PATH}&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MINGW32&lt;/code&gt; または &lt;code&gt;MINGW64&lt;/code&gt; の場合は，新たに &lt;code&gt;/mingw32&lt;/code&gt; または &lt;code&gt;/mingw64&lt;/code&gt; がパス等に追加されているのがお分かりだろうか。&lt;/p&gt;

&lt;h3 id=&#34;conemu-から-msys2-bash-を起動する:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;ConEmu から MSYS2 bash を起動する&lt;/h3&gt;

&lt;p&gt;以上から，環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; を適切に設定すれば &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の起動バッチを介さずに shell を起動しても構わないことが分かる。
ここでは &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; から &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash を起動することを考える。
以下のように Tasks 設定で &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash を起動するシーケンスを設定すればよい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22388493089/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/698/22388493089_73bb752b56.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22388493089/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;起動シーケンスは以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MSYS &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前半で環境変数を設定し，後半で実際に bash を呼び出している。&lt;/p&gt;

&lt;h3 id=&#34;環境変数-path-のチューニング:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;環境変数 PATH のチューニング&lt;/h3&gt;

&lt;p&gt;Windows の環境変数は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; にも引き継がれる。
&lt;code&gt;PATH&lt;/code&gt; も同様。
ただし Windows の &lt;code&gt;PATH&lt;/code&gt; 上のアプリケーションを &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 上で動いてほしくない場合もある。
この場合は起動時に &lt;code&gt;PATH&lt;/code&gt; を書き換える。
先ほどの &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; の起動シーケンスなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set PATH=%SystemRoot%System32 &amp;amp; set MSYSTEM=MSYS &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でいいだろう。
Windows 上の特定のツールを使いたい場合はフルパスまたはその alias で指定するほうがスマートである。&lt;/p&gt;

&lt;h2 id=&#34;初期設定:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;初期設定&lt;/h2&gt;

&lt;p&gt;では本題に戻ろう。
&lt;code&gt;msys2_shell.bat&lt;/code&gt; または環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MSYS&lt;/code&gt; をセットして shell を起動し，まずはコア・パッケージを最新のものに更新する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ update-core
==&amp;gt; Update package databases...
:: パッケージデータベースの同期中...
 mingw32                                              232.6 KiB   720K/s 00:00 [##################] 100%
 mingw32.sig                                           96.0   B  93.8K/s 00:00 [##################] 100%
 mingw64                                              231.6 KiB   740K/s 00:00 [##################] 100%
 mingw64.sig                                           96.0   B  0.00B/s 00:00 [##################] 100%
 msys                                                 130.7 KiB   165K/s 00:01 [##################] 100%
 msys.sig                                              96.0   B  93.8K/s 00:00 [##################] 100%
==&amp;gt; Checking if there are critical packages to upgrade.
pacman 5.0.0.6348.cc5a8f1-1 -&amp;gt; 5.0.1.6388.dcb2397-1
==&amp;gt; Core packages require updating.
==&amp;gt; Please close all other MSYS2 derived windows (e.g. terminal
==&amp;gt; windows, Bash sessions, etc) before proceeding.
==&amp;gt; 警告: When the update has completed, you MUST close this MSYS2 window
==&amp;gt; 警告: (use Alt-F4 or red [ X ], etc.), rather than &#39;exit&#39;!!!
Press [Enter] key when ready to start update...
==&amp;gt; Updating core packages...
警告: bash-4.3.042-4 は最新です -- スキップ
警告: msys2-runtime-2.4.1.16860.40c26fc-1 は最新です -- スキップ
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (2) msys2-runtime-devel-2.4.1.16860.40c26fc-1  pacman-5.0.1.6388.dcb2397-1

合計ダウンロード容量:  10.34 MiB
合計インストール容量:  54.72 MiB
最終的なアップグレード容量:  21.12 MiB

:: インストールを行いますか？ [Y/n]
:: パッケージを取得します ...
 pacman-5.0.1.6388.dcb2397-1-x86_64                     6.8 MiB  1248K/s 00:06 [##################] 100%
 msys2-runtime-devel-2.4.1.16860.40c26fc-1-x86_64       3.5 MiB  1027K/s 00:04 [##################] 100%
(2/2) キーリングのキーを確認                                                   [##################] 100%
(2/2) パッケージの整合性をチェック                                             [##################] 100%
(2/2) パッケージファイルのロード                                               [##################] 100%
(2/2) ファイルの衝突をチェック                                                 [##################] 100%
(2/2) 空き容量を確認                                                           [##################] 100%
:: パッケージの変更を処理しています...
(1/2) 更新 pacman                                                              [##################] 100%
(2/2) インストール msys2-runtime-devel                                         [##################] 100%
Please close this window.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おや。
ツールが更新された。
&lt;code&gt;update-core&lt;/code&gt; で更新があった場合，いったん shell を閉じて起動し直す。
このとき &lt;code&gt;exit&lt;/code&gt; コマンドで終了するのではなく，強制終了する。&lt;/p&gt;

&lt;p&gt;Shell を再起動したら他のインストール済みのパッケージを更新しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -Su
:: システム全体の更新を開始...
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (7) curl-7.47.1-1  file-5.25-1  gnupg-1.4.20-1  libcurl-7.47.1-1  libopenssl-1.0.2.f-1
               mintty-1~2.2.3-1  openssl-1.0.2.f-1

合計ダウンロード容量:   4.40 MiB
合計インストール容量:  20.60 MiB
最終的なアップグレード容量:   0.12 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 libopenssl-1.0.2.f-1-x86_64                          815.3 KiB   796K/s 00:01 [##################] 100%
 openssl-1.0.2.f-1-x86_64                            1336.9 KiB   977K/s 00:01 [##################] 100%
 libcurl-7.47.1-1-x86_64                              185.0 KiB   269K/s 00:01 [##################] 100%
 curl-7.47.1-1-x86_64                                 595.3 KiB   855K/s 00:01 [##################] 100%
 file-5.25-1-x86_64                                   396.5 KiB   767K/s 00:01 [##################] 100%
 gnupg-1.4.20-1-x86_64                               1026.9 KiB   672K/s 00:02 [##################] 100%
 mintty-1~2.2.3-1-x86_64                              147.2 KiB   436K/s 00:00 [##################] 100%
(7/7) キーリングのキーを確認                                                   [##################] 100%
(7/7) パッケージの整合性をチェック                                             [##################] 100%
(7/7) パッケージファイルのロード                                               [##################] 100%
(7/7) ファイルの衝突をチェック                                                 [##################] 100%
(7/7) 空き容量を確認                                                           [##################] 100%
:: パッケージの変更を処理しています...
(1/7) 更新 libopenssl                                                          [##################] 100%
(2/7) 更新 openssl                                                             [##################] 100%
(3/7) 更新 libcurl                                                             [##################] 100%
(4/7) 更新 curl                                                                [##################] 100%
(5/7) 更新 file                                                                [##################] 100%
(6/7) 更新 gnupg                                                               [##################] 100%
gpg: /etc/pacman.d/gnupg/trustdb.gpg: 信用データベースができました
gpg: 究極的に信用する鍵が見つかりません
gpg: Generating pacman keyring master key...
gpg: skipping control `%no-protection&#39; ()
.+++++
+++++
gpg: 鍵CD81616Cを究極的に信用するよう記録しました
gpg: Done
==&amp;gt; 信用データベースを更新...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   0  信用: 0-, 0q, 0n, 0m, 0f, 1u
==&amp;gt; msys2.gpg からキーを追加...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   0  信用: 0-, 0q, 0n, 0m, 0f, 1u
==&amp;gt; キーリングの信頼されたキーに署名...
  -&amp;gt; キーに署名 D55E7A6D7CE9BA1587C0ACACF40D263ECA25678A...
  -&amp;gt; キーに署名 123D4D51A1793859C2BE916BBBE514E53E0D0813...
  -&amp;gt; キーに署名 B91BCF3303284BF90CC043CA9F418C233E652008...
  -&amp;gt; キーに署名 9DD0D4217D75A33B896159E6DA7EF2ABAEEA755C...
==&amp;gt; 所有者信頼値をインポート...
gpg: setting ownertrust to 4
gpg: setting ownertrust to 4
gpg: setting ownertrust to 4
gpg: inserting ownertrust of 4
==&amp;gt; 信用データベースを更新...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   4  信用: 0-, 0q, 0n, 0m, 0f, 1u
gpg: 深さ: 1  有効性:   4  署名:   3  信用: 0-, 0q, 0n, 4m, 0f, 0u
gpg: 深さ: 2  有効性:   3  署名:   0  信用: 3-, 0q, 0n, 0m, 0f, 0u
(7/7) 更新 mintty                                                              [##################] 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで初期化は終了。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;次回&lt;/a&gt;へ続く。&lt;/p&gt;

&lt;h2 id=&#34;おまけ1-ホームディレクトリについて:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;【おまけ1】 ホームディレクトリについて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のホームディレクトリは，インストールフォルダ直下の &lt;code&gt;home\username&lt;/code&gt; フォルダになるが， Windows 上で自前のホームディレクトリを作っている場合は，その場所を &lt;code&gt;/etc/fstab&lt;/code&gt; でマウントする手もある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:/home	/home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合，元のフォルダにある &lt;code&gt;.profile&lt;/code&gt; ファイル等の移動も忘れないこと。&lt;/p&gt;

&lt;h2 id=&#34;おまけ2-proxy-サーバ越しのアクセス:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;【おまけ2】 Proxy サーバ越しのアクセス&lt;/h2&gt;

&lt;p&gt;Proxy サーバ越しに curl を使う場合は &lt;code&gt;~/.curlrc&lt;/code&gt; に以下の記述を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;proxy-user = &amp;quot;username:password&amp;quot;
proxy = &amp;quot;http://proxy.example.com:8080&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージ管理コマンドである &lt;code&gt;pacman&lt;/code&gt; を Proxy サーバ越しに使う場合は，上述の通りに curl の設定をしたうえで &lt;code&gt;/etc/pacman.conf&lt;/code&gt; ファイルの以下の記述を探し，コメントを解除する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#XferCommand = /usr/bin/curl -C - -f %u &amp;gt; %o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GnuPG で鍵サーバにアクセスする場合も， Proxy サーバ越しにアクセスするのであれば， &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; に以下のオプションを追記する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text:gpg.conf&#34;&gt;keyserver-options http-proxy=http://username:password@proxy.example.com:8080/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は &lt;code&gt;/etc/pacman.d/gnupg&lt;/code&gt; ディレクトリにも &lt;code&gt;gpg.conf&lt;/code&gt; ファイルがあって &lt;code&gt;pacman-key&lt;/code&gt; コマンドはこちらを見てるっぽい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman-key -l
/etc/pacman.d/gnupg/pubring.gpg
-------------------------------
pub   2048R/CD81616C 2016-03-01
uid                  Pacman Keyring Master Key &amp;lt;pacman@localhost&amp;gt;

pub   2048R/CA25678A 2014-09-28
uid                  Alexey Pavlov (Alexpux) &amp;lt;alexey.pawlow@gmail.com&amp;gt;
sub   2048R/2BBF340E 2014-09-28

pub   4096R/AEEA755C 2014-10-04
uid                  Martell Malone (martell) &amp;lt;martellmalone@gmail.com&amp;gt;
sub   4096R/2A292C03 2014-10-04

pub   4096R/3E0D0813 2014-09-28
uid                  Ray Donnelly (MSYS2 Developer - master key) &amp;lt;mingw.android@gmail.com&amp;gt;
sub   4096R/8603AA9D 2014-09-28

pub   2048R/3E652008 2014-09-29
uid                  Ignacio Casal Quinteiro &amp;lt;icquinteiro@gmail.com&amp;gt;
sub   2048R/64D62A76 2014-09-29

pub   2048D/A47D45A1 2013-11-11
uid                  Alexey Pavlov (Alexpux) &amp;lt;alexpux@gmail.com&amp;gt;
sub   2048g/31CF7700 2013-11-11

pub   4096R/2C51581E 2015-07-22
uid                  Martell Malone (MSYS2 Developer) &amp;lt;martellmalone@gmail.com&amp;gt;
sub   4096R/282D6707 2015-07-22

pub   4096R/4CA56930 2014-09-28
uid                  Ray Donnelly (MSYS2 Developer) &amp;lt;mingw.android@gmail.com&amp;gt;
sub   4096R/576CF231 2014-09-28
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしかしたらこちらの &lt;code&gt;gpg.conf&lt;/code&gt; ファイルも修正する必要があるかもしれない（未確認）。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;&lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; には bash などの &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; サブセットを含んでいるため， &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の bash （通称 git bash）を起動することで UNIX 互換の動作環境を得られる。なお &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の環境は git を動かすための最小限のツールしか入っていないため， Git for Windows SDK も併せて導入し，その中の pacman コマンドで必要に応じてのツールを追加する。 pacman については&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;次回&lt;/a&gt;説明する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;ちなみに &lt;code&gt;/etc/pacman.d/gnupg&lt;/code&gt; ディレクトリにある鍵束を GnuPG から直接見る場合には &lt;code&gt;gpg --homedir /etc/pacman.d/gnupg --list-keys&lt;/code&gt; とする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>無線キーボード/マウス機器の脆弱性 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/vulnerability-wireless-devices/" />
		<id>tag:text.Baldanders.info,2016-02-28:/remark/2016/02/vulnerability-wireless-devices/</id>
		<published>2016-02-28T11:06:13+09:00</published>
		<updated>2016-02-28T11:06:13+09:00</updated>
		<summary>いや，まぁ，大騒ぎするほどのことではないけど，一応ね。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;いや，まぁ，大騒ぎするほどのことではないけど，一応ね。&lt;/p&gt;

&lt;h2 id=&#34;脆弱性の内容:d0d879991b9e7de0ce0131310eb2fbf3&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;無線接続のキーボードやマウスなどの機器のうち，安全でない独自通信プロトコルのものがある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;複数の無線接続の入力機器 (キーボードやマウスなど) は、2.4GHz 帯 (ISM バンド) を使用する独自の無線通信プロトコルを実装しており、このプロトコルにおける通信の暗号化に不備が存在します。無線通信の到達範囲にいる攻撃者は、ユーザの端末にキー入力を送りつけたり、キーボードに打ち込まれた内容を傍受したり、ユーザの端末を別の入力機器とペアリングさせたりすることが可能です。無線通信の有効範囲は機器によって異なりますが、室内で使用する多くの場合には数メートル程度です。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU99797968/&#34;&gt;JVNVU#99797968: 無線接続するキーボードやマウスなどの入力機器が安全でない独自通信プロトコルを使用している問題&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;自宅や職場でのインパクトは小さいと思う。
自称「遊牧民」な方々は要注意か。
Bluetooth で接続されている機器は今回は対象外らしいので，そっちに買い換えるのもあり。&lt;/p&gt;

&lt;h2 id=&#34;影響度-cvss:d0d879991b9e7de0ce0131310eb2fbf3&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CVSSv2 基本評価値 2.9 (AV:A/AC:M/Au:N/C:N/I:P/A:N)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“&lt;a href=&#34;https://www.kb.cert.org/vuls/id/981271&#34;&gt;Vulnerability Note VU#981271 - Multiple wireless keyboard/mouse devices use an unsafe proprietary wireless protocol&lt;/a&gt;” より&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隣接ネットワーク（A）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中（M）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;CVSSv3 基本評価値 6.3 (CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://jvn.jp/vu/JVNVU99797968/&#34;&gt;JVNVU#99797968: 無線接続するキーボードやマウスなどの入力機器が安全でない独自通信プロトコルを使用している問題&lt;/a&gt;」より&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隣接（A）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品:d0d879991b9e7de0ce0131310eb2fbf3&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Logitech （ロジクール）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://forums.logitech.com/t5/Mice-and-Pointing-Devices/Logitech-Response-to-Unifying-Receiver-Research-Findings/td-p/1493878&#34;&gt;Logitech Response to Unifying Receiver Research Fi&amp;hellip; - Logitech Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のベンダ製品については&lt;a href=&#34;https://github.com/RFStorm/mousejack/tree/master/doc/advisories&#34;&gt;脆弱性が報告&lt;/a&gt;されているものの，ベンダからは詳細情報なし。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;li&gt;Dell&lt;/li&gt;
&lt;li&gt;Gigabyte&lt;/li&gt;
&lt;li&gt;HP&lt;/li&gt;
&lt;li&gt;Lenovo&lt;/li&gt;
&lt;li&gt;Microsoft&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;対策-回避策:d0d879991b9e7de0ce0131310eb2fbf3&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;p&gt;各ベンダから提供されるファームウェアのアップデートが必要。
最初に書いたように自宅や職場ではインパクトが小さいので，機会を見てセキュリティのしっかりした製品に買い換える手もあり。
買い換えは慌てず騒がず計画的に。&lt;/p&gt;

&lt;h2 id=&#34;参考:d0d879991b9e7de0ce0131310eb2fbf3&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bastille.net/affected-devices&#34;&gt;MouseJack Affected Devices | Bastille Networks Internet Security&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rfstorm/mousejack&#34;&gt;RFStorm/mousejack: Firmware and research tools for Nordic Semiconductor nRF24LU1+ based USB dongles and breakout boards.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mousejack.com/&#34;&gt;MOUSEJACK - Wireless Mouse Hacks &amp;amp; Network Security Protection | Mousejack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/981271&#34;&gt;Vulnerability Note VU#981271 - Multiple wireless keyboard/mouse devices use an unsafe proprietary wireless protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU99797968/&#34;&gt;JVNVU#99797968: 無線接続するキーボードやマウスなどの入力機器が安全でない独自通信プロトコルを使用している問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 3月9日は皆既日食（日本では部分日食） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/27-stories/" />
		<id>tag:text.Baldanders.info,2016-02-27:/remark/2016/02/27-stories/</id>
		<published>2016-02-27T22:31:08+09:00</published>
		<updated>2016-02-27T22:31:08+09:00</updated>
		<summary>3月9日は皆既日食（日本では部分日食） / サーバサイド CMS はリスクか / 「中高生が知っておきたいサイバーセキュリティ」とは</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#eclipse:44fe24037ebc2e15984f28577ab100a4&#34;&gt;3月9日は皆既日食（日本では部分日食）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cms:44fe24037ebc2e15984f28577ab100a4&#34;&gt;サーバサイド CMS はリスクか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#security:44fe24037ebc2e15984f28577ab100a4&#34;&gt;「中高生が知っておきたいサイバーセキュリティ」とは&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;eclipse:44fe24037ebc2e15984f28577ab100a4&#34;&gt;3月9日は皆既日食（日本では部分日食）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nao.ac.jp/news/topics/2016/20160224-eclipse.html&#34;&gt;3月9日は部分日食 | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;来月3月9日は東南アジアやオーストラリアを中心に皆既日食がある。
残念ながら日本は皆既食帯から完全に外れているため部分日食となる。
父島でも食分 0.48 程度らしいので，期待せず楽しみましょう。&lt;/p&gt;

&lt;p&gt;ちなみに，当然のことながら太陽を直接見ないこと。
レンズ越しとかもっての外。
文房具の下敷き越しもダメだよ。&lt;/p&gt;

&lt;p&gt;オススメは木漏れ日とかかな。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/8106459@N07/7239249856/&#34;&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7072/7239249856_bda0f91b27.jpg&#34; alt=&#34;Eclipse Shadows&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/8106459@N07/7239249856/&#34;&gt;Eclipse Shadows&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;cms:44fe24037ebc2e15984f28577ab100a4&#34;&gt;サーバサイド CMS はリスクか&lt;/h2&gt;

&lt;p&gt;JPCERT/CC からアラートが出ている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/magazine/acreport-cms.html&#34;&gt;改ざんの標的となるCMS内のPHPファイル(2016-02-25)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;改竄された PHP ファイルにより不正コードが挿入されるらしい。
これ自体は別に珍しいことではないが， WordPress をはじめ主要な複数の CMS (Content Management System) がターゲットになっているのが特徴である。&lt;/p&gt;

&lt;p&gt;JPCERT/CC でも PHP ファイルの改竄手法は掴んではいないらしい。
割と無差別な感じだし脆弱性のあるサーバを機械的に攻めているのかもしれない（そう見せかけている可能性もあるが）。
そうなら簡単なんだけどねぇ。&lt;/p&gt;

&lt;p&gt;EC サイトのようにサーバサイドに機能を乗せざるを得ない場合は別だが，たかがブログ程度でサーバサイドに CMS を設置するのはリスクしかないんじゃないだろうか。
問題は「改竄されたファイル」の検出が難しいことなので， CI (Continuous Integration)  を使ったデプロイ・プロセスでそれを検出・排除できれば，かなりいけるんじゃないかと思うんだけど，どうだろう。&lt;/p&gt;

&lt;h2 id=&#34;security:44fe24037ebc2e15984f28577ab100a4&#34;&gt;「中高生が知っておきたいサイバーセキュリティ」とは&lt;/h2&gt;

&lt;p&gt;いや，これダメなんじゃないかなぁ。
脅威を煽るだけで中途半端な対策しか示さない。
これじゃあただの FUD (Fear, Uncertainty and Doubt) だよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160225_745252.html&#34;&gt;有料アプリがなぜか無料で落とせる、ウイルスだった――中高生が知っておきたいサイバーセキュリティのマンガ、NISCが公開 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.nisc.go.jp/security-site/files/CSmanga_JPN.pdf&#34;&gt;マンガで学ぶサイバーセキュリティ&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;スマートフォンのセキュリティ:44fe24037ebc2e15984f28577ab100a4&#34;&gt;スマートフォンのセキュリティ&lt;/h3&gt;

&lt;p&gt;例示としてはいわゆる ransomware に引っかかり「身代金」を払ったものの事態は改善しなかったという，まぁ今時ありがちな話。
対処としては「ウイルス対策ソフトの導入」「信頼できるサイトからのアプリの導入」「OS やアプリを最新バージョンに保つ」というもの。&lt;/p&gt;

&lt;p&gt;しかし相手は「中高生」である。
PC 用では個人向けに無料のものもあるが，携帯端末用の「ウイルス対策ソフト」の多くは有料（ランニング・コストがかかる）で「中高生」は手を出しづらいだろう。
その上，現時点ではウイルス対策ソフトの導入は「やらないよりマシ」程度のもので優先順位としては低いといえる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:44fe24037ebc2e15984f28577ab100a4:v&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:44fe24037ebc2e15984f28577ab100a4:v&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また「信頼できるサイトからのアプリの導入」というのは表現としては手ぬるい。
何を持って信頼できるのか客観的な指標はない。
したがって現時点では Google Play や App Store といった&lt;strong&gt;公式&lt;/strong&gt;のストア以外からは導入しない，とすべき。
Malware は Phishing メールなどから「うっかり」導入してしまうことが多いからだ。
もちろん Andorid 端末では「提供元不明アプリのインストールを許可しない」設定を有効にすることを忘れないこと。&lt;/p&gt;

&lt;p&gt;結局一番有効なのは「OS やアプリを最新バージョンに保つ」ことであるが，ここでも問題がある。&lt;/p&gt;

&lt;p&gt;まず iOS は基本的に機能追加のついででしかセキュリティ・アップデートを行わない。
しかも機能追加によって端末に不具合が起きることも少なくないためアップデートそのものをユーザが忌避することも多い。
少なくとも通常のアップデートとセキュリティ・アップデートは別サイクルで行うべきで，可能であれば iOS のバージョン別で行うのが望ましい。&lt;/p&gt;

&lt;p&gt;Android の場合は更に酷い。
OS のアップデートは端末メーカの裁量に任されているため，特に古い機種ではアップデートそのものをオミットするケースが多いのだ。
Google 直轄の Nexus シリーズがほぼ毎月セキュリティ・アップデートを行っているのに対してその他の端末メーカではそういったものが殆ど見られない。
これは明らかに怠慢である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50763657.html&#34;&gt;エフセキュアブログ : Androidのセキュリティ上の大問題の1つを示す2つのグラフ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そういった状況を無視して脳天気に「OS やアプリを最新バージョンに保つ」と言ってしまうのはいかがのものかと思ってしまう。&lt;/p&gt;

&lt;p&gt;あといい加減に「ウイルス」って言うの止めない？ 誤解しか生まないよ，それ。&lt;/p&gt;

&lt;h3 id=&#34;無線-lan-のセキュリティ:44fe24037ebc2e15984f28577ab100a4&#34;&gt;無線 LAN のセキュリティ&lt;/h3&gt;

&lt;p&gt;無防備な公衆無線 LAN を使ったために通信内容が漏れてしまった，という例。&lt;/p&gt;

&lt;p&gt;無線 LAN の暗号化は端末とアクセスポイントの間の通信経路の間でしか行われない。
これは重要なポイントである。
もともと無線 LAN の暗号化は「有線」の代替として考えられているもので通信経路全体や通信データを守るものではない。
そもそも，やり方はどうあれ，「公衆」の「LAN」が信用できる道理はないのだ。&lt;/p&gt;

&lt;p&gt;だから対策として「公衆 Wi-Fi に接続する場合は、出来るだけ暗号化された、信頼できる Wi-Fi を利用しよう」というのは完全にミス・リーディングである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:44fe24037ebc2e15984f28577ab100a4:w&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:44fe24037ebc2e15984f28577ab100a4:w&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;公衆無線 LAN サービスを使う場合には，ちゃんとユーザごとに認証機能（EAP など）のあるものでないとダメ。
公衆無線 LAN サービスの利用方法で SSID とパスワードしか記載されてないようなものは暗号化してないも同然なので，絶対に利用してはならない。
たとえ自治体などが提供しているサービスであってもだ。&lt;/p&gt;

&lt;p&gt;安全でない公衆無線 LAN をどうしても使う必要がある場合は VPN (Virtual Private Network) を使って暗号化すること。
ただしまともな VPN サービスは有料（ランニング・コストがかかる）のものが多く「中高生」では金銭的に手が出ないことも多いだろう。&lt;/p&gt;

&lt;p&gt;結局「中高生」相手であれば「公衆無線 LAN は絶対に利用しない」くらいに言ってしかるべきだと思う。
もちろん親とかの支援を受けて VPN を含むセキュリティ対策アプリを導入できるのであれば，それに越したことはないが。&lt;/p&gt;

&lt;h3 id=&#34;インターネット上の詐欺:44fe24037ebc2e15984f28577ab100a4&#34;&gt;インターネット上の詐欺&lt;/h3&gt;

&lt;p&gt;「インターネット上の詐欺」というのは要するに social engineering のことである。
Social engineering の手法は日々進歩している。
数年前なら日本語の Phishing メールや誘導先のサイトはひと目で分かるようなものだったが，最近は見た目も手口も巧妙になってきていて本物と見分けがつかなくなってたりする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151216_735599.html&#34;&gt;日本郵政のスタッフを装ったメールに要注意、割と自然な日本語、外部リンクや添付ファイルなどの危険要素も -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160201_741724.html&#34;&gt;Amazon.co.jpをかたるフィッシングサイトに注意、「.co」ドメインで開設 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160226_745607.html&#34;&gt;貴様のアカウントの利用中止を避けるために――りそな銀行かたるフィッシングメールに注意 -INTERNET Watch&lt;/a&gt; （いや「貴様」てw）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁこういった情報に留意していくしかない。
こういうのは「私は騙されない」と思ってる人ほど騙されるもので「私も騙されるかもしれない」と覚悟した上で「事後」をどうすべきか学校や家族も交えて議論していくべきだと思う。&lt;/p&gt;

&lt;p&gt;思うのだが，インターネットに限らず「中高生」向けにセキュリティ事例を共有していくシステムを構築すべきと思う。
むやみに恐れる必要はないが，日頃から心構えをしておくことが大切である。&lt;/p&gt;

&lt;p&gt;これは企業とかでよくやるが，定期的に「抜き打ちテスト」するのも効果的だ。
あらかじめ「詐欺」を演出し，その対応を見て個別に指導していくというもの。
この場合も演出する側が「最新の手口」を知っていることが重要。
やはり日頃の情報収集と共有は欠かせないのだ。&lt;/p&gt;

&lt;h3 id=&#34;sns-利用上の注意:44fe24037ebc2e15984f28577ab100a4&#34;&gt;SNS 利用上の注意&lt;/h3&gt;

&lt;p&gt;例示が古いよ。&lt;/p&gt;

&lt;p&gt;今時の子どもは「見知らぬユーザ」にホイホイついていったりしないって。
むしろ注意すべきは「知ってる友人」になりすましているケースだ。
LINE とかで昨年一昨年と騒ぎになって金銭被害とか出たじゃん。
これ作った奴はもっと勉強しろよ。&lt;/p&gt;

&lt;p&gt;まぁこれも上の「インターネット上の詐欺」と同じ social engineering である。
なので対策も「インターネット上の詐欺」と同じ。&lt;/p&gt;

&lt;p&gt;常に最新情報に留意して「事後」についてもあらかじめきちんと決めておく，程度の対処しかない。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:44fe24037ebc2e15984f28577ab100a4:v&#34;&gt;「ウイルス対策ソフト」を装う malware も多い。そういうのは無料で提供されてたりするので「中高生」がうっかり手を出してしまう可能性もある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:44fe24037ebc2e15984f28577ab100a4:v&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:44fe24037ebc2e15984f28577ab100a4:w&#34;&gt;どうでもいいけど「無線 LAN」と「Wi-Fi」で表現が分離してるけど何か意味あるの？ 用語は統一しようよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:44fe24037ebc2e15984f28577ab100a4:w&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>icat4json 公開 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/icat4json/" />
		<id>tag:text.Baldanders.info,2016-02-25:/remark/2016/02/icat4json/</id>
		<published>2016-02-25T16:45:01+09:00</published>
		<updated>2016-02-26T17:40:58+09:00</updated>
		<summary>IPA が提供する “icat for JSON” にアクセスする Go 言語用のパッケージを公開した。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;IPA が提供する “&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” にアクセスする &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用のパッケージを公開した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;github.com/spiegel-im-spiegel/icat4json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のような感じで使える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/icat4json&amp;quot;
)

func main() {
	json, err := icat4json.Get(icat4json.ToolICATW)
	if err != nil {
		log.Fatal(err)
	}
	data, err := json.Decode()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf(&amp;quot;Title: %v\n&amp;quot;, data.Title)
	fmt.Printf(&amp;quot;  URL: %v\n&amp;quot;, data.Link)
	fmt.Printf(&amp;quot; Date: %v\n&amp;quot;, data.Date)
	fmt.Print(&amp;quot;Items:\n&amp;quot;)
	for _, item := range data.Itemdata {
		fmt.Printf(&amp;quot;\t%v: %v (%v)\n&amp;quot;, item.Date, item.Title, item.Link)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run sample.go
Title: IPAセキュリティセンター:重要なセキュリティ情報
  URL: https://www.ipa.go.jp/security/vuln/icat.html
 Date: 2016-02-10 11:58:22 +0900 JST
Items:
	2016-02-10 12:00:00 +0900 JST: Microsoft 製品の脆弱性対策について(2016年02月) (http://www.ipa.go.jp/security/ciadr/vul/20160210-ms.html)
	2016-02-10 12:00:00 +0900 JST: Adobe Flash Player の脆弱性対策について(APSB16-04)(CVE-2016-0985等) (http://www.ipa.go.jp/security/ciadr/vul/20160210-adobeflashplayer.html)
	2016-01-20 12:00:00 +0900 JST: Oracle Java の脆弱性対策について(CVE-2016-0494等) (http://www.ipa.go.jp/security/ciadr/vul/20160120-jre.html)
	2016-01-13 12:00:00 +0900 JST: Microsoft 製品の脆弱性対策について(2016年01月) (http://www.ipa.go.jp/security/ciadr/vul/20160113-ms.html)
	2016-01-13 12:00:00 +0900 JST: Adobe Reader および Acrobat の脆弱性対策について(APSB16-02)(CVE-2016-0932等) (http://www.ipa.go.jp/security/ciadr/vul/20160113-adobereader.html)
	2016-01-06 16:40:00 +0900 JST: 【注意喚起】インターネットに接続する複合機等のオフィス機器の再点検を！ (http://www.ipa.go.jp/security/ciadr/vul/20160106-printer.html)
	2016-01-05 14:00:00 +0900 JST: 「DXライブラリ」におけるバッファオーバーフローの脆弱性対策について(JVN#49476817) (http://www.ipa.go.jp/security/ciadr/vul/20160105-jvn.html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” という名前なのに IPA は API の仕様を公開していない。
そこで JavaScript コードの中身を見てみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/4acefe47d3dda688a03e&#34;&gt;icat for JSON について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;&lt;code&gt;icat4json&lt;/code&gt;&lt;/a&gt; パッケージでは “&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” から取得した JSON データを以下の構造体にデコードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Item - itemdata from icat
type Item struct {
	Title      string    `json:&amp;quot;item_title&amp;quot;`
	Link       string    `json:&amp;quot;item_link&amp;quot;`
	Date       time.Time `json:&amp;quot;item_date&amp;quot;`
	Identifier []string  `json:&amp;quot;item_identifier&amp;quot;`
}

//ICAT - data from icat
type ICAT struct {
	Itemdata []Item    `json:&amp;quot;itemdata&amp;quot;`
	Title    string    `json:&amp;quot;docTitle&amp;quot;`
	Fix      string    `json:&amp;quot;docTitleFix&amp;quot;`
	Link     string    `json:&amp;quot;docLink&amp;quot;`
	Date     time.Time `json:&amp;quot;docDate&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript コードを見ると &lt;code&gt;item_identifier&lt;/code&gt; 項目は使ってない模様。
&lt;code&gt;docTitleFix&lt;/code&gt; 項目は中身が &lt;code&gt;null&lt;/code&gt; かどうかしかチェックしてなくて&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;， &lt;code&gt;null&lt;/code&gt; 以外だと &lt;code&gt;htmlentities()&lt;/code&gt; 関数を通さずに素のまま表示するという恐ろしいことをしている（普通こういうのって boolean 値を使うんじゃないのか？）。
これらの項目は無視でもいいだろう。
本当は IPA が仕様を公開してくれると有難いんだけどねぇ。&lt;/p&gt;

&lt;p&gt;脆弱性情報をクライアントサイドで取るのなら “&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” ではなく Twitter の @&lt;a href=&#34;https://twitter.com/ICATalerts/&#34;&gt;ICATalerts&lt;/a&gt; アカウントのタイム・ラインをチェックするほうがオススメ。
JSON データを使うのならサーバサイドでやるべきだよね。
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;&lt;code&gt;icat4json&lt;/code&gt;&lt;/a&gt; パッケージはドメイン・レイヤのエンティティとして使われることを意識している。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/icat4json.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/icat4json.svg&#34; alt=&#34;icat4json entity&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/icat4json.svg&#34;&gt;icat4json entity&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;私はたまたま &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を勉強中なので &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のパッケージとして実装したけど，本当なら Java とか Ruby とか node.js とかサーバサイドの実装があるといいよね。
IPA も jQuery じゃなくて，そういうので実装すればいいのに。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;ところで &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;における &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の実体は &lt;code&gt;[]byte&lt;/code&gt; だが nil 状態はない。 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;&lt;code&gt;icat4json&lt;/code&gt;&lt;/a&gt; パッケージでは &lt;code&gt;docTitleFix&lt;/code&gt; 項目が &lt;code&gt;null&lt;/code&gt; の場合は空文字列に展開される。 JSON の &lt;code&gt;null&lt;/code&gt; 状態を区別したいのであれば &lt;a href=&#34;https://github.com/guregu/null&#34; title=&#34;guregu/null: reasonable handling of nullable values&#34;&gt;&lt;code&gt;github.com/guregu/null&lt;/code&gt;&lt;/a&gt; パッケージ等を使う手もある。ちなみに &lt;a href=&#34;https://github.com/guregu/null&#34; title=&#34;guregu/null: reasonable handling of nullable values&#34;&gt;&lt;code&gt;github.com/guregu/null&lt;/code&gt;&lt;/a&gt; パッケージの型の実体は &lt;a href=&#34;https://golang.org/pkg/database/sql/&#34; title=&#34;sql - The Go Programming Language&#34;&gt;&lt;code&gt;database/sql&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;NullString&lt;/code&gt; 型等である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Interface の謎 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/interface/" />
		<id>tag:text.Baldanders.info,2016-02-22:/golang/interface/</id>
		<published>2016-02-22T19:22:33+09:00</published>
		<updated>2016-02-22T20:53:30+09:00</updated>
		<summary>Interface には落とし穴がある。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回も軽めの小ネタで。&lt;/p&gt;

&lt;p&gt;まず，文字列の配列を表示するだけの単純なコードを書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	fmt.Println(strlist)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[alpha beta gamma]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
配列&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; の中身をそのままダンプ出力しているだけなので，まぁ当たり前っちゃあ当たり前。
では，配列のダンプではなくきちんと項目を列挙したいとしよう。
やり方は色々あるが簡単に &amp;ldquo;&lt;code&gt;...&lt;/code&gt;” トークンを使って&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	fmt.Println(strlist...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と配列を展開すればいんじゃね？ って思うよね，普通。
&lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Println()&lt;/code&gt; 関数の定義を見ても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Println(a ...interface{}) (n int, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっているし，問題ないように見える。&lt;/p&gt;

&lt;p&gt;でもこれはうまくいかない。
これを実行しようとすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prog.go:7: cannot use strlist (type []string) as type []interface {} in argument to fmt.Println
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とエラーになる。&lt;/p&gt;

&lt;p&gt;実は &lt;code&gt;[]string&lt;/code&gt; 型の &lt;code&gt;strlist&lt;/code&gt; は &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Println()&lt;/code&gt; 関数に渡す際に &lt;code&gt;[]interface{}&lt;/code&gt; 型ではなく &lt;code&gt;interface{}&lt;/code&gt; 型に&lt;strong&gt;必ず&lt;/strong&gt;キャストされる。
だから &lt;code&gt;strlist...&lt;/code&gt; と展開しようとしても「そりゃあ無理（←超意訳）」と怒られてしまうわけだ。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Msg []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように配列やポインタも型として定義できてしまうことを&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;思い出して&lt;/a&gt;欲しい。&lt;/p&gt;

&lt;p&gt;じゃあ，明示的なキャストならいけるのかと思ったが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Msg []string

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	fmt.Println(([]interface{})(strlist)...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prog.go:9: cannot convert strlist (type []string) to type []interface {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と，これもエラーになった。&lt;/p&gt;

&lt;p&gt;ではどうすればいいのかというと &lt;code&gt;[]interface{}&lt;/code&gt; 型の配列を用意してそこに値をコピーする。
先程のコードであれば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Msg []string

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	var list = make([]interface{}, 0)
	for _, str := range strlist {
		list = append(list, str)
	}
	fmt.Println(list...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;alpha beta gamma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにめでたく列挙される。
この問題は &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Println()&lt;/code&gt; 関数だけじゃなく，ある型の配列を &lt;code&gt;[]interface{}&lt;/code&gt; 型にキャストしようとする際は必ず発生するようだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;いや，「“&lt;code&gt;cannot use strlist (type []string) as type []interface {} in argument to fmt.Println&lt;/code&gt;” なんてコンパイルエラーを出せるならコンパイラ側でなんとかしてよ」と思うのだが，どうも無理らしい。&lt;/p&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:a38e724b1dfc1725327e2aea22a2a689&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tucnak/why-go-is-a-poorly-designed-language-1cc04e5daf2#.ucutrogyz&#34;&gt;Why Go is a poorly designed language — Medium&lt;/a&gt; （&lt;a href=&#34;http://postd.cc/why-go-is-a-poorly-designed-language/&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/InterfaceSlice&#34;&gt;InterfaceSlice · golang/go Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;厳密には &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;。分かってますよ，もちろん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;例えば &lt;code&gt;list&lt;/code&gt; に &lt;code&gt;strlist&lt;/code&gt; の内容をコピーする際に for 文で回すのではなく &lt;code&gt;list = append(list, strlist...)&lt;/code&gt; でできるかどうか試してみればいい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>算数で遊ぼう または 11 × 11 × 3.14 = 379.94 は誤りか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/playing-with-math/" />
		<id>tag:text.Baldanders.info,2016-02-21:/remark/2016/02/playing-with-math/</id>
		<published>2016-02-21T22:33:47+09:00</published>
		<updated>2016-02-22T14:12:09+09:00</updated>
		<summary>最近の子どもは知らないが，私はこれ（誤差論）を大学に入ってから正式に習った。「小学生には無理」とは言わないが，有効桁数を含め誤差について論じるのならきちんと手順を踏んで教える必要がある。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/940931&#34;&gt;算数の問題「円周率を3.14とするとき、半径11の円の面積を求めよ」の解を379.94とするのは誤り？ - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;問題はこう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;円周率を 3.14 とするとき、半径 11 の円の面積を求めよ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この答えとして $11 \times 11 \times 3.14 = 379.94$ とするのは誤りか？ という話。&lt;/p&gt;

&lt;p&gt;結論から言おう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;馬鹿じゃねーの？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;そもそもこれを正解か不正解かという観点で論じる時点で阿呆である。
日本の学校教育の悪影響がいかんなく発揮されている例と言えよう。
だから「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000744.shtml&#34;&gt;掛け算は順序が大事&lt;/a&gt;」とか言う馬鹿がはびこるんだよ。&lt;/p&gt;

&lt;p&gt;これは計算問題である。
上の問題を言い換えるのなら&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$r = 11$, $\pi = 3.14$ として $\pi{r}^2$ を計算せよ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と言っているのと同じ。
ただの計算結果だから答えは 379.94 で間違いない。
ここに議論の余地はない。&lt;/p&gt;

&lt;p&gt;（国外は知らないが）日本の小学校は何故か代数を教えない。
だから算数の問題もこんな冗長な文章になってしまうし意味のないものに意味を付加する馬鹿野郎も現れる。
ちゃんと小学生の時に代数を教えれば鶴亀算とかワケワカメなものも教えなくて済むのに。&lt;/p&gt;

&lt;p&gt;閑話休題。&lt;/p&gt;

&lt;p&gt;問題を，文章を糞真面目に解釈して，「（誤差評価を含めて）円の面積を求めよ」とするなら話は変わる。
なぜなら 11 も 3.14 も「数」ではなく「値」になるから。&lt;/p&gt;

&lt;p&gt;円周率は超越数である（今の小学生が「超越数」という言葉を習うかどうかは知らないが）。
ある決まった定数だが，いくらでも桁を大きくとれる。
「半径11」を固定にして円周率の桁を変えて計算してみる。
暗算が苦手なら電卓を使えばいいし，電卓もかったるいというのならプログラムを組めばいい。
私は最近 &lt;a href=&#34;http://text.baldanders.info/golang&#34;&gt;Go 言語を勉強している&lt;/a&gt;ので，これでプログラムを組んでみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	r := 11.0
	pilist := []float64{3.0, 3.1, 3.14, 3.142, 3.1416, 3.14159}
	for _, pi := range pilist {
		fmt.Printf(&amp;quot;r = %f , pi = %f , pi*r^2 = %f\n&amp;quot;, r, pi, pi*r*r)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この計算結果を表にして整理してみる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;$r$&lt;/th&gt;
    &lt;th&gt;$\pi$&lt;/th&gt;
    &lt;th&gt;$\pi{r}^2$&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&#34;6&#34;&gt;11&lt;/td&gt;
    &lt;td&gt;3&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;363.000000&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3.1&lt;/td&gt;
    &lt;td&gt;375.100000&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3.14&lt;/td&gt;
    &lt;td&gt;379.940000&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3.142&lt;/td&gt;
    &lt;td&gt;380.182000&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3.1416&lt;/td&gt;
    &lt;td&gt;380.133600&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3.14159&lt;/td&gt;
    &lt;td&gt;380.132390&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;


&lt;/figure&gt;

&lt;p&gt;最初の 3 を除いて先頭の2桁がほぼ &amp;ldquo;38” に収斂しているのがわかると思う。
ここで「有効桁数」の概念が出てくる。
つまり有効桁数で評価するなら約 380 または $3.8 \times 10^2$ となる。&lt;/p&gt;

&lt;p&gt;一方，半径 11 は測定値である。
測定値には必ず誤差が伴う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:60c0832066f7bf7522edb796f6610649:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:60c0832066f7bf7522edb796f6610649:0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
ここでは半径を $11.00\pm0.40\,\mathrm{cm}$ として考える（値なら単位がないとね。この範囲なら四捨五入して 11 である）。
この条件で計算結果がどう変わるか同じように計算してみる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:60c0832066f7bf7522edb796f6610649:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:60c0832066f7bf7522edb796f6610649:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
ちなみに円周率は先ほどの計算結果を考慮して大きめに 3.1416 としてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	rlist := []float64{10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4}
	pi := 3.1416
	for _, r := range rlist {
		fmt.Printf(&amp;quot;r = %f , pi = %f , pi*r^2 = %f\n&amp;quot;, r, pi, pi*r*r)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下が計算結果。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;$r$&lt;/th&gt;
    &lt;th&gt;$\pi$&lt;/th&gt;
    &lt;th&gt;$\pi{r}^2$&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10.60&lt;br&gt;&lt;/td&gt;
    &lt;td rowspan=&#34;9&#34;&gt;3.1416&lt;/td&gt;
    &lt;td&gt;352.990176&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10.70&lt;/td&gt;
    &lt;td&gt;359.681784&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10.80&lt;/td&gt;
    &lt;td&gt;366.436224&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10.90&lt;/td&gt;
    &lt;td&gt;373.253496&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;11.00&lt;/td&gt;
    &lt;td&gt;380.133600&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;11.10&lt;/td&gt;
    &lt;td&gt;387.076536&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;11.20&lt;/td&gt;
    &lt;td&gt;394.082304&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;11.30&lt;/td&gt;
    &lt;td&gt;401.150904&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;11.40&lt;/td&gt;
    &lt;td&gt;408.282336&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;


&lt;/figure&gt;

&lt;p&gt;同じ「半径11」でこんなにも計算結果が違うのが分かるだろう。
これを「誤差の伝播」という。&lt;/p&gt;

&lt;p&gt;実は半径の誤差の $\pm0.40\,\mathrm{cm}$ というのは $11\,\mathrm{cm}$ に対してかなり大きい。
詳しい説明は面倒くさいので省くが， $A$, $r$ の関係式&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
    A = \pi{r}^2
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;の誤差をそれぞれ $r_A$, $r_r$ とすると&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
    \left(\frac{r_A}{A}\right)^2 = 4\left(\frac{r_r}{r}\right)^2
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;の関係があるため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:60c0832066f7bf7522edb796f6610649:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:60c0832066f7bf7522edb796f6610649:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，この場合の面積は $380.1\pm27.6\,\mathrm{cm}^2$ ということになる。
これがもし半径  $11.00\pm0.10\,\mathrm{cm}$ 程度の誤差なら面積は $380.1\pm6.9\,\mathrm{cm}^2$ となる。&lt;/p&gt;

&lt;p&gt;最近の子どもは知らないが，私はこれ（誤差論）を大学に入ってから正式に習った。
「小学生には無理」とは言わないが，有効桁数を含め誤差について論じるのならきちんと手順を踏んで教える必要がある。
「正解」「不正解」でぶった切るなんてもっともやってはいけないことである。&lt;/p&gt;

&lt;p&gt;なお，誤差論を習うなら微積分と統計学の基礎知識が必要である。
高校の数学レベルでいけるはず。
あるいは結城浩さんの「数学ガール」シリーズを読む手もある。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797382317/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/411g%2BaRmCzL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797382317/baldandersinf-22/&#34;&gt;数学ガールの秘密ノート/微分を追いかけて&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-04-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375698/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375698.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/479737568X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/479737568X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797374152/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797374152.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480095268/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480095268.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学文章作法 推敲編 (ちくま学芸文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/434402740X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/434402740X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学の言葉で世界を見たら 父から娘に贈る数学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;三角関数や微分方程式は物理学，特に天文学を理解するには必須の道具。学校で教えてくれるのを待ってる暇はないのだよ。そして三角関数や微分（と積分）を理解すると理科も数学も抜群に面白くなる。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-30&#34;&gt;2015/04/30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320030885/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41n4-gFkFPL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320030885/baldandersinf-22/&#34;&gt;基礎物理学実験 増訂版&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;下村 健次 &lt;/dd&gt;&lt;dd&gt;共立出版 1977-10-05&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;
&lt;p class=&#34;description&#34;&gt;学生時代，私はコレで実験の基礎を習いました。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-02-21&#34;&gt;2016-02-21&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:60c0832066f7bf7522edb796f6610649:0&#34;&gt;有効桁数が云々というのなら他の誤差評価も必ず必要。なお，ここでは誤差を平均2乗誤差とみなす。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:60c0832066f7bf7522edb796f6610649:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:60c0832066f7bf7522edb796f6610649:1&#34;&gt;平均2乗誤差の $11.00\pm0.40\,\mathrm{cm}$ は厳密には「測定値が 10.6 から 11.4 の間にある」という意味ではないのだが，ここでは計算結果の振れ方を見て欲しいので，こんな感じになっている。専門家の方，怒らないでね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:60c0832066f7bf7522edb796f6610649:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:60c0832066f7bf7522edb796f6610649:b&#34;&gt;これを「誤差の伝播」の法則と呼ぶ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:60c0832066f7bf7522edb796f6610649:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： X 線天文衛星 ASTRO-H の打上げ成功 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/20-stories/" />
		<id>tag:text.Baldanders.info,2016-02-20:/remark/2016/02/20-stories/</id>
		<published>2016-02-20T18:03:21+09:00</published>
		<updated>2016-03-02T14:50:24+09:00</updated>
		<summary>X 線天文衛星 ASTRO-H の打上げ成功 / TMT 建設に関する報道 / スマホへ「ブルートフォース攻撃」を要求するアメリカ / C 言語はどう書くべきか / Bitcoin は「群衆の知恵」を前提とする / Amazon Prime 入ろうかと / 「ムラ社会」という名の多文化主義的エポケー</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#hitomi:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;X 線天文衛星 ASTRO-H の打上げ成功&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tmt:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;TMT 建設に関する報道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iphone:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;スマホへ「ブルートフォース攻撃」を要求するアメリカ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;C 言語はどう書くべきか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blockchain:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Bitcoin は「群衆の知恵」を前提とする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#amazon:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Amazon Prime 入ろうかと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#media:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;「ムラ社会」という名の多文化主義的エポケー&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hitomi:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;X 線天文衛星 ASTRO-H の打上げ成功&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160217_h2af30_j.html&#34;&gt;JAXA | H-IIAロケット30号機によるX線天文衛星（ASTRO-H）の打上げ結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160217_hitomi_j.html&#34;&gt;JAXA | X線天文衛星（ASTRO-H）の太陽電池パドル展開及び衛星の名称について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160218_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）の軌道計算結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.space.com/31968-japan-x-ray-observatory-launch-hitomi.html&#34;&gt;Japan Launches X-ray Observatory to Study Black Holes, Star Explosions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techcrunch.com/2016/02/20/japan-launches-observatory-to-study-black-holes-and-dying-stars/&#34;&gt;Japan Launches Observatory To Study Black Holes And Dying Stars | TechCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160229_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）のクリティカル運用期間の終了について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://apod.nasa.gov/apod/ap160218.html&#34;&gt;&lt;img src=&#34;http://apod.nasa.gov/apod/image/1602/IMG_0193PorterAstroH.jpg&#34; height=&#34;333&#34; width=&#34;500&#34; alt=&#34;APOD: 2016 February 18 - Hitomi Launches&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://apod.nasa.gov/apod/ap160218.html&#34;&gt;APOD: 2016 February 18 - Hitomi Launches&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「ひとみ」と命名されたらしい。
「ひとみ」には広島大学も関わってたんだそうで，なんかちょっと嬉しい。
面白い成果が出るといいですねぇ。&lt;/p&gt;

&lt;h2 id=&#34;tmt:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;TMT 建設に関する報道&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tmt.nao.ac.jp/info/555&#34;&gt;ハワイ・マウナケアにおけるTMT建設に関する報道について | 国立天文台TMT推進室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tmt.org/&#34;&gt;TMT (Thirty Meter Telescope)&lt;/a&gt; について NHK のひどい yellow journalism に激おこプンプン丸（古いw）のようだ。&lt;/p&gt;

&lt;p&gt;まぁ &lt;a href=&#34;http://www.tmt.org/&#34; title=&#34;Recent News | Thirty Meter Telescope&#34;&gt;TMT&lt;/a&gt; があまり順調と言えないのはたしかだ。
マウナケア山は信仰対象なので，これまでも望遠鏡建設について地元と協議しながらやってきた。
すばる望遠鏡もそうしたひとつである。
故に今回 &lt;a href=&#34;http://www.tmt.org/&#34; title=&#34;Recent News | Thirty Meter Telescope&#34;&gt;TMT&lt;/a&gt; だけが無茶したというのは，普通に考えて言いがかりである。&lt;/p&gt;

&lt;p&gt;しかし「マウナケア山に望遠鏡作りすぎ！」という訴えはたしかにあって，その辺の政治的駆け引きがどうなるかという点は要注目である。
実際 &lt;a href=&#34;http://www.tmt.org/&#34; title=&#34;Recent News | Thirty Meter Telescope&#34;&gt;TMT&lt;/a&gt; の建設を他所にしようかと検討する動きはあるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hawaiinewsnow.com/story/31193881/thirty-meter-telescope-officials-considering-sites-outside-of-hawaii&#34;&gt;Thirty-Meter Telescope officials reviewing sites outside of Hawa - Hawaii News Now - KGMB and KHNL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ天文学でも（先の「ひとみ」もそうだが）いわゆる &amp;ldquo;Big Science” と呼ばれる分野は利権が大きく関係してくるし，単純に学問だけで済まないのが辛いところである。&lt;/p&gt;

&lt;h2 id=&#34;iphone:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;スマホへ「ブルートフォース攻撃」を要求するアメリカ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1602/17/news102.html&#34;&gt;銃乱射犯のiPhoneパスコードを総当たりへ──米判事、Appleに「10回ミスでデータ消去」機能のオフ命じる - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1602/17/news152.html&#34;&gt;Apple、FBI捜査のためのiPhoneバックドア命令を拒否──自由を脅かすもの - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/02/18/apple-encryption-iphone-san-bernardino/&#34;&gt;アップル、「セキュリティの弱体化」を求める米国政府の要請を拒否 « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1602/18/news077.html&#34;&gt;GoogleのピチャイCEO、AppleのクックCEOの決断にTwitterで賛同表明 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/business/35078101/&#34;&gt;グーグルCEO、アップル支持を表明&amp;ndash;「iPhone」ロック解除をめぐる裁判所命令について - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/19/20160217googles-ceo-says-enable-hacking-could-compromise-users-privacy/&#34;&gt;GoogleのCEO、スンダル・ピチャイ、「当局が企業にハッキングを命じることはユーザーの利益を損なう」 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/19/20160218apple-gets-an-extension-in-iphone-unlock-case-response-now-due-february-26th/&#34;&gt;AppleはiPhoneアンロックの事案で延期を獲得、返答の期限は2月26日に | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/02/decrypting_an_i.html&#34;&gt;Decrypting an iPhone for the FBI - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/business/35078733/&#34;&gt;ニューヨーク連邦地裁、「iPhone」ロック解除求める米政府要請を却下 - CNET Japan&lt;/a&gt; : 今回の件とは別だが，影響あるかも&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要求されているのは以下の3つらしい（「&lt;a href=&#34;http://jp.techcrunch.com/2016/02/19/20160218apple-gets-an-extension-in-iphone-unlock-case-response-now-due-february-26th/&#34;&gt;AppleはiPhoneアンロックの事案で延期を獲得、返答の期限は2月26日に&lt;/a&gt;」より）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;間違ったパスワードを何回も入力するとその電話機のデータを消してしまう自動消去機能を無効化またはバイパスする&lt;/li&gt;
&lt;li&gt;パスワード誤入力（ロックアウト）の際の遅延を取り去る&lt;/li&gt;
&lt;li&gt;パスコードの入力をBluetoothやWi-Fiのような無線プロトコルまたはデバイス上の物理的ポートからできるような、新しいバージョンのiOSを作る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ちなみに数字4桁の組み合わせをブルートフォース攻撃で攻略する際の計算量は $2^{13.3}$ 程度だ（DES 暗号鍵が $2^{56}$）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
ロックアウトなしで遠隔操作が可能ならほぼ一瞬で終わるだろう。&lt;/p&gt;

&lt;p&gt;国家が考えるセキュリティ・リスクと企業が考えるセキュリティ・リスクと個人が考えるセキュリティ・リスクはそれぞれ異なる。
国家が守るべきは国家であり個人ではない。
企業が守るものは利益だ。
国家と個人を天秤にかけてリスクの高い方を切り捨てる。
個人が守るべきものは（他者を含めた）個人である。
個人を守るためには，時に国家や企業を敵に回す必要がある。&lt;/p&gt;

&lt;p&gt;Apple がセキュリティやプライバシーに取り組むようになったのはつい最近から。
Google はかつて「プライバシーなど存在しない」と言い放った企業である。
企業は（個人の）自由を守っているわけではないのだ。&lt;/p&gt;

&lt;p&gt;以下の例は企業とはちょっと違うけど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078156/&#34;&gt;ランサムウェア被害の大病院、犯人に身代金を支払う&amp;ndash;1万7000ドル相当 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のように，いざとなれば犯罪者と組むこともある。&lt;/p&gt;

&lt;p&gt;来週末に Apple がどのような答えを出すかが見ものである。
いつものことではあるが，私たちはあらゆる事態を想定して備える必要がある。&lt;/p&gt;

&lt;h2 id=&#34;c:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;C 言語はどう書くべきか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/how-to-c-in-2016-1/&#34;&gt;2016年、C言語はどう書くべきか (前編) | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/how-to-c-in-2016-2/&#34;&gt;2016年、C言語はどう書くべきか (後編) | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実はまた C 言語の仕事の話もチラチラ聞くので，念のため復習。
とはいえ，ここに書いてあるようなことは昔から言われていることなので（先進的なコンパイラ実装は標準を先取りする），ビックリするような内容ではないが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hidenorly/items/12f5b5de0a9741ad4e5a&#34;&gt;「2016年、C言語はどう書くべきか」をちょっと分析してみる (warning編) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hidenorly/items/5831e8fa87f4a7adc2c9&#34;&gt;「2016年、C言語はどう書くべきか」をちょっと分析してみる (building編) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blockchain:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Bitcoin は「群衆の知恵」を前提とする&lt;/h2&gt;

&lt;p&gt;いや，最近 Blockchain の話題をまた見るようになったけど， Blockchain 最大の弱点は追記プロセスにあることをみんな分かっているのだろうか。
そこを見ないで「Blockchain は改竄不可能」というのは言いすぎだと思う。&lt;/p&gt;

&lt;p&gt;Blockchain の代表的な実装である Bitcoin は追記プロセスを「群衆の知恵（wisdom of crowds）」を前提に実装している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;「群衆の知恵」モデルは、多様性をもった参加者が、個々に自律していて、まわりの人々の考えに影響を受けないことが前提となっている。参加者がお互いに影響を与え、同質なグループができあがってしまうと、結果がゆがめられてしまうからだ。しかし、現実には、参加者はお互いに影響を与えあうため、「群集の知恵」モデルは問題をかかえている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.keiichimaeda.com/archives/97&#34;&gt;集団的知性（Collective Intelligence）と、群衆の知恵（Wisdom of Crowds）の違い&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「群衆の知恵」モデルが使えるのは株価の予測とかそういった分野である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
不特定多数のユーザが参加する Bitcoin でも「群衆の知恵」モデルを前提にした（proof-of-work などの）追記プロセスが実装され，実際に上手く機能している。&lt;/p&gt;

&lt;p&gt;しかしこれを閉鎖的組織・コミュニティでやろうとしてもうまくいかないんじゃないだろうか。
「群衆の知恵」モデルは player がカルテルを組めば崩壊してしまう。&lt;/p&gt;

&lt;p&gt;多分 Blockchain のコピーが十数個程度あるだけでは話にならない気がする。
FinTech の中の人達はそういうのどうやって解決しているのだろうか。&lt;/p&gt;

&lt;h2 id=&#34;amazon:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Amazon Prime 入ろうかと&lt;/h2&gt;

&lt;p&gt;クラウド・ストレージの &lt;a href=&#34;https://www.copy.com/&#34;&gt;Copy&lt;/a&gt; が今年の5月で shutdown するというので，他のサービスを探している。
目的は写真データの管理。
Box や Dropbox は他の用途で使っていて混ぜたくないし， Flickr や Google や Evernote は問題外。
というわけで Amazon Cloud Drive を使おうと思ったのだが，無料では5GBまでしかなく，それ以上使いたい場合は Amazon Prime に入らないといけないらしい。&lt;/p&gt;

&lt;p&gt;まぁ，以前から Amazon Music や Prime Video には興味があったので「えいや！」でお試し期間で入ってみた。
よさげならお金払って継続してみる。
継続するなら Hulu は解約かな。&lt;/p&gt;

&lt;h2 id=&#34;media:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;「ムラ社会」という名の多文化主義的エポケー&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lullymiura.hatenadiary.jp/entry/2016/02/16/021154&#34;&gt;メディア「ムラ」は民主的に統制されるべきか？―高市総務相の放送法発言問題 - 山猫日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ikeuchisatoshi.com/%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%A8%E6%94%BF%E6%B2%BB%E3%81%AE%E9%96%A2%E4%BF%82%E3%81%A8%E3%80%81%E3%81%9D%E3%82%8C%E3%82%92%E6%94%AF%E3%81%88%E3%81%A6%E3%81%84%E3%81%9F%E3%83%A0%E3%83%A9/&#34;&gt;メディアと政治の関係と、それを支えていたムラ社会の崩壊はどこまで及ぶか – 中東・イスラーム学の風姿花伝&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここでいう「ムラ社会」は多文化主義的エポケーの超小規模版のように見える。&lt;/p&gt;

&lt;p&gt;「多文化主義的エポケー」はイギリスの犯罪学者ジョック・ヤングの著書『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;』で出てくる言葉だ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、現在のように都市生活が多様化し、グローバル化したマスメディアが毎日のように多種多様な文化を垂れ流す状況では、もはや自然的エポケーは通用しなくなっている。こうした困難に対処する態度こそ、私が「多文化主義的エポケー」と呼んでいるものである。つまり、自然的エポケーの特徴である「懐疑の一時停止（あるいは〈括弧〉にいれる）」を、いわば多元化することである。この場合、それぞれの文化は、他の文化からみずからを区別するために、独自の排他的領域という〈括弧〉のなかに閉じこもろうとする。それはちょうど、それぞれの集団が、リスクを最小化するために、保険統計的計算にもとづいて物質的・経済的バリアを張り巡らせようとするのと同じである。&lt;/q&gt;（p.251）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;多文化主義のおかげで、人々は自分たちの選択を相対化しなくても、規範の相対性を受け入れることができるようになるわけである。……多文化主義における異文化への距離の取り方（「尊重」とか「寛容」という言葉でごまかしているが）が異文化への不安をつくりだす可能性は十分にある。というのも、それは戦後の包摂型社会に代えて、排除型の飛び地が点在する世界をつくりだすからである。……かつて近代主義が求めたのは、開放的で、「脱埋め込み」的で、両義的で、断片化された世界をつくりだすことであった。それは自己とライフスタイルを自由に選択し、創造することが可能な世界だった。しかし、多文化主義はそのような世界を消し去ろうとする――つまり、一方で多様性を認めながら、他方では行為者から選択の自由を奪おうとするのである。&lt;/q&gt;（p.259）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;』で言う「多文化主義的エポケー」はアメリカの特にエスニック文化やゲイ文化を指しているが，日本でも形を変えて存在するということではないだろうか。&lt;/p&gt;

&lt;p&gt;とか思ったりする。&lt;/p&gt;

&lt;p&gt;そういえば，&lt;a href=&#34;remark/2016/02/no-more-paper-books.md&#34;&gt;この前ちらっと紹介&lt;/a&gt;した「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B011KRIYVS/baldandersinf-22/&#34;&gt;リベラルのことは嫌いでも、リベラリズムは嫌いにならないでください&lt;/a&gt;」も同じ匂いを感じる。
この本を読む限り，リベラリズムは「多文化主義的エポケー」に陥ったまま足が抜けなくなってるようにしか見えない。
（そういや，多文化主義ってリベラリズムの考え方だっけ）&lt;/p&gt;

&lt;h2 id=&#34;参考:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;参考&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;「&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000026760.pdf&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;「&lt;a href=&#34;http://blog.keiichimaeda.com/archives/97&#34;&gt;集団的知性（Collective Intelligence）と、群衆の知恵（Wisdom of Crowds）の違い&lt;/a&gt;」は既にリンクが切れていたので &lt;a href=&#34;http://sousu.tumblr.com/post/12854295698/&#34;&gt;Tumblr の reblog&lt;/a&gt; を参照した。 reblog バンザイ！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;かつて「はてな」が選挙予測を「群衆の知恵」モデルでやろうとして実際的中させたのだが，あれは多分使い方が間違っている。あたったのはたまたまか別の要因だろう。はてなコミュニティで「群衆の知恵」モデルは成立しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
