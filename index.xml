<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2015-10-01T20:47:00+0900:/</id>
	<updated>2015-10-01T20:47:00+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>人工知能は「ハイル・ヒトラー」と叫ぶか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/artificial-intelligence/" />
		<id>tag:text.Baldanders.info,2015-10-01T20:47:00+0900:/remark/2015/artificial-intelligence/</id>
		<published>2015-10-01T20:47:00+0900</published>
		
		<summary>「人工知能に人類と協力する目的を持たせる」にしろ「人工知能の開発は人類がコントロールできるように進める」にしろ，人工知能が「ハイル・ヒトラー」と叫ぶ可能性は排除できない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;サイトリニューアルの余波で&lt;a href=&#34;http://www.baldanders.info/spiegel/log/&#34;&gt;昔の日記&lt;/a&gt;なんか眺めてたら「&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/index.html&#34;&gt;たるさんのパソコンフィールド&lt;/a&gt;」が復活していることに気が付いた。
当時はよく読んでたなぁ。
スパコンネタは（そっち方面には詳しくないので）当時は本当に勉強になりました。&lt;/p&gt;

&lt;p&gt;で，復活後の記事から。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/main257.htm&#34;&gt;ラスト関東を楽しむ日&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事の後半部分が人工知能の話である。&lt;/p&gt;

&lt;p&gt;個人的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;個々のヒトには（身体的な理由により）知性の限界が存在する&lt;/li&gt;
&lt;li&gt;人工知能がヒトを超えるのなら，それは間違いなく「進化」である&lt;/li&gt;
&lt;li&gt;知性の進化をヒトが阻むのなら，ヒトは進化のレースから退場すべき&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と考えている。
しかし実際には，人工知能が人間社会と本格的に競合することはないと思う。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;さらに人間と機械は、出自がちがうので、同じリソースをめぐって争う必要がない。
これが動物だと、居住空間とか食べ物とか毛皮や肉とか、競合する資源がある。
だけど機械とは競合しない……完全にしないとは言わないけれど、他の動物と比べれば大幅にちがう。
人間はお金や女や権力を巡って争ってきたけど、機械はお金とか関係ないし、セックスもしないし（人間のほうはしたがる人もいるけど）、権力も関係ない。
だから機械やAIが賢くなっても、別に人間なんか滅ぼす必要なんかまったくない。
人間にそういうものをエサとして差し出せば（あるいは実物なくても画面にその絵を描いてやるだけで）人間はホイホイ動くし掃除もするしメンテもするし。機械にとってこんな便利なものはないよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://cruel.hatenablog.com/entry/2015/08/28/161912&#34;&gt;機械支配待望論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;もちろん失くなる職業はあるだろうし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，存続する職業の多くは変革を迫られるかもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
でもそれは過去の歴史で何度もあったことで，しかもその程度のことなら20世紀から予測された「想定内」の話である。&lt;/p&gt;

&lt;p&gt;問題は人工知能ではなくヒト（人間社会）の側にある。&lt;/p&gt;

&lt;p&gt;人間社会はいまだかつて自身に匹敵するまたは自身を上回る「対外知性」に出会ったことがない。
もちろん対外知性と交渉するための法も規範も存在しない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
もし人工知能がヒトに匹敵またはヒトを上回る知性を獲得したとして，そのことに社会が堪えられるかどうかがヒトの進化の分岐点となるのだろう。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;いや、まだまだ懸念事項はある。これらの人工知能には良心という概念はプログラミングする事無しには存在し得ない。とすると、現代版ヒトラーや現代版スターリンが人工知能に世界制圧を命令して設定したら．．．&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/main257.htm&#34;&gt;ラスト関東を楽しむ日&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;これは面白い。&lt;/p&gt;

&lt;p&gt;どう考えたって「人工知能は洗脳に弱い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;」。
「機械学習」なんてのは体のいい洗脳である（もちろん偏見）。
人工知能の側に人間社会と競合する理由はなくても，人間自身がそのように「刷り込み」を行ったらどうなるか。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;2015年5月にロンドンで開催された「Zeitgeist 2015」のカンファレンスで、ホーキング博士は今後100年以内に人工知能が人間を超えるだろうと警告しました。人工知能が人類を超えるとき、人工知能に人類と協力する目的を持たせるべき必要があり、また人工知能の開発は人類がコントロールできるように進めるべきだ、とホーキング博士は考えています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://gigazine.net/news/20150529-ai-will-overtake-humans/&#34;&gt;人工知能は核兵器よりも潜在的に危険、ホーキング博士が「100年以内に人工知能は人間を超える」と警告 - GIGAZINE&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;結局これはいつもの「技術の両義性」の話だ。
「人工知能に人類と協力する目的を持たせる」にしろ「人工知能の開発は人類がコントロールできるように進める」にしろ，人工知能が「ハイル・ヒトラー」と叫ぶ可能性は排除できない。&lt;/p&gt;

&lt;p&gt;と，ここまで書いて気がついた。
これって「究極超人あ～る」ぢゃん（笑）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:cc9cb610c712d98fa6058f6db1926168&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35070557/&#34;&gt;人工知能「IBM Watson」は何に使われているのか？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35071319/&#34;&gt;「Watson」は科学的根拠に基づいて結論を出す、言うなれば“その道の専門家”だ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文献:cc9cb610c712d98fa6058f6db1926168&#34;&gt;参考文献&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/31e2h91IUWL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;イノベーション 悪意なき嘘 (双書 時代のカルテ)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;名和 小太郎 &lt;/dd&gt;&lt;dd&gt;岩波書店 2007-01-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-10-01&#34;&gt;2015-10-01&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;若い方は知らないだろうが（私も実際に会ったことはないが），テレビモニタとキーボードを備えた対話型コンピュータが登場する前は，「コーダー」というただプログラムを書くだけの職業が存在した。もちろん，現在は「コーダー」なる職業は存在しない。プログラマがコードを書くからだ。だから歴史的には，いつか人工知能がプログラムを設計してコードを書くようになったとしても驚くことではない。まぁ進化論的には道具が自身のために自律的に道具を生み出せるようになったら驚くことだが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;グレッグ・イーガンの『万物理論』では最終的に人工知能が「万物理論」の論文を書き上げる。過去の例で言うなら，戦後の日本の主婦は炊飯器・洗濯機・冷蔵庫の「三種の神器」のおかげで家事から解放されたという伝説がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;実は「&lt;a href=&#34;http://www.seti-inst.edu/post-detection.html&#34;&gt;地球外知的生命体の発見に続いてとるべき行動の公式な原則&lt;/a&gt;」というのは存在する。大真面目な話である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;そもそも「良心」自体が社会的刷り込みだけどね。というか，「個」と「社会」の関係を定義することなく「良心」を組み込むのは無理だと思うのだが。そのためには人工知能を社会に「包摂」しなくてはならない。ってこれは「&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;ロボット法学会&lt;/a&gt;」の仕事かな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>制約は構造を生む - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/the-structure-from-restriction/" />
		<id>tag:text.Baldanders.info,2015-09-30T20:33:14+0900:/remark/2015/the-structure-from-restriction/</id>
		<published>2015-09-30T20:33:14+0900</published>
		
		<summary>制約は programmable である</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;「制約は構造を生む」というのは確か結城浩さんの『数学ガール』の中にあったフレーズだと思うが，私はこの言葉が好きである。
ただし，私の中ではこの言葉に続きがあって，それは「制約は programmable である」というものだ。&lt;/p&gt;

&lt;p&gt;「言葉」というのは面白いもので，表現のためのすばらしい手段でありながら，それ自体が表現に制約を加える。
自然言語の場合，その「制約」が硬直化するのを防ぐため自己を改変していく&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
しかしプログラミング言語の場合は「仕様」であり「ルール」であるため自己改変がしづらい面がある。
つまり，どんなプログラミング言語にも「賞味期限」があるのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34;&gt;前にも書いた&lt;/a&gt;けど，私は職業プログラマなので，プログラミングが好きでも嫌いでもない。
私から見れば「プログラミングが好き」というのは「鋸が好き」と言ってるのと大差ない。
プログラミング言語も同様で，基本的にはどんな言語にも対応できる自信はあるが，特定の言語が好きというのはない。&lt;/p&gt;

&lt;p&gt;それでも「これで何かを作ってみたい」と思う言語はいくつかあって，私の場合はそれが C/C++ や Java そして Go 言語である。
どういうわけかスクリプト言語にはあまり食指は向かなかった。
これはたぶん後付けの理由だけど，スクリプト言語というのはひたすら対象を「記述」しているだけで，あまり「作ってる」実感がない。&lt;/p&gt;

&lt;p&gt;先日，ついカッとなって「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」という記事を書いたが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，書いてて思い出したのが，まさに「制約は構造を生む」というフレーズだった。&lt;/p&gt;

&lt;p&gt;いわゆる「オブジェクト指向言語」が台頭しだした頃， C++ や Java でなかなか馴染めなかったのが「例外処理」である。
「&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか&lt;/a&gt;」で「Java の例外が発生しうるメソッドの呼び出しは分岐を隠蔽・内包している」と指摘されているように，まさにこれは呼び出した関数から見て正体不明の &lt;code&gt;longjump&lt;/code&gt; をかまされるのとほとんど同じであり&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，「そんな危ないもん使えるか！」というのが最初の印象だった。
まぁ，もうすっかり馴らされたけどね。&lt;/p&gt;

&lt;p&gt;かつての私のように，例外になじめない人は結構いるようで，中には呼び出す関数ひとつひとつを &lt;code&gt;try-catch&lt;/code&gt; で囲ってる人とかもいて，「それって例外で実装する意味あるのか？」って感じである。
で，結局，関数の返値専用のオブジェクトを作って，返ってくるオブジェクトの状態を見てエラー・ハンドリングしたり。
それって CDD (Context-Driven Design) の萌芽かも（笑）&lt;/p&gt;

&lt;p&gt;Go 言語のエラー・ハンドリングと「古き良き」例外処理のどちらが優れているのかは一概に言えないと思うが，個人的には Go 言語のやり方に慣れてしまったら例外処理には戻れない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
今まで触ってみた感触だけど，おそらく Go 言語の肝は &lt;code&gt;return&lt;/code&gt; にあると思う。
Go 言語の &lt;code&gt;return&lt;/code&gt; をどう記述するか（あるいはしないか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;）がコードの構造を決める鍵になっている。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;逆に言うと自己改変しなくなった言語は緩慢な死を迎える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;後悔はしていない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;今はもう存在しないと思うが，初期の C++ の実装のいくつかは例外を &lt;code&gt;longjump&lt;/code&gt; で実装していた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;いや，もちろん仕事ならやりますよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;記述しないことは記述することの一種である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>エラー・ハンドリングについて - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/error-handling/" />
		<id>tag:text.Baldanders.info,2015-09-30T00:27:48+0900:/golang/error-handling/</id>
		<published>2015-09-30T00:27:48+0900</published>
		<updated>2015-09-30T20:25:00+0900</updated>
		<summary>C&#43;&#43; や Java のような言語圏から来た（私のような）人間にとって Go 言語の「オブジェクト指向」はかなり異質なのだが，慣れてみると逆にとても合理的に見えてくる。この最たるものが error 型である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;C++ や Java のような言語圏から来た（私のような）人間にとって &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の「オブジェクト指向」はかなり異質なのだが，慣れてみると逆にとても合理的に見えてくる。
なんで C++ や Java はこのようなアプローチをとらなかったのか不思議なほどである。&lt;/p&gt;

&lt;p&gt;この最たるものがエラー・ハンドリングだ。&lt;/p&gt;

&lt;h2 id=&#34;go-言語には-例外-がない:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;Go 言語には「例外」がない&lt;/h2&gt;

&lt;p&gt;「例外（exception）」は本来の処理の流れをぶった切って「大域脱出」するための仕組みである。
でも考えてみれば例外というのはかなり微妙な言語仕様だ。&lt;/p&gt;

&lt;p&gt;例外が抱える問題というのは本質的に &lt;code&gt;goto&lt;/code&gt; 文の問題と同じ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
オブジェクトの状態ごと「大域脱出」するため，（脱出前ではなく）脱出後にオブジェクトの後始末を記述せざるを得ないし，記述するためには脱出前の状態（の可能性）を「知識」として知っていなければならない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
もし後始末をきちんとしないと，それがバグやリークやその他の脆弱性のもとになる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はそんな面倒くさいことは考えない。
どうするかというと，普通に返り値に &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を返す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, err := os.Open(filename)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は無視することもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, _ := os.Open(filename)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検出した &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; はその場で処理して抜けてしまえばよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, err := os.Open(filename)
if err != nil {
    fmt.Fprintln(os.Stderr, err)
    return false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;開始処理と終了（後始末）処理が対になっている場合（&lt;code&gt;Open&lt;/code&gt;/&lt;code&gt;Close&lt;/code&gt; とは限らない）は &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文で終了処理を保証する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, err := os.Open(filename)
if err != nil {
    fmt.Fprintln(os.Stderr, err)
    return false
}
defer file.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の基本的な書き方。
特徴的なのは，ある処理に纏わる処理をセットで記述できる点である。
&lt;code&gt;try&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; と &lt;code&gt;finally&lt;/code&gt; の間で目線を行ったり来たりさせなくても，「そこ」だけを見れば把握できる。
ある意味でとても文芸的なコード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; であると言える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;error:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;error&lt;/h2&gt;

&lt;p&gt;ここで &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; について改めて説明しておく。
&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は以下の形式で表現できる &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt; 型のひとつである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type error interface {
	Error() string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり &lt;code&gt;Error()&lt;/code&gt; 関数を持つオブジェクトなら &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; として使える。
これのいちばん簡単な実装が &lt;a href=&#34;https://golang.org/pkg/errors/&#34; title=&#34;errors - The Go Programming Language&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; パッケージである。
&lt;a href=&#34;https://golang.org/pkg/errors/&#34; title=&#34;errors - The Go Programming Language&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; パッケージの中身は以下のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package errors

// New returns an error that formats as the given text.
func New(text string) error {
	return &amp;amp;errorString{text}
}

// errorString is a trivial implementation of error.
type errorString struct {
	s string
}

func (e *errorString) Error() string {
	return e.s
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは実体として &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の property がひとつだけあって &lt;code&gt;Error()&lt;/code&gt; 関数で property をそのまま返すというものだ。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準パッケージの多くはこの &lt;a href=&#34;https://golang.org/pkg/errors/&#34; title=&#34;errors - The Go Programming Language&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; パッケージを使って &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を定義している。
たとえば &lt;a href=&#34;https://golang.org/pkg/os/&#34; title=&#34;os - The Go Programming Language&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; パッケージの最下位の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は以下のように定義されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package os

import (
	&amp;quot;errors&amp;quot;
)

// Portable analogs of some common system call errors.
var (
	ErrInvalid    = errors.New(&amp;quot;invalid argument&amp;quot;)
	ErrPermission = errors.New(&amp;quot;permission denied&amp;quot;)
	ErrExist      = errors.New(&amp;quot;file already exists&amp;quot;)
	ErrNotExist   = errors.New(&amp;quot;file does not exist&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう少し複雑な &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; では，以下のように詳細情報を持つものもある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// PathError records an error and the operation and file path that caused it.
type PathError struct {
	Op   string
	Path string
	Err  error
}

func (e *PathError) Error() string { return e.Op + &amp;quot; &amp;quot; + e.Path + &amp;quot;: &amp;quot; + e.Err.Error() }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3つのエラー-ハンドリング:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;3つのエラー・ハンドリング&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を判別する方法としては以下の3つがある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスを比較する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の型を判別する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error()&lt;/code&gt; 関数で出力される文字列を解釈する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;インスタンスを比較する:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;インスタンスを比較する&lt;/h3&gt;

&lt;p&gt;あらかじめ定義済みの &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスがあれば，インスタンスの比較で判別できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    switch err {
    case os.ErrInvalid:
        fmt.Fprintln(os.Stderr, &amp;quot;引数が不正&amp;quot;)
    case os.ErrPermission:
        fmt.Fprintln(os.Stderr, &amp;quot;アクセスは許可できない&amp;quot;)
    case os.ErrExist:
        fmt.Fprintln(os.Stderr, &amp;quot;そのファイルは既にある&amp;quot;)
    case os.ErrNotExist:
        fmt.Fprintln(os.Stderr, &amp;quot;ファイルが存在しない&amp;quot;)
    default:
        fmt.Fprintln(os.Stderr, err)
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;単純にエラーの種類が分かればいいのであれば，この方法が最もシンプル。&lt;/p&gt;

&lt;h3 id=&#34;型を判別する:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;型を判別する&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt; 型なので &lt;a href=&#34;https://golang.org/ref/spec#Conversions&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;Conversion&lt;/a&gt; 構文で判別できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    switch e := err.(type) {
    case *os.PathError:
        if errno, ok := e.Err.(syscall.Errno); ok {
            switch errno {
            case syscall.ENOENT:
                fmt.Fprintln(os.Stderr, &amp;quot;ファイルが存在しない&amp;quot;)
            case syscall.ENOTDIR:
                fmt.Fprintln(os.Stderr, &amp;quot;ディレクトリが存在しない&amp;quot;)
            default:
                fmt.Fprintln(os.Stderr, &amp;quot;Errno =&amp;quot;, errno)
            }
        } else {
            fmt.Fprintln(os.Stderr, &amp;quot;その他の PathError&amp;quot;)
        }
    default:
        fmt.Fprintln(os.Stderr, &amp;quot;その他のエラー&amp;quot;)
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; に状態（status）を持たせる必要がある場合は，この方法を使うべき。&lt;/p&gt;

&lt;h3 id=&#34;文字列を比較する:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;文字列を比較する&lt;/h3&gt;

&lt;p&gt;上述の方法で判別できない場合は &lt;code&gt;Error()&lt;/code&gt; 関数で出力される文字列を解釈して処理するしかない。
&lt;a href=&#34;http://0xcc.net/misc/bad-knowhow.html&#34;&gt;バッドノウハウ&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;エラー-ハンドリングの設計:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;エラー・ハンドリングの設計&lt;/h2&gt;

&lt;p&gt;エラー・ハンドリングの方針としては，以下の2つのうちのどちらかだろう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を下位ロジックから上位ロジックまで持ち回し，最上位ロジックで最終的な判定と処理を行う&lt;/li&gt;
&lt;li&gt;下位ロジックの &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; をカプセル化した新たなインスタンスを生成し上位ロジックに渡す。上位ロジックは直近のロジックの &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; のみが見える&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最初のやり方は一見よさげだが，この方針では上位ロジックが下位ロジックの全ての &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を把握している必要があり現実的でない。
またオブジェクト指向設計では “Don&amp;rsquo;t talk to strangers” の原則があり，いわゆる「友達の友達」のことは知らないふりをするのがよい設計と言われている。&lt;/p&gt;

&lt;p&gt;こう考えると文字列での比較は最も下策であると言える。
また，型を判別する場合でも，下位レイヤの状態を生のまま見せるのではなく，必要な情報のみを返す関数を実装するほうが上策と言えるだろう。&lt;/p&gt;

&lt;p&gt;もうひとつ考慮すべき点としてエラー・メッセージの設計が挙げられるだろう。
&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; に対するメッセージをどのように設計するかは（大規模アプリケーションでは特に）重要である。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20140416212413.htm&#34;&gt;Big Sky :: golang で複数のエラーをハンドリングする方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dsas.blog.klab.org/archives/go-errors.html&#34;&gt;DSAS開発者の部屋:Go ではエラーを文字列比較する？という話について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の &lt;code&gt;goto&lt;/code&gt; や ラベル付きの &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; は&lt;a href=&#34;https://golang.org/test/goto.go&#34;&gt;飛び先に制約&lt;/a&gt;があり，どこにでもジャンプできるわけではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;例外を備える言語でこれを緩和する仕様はいくつかある。例えば Java は 1.7 から &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34;&gt;try-with-resources 構文&lt;/a&gt;を導入した。もちろんこの構文を有効にするためには対象となるオブジェクトがこの構文に対応した作りになっていなければならない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;いや，ファイル・オープンのエラーを無視したらダメです（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;&lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文で指定された処理は &lt;code&gt;return&lt;/code&gt; 時に起動することが保証される。したがって，エラー発生時にはその都度 &lt;code&gt;return&lt;/code&gt; で抜けて問題ない。むしろ &lt;code&gt;goto&lt;/code&gt; や &lt;code&gt;break&lt;/code&gt; で強制的に処理を抜けるよりは処理を分割して &lt;code&gt;return&lt;/code&gt; で安全に処理を抜ける方法がないか検討すべきである。なお &lt;code&gt;os.Exit()&lt;/code&gt; などで強制終了した場合は， &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文で指定した処理は起動しないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;いわゆる「文芸的プログラミング」とは異なるけど。紛らわしくてゴメン。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;これからのコードは「文芸的」であることが必要条件だと思う。何故ならエンジニアにとって最も信頼できる「設計書」は（動いている）コードだからだ。コードをひとりで考えてひとりで書いてひとりで使ってひとりでメンテナンスするなら（本人さえ理解していれば）文芸的である必要はないかもしれない。が，実用的なコードでそんな状況はもはやありえない。コードにおいても暗黙知をできるだけ排除していくことが重要。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は組み込み型なので，実際にこのような定義が標準パッケージにあるわけではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GOPATH 汚染問題 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/gopath-pollution/" />
		<id>tag:text.Baldanders.info,2015-09-29T23:40:59+0900:/golang/gopath-pollution/</id>
		<published>2015-09-29T23:40:59+0900</published>
		<updated>2015-09-30T20:12:00+0900</updated>
		<summary>go get コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。GOPATH 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する場合があり，管理が煩雑になってしまう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/73ebc684b5807277b7e2&#34;&gt;そろそろ真面目に Golang 開発環境について考える — GOPATH 汚染問題 - Qiita&lt;/a&gt;，&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/baa3671c7e1b8a6594a9&#34;&gt;そろそろ真面目に Golang 開発環境について考える — Internal Packages と Vendoring - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; コマンドはとても強力な機能で，私のように Windows と UNIX 系環境の間を渡り歩いてる身としては， make などの tool chain に大きく依存することなく， &lt;code&gt;go get&lt;/code&gt; コマンドだけで repository の fetch からビルド・インストールまで出来てしまうのは非常にありがたい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;しかし， &lt;code&gt;go get&lt;/code&gt; コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。
ひとつの環境でひとつのプロジェクトを管理していくのならこれでも何とかならないこともないが， &lt;code&gt;GOPATH&lt;/code&gt; 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する可能性があり，管理が煩雑になってしまう。&lt;/p&gt;

&lt;p&gt;しかも困ったことに &lt;code&gt;GOPATH&lt;/code&gt; 環境変数は複数のプロジェクト管理を想定していないため，全てのパッケージをひとつのフォルダに入れようとする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;対策1-プロジェクトごとに-gopath-を設定し直す:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策1】 プロジェクトごとに GOPATH を設定し直す&lt;/h2&gt;

&lt;p&gt;この問題に対する一番安直な答えは「プロジェクトごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定し直す」である。例えば&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; をビルドする場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\gb

C:&amp;gt;SET GOPATH=C:\workspace\gb

C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは &lt;code&gt;GOPATH&lt;/code&gt; 直下の &lt;code&gt;bin&lt;/code&gt; フォルダにパスを通すか，パスの通ってるフォルダに実行ファイルをコピーすればよい。
実行履歴はバッチファイル（UNIX 系なら shell スクリプト）に保存しておけばいつでも復元できる。&lt;/p&gt;

&lt;p&gt;毎回環境をセットアップしないといけないのは面倒だが，プロジェクト管理のためのツールも必要なく， Go コンパイラの標準機能のみで管理できる。
標準機能のみで管理できるというのは結構重要で，たとえば CI ツールを使っている場合は，設定を単純にできるので管理しやすいといえる。&lt;/p&gt;

&lt;p&gt;UNIX 系の環境であれば &lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; を使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;code&gt;cd&lt;/code&gt; をフックし，ディレクトリごとに環境変数を書き換えることができる。
この機能を使ってプロジェクト・フォルダごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定できる。&lt;/p&gt;

&lt;h2 id=&#34;対策2-プロジェクト-ベースの管理ツールを使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策2】 プロジェクト・ベースの管理ツールを使う&lt;/h2&gt;

&lt;p&gt;もうひとつは &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなプロジェクト・ベースでコード管理のできるツールを使う方法である。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; については&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介したので，そちらを参照のこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; で作った開発環境はフォルダ構成を丸ごと開発メンバに配布・同期することが可能になるため，複数人で環境を合わせることが容易になる。&lt;/p&gt;

&lt;h2 id=&#34;対策3-go-1-5-の-vendoring-機能を使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策3】 Go 1.5 の Vendoring 機能を使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のバージョン 1.5 から Vendoring 機能が使えるようになった。&lt;/p&gt;

&lt;p&gt;Vendoring 機能を使うと，外部パッケージを &lt;code&gt;GOPATH&lt;/code&gt; とは独立に管理できるようになる。
この機能を使うには環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; に 1 をセットする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;Go 1.5 Vendor Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vendoring 機能が有効な状態では &lt;code&gt;vendor&lt;/code&gt; フォルダが特別な意味を持つ。
たとえば &lt;code&gt;mypackage&lt;/code&gt; パッケージに対して &lt;code&gt;mypackage/vendor/vpackage&lt;/code&gt; と配置した場合， &lt;code&gt;import &amp;quot;vpackage&amp;quot;&lt;/code&gt; と記述すれば &lt;code&gt;mypackage/vendor&lt;/code&gt; フォルダ以下の &lt;code&gt;vpackage&lt;/code&gt; も探してくれる。&lt;/p&gt;

&lt;p&gt;では，&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;作ったコードを流用して確かめてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;SET GOPATH=C:\workspace\vdemo

C:\workspace\vdemo&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)

C:\workspace\vdemo&amp;gt;mkdir src\julian-day\vendor

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor


C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\workspace\vdemo\src\julian-day\vendor\github.com\spiegel-im-spiegel\astrocalc\modjulian (vendor tree)
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダを追加したことで Go コンパイラの挙動が変わったことがお分かりだろうか。
目的のパッケージを vendor tree → &lt;code&gt;GOROOT&lt;/code&gt; → &lt;code&gt;GOPATH&lt;/code&gt; の順で捜索している。&lt;/p&gt;

&lt;p&gt;では &lt;code&gt;vendor&lt;/code&gt; フォルダに外部パッケージを導入してビルドしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;pushd src\julian-day\vendor

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;popd

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows_amd64
│      └─julian-day
│          └─vendor
│              └─github.com
│                  └─spiegel-im-spiegel
│                      └─astrocalc
│                              modjulian.a
│
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下にパッケージがフルパスで入ってしまうため階層が深くなりがちなのが「玉に瑕」だが，それ以外は特に問題はない。
あるいは &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージは &lt;code&gt;go get&lt;/code&gt; の制約から外れているので，呼び出し側を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;astrocalc/modjulian&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として以下のフォルダ構成にする手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─astrocalc
                │  .editorconfig
                │  .gitignore
                │  .travis.yml
                │  LICENSE
                │  README.md
                │
                └─modjulian
                        example_test.go
                        LICENSE
                        modjulian.go
                        modjulian_test.go


C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意が必要なのは， &lt;code&gt;go get&lt;/code&gt; は git の submodule を上手く扱えないため， &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージを submodule として配置している場合はビルドに失敗することだ。
この場合は &lt;code&gt;-d&lt;/code&gt; オプションで &lt;code&gt;go get&lt;/code&gt; がビルドまで行わないようにし，手動で submodule の &lt;code&gt;init&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; を行う必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -d project/...
C:&amp;gt;git submodule init
C:&amp;gt;git submodule update
C:&amp;gt;go install ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/06/18/010449&#34;&gt;direnvで解決するGOPATHの3つの問題点 - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aminamid/items/5a0e9461385c80d0c8a6&#34;&gt;さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;それでも git などのコード管理ツールへの依存はどうしても残るのだけれど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;具体的には &lt;code&gt;GOPATH&lt;/code&gt; で列挙されるパスのリストのうち先頭のパスにインストールされる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の開発・管理主体は Google だが，こんな構成で Google は困らないのかと思ったのだが，実は Google は全てのコードを単一の repository で管理しているらしい。（参考： &lt;a href=&#34;http://www.publickey1.jp/blog/15/2045000google.html&#34;&gt;20億行のコードを保存し、毎日4万5000回のコミットを発行しているGoogleが、単一のリポジトリで全社のソースコードを管理している理由&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で組まれている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;パッケージのパスが変わるとテストが通らなくなる場合があるので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>オトナの社会科見学： 中秋の月山富田城跡 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/gasan-toda-castle-ruins/" />
		<id>tag:text.Baldanders.info,2015-09-28T22:59:20+0900:/remark/2015/gasan-toda-castle-ruins/</id>
		<published>2015-09-28T22:59:20+0900</published>
		
		<summary>「中秋の名月」だから月山に行こう！ とかそういう話では全然なく，たまたまスケジュールを合わせた日が9月27日の中秋の名月だったというだけです。久しぶりのマジな山城。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;これまでの「オトナの社会科見学」シリーズ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000273.shtml&#34;&gt;旭酒造株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000368.shtml&#34;&gt;旭鳳酒造株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000563.shtml&#34;&gt;備中松山城&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000822.shtml&#34;&gt;須佐神社 ほか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000830.shtml&#34;&gt;盛川酒造株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000838.shtml&#34;&gt;「華鳩」蔵開きバスツアー&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;社会科見学と言っても酒蔵見学か「旅行部」の日帰り旅行くらいなのだが，今回は「旅行部」の方。
今年3回目。
今年はちゃんと参加できてよかったよ。&lt;/p&gt;

&lt;p&gt;「中秋の名月」だから月山に行こう！ とかそういう話では全然なく，たまたまスケジュールを合わせた日が9月27日の中秋の名月だったというだけです。
久しぶりのマジな山城。
体力と運動神経皆無な私にはちょっと（いや，かなり）大変でしたが，今回も楽しめました。
色んな意味で。&lt;/p&gt;

&lt;p&gt;ところで皆さんは子供の頃ってどのくらい覚えてます？ まぁお若い方は子供の頃なんて「つい最近」でしょうから覚えてて当たり前かもしれませんが，半世紀も生きてると色々と記憶からこぼれ落ちていくのですよ，特に子供の頃の思い出とか。&lt;/p&gt;

&lt;p&gt;さて，今回は割と近場なので（四国の宇和島とかに比べればね）昼前には現地に到着。
早速，山中鹿介くんがお出迎え。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21136614083/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5653/21136614083_b4b6e07de7.jpg&#34; alt=&#34;鹿之助くん自販機&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21136614083/&#34;&gt;鹿之助くん自販機&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;道の駅でブラブラしたあと&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21570763869/&#34; title=&#34;機織り機械&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/701/21570763869_20412d7f28_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;機織り機械&#34;&gt;&lt;/a&gt;
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21134920044/&#34; title=&#34;鼻水出た！&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/701/21134920044_323a903cff_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;鼻水出た！&#34;&gt;&lt;/a&gt;


&lt;/figure&gt;


&lt;p&gt;さっそく「登山」ですよ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21745986372/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/590/21745986372_5645414e13.jpg&#34; alt=&#34;月山登るよ&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21745986372/&#34;&gt;月山登るよ&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;まずは千畳平へ。
着いた途端，いきなり記憶がフラッシュバックした。
あぁ，そういやここ，小学生のころ遠足で来て，ここで弁当食ったわ。&lt;/p&gt;

&lt;p&gt;すっかり忘れてた。
月山って遠足で来たことあるんだった。
凄いな。
思い出しちゃったよ。
てか，40年前の記憶とほとんど変わらんってどゆこと。
凄いな，月山。&lt;/p&gt;

&lt;p&gt;あとはもう何見ても子供の頃の思い出とリンクしてしまう。
鹿介くんの像とか石垣&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b5cc3bdccba57a3288fbc6caabb6e258:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b5cc3bdccba57a3288fbc6caabb6e258:b&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; とか本丸からの眺めとかも。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21767034061/&#34; title=&#34;尼子神社&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/647/21767034061_35c486489c_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;尼子神社&#34;&gt;&lt;/a&gt;
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21757632485/&#34; title=&#34;鹿之助くんの像&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5710/21757632485_d5ef157fe9_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;鹿之助くんの像&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21570092130/in/photostream/&#34; title=&#34;二の丸&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5678/21570092130_d9e075f158_m.jpg&#34; width=&#34;192&#34; height=&#34;240&#34; alt=&#34;二の丸&#34;&gt;&lt;/a&gt;
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21732002826/in/photostream/&#34; title=&#34;本丸からの眺望&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/696/21732002826_0b62cf6850_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;本丸からの眺望&#34;&gt;&lt;/a&gt;


&lt;/figure&gt;


&lt;p&gt;別の記憶とリンクしているものもあった。
山中御殿跡。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21135364294/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/575/21135364294_b0d24d89b0.jpg&#34; alt=&#34;兵どもが...&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21135364294/&#34;&gt;兵どもが...&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;この光景では別の思い出がフラッシュバックした。
実はここ20代の終わりにお見合いで来たことがあるのだ。
お見合いで登山とか（笑） なんでそんなことになったのかさっぱり思い出せないのだが，ひたすらしんどいお見合いだったことは覚えている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b5cc3bdccba57a3288fbc6caabb6e258:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b5cc3bdccba57a3288fbc6caabb6e258:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ただし，当時は土がむき出しだったような気がする。
調べたら平成9年（1997年）に山中御殿の発掘調査が行われていたようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sitereports.nabunken.go.jp/ja/2456&#34;&gt;史跡富田城跡環境整備事業（ふるさと歴史の広場事業）に伴う史跡富田城発掘調査報告書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どおりで子供の頃の記憶と微妙に違うわけだ。&lt;/p&gt;

&lt;p&gt;今回の個人的ベストショット。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21767521961/&#34; title=&#34;御殿の石垣&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/623/21767521961_3679fd1950_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;御殿の石垣&#34;&gt;&lt;/a&gt;
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21767521211/&#34; title=&#34;山中御殿の大もみじ&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/571/21767521211_ce16d77f78_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;山中御殿の大もみじ&#34;&gt;&lt;/a&gt;


&lt;/figure&gt;


&lt;p&gt;そうそう。月山のあちらこちらに猫溜まりがあってなかなか楽しかった。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21571254299/&#34; title=&#34;猫まみれ&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5773/21571254299_9d5509aebc.jpg&#34; width=&#34;500&#34; height=&#34;500&#34; alt=&#34;猫まみれ&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21758108155/&#34; title=&#34;猫まみれ&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5631/21758108155_11a73b46e6_m.jpg&#34; width=&#34;240&#34; height=&#34;240&#34; alt=&#34;猫まみれ&#34;&gt;&lt;/a&gt;
&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/spiegel/21135405444/&#34; title=&#34;猫まみれ&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5744/21135405444_b0b600b47f_n.jpg&#34; width=&#34;263&#34; height=&#34;320&#34; alt=&#34;猫まみれ&#34;&gt;&lt;/a&gt;


&lt;/figure&gt;


&lt;p&gt;月山でひととおり遊んでたら15時になってた。
昼飯食ってないよ。
ちうわけで，&lt;a href=&#34;http://www.y-engeikan.com/04_ryouri.html&#34;&gt;どじょう亭&lt;/a&gt;へ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21746465042/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/698/21746465042_21f06374f4.jpg&#34; alt=&#34;どぜう&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21746465042/&#34;&gt;どぜう&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;いや正直に言って，どじょうどうなの？ って思ったけど，美味かったね。
「まるごと安来丼」はお薦め。
安来丼の具として入ってる島田（安来市内の地名）のタケノコは一度食べると他のは食べれないくらい美味い。
でも今は季節が外れているのでどうかと思ったのだが，やっぱり美味かった。
大当たり！&lt;/p&gt;

&lt;p&gt;隣の土産物屋でもさんざん遊んだ挙句，夕方になったので，&lt;a href=&#34;http://fureai.shikanosuke.net/gassan/tdhigaeri.htm&#34;&gt;富田山荘で入浴&lt;/a&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21746467032/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5796/21746467032_932719aa9e.jpg&#34; alt=&#34;風呂上がりの木次牛乳&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21746467032/&#34;&gt;風呂上がりの木次牛乳&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;外に出ると中秋の名月がお出ましの時刻になっていたのでした。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21571253159/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5741/21571253159_164dd1783b.jpg&#34; alt=&#34;旅先で中秋の名月&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21571253159/&#34;&gt;旅先で中秋の名月&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;いやぁ，今回も堪能しました。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b5cc3bdccba57a3288fbc6caabb6e258:b&#34;&gt;ちなみに石垣マニアに言わせると，ここの石垣は「普通」らしい（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b5cc3bdccba57a3288fbc6caabb6e258:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b5cc3bdccba57a3288fbc6caabb6e258:a&#34;&gt;でも，当時は今よりは体力あったのよ。ちなみにこのお見合いは案の定破談になった。てか，まとまってたら，この歳で魔窟部屋に一人暮らしでブログなんか書いてないって。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b5cc3bdccba57a3288fbc6caabb6e258:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>プロジェクト・ベースの開発環境をつくる - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/project-based-development/" />
		<id>tag:text.Baldanders.info,2015-09-28T20:38:45+0900:/golang/project-based-development/</id>
		<published>2015-09-28T20:38:45+0900</published>
		
		<summary>今回は gb を使ってプロジェクト・ベースで Golang のコードを管理してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/ef15a48542e043b32c99&#34;&gt;はじめての Go 言語 (on Windows) その9 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;今回は &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; を使ってプロジェクト・ベースで Golang のコードを管理してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getgb.io/&#34;&gt;gb - A project based build tool for Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gb-の導入:6e131725c8916e09bb821f8d42f65641&#34;&gt;gb の導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; の導入は &lt;code&gt;go get&lt;/code&gt; でできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows の場合，環境変数 &lt;code&gt;GOPATH&lt;/code&gt; で指定するフォルダ配下の &lt;code&gt;bin&lt;/code&gt; フォルダに &lt;code&gt;gb.exe&lt;/code&gt; および &lt;code&gt;gb-vendor.exe&lt;/code&gt; が生成される。
このフォルダにパスを通しておく（またはパスの通っているフォルダに実行ファイルをコピーする）。&lt;/p&gt;

&lt;h2 id=&#34;プロジェクトの構築とビルド:6e131725c8916e09bb821f8d42f65641&#34;&gt;プロジェクトの構築とビルド&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;機能のパッケージ化&lt;/a&gt;」で最後に作ったコードを使って実際に &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; でプロジェクトを作成しビルドを行ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ソース-ファイルの配置:6e131725c8916e09bb821f8d42f65641&#34;&gt;ソース・ファイルの配置&lt;/h3&gt;

&lt;p&gt;プロジェクト・フォルダを &lt;code&gt;C:\workspace\gbdemo&lt;/code&gt; とし，ソース・ファイル用のフォルダ &lt;code&gt;src\julian-day&lt;/code&gt; を作成する。
このフォルダに上述のコードを記述したソース・ファイルを配置する。
フォルダ構成は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルドするには &lt;code&gt;gb build&lt;/code&gt; コマンドを実行すればいいのだが，このままでは &lt;code&gt;modjulian&lt;/code&gt; パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
FATAL command &amp;quot;build&amp;quot; failed: failed to resolve import path &amp;quot;julian-day&amp;quot;: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\gbdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
        C:\workspace\gbdemo\vendor\src\github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクト・フォルダ以下を &lt;code&gt;GOPATH&lt;/code&gt; として &lt;code&gt;modjulian&lt;/code&gt; パッケージを探しているのがお分かりだろうか。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; では，実行時に既存の &lt;code&gt;GOPATH&lt;/code&gt; を上書きするようである。
またプロジェクト・フォルダ配下の &lt;code&gt;vendor&lt;/code&gt; フォルダを探しているのにも注目してほしい。&lt;/p&gt;

&lt;h3 id=&#34;外部パッケージの導入:6e131725c8916e09bb821f8d42f65641&#34;&gt;外部パッケージの導入&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; では外部パッケージを &lt;code&gt;gb vendor&lt;/code&gt; コマンドで管理できる。
外部パッケージの導入には &lt;code&gt;gb vendor fetch&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor fetch github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─src
│  └─julian-day
│          julian-day.go
│
└─vendor
    │  manifest
    │
    └─src
        └─github.com
            └─spiegel-im-spiegel
                └─astrocalc
                    └─modjulian
                            example_test.go
                            LICENSE
                            modjulian.go
                            modjulian_test.go

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクト・フォルダ以下に &lt;code&gt;vendor&lt;/code&gt; フォルダが作成され，パッケージのソースファイルが展開されている。&lt;/p&gt;

&lt;p&gt;今回 &lt;code&gt;gb vendor fetch&lt;/code&gt; で取得したパッケージは &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; のリポジトリから取ってきたものだが， &lt;code&gt;git clone&lt;/code&gt; ではなく，フォルダ・ファイル構成ごとコピーしてきたもののようである。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gb vendor fetch&lt;/code&gt; コマンドでは &lt;code&gt;-branch&lt;/code&gt; や &lt;code&gt;-tag&lt;/code&gt; や &lt;code&gt;-revision&lt;/code&gt; オプションでリポジトリのブランチやタグまたはリビジョンを指定できる。
このとき，導入したパッケージのリポジトリ情報は &lt;code&gt;vender\manifest&lt;/code&gt; ファイルに格納されている（中身は JSON 形式）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;version&amp;quot;: 0,
	&amp;quot;dependencies&amp;quot;: [
		{
			&amp;quot;importpath&amp;quot;: &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;,
			&amp;quot;repository&amp;quot;: &amp;quot;https://github.com/spiegel-im-spiegel/astrocalc&amp;quot;,
			&amp;quot;revision&amp;quot;: &amp;quot;c9f5fb495e67b868a2b3f0e16c38282095fe5033&amp;quot;,
			&amp;quot;branch&amp;quot;: &amp;quot;master&amp;quot;,
			&amp;quot;path&amp;quot;: &amp;quot;/modjulian&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに外部パッケージをアップデートする場合は &lt;code&gt;gb vendor update&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor update github.com/spiegel-im-spiegel/astrocalc/modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor update -all
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プロジェクトのビルド:6e131725c8916e09bb821f8d42f65641&#34;&gt;プロジェクトのビルド&lt;/h3&gt;

&lt;p&gt;では，この状態でもう一回ビルドしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
julian-day

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows-amd64
│      │  julian-day.a
│      │
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
├─src
│  └─julian-day
│          julian-day.go
│
└─vendor
    │  manifest
    │
    └─src
        └─github.com
            └─spiegel-im-spiegel
                └─astrocalc
                    └─modjulian
                            example_test.go
                            LICENSE
                            modjulian.go
                            modjulian_test.go

C:\workspace\gbdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度は上手くいったようだ。
&lt;code&gt;gb build&lt;/code&gt; コマンドのオプションは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb help build
usage: gb build [build flags] [packages]

Build compiles the packages named by the import paths, along with their
dependencies.

Flags:

        -f
                ignore cached packages if present, new packages built will overwrite
                any cached packages. This effectively disables incremental
                compilation.
        -F
                do not cache packages, cached packages will still be used for
                incremental compilation. -f -F is advised to disable the package

                caching system.
        -q
                decreases verbosity, effectively raising the output level to ERROR.
                In a successful build, no output will be displayed.
        -P
                The number of build jobs to run in parallel, including test execution.
                By default this is the number of CPUs visible to gb.
        -R
                sets the base of the project root search path from the current working
                directory to the value supplied. Effectively gb changes working
                directory to this path before searching for the project root.
        -v
                increases verbosity, effectively lowering the output level from INFO
                to DEBUG.
        -dotfile
                if provided, gb will output a dot formatted file of the build steps to
                be performed.
        -ldflags &#39;flag list&#39;
                arguments to pass on each linker invocation.
        -gcflags &#39;arg list&#39;
                arguments to pass on each compile invocation.
        -tags &#39;tag list&#39;
                additional build tags.

The list flags accept a space-separated list of strings. To embed spaces in an
element in the list, surround it with either single or double quotes.

For more about specifying packages, see &#39;gb help packages&#39;. For more about
where packages and binaries are installed, run &#39;gb help project&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-ldflags&lt;/code&gt; や &lt;code&gt;-gcflags&lt;/code&gt; オプションが使えるのはありがたいかな。&lt;/p&gt;

&lt;h2 id=&#34;複数パッケージを含めたプロジェクト管理:6e131725c8916e09bb821f8d42f65641&#34;&gt;複数パッケージを含めたプロジェクト管理&lt;/h2&gt;

&lt;p&gt;複数のパッケージをまとめて管理したい場合もある。
例えば以下のような構成を考えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\gbdemo&amp;gt;pushd src

C:\workspace\gbdemo\src&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\gbdemo\src&amp;gt;popd

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態でビルドを実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows-amd64
│      │  julian-day.a
│      │
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day
            julian-day.go

C:\workspace\gbdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; ではプロジェクト・フォルダ以下にあるパッケージを自動で検索してビルドしてくれる。
もちろんパッケージを指定してビルドすることも可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build github.com/spiegel-im-spiegel/astrocalc/modjulian
github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\gbdemo&amp;gt;gb build julian-day
julian-day
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらにテストもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\gbdemo&amp;gt;gb test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
=== RUN   ExampleDayNumber
--- PASS: ExampleDayNumber (0.00s)                  
PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージによっては &lt;code&gt;go test&lt;/code&gt; の結果と &lt;code&gt;gb test&lt;/code&gt; の結果が異なる場合があるので注意が必要。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:6e131725c8916e09bb821f8d42f65641&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/ac0591fef95c2c6e936e&#34;&gt;golang - gbを知ったのでgojiを使ったWEBアプリケーションプロジェクトを管理してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;code&gt;go get&lt;/code&gt; の使い方については「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;テストについては「&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34;&gt;Go 言語のテスト・フレームワーク&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>LuaTeX-ja に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/luatex-ja/" />
		<id>tag:text.Baldanders.info,2015-09-27T01:32:49+0900:/remark/2015/luatex-ja/</id>
		<published>2015-09-27T01:32:49+0900</published>
		<updated>2015-09-28T20:35:00+0900</updated>
		<summary>LuaTeX では pdfTeX と同等のことができ， DVI ファイルではなく PDF ファイルを直接出力する。なおかつ callback を記述することにより内部処理に割り込みをかけ機能拡張することが可能になっている。LuaTeX-ja はこの機能拡張を使って日本語組版を LuaTeX の上で実現する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（これは&lt;a href=&#34;http://www.baldanders.info/mdwiki/#!luatexja.md&#34;&gt;2014年9月12日に公開した記事&lt;/a&gt;を再構成したものです）&lt;/p&gt;

&lt;p&gt;LuaTeX では pdfTeX と同等のことができ， DVI ファイルではなく PDF ファイルを直接出力する。
なおかつ callback を記述することにより内部処理に割り込みをかけ機能拡張することが可能になっている。
LuaTeX-ja はこの機能拡張を使って日本語組版を LuaTeX の上で実現する。&lt;/p&gt;

&lt;h2 id=&#34;参考:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.jp/projects/luatex-ja/wiki/FrontPage&#34;&gt;LuaTeX-ja Wiki - LuaTeX-ja - SourceForge.JP&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.jp/projects/luatex-ja/wiki/LuaTeX-ja%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9&#34;&gt;LuaTeX-jaの使い方 - LuaTeX-ja Wiki - LuaTeX-ja - SourceForge.JP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.antenna.co.jp/xml/xmllist/XMP/AboutXMP.htm&#34;&gt;XMP™ (Extensible Metadata Platform)仕様についてのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ptex-からの主な変更点:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;pTeX からの主な変更点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;和文フォントは(小塚明朝,IPA 明朝などの)実際のフォント,和文フォントメトリック(JFMと呼ぶ )の組である&lt;/li&gt;
&lt;li&gt;日本語の文書中では改行はほとんどどこでも許されるので, pTeX では和文文字直後の改行は無視される(スペースが入らない)ようになっていた. しかし, LuaTeX-ja では LuaTeX の仕様のためにこの機能は完全には実装されていない&lt;/li&gt;
&lt;li&gt;2 つの和文文字の間や, 和文文字と欧文文字の間に入るグルー/カーン(両者をあわせて JAglueと呼ぶ)の挿入処理が 0 から書き直されている&lt;/li&gt;
&lt;li&gt;LuaTeX-ja では, pTeX と同様に漢字・仮名を制御綴内に用いることができ,\西暦 などが正しく動作するようにしている.但し, 制御綴中に使える和文文字が pTeX・upTeX と全く同じではないことに注意すること&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;luatex-のバージョン-in-tex-live-2014:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;LuaTeX のバージョン（in TeX Live 2014）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; lualatex -v
This is LuaTeX, Version beta-0.79.1 (TeX Live 2014/W32TeX) (rev 4971)

Execute  &#39;luatex --credits&#39;  for credits and version details.

There is NO warranty. Redistribution of this software is covered by
the terms of the GNU General Public License, version 2 or (at your option)
any later version. For more information about these matters, see the file
named COPYING and the LuaTeX source.

Copyright 2014 Taco Hoekwater, the LuaTeX Team.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TeX Live で最新版を取得するには&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとする。&lt;/p&gt;

&lt;h2 id=&#34;大雑把な解説:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;大雑把な解説&lt;/h2&gt;

&lt;h3 id=&#34;最初の一歩:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;最初の一歩&lt;/h3&gt;

&lt;p&gt;最低限の LaTeX 文書ファイルはこんな感じ。入力は UTF-8 で行う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{ltjsarticle}

\begin{document}

\section{はじめてのLua\TeX-ja}

ちゃんとLua\TeX-jaで日本語が出るかな？

\subsection{出たかな？}

長い文章を入力するとちゃんと右端のところで折り返されるかな？
大丈夫そうな気がするけど．ちょっと不安だけど何事も挑戦だよね。

\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; luatatex hoge.tex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で問題なく処理できる。&lt;/p&gt;

&lt;p&gt;ltjsarticle クラス（jsarticle クラス互換，jsbook クラス互換の ltjsbook クラスもある）を用いるのであれば &lt;code&gt;\usepackage{luatexja}&lt;/code&gt; の記述はなくても問題ない。
ただしこの時点では PDF に和文フォントが埋め込まれない。&lt;/p&gt;

&lt;h3 id=&#34;和文フォントの埋め込み:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;和文フォントの埋め込み&lt;/h3&gt;

&lt;p&gt;和文フォントを埋め込むにはフォントを指定する必要がある。
和文フォントの場合は luatexja-preset パッケージでまとめてフォントを指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[no-math]{fontspec} %欧文フォント設定（和文フォント設定より先に行う）
\usepackage[ipaex]{luatexja-preset} %和文フォントに IPAex フォントを指定する
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プリセットオプションは以下のとおり&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kozuka-pro&lt;/li&gt;
&lt;li&gt;kozuka-pr6&lt;/li&gt;
&lt;li&gt;kozuka-pr6n&lt;/li&gt;
&lt;li&gt;hiragino-pro&lt;/li&gt;
&lt;li&gt;hiragino-pron&lt;/li&gt;
&lt;li&gt;morisawa-pro&lt;/li&gt;
&lt;li&gt;morisawa-pr6n&lt;/li&gt;
&lt;li&gt;yu-win （&lt;a href=&#34;http://blog.petitboys.com/archives/yugothic-yumincho-jiyukobo.html&#34;&gt;游明朝/游ゴシック&lt;/a&gt;; Win8.1）&lt;/li&gt;
&lt;li&gt;yu-osx （&lt;a href=&#34;http://blog.petitboys.com/archives/yugothic-yumincho-jiyukobo.html&#34;&gt;游明朝/游ゴシック&lt;/a&gt;; OSX）&lt;/li&gt;
&lt;li&gt;ipa, ipaex, ms&lt;/li&gt;
&lt;li&gt;ipa-hg, ipaex-hg, ms-hg （Office 付属フォントを利用）&lt;/li&gt;
&lt;li&gt;noembed （フォントを埋め込まない）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;追加で以下のオプションも使用できる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nodeluxe: 明朝体・ゴシック体を各 1 ウェイトで使用する（規定値）&lt;/li&gt;
&lt;li&gt;deluxe: 明朝体2ウェイト・ゴシック体3ウェイトと，丸ゴシック体を使用可能にする（otf パッケージ互換）&lt;/li&gt;
&lt;li&gt;expert: 横組専用仮名を用いる（otf パッケージ互換）&lt;/li&gt;
&lt;li&gt;bold 「明朝の太字」をゴシック体の太字によって代替する（otf パッケージ互換）&lt;/li&gt;
&lt;li&gt;90jis: 可能ならば 90JIS 字形を使う&lt;/li&gt;
&lt;li&gt;jis2004: 可能ならば JIS2004 字形を使う&lt;/li&gt;
&lt;li&gt;jis: jfm-jis.lua を JFM として用いる（JIS フォントメトリックに近い結果が得られる）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;luatexja-preset パッケージのプリセットオプションは luatexja-preset.sty 内にハードコーディングされているため，任意のプリセットを自作する場合は luatexja-preset.sty を参考に別名でパッケージを作ったほうがいいかも。&lt;/p&gt;

&lt;p&gt;luatexja-fontspec パッケージを使うと個別にフォントを指定できる。
luatexja-fontspec パッケージは luatexja-preset パッケージ内で呼び出されるため&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[no-math]{fontspec} %欧文フォント設定（和文フォント設定より先に行う）
\usepackage[ipaex]{luatexja-preset} %和文フォントに IPAex フォントを指定する
\setmainjfont[BoldFont=IPAexGothic]{KBMinchoM} %メインの和文フォントを KB明朝M に変更
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といったこともできる。&lt;/p&gt;

&lt;h3 id=&#34;graphicx-および-xcolor-パッケージ:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;graphicx および xcolor パッケージ&lt;/h3&gt;

&lt;p&gt;graphicx および xcolor パッケージはドライバ指定なしでOK。（自動検出される）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{graphicx,xcolor}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;明示的に指定するのであれば pdftex を指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[pdftex]{graphicx,xcolor}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hyperref-パッケージ:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;hyperref パッケージ&lt;/h3&gt;

&lt;p&gt;hyperref パッケージも同様だが，そのままでは PDF の目次等が文字化けしてしまうので以下のパラメータを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[pdfencoding=auto]{hyperref}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[unicode=true]{hyperref}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また pdfa オプションをつけると PDF/A-1b 準拠の PDF を出力する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[pdfencoding=auto,pdfa]{hyperref}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hyperref パッケージでは PDF metadata 用に以下のオプションが指定できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;baseurl&lt;/li&gt;
&lt;li&gt;pdfauthor&lt;/li&gt;
&lt;li&gt;pdfkeywords&lt;/li&gt;
&lt;li&gt;pdflang&lt;/li&gt;
&lt;li&gt;pdfproducer&lt;/li&gt;
&lt;li&gt;pdfsubject&lt;/li&gt;
&lt;li&gt;pdftitle&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;hyperxmp-パッケージ:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;hyperxmp パッケージ&lt;/h3&gt;

&lt;p&gt;hyperxmp パッケージを使うと XMP（Extensible Metadata Platform）によるメタデータを埋め込むことができる。
これは hyperref パッケージと組み合わせて使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{hyperxmp} % XMP support with hyperref
\usepackage[pdfencoding=auto,pdfa]{hyperref} % PDF/A compatible

\hypersetup{% hyperref options (and metadata)
    pdflang={jp},
    pdftitle={はじめての LuaTeX-ja},
    pdfsubject={ちゃんとLuaTeX-jaで日本語が出るかな？},
    pdfauthor={Spiegel},
    pdfkeywords={LuaTeX-ja, PDF/A},
    pdfcopyright={Written by Spiegel on 2014, and licensed under CC-BY.},
    pdflicenseurl={http://creativecommons.org/licenses/by/4.0/},
    pdfcontacturl={http://www.baldanders.info/},
    pdfcontactcity={Hiroshima},
    pdfcontactcountry={Japan},
    pdfcontactregion={JA},
    pdfcaptionwriter={Spiegel},
    baseurl={http://www.baldanders.info/},
    draft=false,
    bookmarks=true,
    bookmarksnumbered=true,
    bookmarksopen=false,
    colorlinks=true,
    linkcolor=red,
    citecolor=green,
    filecolor=magenta,
    urlcolor=cyan
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hyperxmp パッケージで追加されるパラメータは以下のとおり&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pdfauthortitle&lt;/li&gt;
&lt;li&gt;pdfcaptionwriter&lt;/li&gt;
&lt;li&gt;pdfcontactaddress&lt;/li&gt;
&lt;li&gt;pdfcontactcity&lt;/li&gt;
&lt;li&gt;pdfcontactcountry&lt;/li&gt;
&lt;li&gt;pdfcontactemail&lt;/li&gt;
&lt;li&gt;pdfcontactphone&lt;/li&gt;
&lt;li&gt;pdfcontactpostcode&lt;/li&gt;
&lt;li&gt;pdfcontactregion&lt;/li&gt;
&lt;li&gt;pdfcontacturl&lt;/li&gt;
&lt;li&gt;pdfcopyright&lt;/li&gt;
&lt;li&gt;pdflicenseurl&lt;/li&gt;
&lt;li&gt;pdfmetalang （ない場合は pdflang を参照する）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どういうわけか hyperxmp パッケージを使ってもいわゆる「タグ入り PDF」として Adobe Reader で認識されない。
&lt;a href=&#34;https://wiki.gnome.org/Apps/Evince&#34;&gt;Evince&lt;/a&gt; では著作権情報は読み取れているみたい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://farm1.staticflickr.com/756/21544622778_b7fa689c47_o.png&#34; alt=&#34;property&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考文献:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;参考文献&lt;/h3&gt;

&lt;p&gt;bibTeX, bibLaTeX は pTeX, upTeX で使っていたものを流用できる。
ただし，入出力は UTF-8 になること。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[backend=biber, style=numeric]{biblatex}
\addbibresource{refer.bib}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;latexmkrc:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;.latexmkrc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/env perl

# LaTeX commands
$pdflatex            = &#39;lualatex %O -synctex=1 %S&#39;;
$latex               = &#39;uplatex %O -synctex=1 %S&#39;;
$latex_silent_switch = &#39;-interaction=batchmode -c-style-errors&#39;;

# bibTeX commands
$bibtex    = &#39;upbibtex %O %B&#39;;
$biber     = &#39;biber %O --bblencoding=utf8 -u -U --output_safechars %B&#39;;
$makeindex = &#39;mendex %O -o %D %S&#39;;

# Device Driver
$dvipdf = &#39;dvipdfmx %O -z9 -V 7 -o %D %S&#39;;
$dvips = &#39;dvips %O -z -f %S | convbkmk -u &amp;gt; %D&#39;;
$ps2pdf = &#39;ps2pdf14 -dPDFA -dPDFACompatibilityPolicy=1 -sProcessColorModel=DeviceCMYK %O %S %D&#39;;

# Typeset mode (generate a PDF)
$pdf_mode = 1; # 0: do not generate a pdf , 1: using $pdflatex , 2: using $ps2pdf , 3: using $dvipdf

# Other configuration
$pvc_view_file_via_temporary = 0;
$max_repeat                  = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;最終形:43c16ad652bfaa5c0f6d59f785758844&#34;&gt;最終形&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\documentclass{ltjsarticle}
\usepackage[no-math]{fontspec} % 欧文フォント設定（和文フォント設定より先に行う）
\setmonofont[AutoFakeSlant,BoldItalicFeatures={FakeSlant}]{Inconsolatazi4} % Inoconsolataフォントを使用
\usepackage{upquote}
\usepackage[ipaex]{luatexja-preset} % 和文フォントに IPAex フォントを指定する（jis2004 オプションは IPAex フォントでは対応してないみたい）
\usepackage{graphicx,xcolor}
\usepackage{hyperxmp} % XMP support with hyperref
\usepackage[pdfencoding=auto,pdfa]{hyperref} % PDF/A compatible

%% 参考文献
\usepackage[backend=biber,style=numeric]{biblatex}
\addbibresource{refer.bib}

%% その他
\renewcommand{\emph}[1]{\textsf{\textgt{#1}}} % 強調をゴシック体と Sans Serif に変更する

%% Kindle 用の設定 %%
%\setmainjfont[BoldFont=IPAexGothic]{KBMinchoM} % メインのフォントを KB明朝M に変更
%\usepackage[paperwidth=13.5cm, paperheight=17.25cm, top=0.5cm, left=0.5cm, right=0.5cm, bottom=0.5cm]{geometry} % Kindle layout

%% 文書情報
\title{\emph{はじめてのLua\TeX-ja}}
\author{Spiegel}
\date{2014-09-20}

\hypersetup{% hyperref options (and metadata)
    pdflang={jp},
    pdftitle={はじめての LuaTeX-ja},
    pdfsubject={ちゃんとLuaTeX-jaで日本語が出るかな？},
    pdfauthor={Spiegel},
    pdfkeywords={LuaTeX-ja, PDF/A},
    pdfcopyright={Written by Spiegel on 2014, and licensed under CC-BY.},
    pdflicenseurl={http://creativecommons.org/licenses/by/4.0/},
    pdfcontacturl={http://www.baldanders.info/},
    pdfcontactcity={Hiroshima},
    pdfcontactcountry={Japan},
    pdfcontactregion={JA},
    pdfcaptionwriter={Spiegel},
    baseurl={http://www.baldanders.info/mdwiki/},
    draft=false,
    bookmarks=true,
    bookmarksnumbered=true,
    bookmarksopen=false,
    colorlinks=true,
    linkcolor=red,
    citecolor=green,
    filecolor=magenta,
    urlcolor=cyan
}

\begin{document}

\maketitle
\tableofcontents

\section{はじめてのLua\TeX-ja}

ちゃんとLua\TeX-jaで日本語が出るかな？

\subsection{出たかな？}

長い文章を入力するとちゃんと右端のところで折り返されるかな？
大丈夫そうな気がするけど．ちょっと不安だけど何事も挑戦だよね．

\nocite{Book:JISHandbook}\nocite{Book:CharCode}\nocite{Book:CharCode2}
\printbibliography[title=参考文献]

\end{document}
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Windows 10 で PSK を共有する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/wifi-sense/" />
		<id>tag:text.Baldanders.info,2015-09-26T21:47:01+0900:/remark/2015/wifi-sense/</id>
		<published>2015-09-26T21:47:01+0900</published>
		
		<summary>というわけで， Microsoft が Windows 10 で自信を持ってお送りする Wi-Fi Sense についていくつか記事を紹介する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/0923-diary/#wireless:8889a1e819041c97ba11b7859cc847e1&#34;&gt;この前&lt;/a&gt;，「WiFi シェア」を盛大に dis ったわけだが，「Windows 10のWi-fi Senseも仲間に入れてあげてください」とフィードバックを頂いた。
確かにそのとおりだ！&lt;/p&gt;

&lt;p&gt;というわけで， Microsoft が Windows 10 で自信を持ってお送りする &lt;q lang=&#34;en&#34;&gt;Wi-Fi Sense&lt;/q&gt;
 についていくつか記事を紹介する。
なお，私は仕事でも私用でも Windows 10 機は持ってない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9ebeef9717fd9939a5afc2d647ec8156:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9ebeef9717fd9939a5afc2d647ec8156:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; ので悪しからず。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gigazine.net/news/20150703-windows-10-wifi-sense/&#34;&gt;友人とWi-Fiパスワードの自動共有ができるWindows 10新機能「Wi-Fi Sense」 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.technet.com/b/jpsecurity/archive/2015/08/21/windows-10-wifi-sense.aspx&#34;&gt;Windows 10: Wi-Fi センサー (Wi-Fi Sense) とは? 正しく理解して使用してみよう - 日本のセキュリティチーム - Site Home - TechNet Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://r2.ag/counter-windows-10-wifi-sense/&#34;&gt;社内 Wi-Fi を Windows 10 の Wi-Fi 共有対象から外してパスワードを変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thenextweb.com/microsoft/2015/07/30/windows-10-steals-your-bandwidth-to-send-other-people-updates/&#34;&gt;Windows 10 uses your bandwidth to share updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Windows 10 には Wi-Fi Sense という新機能があり、これは Wi-Fi スポットを自分の連絡先に自動的に共有できるものです。一度有効にすると、 Microsoft のサーバーに保存された Wi-Fi パスワードが連絡先に晒されてしまいます。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://r2.ag/counter-windows-10-wifi-sense/&#34;&gt;社内 Wi-Fi を Windows 10 の Wi-Fi 共有対象から外してパスワードを変更する&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;MSのWifi Senseは貴方がWin10を使っていないくても誰かWin10ユーザにPWを教えてWifiを使わせるとそのユーザの連絡帳のユーザは全く知らない人でもあなたのwifiを利用可能になる。止めるにはSSID変更のみ RE &lt;a href=&#34;https://t.co/vZcHDhAqED&#34;&gt;https://t.co/vZcHDhAqED&lt;/a&gt;&lt;/p&gt;&amp;mdash; 高梨陣平 (@jingbay) &lt;a href=&#34;https://twitter.com/jingbay/status/628343560291622912&#34;&gt;2015, 8月 3&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;


&lt;p&gt;まぁ「WiFi シェア」が安全だというのなら &lt;q lang=&#34;en&#34;&gt;Wi-Fi Sense&lt;/q&gt;
 も同程度には安全（笑）だと思うので，そっちを使ったほうがいいと思うよ。
&lt;q lang=&#34;en&#34;&gt;Wi-Fi Sense&lt;/q&gt;
 を使うだけならお金取られないみたいだし。&lt;/p&gt;

&lt;p&gt;繰り返して言うが PSK 方式はユーザに対する認証ではない。
ユーザに対する認証が必要なら IEEE802.1X の認証システムが必要だが，家庭用の無線 LAN ルータでこれを備えているものはほぼ存在しない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9ebeef9717fd9939a5afc2d647ec8156:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9ebeef9717fd9939a5afc2d647ec8156:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
OS ベンダやアプリ・ベンダが PSK 共有を「安全」だなどと言いはるなら，ユーザ側は自衛のためにも，家族にも誰にも PSK を教えてはいけない。
1人1ルータ時代の到来ですな（笑）&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:9ebeef9717fd9939a5afc2d647ec8156:a&#34;&gt;古参の Windows ユーザある私が言うのもナニだが，現状で Windows 7 or 8.x に不満がないユーザは無理に Windows 10 にする必要はない。 XP や Vista のユーザなら多少はメリットは有るかもしれないが。 Windows 7 でも2020年まではサポートされるわけで，その間にゆっくり評価すればいいと思う。というか，5年後も Windows がメジャーであり続けるかどうかすら現時点ではわからない。パワーユーザ以外の多くのユーザがスマホやタブレットをメインに使うようになるなら， Windows に固執する必要は全くない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9ebeef9717fd9939a5afc2d647ec8156:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9ebeef9717fd9939a5afc2d647ec8156:b&#34;&gt;法人向けにはいくつか製品があるが，当然高い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9ebeef9717fd9939a5afc2d647ec8156:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ブログ機能移転に関する TODO - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/todo-replace-blog/" />
		<id>tag:text.Baldanders.info,2015-09-26T19:36:36+0900:/remark/2015/todo-replace-blog/</id>
		<published>2015-09-26T19:36:36+0900</published>
		<updated>2015-10-01T22:14:00+0900</updated>
		<summary>ここでは覚え書きとして移転作業の TODO を挙げておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;さて，本家サイトに&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000872.shtml&#34;&gt;ブログ機能移転の告知&lt;/a&gt;を出したぞ。
ここでは覚え書きとして移転作業の TODO を挙げておく。&lt;/p&gt;

&lt;ul style=&#34;list-style:none;&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo1&#34; disabled=&#34;true&#34; checked=&#34;checked&#34;&gt; &lt;a href=&#34;http://www.baldanders.info/archives.shtml&#34;&gt;旧ブログ記事&lt;/a&gt;からトラックバック情報を削除&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo2&#34; disabled=&#34;true&#34; checked=&#34;checked&#34;&gt; 10月4日（日）までに本家サイトから &lt;a href=&#34;http://www.movabletype.jp/opensource/&#34;&gt;MTOS&lt;/a&gt; のモジュールを削除&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo3&#34; disabled=&#34;true&#34; checked=&#34;checked&#34;&gt; &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt; のレシピから&lt;a href=&#34;http://www.baldanders.info/archives.shtml&#34;&gt;旧ブログ記事&lt;/a&gt;関連のものを削除&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo4&#34; disabled=&#34;true&#34; checked=&#34;checked&#34;&gt; その後，本家の RSS を &lt;a href=&#34;http://text.baldanders.info/index.xml&#34;&gt;text.Baldanders.info&lt;/a&gt; にリダイレクト&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo5&#34; disabled=&#34;true&#34; checked=&#34;checked&#34;&gt; 関連 cron （主に DB のバックアップ）の停止&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo4&#34; disabled=&#34;true&#34; checked=&#34;checked&#34;&gt; 本サイトの「プレ・オープン」表記を外す&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言：セクサロイドは電気ウナギの夢を見るか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/0925-diary/" />
		<id>tag:text.Baldanders.info,2015-09-25T21:57:48+0900:/remark/2015/0925-diary/</id>
		<published>2015-09-25T21:57:48+0900</published>
		
		<summary>セクサロイドは電気ウナギの夢を見るか / スマホの緊急通報ってマジ意味あるの？ / 「ノーベル賞有力候補に森和俊、坂口志文氏」 / 「僕らが守るべきウェブ」とか / 金融インフラを Block Chain で代替する / 「水のような音楽」の結末</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;ブックマークしたネタが溜まってきたので，ここらで吐き出しておく&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#non-human-person:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;セクサロイドは電気ウナギの夢を見るか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-tai:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;スマホの緊急通報ってマジ意味あるの？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nobel-prize:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「ノーベル賞有力候補に森和俊、坂口志文氏」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#our-web:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「僕らが守るべきウェブ」とか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#p2p:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;金融インフラを Block Chain で代替する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#music:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「水のような音楽」の結末&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;non-human-person:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;セクサロイドは電気ウナギの夢を見るか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2015/09/25/pepper-robot-sex-banned/&#34;&gt;ロボット「Pepper」はユーザー規約で性行為を禁止されている « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;q lang=&#34;en&#34;&gt;&lt;a href=&#34;http://arstechnica.co.uk/gadgets/2015/09/sexbots-with-a-detrimental-effect-on-society-should-be-banned-say-researchers/&#34;&gt;Sexbots with a “detrimental effect on society” should be banned, say researchers&lt;/a&gt;&lt;/q&gt;
 あたりも合わせて読むと面白いかもしれない。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;このキャンペーンの創始者たちは、セックスロボットの開発により「女性と子どもをモノとみなす傾向が助長」され、「女性と子どもが劣った存在であるという認識」が強まるので禁止しなければならないと主張している。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2015/09/25/pepper-robot-sex-banned/&#34;&gt;ロボット「Pepper」はユーザー規約で性行為を禁止されている&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;というのはどう考えても言いがかりとしか思えないけどね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これだからキリスト教圏の人間ってのは&amp;hellip;&lt;/p&gt;

&lt;p&gt;これとは対照的に&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bylines.news.yahoo.co.jp/kuriharakiyoshi/20150924-00049819/&#34;&gt;サルは著作権者になり得るのか？(栗原潔) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という記事も見かけてウケてしまった。&lt;/p&gt;

&lt;p&gt;これって実は著作権ではなく，いわゆる &lt;q lang=&#34;en&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000788.shtml&#34;&gt;non-human person&lt;/a&gt;&lt;/q&gt;
 の問題であるように思える。だから動物愛護団体が動いているわけだ。
もっとも米国では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;NhRPの主張は、チンパンジーにも権利があるというものだ。チンパンジーは人間にこれほどよく似ているのだから、完全な人権とまではいかなくても、少なくともいくつかの基本的な権利を認めるべきだという主張だ。&lt;br&gt;
しかし、12月4日（米国時間）に下された最新の判決は、原告側の敗訴となった。ニューヨーク州の最高裁判所は、知性や感情をもっているとはいえ、チンパンジーは権利をもつ者に期待される社会的義務を果たすことができないと結論付けたのだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2014/12/24/orangutan-personhood/&#34;&gt;アルゼンチンの裁判所、オランウータンに「人権」を認める&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;らしいので，著作権も認められないんじゃないのかなぁ。
だって著作権法って「インセンティブ法」なんでしょ。&lt;/p&gt;

&lt;p&gt;ロボットが「モノ」であればどんなに精巧であっても「ダッチワイフ」や「張り型」の延長でしかないし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;， &lt;q lang=&#34;en&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000788.shtml&#34;&gt;non-human person&lt;/a&gt;&lt;/q&gt;
 だというなら，ヒトの都合で行為を禁止すること自体が「権利の侵害」と見なしうるよね。&lt;/p&gt;

&lt;p&gt;そういえば「&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;ロボット法学会&lt;/a&gt;」設立らしい。
その&lt;a href=&#34;http://peatix.com/event/115206&#34;&gt;準備研究会&lt;/a&gt;が10月に開催されるそうな。
いやぁ，スピード感があっていいですな。&lt;/p&gt;

&lt;h2 id=&#34;k-tai:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;スマホの緊急通報ってマジ意味あるの？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20150925_722631.html&#34;&gt;ウェザーニューズ、噴火するとスマホに通知する「火山アラーム」、ライブカメラや詳細情報を伝える「火山 Ch.」も -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これってさぁ，現地の人間にとっては「遅すぎる情報」だし，それ以外の人にとっては興味本位以上の価値はないよね。
地震の緊急通報にしたって，西日本に多い直下型地震の場合は地震を感じてから緊急通報が鳴ったりするわけさ。
ウザいことこの上ない。&lt;/p&gt;

&lt;p&gt;一番ウザいのは避難勧告「解除」をわざわざ緊急通報で発信してくさること。
これ避難している人以外には意味のない情報なんだから，避難所にいる人に直接伝えればいいだろ。
なんでスマホに送るかなぁ。&lt;/p&gt;

&lt;p&gt;緊急通報ってのは，本当に緊急で，更にそれによって何らかのアクションを取りうる場合には有効だけど，そうでないなら全く無意味な情報でしかなく，無意味な情報が頻発するような「緊急」通報なんかみんなスルーしちゃうよ，そのうち。&lt;/p&gt;

&lt;h2 id=&#34;nobel-prize:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「ノーベル賞有力候補に森和俊、坂口志文氏」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2015/09/20150924_03.html&#34;&gt;2015年9月24日ニュース「ノーベル賞有力候補に森和俊、坂口志文氏　トムソン・ロイター発表」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ノーベル賞の話題が出ると秋って感じ。&lt;/p&gt;

&lt;h2 id=&#34;our-web:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「僕らが守るべきウェブ」とか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20150925/webwehavetosave&#34;&gt;yomoyomo さんとこの記事&lt;/a&gt;経由&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/mediumjp/the-web-we-have-to-save-95fb9b150b49&#34;&gt;僕らが守るべきウェブ — Japanese Official — Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「&lt;a href=&#34;https://wirelesswire.jp/2015/09/46083/&#34;&gt;20年後：インターネットの自由という夢の死&lt;/a&gt;」も併せて読むとよい。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;https://wirelesswire.jp/2015/09/46083/&#34;&gt;20年後：インターネットの自由という夢の死&lt;/a&gt;」については「&lt;a href=&#34;http://text.baldanders.info/remark/2015/information-oriented-society/&#34;&gt;『「情報社会」が「社会」になった時代』&lt;/a&gt;」でもちょろんと紹介したが，彼らの言う「インターネットの自由」ってのは結局，近代の欲望である「社会的包摂」をそのままネットに持ち込んでいるに過ぎない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
で，その「社会的包摂」がどうなったかは現代（late modernity）社会をみれば明らかだ。&lt;/p&gt;

&lt;p&gt;ネットが「異郷」である時代&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; はとっくに終わった。
今や「ネット」も「リアル」もひと続きの「社会」である。
リアルの社会で「社会的包摂」が破綻しているのに，ネットで上手くいく筈がないじゃない。&lt;/p&gt;

&lt;p&gt;だから問題は「インターネットの自由」なんてコップの中の話じゃなくて，ネットを含む「社会と自由」をどう整合させていくか，といった感じに「問い」を変えていかなければならない。
意味を失った「問い」の解を探し続けるのは「目的を失った市民運動」と同じくらい害悪である。&lt;/p&gt;

&lt;p&gt;そろそろ「インターネット」に引きこもって新参者を dis るのは止めたほうがいいと思うよ。&lt;/p&gt;

&lt;h3 id=&#34;それは-階級闘争-か:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;それは「階級闘争」か？&lt;/h3&gt;

&lt;p&gt;これに関連するかもしれないけど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chikawatanabe.com/2015/09/22/sharing_economy_labor_issues/&#34;&gt;階級闘争としてのシェアリング（またはオンデマンド）エコノミー | On Off and Beyond&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これって「階級闘争」というよりはむしろ「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;相対的剥奪&lt;/a&gt;」じゃないのかなぁ。&lt;/p&gt;

&lt;h2 id=&#34;p2p:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;金融インフラを Block Chain で代替する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/09/25/mijin/&#34;&gt;金融インフラをブロックチェーンで代替してコストを10分の1に、日本から「mijin」が登場 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は「それはとても理にかなってるね」と反応する側だが，それよりも日本がようやく「P2P アレルギー」から脱しつつある？ と思うと感慨深い。&lt;/p&gt;

&lt;h2 id=&#34;music:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「水のような音楽」の結末&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/09/24/20150923mo-users-mo-money/&#34;&gt;ストリーミングサービスの真実：レーベルは儲かっているがアーティストに利益が回っていない | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ストリーミング・サービスってのは結局のところ，今まで「水売り」から買ってた水を「水道局」から買うってことで&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，それで儲かってるのは流通を押さえている存在（＝出版社）なんだよね。&lt;/p&gt;

&lt;p&gt;記事では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;現在、ストリーミングサービスから得られるロイヤリティ料が少ないように見えるのは、ストリーミング自体がまだ新しいものだからだ。利用者が登録するほど、16ドルでCDが販売された時代と匹敵するほどの支払いをアーティストは手に入れることができるようになる。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/09/24/20150923mo-users-mo-money/&#34;&gt;ストリーミングサービスの真実：レーベルは儲かっているがアーティストに利益が回っていない&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;と書かれているが，はっきり言って（音楽）出版社への依存状態を減らしていかないと先はないと思う。
もうパトロンが食客を養う時代じゃないだろう。&lt;/p&gt;

&lt;p&gt;ところで国内の音楽ストリーミング・サービスはどれもイマイチだと思っていたが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;， &lt;a href=&#34;http://googlejapan.blogspot.jp/2015/09/google-play-music.html&#34;&gt;Google Play Music&lt;/a&gt; はかなりマシなサービスだと思う。
いや，私，嗜好が偏ってるから（笑）&lt;/p&gt;

&lt;p&gt;でも実は &lt;a href=&#34;http://googlejapan.blogspot.jp/2015/09/google-play-music.html&#34;&gt;Google Play Music&lt;/a&gt; はあまり利用してない。
何故なら私のケータイには既に2千曲以上入ってるし（主に CD から落としたのと Amazon MP3 で買ったやつ），知らない音楽を「発見」するなら &lt;a href=&#34;http://www.shoutcast.com/&#34;&gt;SHOUTcast&lt;/a&gt; で充分だから。
私があと30歳若かったら違う感想を持ったんだろうけどねぇ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;そういえば手塚治虫さんの名作『火の鳥』の「未来編」では，人類で唯一生き残ったマサトが「彼女」を作るために大量のロボットを作るけど，その度に絶望するシーンがあって子どもながらに衝撃的だった（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;性欲がモノに向かっていくなら，むしろ性犯罪の抑制になる？
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;違うのは「物語（narrative）」ではなく「技術」で包摂しようとしていることだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;ここでいう「時代」とは，もちろんインターネットのタイムスケールの話だよ。インターネットでは「4年ひと昔」だ。今なら「2年ひと昔」かもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;島根県松江市みたいに水道代がやたら高いところには当てはまらないかもだけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;Apple Music は除く。何故なら私は Apple 製品を持ってないから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
