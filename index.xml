<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-02-17:/</id>
	<updated>2016-02-17T16:04:06+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>glibc ライブラリの脆弱性 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/vulnerability-glibc-library/" />
		<id>tag:text.Baldanders.info,2016-02-17:/remark/2016/02/vulnerability-glibc-library/</id>
		<published>2016-02-17T16:04:06+09:00</published>
		<updated>2016-02-17T16:04:06+09:00</updated>
		<summary>glibc にスタックベースのバッファオーバーフロー脆弱性が存在する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;脆弱性の内容:e17e5ad34bc57404b3093fd3871c0368&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;GNU C ライブラリ（glibc）に &lt;code&gt;send_dg()&lt;/code&gt; および &lt;code&gt;send_vc()&lt;/code&gt; の処理に起因するスタックベースのバッファオーバーフロー脆弱性が存在する。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The glibc DNS client side resolver is vulnerable to a stack-based buffer overflow when the getaddrinfo() library function is used. Software using this function may be exploited with attacker-controlled domain names, attacker-controlled DNS servers, or through a man-in-the-middle attack.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://googleonlinesecurity.blogspot.jp/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html&#34;&gt;Google Online Security Blog: CVE-2015-7547: glibc getaddrinfo stack-based buffer overflow&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;影響度はさほど大きくないが glibc は中核的なライブラリであり，広範囲の製品に影響する可能性がある。
&lt;a href=&#34;https://github.com/fjserna/CVE-2015-7547&#34;&gt;Proof of Concept&lt;/a&gt; あり。&lt;/p&gt;

&lt;h3 id=&#34;影響度-cvss:e17e5ad34bc57404b3093fd3871c0368&#34;&gt;影響度（CVSS）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CVSSv3 基本評価値 6.5 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:L)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品:e17e5ad34bc57404b3093fd3871c0368&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;glibc 2.9 以降を含む製品&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;対策-回避策:e17e5ad34bc57404b3093fd3871c0368&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceware.org/ml/libc-alpha/2016-02/msg00416.html&#34;&gt;パッチが提供&lt;/a&gt;されているので適用すること。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考:e17e5ad34bc57404b3093fd3871c0368&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://googleonlinesecurity.blogspot.jp/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html&#34;&gt;Google Online Security Blog: CVE-2015-7547: glibc getaddrinfo stack-based buffer overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU97236594/&#34;&gt;JVNVU#97236594: glibc にバッファオーバーフローの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2016/at160009.html&#34;&gt;glibc ライブラリの脆弱性 (CVE-2015-7547) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>個人番号カードを発行してもらいました - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/my-number-card/" />
		<id>tag:text.Baldanders.info,2016-02-16:/remark/2016/02/my-number-card/</id>
		<published>2016-02-16T12:47:08+09:00</published>
		<updated>2016-02-16T12:47:08+09:00</updated>
		<summary>実は昨年末に申請したのにさっぱり音沙汰なしで私も忘れてたんだけど，先日交付の案内が来たので区役所に行ってきた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;実は昨年末に申請したのにさっぱり音沙汰なしで私も忘れてたんだけど，先日交付の案内が来たので区役所に行ってきた。&lt;/p&gt;

&lt;p&gt;申請は Web でできる。
顔写真を提出しないといけないが，スマホの自撮りで大丈夫なようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kojinbango-card.go.jp/kofushinse/pc.html&#34;&gt;マイナンバーカード総合サイト／パソコンによる申請方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kojinbango-card.go.jp/kofushinse/checkpoint.html&#34;&gt;マイナンバーカード総合サイト／顔写真のチェックポイント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;交付に際して準備するもの:162c067b8fb38986607ce8aaaa2e0a75&#34;&gt;交付に際して準備するもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;個人番号通知カード（あの紙ペラのやつ）&lt;/li&gt;
&lt;li&gt;交付案内のハガキ&lt;/li&gt;
&lt;li&gt;身分を証明するもの（運転免許証等）&lt;/li&gt;
&lt;li&gt;住基カード（既に持っている人のみ）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一応，印鑑も持って行ったのだが不要だった。&lt;/p&gt;

&lt;p&gt;未成年の場合は法定代理人と同伴する必要があり，法定代理人の身分証明も必要。
自分で受け取りに行けない場合&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:162c067b8fb38986607ce8aaaa2e0a75:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:162c067b8fb38986607ce8aaaa2e0a75:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; は代理人を立てることができる。
この場合は委任状（交付案内のハガキに書く欄がある）が必要で，事前にパスワード等を決めておく必要がある。&lt;/p&gt;

&lt;p&gt;既に住基カードを持っている人は個人番号カードと交換になるようだ。
なお，この作業により場合によっては即日交付できないことがあるそうな。&lt;/p&gt;

&lt;h2 id=&#34;暗証番号およびパスワードを決める:162c067b8fb38986607ce8aaaa2e0a75&#34;&gt;暗証番号およびパスワードを決める&lt;/h2&gt;

&lt;p&gt;交付に際し，3つの暗証番号と1つのパスワードを決める必要がある。
これは役所で説明してくれる。
それぞれ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;住基関連の事務に必要な暗証番号&lt;/li&gt;
&lt;li&gt;電子申請等において個人番号や氏名等の情報をカード（の IC チップ）から読み出すための暗証番号&lt;/li&gt;
&lt;li&gt;利用者証明用電子証明書を利用するための暗証番号&lt;/li&gt;
&lt;li&gt;署名用電子証明書&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:162c067b8fb38986607ce8aaaa2e0a75:aa&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:162c067b8fb38986607ce8aaaa2e0a75:aa&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を利用するためのパスワード&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;と役割が異なっているため，全て異なる値にしたほうがよい（役所では3つの暗証番号は同じでもよいと説明されたが，特に3番目は民間利用も想定しているようなので別にしておいたほうが安全）。
当然ながらスマホやキャッシュカードの暗証番号を流用するのはダメ。
自分や家族の誕生日もダメだよ！&lt;/p&gt;

&lt;p&gt;パスワードは英数字で6～16文字で設定できる。
ただし英小文字は使えないので文字が36種しか使えない。&lt;/p&gt;

&lt;p&gt;IPA の「&lt;a href=&#34;https://www.ipa.go.jp/security/ipg/documents/dev_setting_crypt.html&#34; title=&#34;IPA 独立行政法人 情報処理推進機構：情報漏えいを防ぐためのモバイルデバイス等設定マニュアル&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル&lt;/a&gt;」にパスワードの解読しやすさについて説明した表があるので以下に引用する&lt;/p&gt;

&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;4&#39;&gt;利用する文字種類数と内訳&lt;/th&gt;
&lt;th colspan=&#39;4&#39;&gt;パスワード長&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;種類数&lt;/th&gt;
&lt;th&gt;数字&lt;/th&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;シンボル&lt;/th&gt;
&lt;th&gt;4文字&lt;/th&gt;
&lt;th&gt;8文字&lt;/th&gt;
&lt;th&gt;12文字&lt;/th&gt;
&lt;th&gt;16文字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;      &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{13.3}$）&lt;/td&gt;&lt;td&gt;1円未満（$2^{26.6}$）&lt;/td&gt;  &lt;td&gt;約35円（$2^{39.9}$）&lt;/td&gt;     &lt;td&gt;約35万円（$2^{53.2}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;36種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;/td&gt;       &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{20.7}$）&lt;/td&gt;&lt;td&gt;約100円（$2^{41.4}$）&lt;/td&gt;  &lt;td&gt;約1.65億円（$2^{62.0}$）&lt;/td&gt; &lt;td&gt;約276兆円（$2^{82.7}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;62種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{23.8}$）&lt;/td&gt;&lt;td&gt;約7,500円（$2^{47.6}$）&lt;/td&gt;&lt;td&gt;約1,120億円（$2^{71.5}$）&lt;/td&gt;&lt;td&gt;約165京円（$2^{95.3}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;94種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;&lt;code style=&#39;font-size:smaller;&#39;&gt;! &#34; # $ %&lt;br&gt;&amp;amp; &#39; ( ) =&lt;br&gt;~ | - ^ `&lt;br&gt;¥ { @ [&lt;br&gt;+ * ] ; :&lt;br&gt;} &amp;lt; &amp;gt; ? _&lt;br&gt;, . /&lt;/code&gt;&lt;/td&gt;
                                                             &lt;td&gt;1円未満（$2^{26.2}$）&lt;/td&gt;&lt;td&gt;約21万円（$2^{52.4}$）&lt;/td&gt; &lt;td&gt;約16.5兆円（$2^{78.7}$）&lt;/td&gt; &lt;td&gt;約129,000京円（$2^{104.9}$）&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;パスワード解読の想定コスト例（&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より）&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これは完全にランダムな文字列のパスワードを brute-force 攻撃によって1日で解読する際にかかるコストである。
36種の文字列の場合，8文字のパスワードでもたかだか100円のコストで破れてしまう点に注意して欲しい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:162c067b8fb38986607ce8aaaa2e0a75:pwd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:162c067b8fb38986607ce8aaaa2e0a75:pwd&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;パスワードを覚えるなんて脳味噌の無駄遣い:162c067b8fb38986607ce8aaaa2e0a75&#34;&gt;パスワードを覚えるなんて脳味噌の無駄遣い&lt;/h3&gt;

&lt;p&gt;これはいつも言っていることだが「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000739.shtml&#34;&gt;パスワードを覚えるなんて脳味噌の無駄遣い&lt;/a&gt;」である。
人間の頭で考えるパスワードなんてたかが知れている。
brute-force を使うまでもなくもっと簡単に解読できる。&lt;/p&gt;

&lt;p&gt;個人番号カードの交付を受ける際は，パスワード管理ツール等を使って事前に3つの暗証番号と1つのパスワードを決めておくとよい。
私は &lt;a href=&#34;https://play.google.com/store/apps/details?id=keepass2android.keepass2android&#34; title=&#34;Keepass2Android Password Safe - Google Play の Android アプリ&#34;&gt;Keepass2Android&lt;/a&gt; を愛用しているので，交付までの待ち時間で暗証番号とパスワードを生成して登録しておいた。
（言うまでもないことだが，パスワード管理ツールのデータベースは確実に暗号化しておくんだよ）&lt;/p&gt;

&lt;h2 id=&#34;個人番号カードの有効期限:162c067b8fb38986607ce8aaaa2e0a75&#34;&gt;個人番号カードの有効期限&lt;/h2&gt;

&lt;p&gt;個人番号カード自体は身分証明としても使え，10年の有効期限がある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:162c067b8fb38986607ce8aaaa2e0a75:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:162c067b8fb38986607ce8aaaa2e0a75:b&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
厳密には交付から10回目の誕生日まで。
たとえば誕生日が12月31日の人が今日2016年2月16日に交付を受けたとしたら，2025年12月31日が有効期限となる。
そこからさらに延長するのであれば顔写真を撮り直して再交付してもらう必要がある。&lt;/p&gt;

&lt;p&gt;ただし署名用電子証明書および利用者証明用電子証明書については有効期限が5年となっている。
先程の例でいけば2020年12月31日が有効期限。&lt;/p&gt;

&lt;p&gt;役所等から有効期限について事前にアナウンスされることはない（詐欺防止のため？）。
したがってカードおよび証明書の管理は自分で行う必要がある。
ちなみにカードの有効期限（10年）はカードに印刷されているが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:162c067b8fb38986607ce8aaaa2e0a75:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:162c067b8fb38986607ce8aaaa2e0a75:c&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，電子証明書の有効期限は空欄になっている。
これって自分で書けってことなのかなぁ？&lt;/p&gt;

&lt;h2 id=&#34;再交付:162c067b8fb38986607ce8aaaa2e0a75&#34;&gt;再交付&lt;/h2&gt;

&lt;p&gt;もちろん個人番号カードの紛失・盗難の際には再交付してもらえる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:162c067b8fb38986607ce8aaaa2e0a75:mn&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:162c067b8fb38986607ce8aaaa2e0a75:mn&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
ちなみに有料（800円＋200円）。
その前に一時停止してもらわないといけないが。
個人番号カードの裏にコールセンター（24時間受け付け）の番号が書いてあるので控えておくといいだろう。&lt;/p&gt;

&lt;p&gt;暗証番号やパスワードの変更も受けつけているそうな。
また暗証番号は3回，パスワードは5回間違うとロックアウトされるが，ロックアウトの解除は役所で申請書を書かせられるらしい。
面倒だがしょうがないか。&lt;/p&gt;

&lt;p&gt;また，氏名・生年月日・性別・住所が変更になった場合（記述間違いの更新を含む）は署名用電子証明書を更新する必要がある。
これも有料かな。&lt;/p&gt;

&lt;p&gt;個人番号カードにかぎらずカード状のものは紛失・盗難リスクが高いので，むやみに持ち歩かないほうがいいんだけどね。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:162c067b8fb38986607ce8aaaa2e0a75:a&#34;&gt;「仕事が忙しい」は代理を立てる理由にならないらしい。役所によっては土日も受け付けてくれる場合がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:162c067b8fb38986607ce8aaaa2e0a75:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:162c067b8fb38986607ce8aaaa2e0a75:aa&#34;&gt;署名用電子証明書は15歳未満には発行されない。なお，電子証明書を個人番号カードに格納しない選択もできる。これは申請時に選択する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:162c067b8fb38986607ce8aaaa2e0a75:aa&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:162c067b8fb38986607ce8aaaa2e0a75:pwd&#34;&gt;実際にはこんなに単純ではないのだが，8文字と12文字で解読しにくさが格段にアップするというのは覚えておいていいだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:162c067b8fb38986607ce8aaaa2e0a75:pwd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:162c067b8fb38986607ce8aaaa2e0a75:b&#34;&gt;未成年者は5年。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:162c067b8fb38986607ce8aaaa2e0a75:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:162c067b8fb38986607ce8aaaa2e0a75:c&#34;&gt;面白いことに有効期限は元号ではなく西暦で書かれている。これって10年後も「平成」とは限らないってことなのかねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:162c067b8fb38986607ce8aaaa2e0a75:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:162c067b8fb38986607ce8aaaa2e0a75:mn&#34;&gt;本当は個人番号自体も変更すべきだろうけど。情報漏洩等の場合は変更可能らしいが，現場では抵抗されるだろうなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:162c067b8fb38986607ce8aaaa2e0a75:mn&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>もう紙の本は買わない - 私のEブック管理法 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/no-more-paper-books/" />
		<id>tag:text.Baldanders.info,2016-02-15:/remark/2016/02/no-more-paper-books/</id>
		<published>2016-02-15T20:37:10+09:00</published>
		<updated>2016-02-15T20:37:10+09:00</updated>
		<summary>そこに山程ある本は，どうせ死ぬまでに売るか捨てるかして手元からなくなるのである。諸行無常。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;最初に言っておくが，私は紙の本が大好きである。
巷にあるEブック&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:57bdb602e796a9770046682b6c46a7f6:eb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:57bdb602e796a9770046682b6c46a7f6:eb&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; が紙の本に比べて決定的に劣っている点は「Eブックでは所有欲を満たせない」ことだ。&lt;/p&gt;

&lt;p&gt;しかし考えてみて欲しい。
自分の体重の何百倍（ひとによっては何千倍）もある「紙の本」達は所詮「あの世」へは持って行けないのだ。
私はそれを昨年思い知った&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:57bdb602e796a9770046682b6c46a7f6:bbb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:57bdb602e796a9770046682b6c46a7f6:bbb&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;今日の戯れ言：週末は掃除三昧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今では9割以上の本を Kindle で買っている。
残り1割弱が紙の本または Kindle 以外のEブック（PDF 等）である。
（基本的には）紙の本は買わない。
悲しい思いをするのはもうたくさんである。&lt;/p&gt;

&lt;p&gt;Kindle に関して面白い記事があった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mercury-c.hateblo.jp/entry/2016/02/12/223324&#34;&gt;Kindleで二千冊持っているぼくの管理方法 - 水星さん家&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私が Kindle サービスを利用するようになったのは&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000610.shtml&#34; title=&#34;Nexus 7 と Kindle と... — Baldanders.info&#34;&gt;2012年の後半&lt;/a&gt;から。
Nexus 7 と Kindle の相性は非常によい。
&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000487.shtml&#34; title=&#34;iPad は「窮屈な箱」か — Baldanders.info&#34;&gt;初代 iPad&lt;/a&gt; が3年で置き時計と成り果てた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:57bdb602e796a9770046682b6c46a7f6:cb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:57bdb602e796a9770046682b6c46a7f6:cb&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; のとは対照的に， Nexus 7 は今でも大活躍中である。&lt;/p&gt;

&lt;p&gt;私はそれほど読書家というわけではないが，今調べてみたら Kindle で購入したタイトルは550ほどあった。
他に論文や技術文書等の PDF や ePub 文書が150タイトル程度。
紙の本は数えたことはないが少なくとも千冊程度はあるんじゃないかな。
30年以上の累積だからね。&lt;/p&gt;

&lt;p&gt;上の記事でも指摘されているが， Kindle を利用するようになって衝動買いが増えたのは確か。
さっきも yomoyomo さんの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yamdas.org/booklog/liberalism.html&#34;&gt;yomoyomoの読書記録 - 井上達夫『リベラルのことは嫌いでも、リベラリズムは嫌いにならないでください&amp;ndash;井上達夫の法哲学入門』（毎日新聞出版）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を読んでポチってしまいました。
後で読む。&lt;/p&gt;

&lt;p&gt;若いころは履歴書の「趣味」の欄に「本屋巡り」と書いてたほど本屋さんが好きだったが，今は&lt;a href=&#34;http://text.baldanders.info/remark/2015/books/&#34;&gt;本屋に全く期待するものがない&lt;/a&gt;ため専ら Amazon で購入しているし，面白い本を「見つける」のも本屋ではなくネットである。&lt;/p&gt;

&lt;p&gt;ラノベをよく読むようになったのも Kindle の影響が大きい。
紙の本でまともに買ってたラノベのシリーズは「涼宮ハルヒ」シリーズと「這いよれ！ ニャル子さん」のシリーズくらい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:57bdb602e796a9770046682b6c46a7f6:mt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:57bdb602e796a9770046682b6c46a7f6:mt&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; だが，それも&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;この前の掃除&lt;/a&gt;で全部捨てた。
Kindle で買えるし。&lt;/p&gt;

&lt;p&gt;Eブックが紙の本より優れている点は「置き場所に困らない」ことである。
紙の本はどうしても部屋が魔窟化してしまう。&lt;/p&gt;

&lt;p&gt;Kindle で買った本は常にクラウドに置かれる。
私が持ってる Nexus 7 はストレージが32GBしかないので，550冊もの本は入らない。
私の場合は漫画が多いせいもあるが。
なので Kindle アプリを都度リセットしてダウンロードした本を端末からクリアしている。
PDF も基本はクラウド・ストレージに入れている。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://mercury-c.hateblo.jp/entry/2016/02/12/223324&#34;&gt;Kindleで二千冊持っているぼくの管理方法&lt;/a&gt;」ではコレクション機能はスルーみたいに書いてあったが，私は重宝している。
私の場合は好きな著者とシリーズタイトルと関心領域で整理していて，それ以外の分類は全部「その他」にぶち込んでいる。
本棚ならエリアで本を分けるが，同じ要領でコレクション機能を使える。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21549048532/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/570/21549048532_5205dd7322.jpg&#34; alt=&#34;竹本泉エリア。整理したら３段ぶち抜きになってしまった&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21549048532/&#34;&gt;竹本泉エリア。整理したら３段ぶち抜きになってしまった&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;しかもひとつのタイトルに対して複数のコレクション項目を割り当てられる。&lt;/p&gt;

&lt;p&gt;まぁ私の場合は，上で書いたように，550冊程度しかないのでこれで十分管理できる。
&lt;a href=&#34;http://mediamarker.net/u/spiegel/&#34; title=&#34;Spiegel の本棚 - メディアマーカー&#34;&gt;MediaMarker は私も利用している&lt;/a&gt;が，昔に買った紙の本も含めて全部登録しているわけではないし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:57bdb602e796a9770046682b6c46a7f6:asin&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:57bdb602e796a9770046682b6c46a7f6:asin&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，検索に使おうという気も起きない。
私が &lt;a href=&#34;http://mediamarker.net/&#34; title=&#34;メディアマーカー&#34;&gt;MediaMarker&lt;/a&gt; を使うのは&lt;a href=&#34;http://mediamarker.net/help/blogparts&#34; title=&#34;メディアマーカー - ブログパーツ&#34;&gt;ブログパーツ&lt;/a&gt;と Twitter/Facebook 連携が目当てである。&lt;/p&gt;

&lt;p&gt;そもそも自分で買って読んだ本を「探す」ことは殆どない。
紙の本にしろ Kindle にしろ，何処に何の本があるかは「知っている」ので探すという行為がないのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:57bdb602e796a9770046682b6c46a7f6:nd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:57bdb602e796a9770046682b6c46a7f6:nd&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
まぁ何万冊も持ってる人なら「探す」必要があるかも知れないが。&lt;/p&gt;

&lt;p&gt;というわけで，読んだことある本なら管理するまでもないだろ，というお話でした。&lt;/p&gt;

&lt;p&gt;最後に年寄りから若い人に忠告。
自宅の（仕事以外の）本棚はひとつまでに限ること。&lt;/p&gt;

&lt;p&gt;たくさん読む人はでっかい本棚をひとつ設置すればよい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:57bdb602e796a9770046682b6c46a7f6:bs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:57bdb602e796a9770046682b6c46a7f6:bs&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
本棚がいくつあっても部屋の魔窟化は止まらないし，それよりはひとつの本棚の中に如何に本を厳選するか考える方がよい。
部屋に入らないほど本が増えてから整理しようとしても無理である。&lt;/p&gt;

&lt;p&gt;本棚に入らない本はEブックを買うか（読み捨てでいいなら）公共図書館を利用すべき。
そこに山程ある本は，どうせ死ぬまでに売るか捨てるかして手元からなくなるのである。
諸行無常。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KAOQXTS/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51JKldeFctL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KAOQXTS/baldandersinf-22/&#34;&gt;アメリカの電子書籍“ブーム”は今 (カドカワ・ミニッツブック)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;大原 ケイ &lt;/dd&gt;&lt;dd&gt;ブックウォーカー 2014-05-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00OK0FKTM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00OK0FKTM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Sleeping Beauty: A Collection of Moco&#39;s Sleeping Postures: モコちゃんの寝姿大全&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00IJ5GMAU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00IJ5GMAU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;電子書籍の最新事情が1時間でわかる電子書籍 (All About Books)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0WJTFE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0WJTFE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;本は死なない　Ａｍａｚｏｎキンドル開発者が語る「読書の未来」&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NUFMHR6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00NUFMHR6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ナナのリテラシー２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KKCOTRI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00KKCOTRI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;電子書籍制作・流通の基礎テキスト&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;『ルポ 電子書籍大国アメリカ』の続編的な位置づけ。2013年米国の出版状況の分析と今後についての予測。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-18&#34;&gt;2014/10/18&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B009IMAGYQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51z%2BiAd-8QL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B009IMAGYQ/baldandersinf-22/&#34;&gt;犬とハサミは使いよう　１&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;更伊 俊介 鍋島 テツヒロ &lt;/dd&gt;&lt;dd&gt;KADOKAWA / エンターブレイン 2011-02-28&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJIZYM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJIZYM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう2&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJJ01O/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJJ01O.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう3&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJJ05A/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJJ05A.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう4&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJJ03M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJJ03M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう5&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CPEB6PW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CPEB6PW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう6&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;犬になっても本を読む！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-26&#34;&gt;2015/04/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:57bdb602e796a9770046682b6c46a7f6:eb&#34;&gt;日本で&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000650.shtml&#34; title=&#34;「さようなら、「電子書籍」」他 — Baldanders.info&#34;&gt;「電子書籍」という言葉は官製用語&lt;/a&gt;なので，もう使うべきではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:57bdb602e796a9770046682b6c46a7f6:eb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:57bdb602e796a9770046682b6c46a7f6:bbb&#34;&gt;親に「お前が死んでお金を払ってこの本を処分するのは遺された家族なんだぞ」と言われた。でも全部は捨てられなかったけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:57bdb602e796a9770046682b6c46a7f6:bbb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:57bdb602e796a9770046682b6c46a7f6:cb&#34;&gt;ちなみに我が家の目覚まし時計としては &lt;a href=&#34;https://www.chumby.com/&#34;&gt;Chumby&lt;/a&gt; が今だに現役を続けている。 iPad はホンマにただの置き時計（日曜朝だけワンセグテレビ）である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:57bdb602e796a9770046682b6c46a7f6:cb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:57bdb602e796a9770046682b6c46a7f6:mt&#34;&gt;「数学ガール」をこれに含めるかどうかは微妙だが，これも一応全部買っている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:57bdb602e796a9770046682b6c46a7f6:mt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:57bdb602e796a9770046682b6c46a7f6:asin&#34;&gt;そもそもこの手のサービスは Amazon の ASIN コードで整理されていることがほとんどだし， ASIN コードすら割り当てられてない古い本には使えない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:57bdb602e796a9770046682b6c46a7f6:asin&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:57bdb602e796a9770046682b6c46a7f6:nd&#34;&gt;納戸にしまってある本は「引っ張りだす」という行為が必要だけど（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:57bdb602e796a9770046682b6c46a7f6:nd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:57bdb602e796a9770046682b6c46a7f6:bs&#34;&gt;ちなみに私は仕事部屋に本棚が4つある。あと実家に2つ。これらの本はどうしても捨てられなかった。本棚の数は執着の数である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:57bdb602e796a9770046682b6c46a7f6:bs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>オンラインでプログラミング - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/online-programming/" />
		<id>tag:text.Baldanders.info,2016-02-14:/remark/2016/02/online-programming/</id>
		<published>2016-02-14T20:19:41+09:00</published>
		<updated>2016-02-14T20:19:41+09:00</updated>
		<summary>paiza.IO を試してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;先ほどの「&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/14-stories/&#34;&gt;週末スペシャル&lt;/a&gt;」でも紹介したが， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; を試してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paiza.io/&#34;&gt;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochiiiY/items/b3b3f7ece1dedca1d4e1&#34;&gt;GistをPaiza.ioで使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コードを試すだけならアカウントはいらないが，コードを再利用したり他のサービスと連携する場合はサインアップが必要。
&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; アカウントと連携できるのでその辺は問題ないだろう。&lt;/p&gt;

&lt;p&gt;まず「&lt;a href=&#34;http://localhost:1313/golang/stack-trace-and-panic-handling/&#34;&gt;スタック追跡とパニック・ハンドリング&lt;/a&gt;」のコード例を &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で&lt;a href=&#34;https://paiza.io/projects/MencTrqIn3FYdg6u53xNSg&#34;&gt;書いてみた&lt;/a&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;iframe src=&#34;https://paiza.io/projects/e/MencTrqIn3FYdg6u53xNSg?theme=github&#34; width=&#34;100%&#34; height=&#34;500&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;&gt;&lt;/iframe&gt;


&lt;/figure&gt;

&lt;p&gt;こんな感じでコードと実行結果を埋め込むこともできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
また埋め込まれたコードはその場で編集して実行し直すこともできる。
試しに for 文の中を以下のコードに差し替えて実行してみて欲しい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for depth := 0; ; depth++ {
	pc, _, line, ok := runtime.Caller(depth)
	if !ok {
		break
	}
	fmt.Fprintf(log, &amp;quot; -&amp;gt; %d: %s: (%d)\n&amp;quot;, depth, runtime.FuncForPC(pc).Name(), line)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で書いたコードは Gist と連携できる。
たとえば上のコードは&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;&#39;&gt;
&lt;script src=&#34;https://gist.github.com/spiegel-im-spiegel/89526909cc206f31c1d7.js&#34;&gt;&lt;/script&gt;
&lt;/figure&gt;

&lt;p&gt;という感じで Gist に保存されている。
Gist との同期は自動ではなく明示的に指定する必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で書いたコードで他の（Twitter API などの）サービスと接続することも可能。
&amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” では外部との通信はできないので，これは嬉しい機能である。
たとえば「&lt;a href=&#34;http://text.baldanders.info/golang/get-shortened-url-from-gitio/&#34;&gt;Git.io から短縮 URL を取得するコード&lt;/a&gt;」を参考に書いたコードがこれ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;iframe src=&#34;https://paiza.io/projects/e/uUG8z-Teb45q4RZIBSSAeg?theme=github&#34; width=&#34;100%&#34; height=&#34;500&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;&gt;&lt;/iframe&gt;


&lt;/figure&gt;

&lt;p&gt;実行をスケジューリングすることも可能なので，簡単なサーバ監視プログラムとか，色々な使い方ができそうである。&lt;/p&gt;

&lt;p&gt;更に &lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt; でコードを書くことも可能。
あらかじめ @&lt;a href=&#34;https://twitter.com/paiza_run&#34;&gt;paiza_run&lt;/a&gt; を follow しておいて&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/paiza_run&#34;&gt;@paiza_run&lt;/a&gt; go: package main&lt;br&gt;import &amp;quot;fmt&amp;quot;&lt;br&gt;func main() {&lt;br&gt;    fmt.Println(&amp;quot;Hello World!&amp;quot;)&lt;br&gt;}&lt;/p&gt;&amp;mdash; Spiegel im Spiegel (@spiegel_2007) &lt;a href=&#34;https://twitter.com/spiegel_2007/status/698818840533184512&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;とコードを投げれば&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/spiegel_2007&#34;&gt;@spiegel_2007&lt;/a&gt; Hello World! &lt;a href=&#34;https://twitter.com/hashtag/paiza_run_result?src=hash&#34;&gt;#paiza_run_result&lt;/a&gt;&lt;/p&gt;&amp;mdash; paiza_run (@paiza_run) &lt;a href=&#34;https://twitter.com/paiza_run/status/698818848921776128&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;と結果が返ってくる。
これはスクリプト言語でやったほうが面白いかな。&lt;/p&gt;

&lt;p&gt;更に更に，他のユーザが書いたコードを fork することも可能。
またチャット等でリアルタイムにやり取りしながらコードを書くこともできるみたい。
遠隔ペアプログラミングとかできそうだよね。&lt;/p&gt;

&lt;p&gt;ただし， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; では実行時間と使えるメモリに制限があって，大体どの言語でも2秒で512MBが制限になっている模様。
また &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は標準以外の外部パッケージが使えない。
たとえば以下は「&lt;a href=&#34;http://text.baldanders.info/golang/transform-character-encoding/&#34;&gt;文字エンコーディング変換&lt;/a&gt;」で書いたコードだが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;golang.org/x/text/encoding/japanese&amp;quot;
	&amp;quot;golang.org/x/text/transform&amp;quot;
)

func main() {
	reader := NewDecoder(os.Stdin)
	writer := NewEncoder(os.Stdout)
	if _, err := io.Copy(writer, reader); err != nil {
		fmt.Fprintln(os.Stderr, err)
	}
}

func NewDecoder(reader io.Reader) *transform.Reader {
	return transform.NewReader(reader, japanese.ShiftJIS.NewDecoder())
}

func NewEncoder(writer io.Writer) *transform.Writer {
	return transform.NewWriter(writer, japanese.EUCJP.NewEncoder())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; ではコンパイル時にエラーになる。&lt;/p&gt;

&lt;p&gt;欲を言えば &amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” にあるようなコードの整形機能が欲しいところである。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;ただし埋め込んだコードを表示するにはブラウザ設定で third-party cookie を有効にする必要がある。 Firefox であれば例外設定をすることもできる。いや，こういうのマジ勘弁して欲しいんですけど。今時 third-party cookie とかありえない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： LIGO が重力波の「直接検出」に成功する！ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/14-stories/" />
		<id>tag:text.Baldanders.info,2016-02-14:/remark/2016/02/14-stories/</id>
		<published>2016-02-14T14:00:52+09:00</published>
		<updated>2016-02-17T14:07:11+09:00</updated>
		<summary>LIGO が重力波の「直接検出」に成功する！ / aozorahack.org ドメインの取得 / オンラインのプログラム実行環境 paiza.IO / パスワードや秘密鍵の管理はどうしてますか？ / 達人出版会から「数学ガールの秘密ノート」の PDF 版が出てるらしい</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ligo:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;LIGO が重力波の「直接検出」に成功する！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aozora:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;aozorahack.org ドメインの取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#paiza:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;オンラインのプログラム実行環境 paiza.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#yubikey:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;パスワードや秘密鍵の管理はどうしてますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mathgirl:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;達人出版会から「数学ガールの秘密ノート」の PDF 版が出てるらしい&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ligo:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;LIGO が重力波の「直接検出」に成功する！&lt;/h2&gt;

&lt;p&gt;先週に &lt;a href=&#34;https://www.ligo.caltech.edu/&#34;&gt;LIGO （Laser Interferometer Gravitational wave Observatory）&lt;/a&gt;から「アナウンスがあるよ」って予告されてたけど，このことだったとは。
知らない人は「なにそれ？」って感じだろうし，オカルトな人は「波動が科学的に証明された」とかワケワカメなことを言い出しそうだけど，これはホンマに凄いことなのですよ。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/GravitationalWaves?src=hash&#34;&gt;#GravitationalWaves&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/hashtag/BinaryBlackHole?src=hash&#34;&gt;#BinaryBlackHole&lt;/a&gt; detected on September 14, 2015 @ 9:51AM UTC by &lt;a href=&#34;https://twitter.com/LIGOWA&#34;&gt;@LIGOWA&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/LIGOLA&#34;&gt;@LIGOLA&lt;/a&gt; observatories.&lt;/p&gt;&amp;mdash; LIGO (@LIGO) &lt;a href=&#34;https://twitter.com/LIGO/status/697806099135754244&#34;&gt;2016, 2月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.116.061102&#34;&gt;Phys. Rev. Lett. 116, 061102 (2016) - Observation of Gravitational Waves from a Binary Black Hole Merger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dcc.ligo.org/LIGO-P1500238/public/main&#34;&gt;Characterization of transient noise in Advanced LIGO relevant to gravitational wave signal GW150914&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sciencemuseum.org.uk/first-ever-gravitational-waves-detected/&#34;&gt;First ever gravitational waves detected | Science Museum Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ligo.org/news/detection-press-release.pdf&#34;&gt;GRAVITATIONAL WAVES DETECTED 100 YEARS AFTER EINSTEIN’S PREDICTION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nature.com/news/einstein-s-gravitational-waves-found-at-last-1.19361&#34;&gt;Einstein&amp;rsquo;s gravitational waves found at last : Nature News &amp;amp; Comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.space.com/31922-gravitational-waves-detection-what-it-means.html&#34;&gt;Gravitational Waves: What Their Discovery Means for Science and Humanity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seti.org/seti-institute/gravity-waves-and-et&#34;&gt;Gravity Waves and ET | SETI Institute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scientificamerican.com/article/gravitational-waves-discovered-from-colliding-black-holes1/&#34;&gt;Gravitational Waves Discovered from Colliding Black Holes - Scientific American&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nao.ac.jp/news/topics/2016/20160212-gw.html&#34;&gt;LIGOによる重力波の直接検出について | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.icrr.u-tokyo.ac.jp/2016/02/12010659.html&#34;&gt;ICRR: 【コメント】LIGO-Virgoの重力波発見に関するKAGRAグループからのコメント - 東京大学宇宙線研究所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/02/12/114/&#34;&gt;重力波天文学に道開く - 初観測のＬＩＧＯチーム | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/02/12/192/&#34;&gt;「重力波」の観測に初成功 - アインシュタインの予言から100年目の大成果 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://natgeo.nikkeibp.co.jp/atcl/news/16/021200053/&#34;&gt;重力波、世紀の発見をもたらした壮大な物語 | ナショナルジオグラフィック日本版サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/02/12/ligo-gravitational-waves/&#34;&gt;13億年前の「ブラックホールの合体」で生じた重力波、検出される（動画あり） « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/12/20160211einsteins-gravitational-waves-have-been-detected-for-the-first-time/&#34;&gt;アインシュタインが予言した重力波、米中心のLIGOチームが史上初めて観測に成功 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/02/20160212_02.html&#34;&gt;2016年2月12日ニュース「アインシュタイン予言の重力波初観測 宇宙創成の謎解明に有力手掛かり」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jun-makino.sakura.ne.jp/articles/future_sc/note131.html&#34;&gt;重力波検出の意義と今後の進展(2016/2/12)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://core-u.hiroshima-u.ac.jp/blog/2016/02/15/core-u%E3%81%AB%E3%82%88%E3%82%8B%E9%87%8D%E5%8A%9B%E6%B3%A2%E5%A4%A9%E4%BD%93%E3%81%AE%E6%8E%A2%E6%9F%BB%E6%B4%BB%E5%8B%95/&#34;&gt;重力波天体からのガンマ線か？ フェルミ衛星がガンマ線バーストを観測広島大学極限宇宙研究拠点 CORE-U&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いちばん分かりやすいのは &lt;a href=&#34;http://apod.nasa.gov/&#34;&gt;APOD&lt;/a&gt; に掲載されたこの図かな。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://apod.nasa.gov/apod/ap160211.html&#34;&gt;&lt;img src=&#34;http://apod.nasa.gov/apod/image/1602/BHmerger_LIGO_3600.jpg&#34; height=&#34;374&#34; width=&#34;500&#34; alt=&#34;APOD: 2016 February 11 - LIGO Detects Gravitational Waves from Merging Black Holes&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://apod.nasa.gov/apod/ap160211.html&#34;&gt;APOD: 2016 February 11 - LIGO Detects Gravitational Waves from Merging Black Holes&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「重力波（gravitational wave または gravity wave）」はアインシュタイン博士の「一般相対性理論」で予言されてた現象。
ちなみに一般相対性理論は重力と時空間&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; の関係について考察した理論。&lt;/p&gt;

&lt;p&gt;実は「重力波」の存在自体は既に間接的には証明されている。
1974年に連星パルサー&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; の公転周期の軌道が短くなっていく現象が観測され，これが重力波の存在を示す間接的な証拠となった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
この研究を行ったチームは1993年にノーベル物理学賞を受賞している。
今回の「直接検出」はこれ以来の快挙であり，確かに「ノーベル賞級」の成果といえる。&lt;/p&gt;

&lt;p&gt;しかし連星ブラックホールかぁ。
おそらく各国・各組織の重力波検出の研究チームは1974年の観測成果を意識してパルサーをターゲットにしていたところが多かったのではないだろうか。&lt;/p&gt;

&lt;p&gt;2005年の &amp;ldquo;Einstein Year” に開始された &lt;a href=&#34;http://www.einsteinathome.org/&#34; title=&#34;Einstein@Home&#34;&gt;Einstein@Home&lt;/a&gt; でもパルサーの発見と観測が主である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://huaa.baldanders.info/log/000181.shtml&#34;&gt;Einstein@Home のすすめ &amp;ndash; Club-HUAA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ &lt;a href=&#34;https://www.ligo.caltech.edu/&#34; title=&#34;LIGO Lab | Caltech | MIT&#34;&gt;LIGO&lt;/a&gt; をソースとしながら &lt;a href=&#34;http://www.einsteinathome.org/&#34; title=&#34;Einstein@Home&#34;&gt;Einstein@Home&lt;/a&gt; は今回の発見に貢献できなかったわけだが，こんなコメントを残している。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Did Einstein@Home play any role in this? No, it didn’t. The signal in the instrument lasted only about 1/4 of a second. It’s not a continuous-wave signal like the type that Einstein@Home has been searching for. But since the observing run ended in mid January, we have been preparing the data to start a new low-frequency all-sky search for continuous gravitational waves. We are now starting to run this on Einstein@Home, so please sign up your computers and disable their sleep mode! In the next months we will extend the frequency range of the continuous waves all-sky searches, target interesting point sources and we are also gearing up to perform broader surveys for binary black hole mergers.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://einstein.phys.uwm.edu/forum_thread.php?id=11814&#34;&gt;Exciting news: Gravitational Waves detected!&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;いやぁ，夢が広がりますねぇ。&lt;/p&gt;

&lt;p&gt;重力を利用した天体観測は今では珍しくなくなりつつある。
たとえば光が重力で曲げられる（これも一般相対性理論で予言されていた）ことを利用した「重力レンズ」による観測は日本の &lt;a href=&#34;http://alma.mtk.nao.ac.jp/j/&#34;&gt;ALMA 望遠鏡&lt;/a&gt;の得意とするところである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.s.u-tokyo.ac.jp/ja/press/6857/&#34;&gt;視力13,000を達成！アルマ望遠鏡と重力レンズ望遠鏡のかけ合わせで　モンスター銀河の真の姿をとらえることに成功 — 東京大学 大学院理学系研究科・理学部&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの道具に重力波干渉計が加わっていくことになるだろう。
確実に天文学は新しいステージに上る。&lt;/p&gt;

&lt;h2 id=&#34;aozora:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;aozorahack.org ドメインの取得&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://honnomirai.net/&#34;&gt;本の未来基金&lt;/a&gt;」が aozorahack.org ドメインを取得したらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aozorahack/aozorahack/issues/35&#34;&gt;aozorahack.org サイトを準備する · Issue #35 · aozorahack/aozorahack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/aozorahack/&#34;&gt; aozorahack &lt;/a&gt; の今後の活躍を期待します。&lt;/p&gt;

&lt;h2 id=&#34;paiza:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;オンラインのプログラム実行環境 paiza.IO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paiza.io/&#34;&gt;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochiiiY/items/b3b3f7ece1dedca1d4e1&#34;&gt;GistをPaiza.ioで使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとで試してみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に関しては &amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” があるのでオン書きには困らないのだが， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; では様々な言語に対応しているのと，リアルタイム編集機能やチャット機能もあるそうなので，リモート環境でのペア・プログラミングみたいなことも出来そう。&lt;/p&gt;

&lt;h2 id=&#34;yubikey:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;パスワードや秘密鍵の管理はどうしてますか？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jkr_2255/items/6927758094c3078e62c5&#34;&gt;YubiKey+Pageantでらくらく秘密鍵管理 on Windows - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jkr_2255/items/f1ebd3fa4a9bf8ee1b03&#34;&gt;Git for WindowsのシェルからPageantでSSH - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dseg/items/77d77467970b1b510285&#34;&gt;秘密鍵、管理してますか? YubiKeyで鍵の一元管理とSSH接続、２段階認証の高速化を試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsuyoshi_cho/items/79c09905ae3f192b3a0f&#34;&gt;Windowsでのssh agent - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YubiKey については興味はあるのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，むしろ YubiKey を紛失しそうで怖いんだよなぁ。
自宅のメインマシンを Linux に換装したら色々試してみたい。&lt;/p&gt;

&lt;h2 id=&#34;mathgirl:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;達人出版会から「数学ガールの秘密ノート」の PDF 版が出てるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsu-zine.com/books/mathgirl-himitu-formula-graph&#34;&gt;数学ガールの秘密ノート／式とグラフ【委託】 - 達人出版会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hyuki.com/d/201602.html#i20160210160000&#34;&gt;結城浩の日記 - 達人出版会から『数学ガールの秘密ノート／式とグラフ』PDF版の販売を開始します。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サンプル版を見てみたが，「ページの抽出」以外のほとんどの機能が許可されている。
素晴らしい。&lt;/p&gt;

&lt;p&gt;実は今， PayPal は調整中&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; ですぐに使えないので買えるようになったら買います。
他のシリーズ（デザパタ本とか）も PDF で出るといいなぁ。&lt;/p&gt;

&lt;p&gt;そうそう。
PDF リーダは「自由なソフトウェア」を使いましょう。
Adobe Reader なんか要らんですよ。
偉い人にはそれが分からんのです。
Windows 環境なら &lt;a href=&#34;http://projects.gnome.org/evince/&#34;&gt;Evince&lt;/a&gt; がオススメ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pdfreaders.org/&#34;&gt;Get a Free Software PDF reader!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41yiQ7I2sLL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34;&gt;数学ガールの秘密ノート／式とグラフ&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2013-07-12&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;数学は「代数」の概念を理解し「幾何」と脳内連携できるとグッと世界が広がる。私が小学生ならこの本を夏休みの読書感想文と自由研究のネタにする。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-02-14&#34;&gt;2016-02-14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;「時空間」とは時間の流れを空間と同等な「次元」のひとつとみなす考え方。今ではみんな当たり前だと思っているかもしれないが，当時の物理学において「時空間」という考え方はかなり革新的で，それを論じた一般相対性理論はものすごいパラダイムシフトをもたらしたわけだ。そしてそれを「観測」によって証明できたということは理論の正しさを示すものでもある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;高速回転する中性子星のことをパルサー（pulsar）と呼ぶ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;連星パルサーは重力波を放出することによりエネルギーを失い公転周期が短くなるとかなんとか。で，実際に重力波があるとして計算した周期減少率が実際の観測と誤差の範囲内で一致したとかなんとか。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;gpg-agent でも使えると聞いているのだが試す環境がない。Anrdoid アプリの &lt;a href=&#34;https://www.openkeychain.org/&#34;&gt;OpenKeychain&lt;/a&gt; も NFC 経由で YubiKey が使えるらしいのだが&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;デビットカードは許可するくせに au WALLET は拒否られた。今時ネットでクレカは使いたくないのだが，どうしよう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Travis CI でクロス・コンパイル - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/cross-compiling-in-travis-ci/" />
		<id>tag:text.Baldanders.info,2016-02-13:/golang/cross-compiling-in-travis-ci/</id>
		<published>2016-02-13T19:37:11+09:00</published>
		<updated>2016-02-14T13:09:55+09:00</updated>
		<summary>今回は Travis CI から GitHub へ mitchellh/gox で生成した実行バイナリを deploy することを考える。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;gox-でまとめてクロス-コンパイル:fa953b67964726c338be9843a0c52e04&#34;&gt;Gox でまとめてクロス・コンパイル&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴のひとつにクロス・コンパイルの容易さがあるが，複数プラットフォームのビルドをまとめて行う &lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; を使うと便利である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get github.com/mitchellh/gox

$gox -h
Usage: gox [options] [packages]

  Gox cross-compiles Go applications in parallel.

  If no specific operating systems or architectures are specified, Gox
  will build for all pairs supported by your version of Go.

Options:

  -arch=&amp;quot;&amp;quot;            Space-separated list of architectures to build for
  -build-toolchain    Build cross-compilation toolchain
  -cgo                Sets CGO_ENABLED=1, requires proper C toolchain (advanced)
  -gcflags=&amp;quot;&amp;quot;         Additional &#39;-gcflags&#39; value to pass to go build
  -ldflags=&amp;quot;&amp;quot;         Additional &#39;-ldflags&#39; value to pass to go build
  -tags=&amp;quot;&amp;quot;            Additional &#39;-tags&#39; value to pass to go build
  -os=&amp;quot;&amp;quot;              Space-separated list of operating systems to build for
  -osarch=&amp;quot;&amp;quot;          Space-separated list of os/arch pairs to build for
  -osarch-list        List supported os/arch pairs for your Go version
  -output=&amp;quot;foo&amp;quot;       Output path template. See below for more info
  -parallel=-1        Amount of parallelism, defaults to number of CPUs
  -rebuild            Force rebuilding of package that were up to date
  -verbose            Verbose mode

Output path template:

  The output path for the compiled binaries is specified with the
  &amp;quot;-output&amp;quot; flag. The value is a string that is a Go text template.
  The default value is &amp;quot;{{.Dir}}_{{.OS}}_{{.Arch}}&amp;quot;. The variables and
  their values should be self-explanatory.

Platforms (OS/Arch):

  The operating systems and architectures to cross-compile for may be
  specified with the &amp;quot;-arch&amp;quot; and &amp;quot;-os&amp;quot; flags. These are space separated lists
  of valid GOOS/GOARCH values to build for, respectively. You may prefix an
  OS or Arch with &amp;quot;!&amp;quot; to negate and not build for that platform. If the list
  is made up of only negations, then the negations will come from the default
  list.

  Additionally, the &amp;quot;-osarch&amp;quot; flag may be used to specify complete os/arch
  pairs that should be built or ignored. The syntax for this is what you would
  expect: &amp;quot;darwin/amd64&amp;quot; would be a valid osarch value. Multiple can be space
  separated. An os/arch pair can begin with &amp;quot;!&amp;quot; to not build for that platform.

  The &amp;quot;-osarch&amp;quot; flag has the highest precedent when determing whether to
  build for a platform. If it is included in the &amp;quot;-osarch&amp;quot; list, it will be
  built even if the specific os and arch is negated in &amp;quot;-os&amp;quot; and &amp;quot;-arch&amp;quot;,
  respectively.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;オプションは色々あるが，とりあえずパッケージを指定して起動すれば全てのプラットフォームについてビルドを行う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
私が今つくってる &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; を例にすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get get github.com/spiegel-im-spiegel/gpgpdump

$ gox -output &amp;quot;goxdist/{{.OS}}_{{.Arch}}/{{.Dir}}&amp;quot; github.com/spiegel-im-spiegel/gpgpdump

--&amp;gt;      netbsd/arm: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;   windows/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;   freebsd/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;      darwin/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;    darwin/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;       linux/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     linux/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;       linux/arm: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     freebsd/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;      netbsd/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     freebsd/arm: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;    netbsd/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;   openbsd/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     openbsd/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     windows/386: github.com/spiegel-im-spiegel/gpgpdump

$ ls -l goxdist
drwx 0 2016-02-13 17:41 darwin_386/
drwx 0 2016-02-13 17:41 darwin_amd64/
drwx 0 2016-02-13 17:42 freebsd_386/
drwx 0 2016-02-13 17:41 freebsd_amd64/
drwx 0 2016-02-13 17:42 freebsd_arm/
drwx 0 2016-02-13 17:41 linux_386/
drwx 0 2016-02-13 17:41 linux_amd64/
drwx 0 2016-02-13 17:42 linux_arm/
drwx 0 2016-02-13 17:42 netbsd_386/
drwx 0 2016-02-13 17:42 netbsd_amd64/
drwx 0 2016-02-13 17:41 netbsd_arm/
drwx 0 2016-02-13 17:42 openbsd_386/
drwx 0 2016-02-13 17:42 openbsd_amd64/
drwx 0 2016-02-13 17:42 windows_386/
drwx 0 2016-02-13 17:41 windows_amd64/

$ ls -l goxdist/windows_amd64
-rw- 5712896 2016-02-13 17:41 gpgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といい感じに出力してくれる。&lt;/p&gt;

&lt;p&gt;OS を指定する場合は &lt;code&gt;-os &amp;quot;linux windows&amp;quot;&lt;/code&gt; のように指定する。
アーキテクチャは &lt;code&gt;-arch&lt;/code&gt; オプションを， OS とアーキテクチャを組み合わせる場合は &lt;code&gt;-osarch linux/arm&lt;/code&gt; などとする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-output&lt;/code&gt; オプションの &lt;code&gt;&amp;quot;goxdist/{{.OS}}_{{.Arch}}/{{.Dir}}&amp;quot;&lt;/code&gt; は出力先のテンプレートで &lt;code&gt;{{ }}&lt;/code&gt; で囲まれている部分に実際の値が埋め込まれる。
たとえば OS が windows でアーキテクチャが amd64 なら &lt;code&gt;goxdist/windows_amd64/gpgpdump&lt;/code&gt; と展開されるわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このようにクロス・コンパイルが非常に簡単なので &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; などで複数プラットフォームのバイナリを生成するのも難しくない。&lt;/p&gt;

&lt;h2 id=&#34;ghr-を使って-github-に-deploy-する:fa953b67964726c338be9843a0c52e04&#34;&gt;ghr を使って GitHub に Deploy する&lt;/h2&gt;

&lt;p&gt;今回は &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; から &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; へ &lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; で生成した実行バイナリを deploy することを考える。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; で生成した実行バイナリをそのままアップしてもいいのだが，ちょっと気持ち悪いので&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fa953b67964726c338be9843a0c52e04:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fa953b67964726c338be9843a0c52e04:s&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，まずは zip で固めてしまおう。
以下のような簡単な shell script を書いてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

DIR=`pwd`
mkdir ./goxdist/dist
for PLATFORM in $(find ./goxdist -mindepth 1 -maxdepth 1 -type d); do
    PLATFORM_NAME=$(basename ${PLATFORM})

    if [ ${PLATFORM_NAME} = &amp;quot;dist&amp;quot; ]; then
        continue
    fi

    cd ${PLATFORM}
    zip ${DIR}/goxdist/dist/${PLATFORM_NAME}.zip ./*
    cd ${DIR}
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほど &lt;code&gt;goxdist&lt;/code&gt; フォルダ以下に生成した各バイナリをひとつづつ zip 圧縮して &lt;code&gt;goxdist/dist&lt;/code&gt; フォルダに置くだけの簡単なお仕事。
これで &lt;code&gt;goxdist/dist&lt;/code&gt; フォルダの中身を &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に deploy すればよい。
&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; への deploy には &lt;a href=&#34;https://github.com/tcnksm/ghr&#34; title=&#34;tcnksm/ghr: Create Github Release and upload artifacts in parallel&#34;&gt;tcnksm/ghr&lt;/a&gt; が便利である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get github.com/tcnksm/ghr

$ ghr -h

Usage: ghr [options] TAG PATH

  ghr is a tool to create Release on Github and upload your artifacts to
  it. ghr parallelizes upload multiple artifacts.

  You can use ghr on GitHub Enterprise. Change URL by GITHUB_API env var.

Options:

  --username, -u        GitHub username. By default, ghr extracts user
                        name from global gitconfig value.

  --repository, -r      GitHub repository name. By default, ghr extracts
                        repository name from current directory&#39;s .git/config
                        value.

  --token, -t           GitHub API Token. To use ghr, you will first need
                        to create a GitHub API token with an account which
                        has enough permissions to be able to create releases.
                        You can set this value via GITHUB_TOKEN env var.

  --parallel=-1         Parallelization factor. This option limit amount
                        of parallelism of uploading. By default, ghr uses
                        number of logic CPU of your PC.

  --delete              Delete release if it already created. If you want
                        to recreate release itself from begining, use
                        this. Just want to upload same artifacts to same
                        release again, use --replace option.

  --replace             Replace artifacts if it is already uploaded. Same
                        artifact measn, same release and same artifact
                        name.

  --stat=false          Show number of download of each release and quit.
                        This is special command.

Examples:

  $ ghr v1.0 dist/     Upload all artifacts which are in dist directory
                       with version v1.0.

  $ ghr --stat         Show download number of each relase and quit.

$ ghr --username spiegel-im-spiegel --token $GITHUB_TOKEN v0.1.2 goxdist/dist/
--&amp;gt; Uploading: windows_amd64_v0.1.2.zip
--&amp;gt; Uploading: linux_amd64_v0.1.2.zip
--&amp;gt; Uploading: darwin_386_v0.1.2.zip
--&amp;gt; Uploading: darwin_amd64_v0.1.2.zip
--&amp;gt; Uploading: freebsd_386_v0.1.2.zip
--&amp;gt; Uploading: freebsd_amd64_v0.1.2.zip
--&amp;gt; Uploading: freebsd_arm_v0.1.2.zip
--&amp;gt; Uploading: linux_386_v0.1.2.zip
--&amp;gt; Uploading: netbsd_arm_v0.1.2.zip
--&amp;gt; Uploading: linux_arm_v0.1.2.zip
--&amp;gt; Uploading: netbsd_386_v0.1.2.zip
--&amp;gt; Uploading: netbsd_amd64_v0.1.2.zip
--&amp;gt; Uploading: openbsd_amd64_v0.1.2.zip
--&amp;gt; Uploading: openbsd_386_v0.1.2.zip
--&amp;gt; Uploading: windows_386_v0.1.2.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じで deploy できる。
ちなみに &lt;code&gt;$GITHUB_TOKEN&lt;/code&gt; には &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の access token をセットする。
Access token は &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の &amp;ldquo;Settings” の &amp;ldquo;Personal access tokens” のページで取得できる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/24367702843/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1626/24367702843_e72366313f.jpg&#34; alt=&#34;Get access token in GitHub&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24367702843/&#34;&gt;Get access token in GitHub&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;repo の権限を付けること。
この access token を &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; で参照するには， &amp;ldquo;Settings” の &amp;ldquo;Environment Variables” でセットすればよい。
Build log にこの access token が表示されないようにすること。&lt;/p&gt;

&lt;p&gt;最終的な &lt;code&gt;.travis.yml&lt;/code&gt; の内容はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go

go:
  - 1.5.3

branches:
  only: master

before_install:
  - go get -v github.com/mitchellh/gox
  - go get -v github.com/tcnksm/ghr

script:
  - go test -v ./...

after_success:
  - gox -output &amp;quot;goxdist/{{.OS}}_{{.Arch}}_`git tag | tail -1`/{{.Dir}}&amp;quot; -ldflags &amp;quot;-X main.Version=`git tag | tail -1`&amp;quot;
  - sh scripts/package.sh
  - ghr --username spiegel-im-spiegel --token $GITHUB_TOKEN `git tag | tail -1` goxdist/dist/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git tag | tail -1&lt;/code&gt; で最新のタグを取得して，そこに deploy するようにしている。
&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に何か push するたびにビルドが走るのはウザいので， master ブランチのみテスト &amp;amp; ビルドの対象とした。&lt;/p&gt;

&lt;p&gt;まっ，こんなもんかな。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:fa953b67964726c338be9843a0c52e04&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yanolab/items/5a6dfb3c07c94f7c760d&#34;&gt;Golang + Raspberry Pi + LPS331AP で気圧・温度を測定してみた - Qiita&lt;/a&gt; : arm アーキテクチャでいけるらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/07/22/go1_5-cross-compile/&#34;&gt;Go1.5はクロスコンパイルがより簡単 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/rerofumi/items/d6a8ba08270acb61b31c&#34;&gt;Raspberry PI ２ 用の consul を作る (201512版 - Qiita&lt;/a&gt; : Raspberry PI 上でビルドするより Linux のクロス環境を使ったほうが速いらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の 1.4 までは &lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; インストール後に &lt;code&gt;gox -build-toolchain&lt;/code&gt; でクロス環境を生成する必要があったが， 1.5 からは不要になった。めでたい！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;&lt;code&gt;{{ }}&lt;/code&gt; でテンプレートをハンドリングするには &lt;a href=&#34;https://golang.org/pkg/text/template/&#34; title=&#34;template - The Go Programming Language&#34;&gt;&lt;code&gt;text/template&lt;/code&gt;&lt;/a&gt; パッケージを使う。静的サイト・ジェネレータの &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; でもこのテンプレート・パッケージを使っている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fa953b67964726c338be9843a0c52e04:s&#34;&gt;企業などのネット環境では Web から exe ファイルなどの実行バイナリを直接ダウンロードすることを禁止している場合もある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fa953b67964726c338be9843a0c52e04:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>スタック追跡とパニック・ハンドリング - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/stack-trace-and-panic-handling/" />
		<id>tag:text.Baldanders.info,2016-02-13:/golang/stack-trace-and-panic-handling/</id>
		<published>2016-02-13T14:48:05+09:00</published>
		<updated>2016-02-13T14:48:05+09:00</updated>
		<summary>panic 時の出力をカスタマイズすることを考える。スタック情報を取得するには， panic を recover で捕まえた上で runtime.Caller() 関数を使う。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は軽めの小ネタで。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」でも少し説明したが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では回復不能のエラー（ゼロ除算やメモリ不足など）が発生した場合には &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を投げる仕様になっている。
たとえば以下のコードでは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	os.Exit(run())
}

func run() int {
	f()
	return 0
}

func f() {
	numbers := []int{0, 1, 2}
	fmt.Println(numbers[3]) //panic!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のスタック情報が標準エラー出力に表示される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
（&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt; での実行結果）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;panic: runtime error: index out of range

goroutine 1 [running]:
main.f()
	/tmp/sandbox269685094/main.go:19 +0x160
main.run(0x20300, 0x104000e0)
	/tmp/sandbox269685094/main.go:13 +0x20
main.main()
	/tmp/sandbox269685094/main.go:9 +0x20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁ必要な情報はあるのでこれでも構わないのだが，ファイル名がフルパスで表示されるのがアレな感じである。
また出力先が標準エラー出力で固定されているのも面白くない。&lt;/p&gt;

&lt;p&gt;そこで &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; 時の出力をカスタマイズすることを考える。
スタック情報を取得するには， &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;recover&lt;/a&gt; で捕まえた上で &lt;a href=&#34;https://golang.org/pkg/runtime/&#34; title=&#34;runtime - The Go Programming Language&#34;&gt;&lt;code&gt;runtime&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Caller()&lt;/code&gt; 関数を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;runtime&amp;quot;
)

func main() {
	os.Exit(run(os.Stderr))
}

func run(log io.Writer) (exit int) {
	defer func() {
		if r := recover(); r != nil {
			fmt.Fprintf(log, &amp;quot;Panic: %v\n&amp;quot;, r)
			for depth := 0; ; depth++ {
				pc, src, line, ok := runtime.Caller(depth)
				if !ok {
					break
				}
				fmt.Fprintf(log, &amp;quot; -&amp;gt; %d: %s: %s(%d)\n&amp;quot;, depth, runtime.FuncForPC(pc).Name(), src, line)
			}
			exit = 1
		}
	}()

	f()
    exit = 0
    return
}

func f() {
	numbers := []int{0, 1, 2}
	fmt.Println(numbers[3]) //panic!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで出力は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Panic: runtime error: index out of range
 -&amp;gt; 0: main.run.func1: /tmp/sandbox562252505/main.go(19)
 -&amp;gt; 1: runtime.call16: /usr/local/go/src/runtime/asm_amd64p32.s(390)
 -&amp;gt; 2: runtime.gopanic: /usr/local/go/src/runtime/panic.go(423)
 -&amp;gt; 3: runtime.panicindex: /usr/local/go/src/runtime/panic.go(12)
 -&amp;gt; 4: main.f: /tmp/sandbox562252505/main.go(36)
 -&amp;gt; 5: main.run: /tmp/sandbox562252505/main.go(29)
 -&amp;gt; 6: main.main: /tmp/sandbox562252505/main.go(11)
 -&amp;gt; 7: runtime.main: /usr/local/go/src/runtime/proc.go(111)
 -&amp;gt; 8: runtime.goexit: /usr/local/go/src/runtime/asm_amd64p32.s(1133)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
ファイル名を出力したくないなら for 文の中を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for depth := 0; ; depth++ {
	pc, _, line, ok := runtime.Caller(depth)
	if !ok {
		break
	}
	fmt.Fprintf(log, &amp;quot; -&amp;gt; %d: %s: (%d)\n&amp;quot;, depth, runtime.FuncForPC(pc).Name(), line)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とする手もある。
コードを書いてる人はスタック追跡情報とファイルの行番号があれば大体あたりをつけられるので，これだけでもありがたい。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:4e4334940cfbd371abfb6e84384d704c&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing/&#34;&gt;Goでfunctionが実行された順番を追いかける - sgykfjsm.github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;ちなみにこの情報は &lt;code&gt;-s&lt;/code&gt; のリンクオプション（ビルド時に &lt;code&gt;-ldflags &amp;quot;-s&amp;quot;&lt;/code&gt; と指定する）でデバッグ用のシンボル情報を削除しても表示されるようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>TLS における Diffie-Hellman 鍵交換の脆弱性（再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/logjam-attack/" />
		<id>tag:text.Baldanders.info,2016-02-11:/remark/2016/02/logjam-attack/</id>
		<published>2016-02-11T03:59:41+09:00</published>
		<updated>2016-02-11T03:59:41+09:00</updated>
		<summary>以前 Qiita に書いた記事を再掲載する。ちなみに元記事は2015年5月に公開している。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;なんか &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; が今さら Logjam 攻撃に対応したとか言ってるので&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v0.10.42/&#34;&gt;Node v0.10.42 (LTS) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v0.12.10/&#34;&gt;Node v0.12.10 (LTS) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v4.3.0/&#34;&gt;Node v4.3.0 (LTS) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v5.6.0/&#34;&gt;Node v5.6.0 (Stable) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;upgrade from 1.0.2e to 1.0.2f. To mitigate against the Logjam attack, TLS clients now reject Diffie-Hellman handshakes with parameters shorter than 1024-bits, up from the previous limit of 768-bits.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v5.6.0/&#34;&gt;Node v5.6.0 (Stable)&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;以前 &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/af0cdb620ad79c4d0f36&#34;&gt;Qiita に書いた記事&lt;/a&gt;をこちらでも再掲載する。
ちなみに元記事は2015年5月に公開している。&lt;/p&gt;

&lt;p&gt;ちなみに OpenSSL 1.0.2f では Logjam 攻撃への追加対応のほか，安全でない素数を生成する問題や SSLv2 をブロックできない問題に対応している。
むしろこちらの方が重要か。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mta.openssl.org/pipermail/openssl-announce/2016-January/000061.html&#34;&gt;[openssl-announce] OpenSSL Security Advisory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kb.cert.org/vuls/id/257823&#34;&gt;Vulnerability Note VU#257823 - OpenSSL re-uses unsafe prime numbers in Diffie-Hellman protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU95668716/&#34;&gt;JVNVU#95668716: OpenSSL の DH プロトコルにおける脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安全でない素数を生成する問題については CVSSv3 基本値 &lt;code&gt;CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N&lt;/code&gt; で 7.4 と見積もられている。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし (U)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;脆弱性の内容:8b50aafcf79ff63fdd3a5737902bffd8&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;通称 “Logjam” 攻撃。&lt;/p&gt;

&lt;p&gt;かつて騒がれた FREAK 脆弱性と同じく， TLS 経路上に「中間者」がいる場合， Diffie-Hellman（DH）鍵交換で使われる鍵を輸出用の脆弱なものにダウングレードさせられる。
FEAK のときとは異なり，特定の実装の脆弱性ではなく TLS プロトコルの欠陥。&lt;/p&gt;

&lt;p&gt;ちなみに DH 鍵交換アルゴリズムは公開鍵暗号の一種で，お互いに（もちろん第3者にも）秘密情報（秘密鍵）を知られることなく安全にセッション鍵を生成することができる。
ベースとなるロジックは「離散対数問題」と呼ばれるもので ElGamal や DSA と同系統のロジック。なので，鍵長の管理も ElGamal や DSA と同等のものが要求される。&lt;/p&gt;

&lt;p&gt;暗号強度と各暗号方式の鍵長の関係は以下のとおり（単位はすべて bit）&lt;/p&gt;

&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Bits of&lt;br&gt; security&lt;/th&gt;
&lt;th&gt;Symmetric key&lt;br&gt; algorithms&lt;/th&gt;
&lt;th&gt;FFC&lt;br&gt;(e.g., DSA, D-H)&lt;/th&gt;
&lt;th&gt;IFC&lt;br&gt;(e.g., RSA)&lt;/th&gt;
&lt;th&gt;ECC&lt;br&gt;(e.g., ECDSA)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&#39;right&#39;&gt;80&lt;/td&gt; &lt;td&gt;2TDEA&lt;/td&gt;  &lt;td&gt;$L=1024$&lt;br&gt;$N=160$&lt;/td&gt; &lt;td&gt;$k=1024$&lt;/td&gt; &lt;td&gt;$160 \le f \lt 224$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#39;right&#39;&gt;112&lt;/td&gt;&lt;td&gt;3TDEA&lt;/td&gt;  &lt;td&gt;$L=2048$&lt;br&gt;$N=224$&lt;/td&gt; &lt;td&gt;$k=2048$&lt;/td&gt; &lt;td&gt;$224 \le f \lt 256$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;&lt;td&gt;AES-128&lt;/td&gt;&lt;td&gt;$L=3072$&lt;br&gt;$N=256$&lt;/td&gt; &lt;td&gt;$k=3072$&lt;/td&gt; &lt;td&gt;$256 \le f \lt 384$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#39;right&#39;&gt;192&lt;/td&gt;&lt;td&gt;AES-192&lt;/td&gt;&lt;td&gt;$L=7680$&lt;br&gt;$N=384$&lt;/td&gt; &lt;td&gt;$k=7680$&lt;/td&gt; &lt;td&gt;$384 \le f \lt 512$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#39;right&#39;&gt;256&lt;/td&gt;&lt;td&gt;AES-256&lt;/td&gt;&lt;td&gt;$L=15360$&lt;br&gt;$N=512$&lt;/td&gt;&lt;td&gt;$k=15360$&lt;/td&gt;&lt;td&gt;$512 \le f$&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Comparable strengths (via &lt;q lang=&#39;en&#39;&gt;&lt;a href=&#39;http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf&#39;&gt;SP800-57 Part 1 (Revision 3) &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;2030年以降も安全に使える暗号強度は $128\,\mathrm{bits}$ 以上だと言われている。
Logjam 攻撃では $L=512\,\mathrm{bits}$ にダウングレードさせられるが全くお話にならない強度だということが分かるだろう。&lt;/p&gt;

&lt;p&gt;暗号について詳しくは拙文「&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号&lt;/a&gt;」の「&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml#appendix&#34;&gt;暗号に関する雑多な話&lt;/a&gt;」あたりをどうぞ。
また &lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/47f340122c895ccc8bb8&#34;&gt;FREAK については Gist にまとめている&lt;/a&gt;ので，そちらも参考にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;影響度-cvss:8b50aafcf79ff63fdd3a5737902bffd8&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-1716&#34;&gt;CVE-2015-1716&lt;/a&gt; より&lt;/p&gt;

&lt;p&gt;CVSSv2 基本値 5.0 (AV:N/AC:L/Au:N/C:P/I:N/A:N)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-4000&#34;&gt;CVE-2015-4000&lt;/a&gt; より&lt;/p&gt;

&lt;p&gt;CVSSv2 基本値 4.3 (AV:N/AC:M/Au:N/C:N/I:P/A:N)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中（M）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/cvss/cvss2.html&#34;&gt;デモページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける実装:8b50aafcf79ff63fdd3a5737902bffd8&#34;&gt;影響を受ける実装&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft : 影響あり。 &lt;a href=&#34;https://technet.microsoft.com/library/security/MS15-055&#34; title=&#34;マイクロソフト セキュリティ情報 MS15-055 - 重要&#34;&gt;MS15-055&lt;/a&gt; で修正済み&lt;/li&gt;
&lt;li&gt;OpenSSL 規定で輸出グレード暗号は無効化されているので，実質的には大丈夫？ : &lt;a href=&#34;https://www.openssl.org/blog/blog/2015/05/20/logjam-freak-upcoming-changes/&#34;&gt;Logjam, FREAK and Upcoming Changes in OpenSSL - OpenSSL Blog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20150615_706966.html&#34;&gt;脆弱性を修正した「OpenSSL」の最新版が公開、“Logjam”脆弱性の修正も - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;また、「OpenSSL」v1.0.2b/v1.0.1nに関しては、TLS通信で暗号強度の弱い輸出グレードの暗号へ意図せずダウングレードされてしまう“Logjam”脆弱性（CVE-2015-4000）も修正されている。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Apple Safari : 影響あり。修正版なし&lt;/li&gt;
&lt;li&gt;Android : 影響あり。修正版なし&lt;/li&gt;
&lt;li&gt;Google Chrome : 影響あり。修正版なし。 Chrome 43 でも解消されてないらしい&lt;/li&gt;
&lt;li&gt;Mozilla Firefox : 影響あり。修正版なし

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://datyotosanpo.blog.fc2.com/blog-entry-69.html&#34;&gt;脆弱性 Logjam Attack対策 for Firefox - ふらっと 気の向くままに&lt;/a&gt; : Firefox が更新されるまで DH(E) を無効化する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OpenVPN : 影響はほとんどない？

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yamatamemo.blogspot.jp/2015/05/tlslogjamopenvpn.html&#34;&gt;TLSの脆弱性「Logjam」のOpenVPNへの影響 « yamata::memo&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;OpenVPNでは、サーバーセットアップ時に openssl dhparam コマンドを使ってOpenVPN専用のDHパラメータを生成しているため、DHパラメータを別個に生成しない使用方法よりは安全といえる。&lt;/li&gt;
&lt;li&gt;openssl dhparam コマンドの実行時に鍵長を 2048ビット以上にしていれば安全。1024ビットの場合は攻撃される可能性は否定できないが、それでも簡単ではない。&lt;/li&gt;
&lt;li&gt;TLS-Authが有効になっていればこの種のTLSのダウングレード攻撃は回避できる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OpenSSH : 影響あり。 &lt;a href=&#34;https://jbeekman.nl/blog/2015/05/ssh-logjam/&#34;&gt;On OpenSSH and Logjam – Technology &amp;amp; Policy – Jethro Beekman&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://weakdh.org/sysadmin.html&#34;&gt;Logjam: PFS Deployment Guide&lt;/a&gt; : サーバ側での回避例&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;影響の有無を確認する方法:8b50aafcf79ff63fdd3a5737902bffd8&#34;&gt;影響の有無を確認する方法&lt;/h2&gt;

&lt;p&gt;ブラウザで “&lt;a href=&#34;https://weakdh.org/&#34;&gt;The Logjam Attack&lt;/a&gt;” のサイトを訪れると自動的に判定してくれる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning! Your web browser is vulnerable to Logjam and can be tricked into using weak encryption. You should update your browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と表示されると影響を受ける可能性がある。&lt;/p&gt;

&lt;p&gt;サーバ側は “&lt;a href=&#34;https://weakdh.org/sysadmin.html&#34;&gt;Guide to Deploying Diffie-Hellman for TLS&lt;/a&gt;” のページにある “Server Test” で確認できる。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ:8b50aafcf79ff63fdd3a5737902bffd8&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://weakdh.org/logjam.html&#34;&gt;Logjam TLS Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://weakdh.org/&#34;&gt;Logjam: How Diffie-Hellman Fails in Practice&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://weakdh.org/imperfect-forward-secrecy.pdf&#34;&gt;Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice&lt;/a&gt; (PDF)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.st.ryukoku.ac.jp/~kjm/security/memo/2015/05.html#20150521_Logjam&#34;&gt;セキュリティホール memo の記事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20150521/1432219012&#34;&gt;Logjam Attackについてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2015/05/the_logjam_and_.html&#34;&gt;The Logjam (and Another) Vulnerability against Diffie-Hellman Key Exchange - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.naviplus.co.jp/2015/05/25/openssh%E7%92%B0%E5%A2%83%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8Blogjam%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%AE%E5%AF%BE%E5%BF%9C/&#34;&gt;OpenSSH環境に対するLogjam脆弱性の対応 | NaviPlus Engineers&amp;rsquo; Blog&lt;/a&gt; : “&lt;a href=&#34;https://jbeekman.nl/blog/2015/05/ssh-logjam/&#34;&gt;On OpenSSH and Logjam&lt;/a&gt;” の日本語解説&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2015/05/logjam-internet-breaks-again&#34;&gt;Logjam, Part 1: Why the Internet is Broken Again (an Explainer) | Electronic Frontier Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2015/05/logjam-part-2-did-nsa-know-years-internet-was-broken&#34;&gt;Logjam, Part 2: Did the NSA Know the Internet Was Broken? | Electronic Frontier Foundation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Libgcrypt 1.6.5 with security fix released - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/libgcrypt-1_6_5-security-fix-released/" />
		<id>tag:text.Baldanders.info,2016-02-11:/remark/2016/02/libgcrypt-1_6_5-security-fix-released/</id>
		<published>2016-02-11T03:58:42+09:00</published>
		<updated>2016-02-15T07:48:52+09:00</updated>
		<summary>セキュリティ・アップデートを含むため，関係しているアプリケーション（GnuPG を含む）を使用している場合はアップデートする必要がある。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/libgcrypt/&#34; title=&#34;Libgcrypt - GNU Project - Free Software Foundation (FSF)&#34;&gt;Libgcrypt&lt;/a&gt; の 1.6.5 がリリースされた。
セキュリティ・アップデートを含むため，関係している暗号製品（&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を含む）を使用している場合はアップデートする必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q1/000384.html&#34;&gt;[Announce] Libgcrypt 1.6.5 with security fix released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;脆弱性の内容:0a20727b617d87e5cd8c5f477fb1f94b&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/libgcrypt/&#34; title=&#34;Libgcrypt - GNU Project - Free Software Foundation (FSF)&#34;&gt;Libgcrypt&lt;/a&gt; の 1.6.5 の変更内容は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mitigate side-channel attack on ECDH with Weierstrass curves [CVE-2015-7511].  See &lt;a href=&#34;http://www.cs.tau.ac.IL/~tromer/ecdh/&#34;&gt;http://www.cs.tau.ac.IL/~tromer/ecdh/&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;Fix build problem on Solaris.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ECDH (Elliptic Curve Diffie–Hellman key exchange) に対する side-channel attack に対応している。
ただし低減（mitigate）レベル。
一般的に side-channel attack は完全な対処が難しいためこのようなことになる。
詳しくは以下を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.tau.ac.il/~tromer/ecdh/&#34;&gt;ECDH Key-Extraction via Low-Bandwidth Electromagnetic Attacks on PCs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eprint.iacr.org/2016/129&#34;&gt;Cryptology ePrint Archive: Report &lt;sup&gt;2016&lt;/sup&gt;&amp;frasl;&lt;sub&gt;129&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;影響度-cvss:0a20727b617d87e5cd8c5f477fb1f94b&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;p&gt;CVE-2015-7511 （&lt;a href=&#34;https://access.redhat.com/security/cve/CVE-2015-7511&#34;&gt;CVE-2015-7511 - Red Hat Customer Portal&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;CVSSv2 基本値 4.3 (&lt;code&gt;AV:A/AC:M/Au:N/C:P/I:P/A:N&lt;/code&gt;)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隣接ネットワーク（A）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中（M）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/cvss/cvss2.html&#34;&gt;デモページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける実装:0a20727b617d87e5cd8c5f477fb1f94b&#34;&gt;影響を受ける実装&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/libgcrypt/&#34; title=&#34;Libgcrypt - GNU Project - Free Software Foundation (FSF)&#34;&gt;Libgcrypt&lt;/a&gt; を利用する &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.x (stable および modern バージョン)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows 版 &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; については &lt;a href=&#34;http://text.baldanders.info/remark/2016/01/30-stories/#gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;2.1.11&lt;/a&gt; の 20160209 版がリリースされているので入れ替えること。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; や &lt;a href=&#34;https://www.gnu.org/software/libgcrypt/&#34; title=&#34;Libgcrypt - GNU Project - Free Software Foundation (FSF)&#34;&gt;Libgcrypt&lt;/a&gt; はよく研究対象にされるので，今回のような脆弱性報告は割とあるのだが，他の暗号実装（たとえば OpenSSL とか）はどうなんだろうと心配になる。
実際どうなんだろう。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:0a20727b617d87e5cd8c5f477fb1f94b&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Google 八分とファッションとしての CC License - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/google-ostracism-and-cc-license/" />
		<id>tag:text.Baldanders.info,2016-02-09:/remark/2016/02/google-ostracism-and-cc-license/</id>
		<published>2016-02-09T20:42:43+09:00</published>
		<updated>2016-02-09T20:42:43+09:00</updated>
		<summary>そろそろこういうバカバカしい話はやめて欲しいよね。そのための CC Licenses なんだが。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;結城浩さんが懐かしい記事を tweet しておられる。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;“クリエイティブ・コモンズのライセンスをWeblogツールで使うことの危険性” &lt;a href=&#34;https://t.co/XQK35Sj2VH&#34;&gt;https://t.co/XQK35Sj2VH&lt;/a&gt;&lt;/p&gt;&amp;mdash; 結城浩 (@hyuki) &lt;a href=&#34;https://twitter.com/hyuki/status/696895800601739265&#34;&gt;2016, 2月 9&lt;/a&gt;&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hyuki.com/trans/blogtrap.html&#34;&gt;クリエイティブ・コモンズのライセンスをWeblogツールで使うことの危険性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20040510#p3&#34;&gt;で、東浩紀は相手にちゃんと問題を指摘したのか？ - 2004-05-10 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昔「ファッションとしての Creative Commons」が云々と言った人がいて上の記事のような議論になったのだが，その後 &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; 本家は Free Culture に舵を切ったため，この議論自体がどうでもいいものになってしまった。
まぁ日本では &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; 以上に Free Culture は知名度が低いのだが（笑）&lt;/p&gt;

&lt;p&gt;色々上がってくる記事とかを見ていると，どうも DMCA を盾に Google 八分に遭った人がいるらしい。
いやぁ，これも懐かしいな。&lt;/p&gt;

&lt;p&gt;ちなみに Google の検索結果やその順位はフェアでも何でもない。
Google はこの手の係争を避けようとするので，誰かにとって気に入らないページが検索結果に上がって Google にクレームが来れば，基本的に削除するかランクを大幅に下げる操作を行う。&lt;/p&gt;

&lt;p&gt;でもこれは Google に限らない。
たとえば Facebook はタイムラインの順番をよく分からないロジックで勝手に入れ替える。
Twitter は気に入らないアカウントを平気で削除する。
最近も&lt;a href=&#34;http://www.mdn.co.jp/di/newstopics/44028/&#34;&gt;テロリストだと主張して12万アカウントを削除&lt;/a&gt;した。&lt;/p&gt;

&lt;p&gt;ここで言論の自由が云々とか hate speech が云々とか言うつもりはないが，これらのサービスは所詮商業サービスであり，それがフェアであることの優先順位は彼らにとってそれほど高くないということだ。
言い換えれば「安心」というのは極めてアンフェアなものだということである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c81391c17b47021c7baec79aefca7c0:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c81391c17b47021c7baec79aefca7c0:0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ところで私は「&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; をファッションで付けて何が悪い」と思ってる人なので，バンバン付けて欲しい。
そもそも権利のないコンテンツに勝手にライセンスを付けても無効になるだけのことである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c81391c17b47021c7baec79aefca7c0:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c81391c17b47021c7baec79aefca7c0:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
リスクヘッジを考えるのならフリー素材であってもオリジナルを指示するようクレジット表示を行えばよい。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; のクレジット表示は 4.0 International で緩和された。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Version 4.0 includes a slight change to &lt;a href=&#34;http://wiki.creativecommons.org/Frequently_Asked_Questions#How_do_I_properly_attribute_material_offered_under_a_Creative_Commons_license.3F&#34;&gt;attribution requirements&lt;/a&gt;, designed to better reflect accepted practices. The licenses explicitly permit licensees to satisfy the attribution requirement with a link to a separate page for attribution information. This was already common practice on the internet and possible under earlier versions of the licenses, and Version 4.0 alleviates any uncertainty about its use.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;#39;s New in 4.0 - Creative Commons - Creative Commons&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Legal Code でも&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;あなたがライセンス対象物を共有する媒体・方法・文脈に照らして、いかなる合理的な方法でも満たすことができます。
例えば、必要とされる情報を含むリソースのURIやハイパーリンクを付すことで条件を満たすことが合理的な場合があります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;の文言が追加されている。
要は他者の作品に敬意を払い，原典にあたれる手段をきちんと示すことが重要なのだ。
それができていれば割とラフな運用でも構わないと思う。&lt;/p&gt;

&lt;p&gt;あと， &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では一度設定したライセンスを撤回することは出来ない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c81391c17b47021c7baec79aefca7c0:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c81391c17b47021c7baec79aefca7c0:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
なのでフリーで公開しているものを「フリーやめたから掲載するな」とか理不尽な事にはならないのでご安心を。
条件がフリーに見えても撤回の余地を残しているのなら，それは「フリー」とは言わない。&lt;/p&gt;

&lt;p&gt;そろそろこういうバカバカしい話はやめて欲しいよね。
そのための &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; なんだが。&lt;/p&gt;

&lt;p&gt;そうそう。
このサイトで &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の不定期連載やってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/&#34;&gt;改訂3版： CC Licenses について — text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/03-moral-rights/&#34;&gt;人格権&lt;/a&gt;と&lt;a href=&#34;http://text.baldanders.info/cc-licenses/04-derivative-works/&#34;&gt;二次的著作物&lt;/a&gt;の話までは書いた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c81391c17b47021c7baec79aefca7c0:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c81391c17b47021c7baec79aefca7c0:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
今後は DRM （技術的保護手段）についてと CC0 および Free Culture Licenses について書く予定。
予定は未定。&lt;/p&gt;

&lt;p&gt;以上，宣伝でした。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:8c81391c17b47021c7baec79aefca7c0&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4845911744/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51pDWTdSdlL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4845911744/baldandersinf-22/&#34;&gt;フリーカルチャーをつくるためのガイドブック  クリエイティブ・コモンズによる創造の循環&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ドミニク・チェン &lt;/dd&gt;&lt;dd&gt;フィルムアート社 2012-05-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757103581/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4757103581.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;電脳のレリギオ:ビッグデータ社会で心をつくる&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791767160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791767160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;インターネットを生命化する プロクロニズムの思想と実践&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4778314379/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4778314379.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暇と退屈の倫理学 増補新版 (homo Viator)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4761525649/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4761525649.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;シェアをデザインする: 変わるコミュニティ、ビジネス、クリエイションの現場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757103506/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4757103506.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;みんなのビッグデータ: リアリティ・マイニングから見える世界&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;国内における Free Culture の事例が豊富。取っ掛かりとしてはちょうどよい本。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-05-07&#34;&gt;2015/05/07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00DI8TMPU/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51zmlOAOaFL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00DI8TMPU/baldandersinf-22/&#34;&gt;オープン化する創造の時代　著作権を拡張するクリエイティブ・コモンズの方法論 (カドカワ・ミニッツブック)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ドミニク・チェン &lt;/dd&gt;&lt;dd&gt;ブックウォーカー 2013-06-27&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00JMAIKJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00JMAIKJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;クリエーティブ・テクノロジスト (カドカワ・ミニッツブック)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EHAUQEE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00EHAUQEE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;インターネットを生命化する プロクロニズムの思想と実践&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CJ5NNGM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CJ5NNGM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;子どもたちは電子羊の夢を見るか？(１）　０歳からはじまるデジタル教育: 1 (カドカワ・ミニッツブック)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KAOQXTS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00KAOQXTS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アメリカの電子書籍“ブーム”は今 (カドカワ・ミニッツブック)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00DB1AZ1E/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00DB1AZ1E.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;進化するアカデミア　「ユーザー参加型研究」が連れてくる未来&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;&lt;a href=&#39;http://www.baldanders.info/spiegel/log2/000643.shtml&#39;&gt;手軽に読める&lt;/a&gt;。お薦め。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-13&#34;&gt;2014/09/13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8c81391c17b47021c7baec79aefca7c0:0&#34;&gt;某国首相は「安心・安全」という言葉を安直に口にするが，自分の言っていることの意味をよく考えてほしいものである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c81391c17b47021c7baec79aefca7c0:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8c81391c17b47021c7baec79aefca7c0:a&#34;&gt;ちなみに &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; はサブライセンスを禁止している。複製・配布したものに別のライセンスを付けることは出来ない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c81391c17b47021c7baec79aefca7c0:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8c81391c17b47021c7baec79aefca7c0:b&#34;&gt;ただし許諾者が未成年の場合は法定代理人によって取り消される場合がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c81391c17b47021c7baec79aefca7c0:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8c81391c17b47021c7baec79aefca7c0:c&#34;&gt;私は法律の専門家ではないので，勘違いや間違いがあれば指摘していただけると嬉しいです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c81391c17b47021c7baec79aefca7c0:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
