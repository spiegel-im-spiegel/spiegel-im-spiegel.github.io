<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-04-23:/</id>
	<updated>2016-04-23T15:17:49+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>Git Commit で OpenPGP 署名を行う - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/git-commit-with-openpgp-signature/" />
		<id>tag:text.Baldanders.info,2016-04-23:/remark/2016/04/git-commit-with-openpgp-signature/</id>
		<published>2016-04-23T15:17:49+09:00</published>
		<updated>2016-04-23T15:17:49+09:00</updated>
		<summary>Git で commit する際に OpenPGP 署名を付加できるらしい。いやぁ，今まで知らなかったよ。物知らずでごめん。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; で commit する際に OpenPGP 署名を付加できるらしい。
いやぁ，今まで知らなかったよ。
物知らずでごめん。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/uz/v2/Git-Tools-Signing-Your-Work&#34;&gt;Git - Signing Your Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485&#34;&gt;GitHubでGPGにより署名されたコミットにバッジが表示されるようになったので設定してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;openpgp-鍵の登録:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;OpenPGP 鍵の登録&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; に OpenPGP 鍵を設定するには以下のコマンドでいいようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global user.signingkey 7E20B81C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“&lt;code&gt;7E20B81C&lt;/code&gt;” は OpenPGP 鍵の鍵 ID である。
鍵ごとに異なる値になるので注意。
今回は「&lt;a href=&#34;http://www.baldanders.info/spiegel/pubkeys/&#34;&gt;OpenPGP 公開鍵リスト&lt;/a&gt;」で公開している鍵の鍵 ID を登録している。
この設定で &lt;code&gt;.gitconfig&lt;/code&gt; ファイルに以下の記述が追加される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[user]
	signingkey = 7E20B81C
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gpg-を直接指定する場合:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;Gpg を直接指定する場合&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の場合， &lt;code&gt;git bash&lt;/code&gt; に同梱されている &lt;code&gt;gpg.exe&lt;/code&gt; を使うのだが，困ったことにこれが classic version なのである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 1.4.20
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
Supported algorithms:
Pubkey: RSA, RSA-E, RSA-S, ELG-E, DSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既に &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の Windows 版をインストールしているのであれば，以下の設定で &lt;code&gt;gpg.exe&lt;/code&gt; をフルパス指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global gpg.program C:/path/to/GnuPG/bin/gpg.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;.gitconfig&lt;/code&gt; ファイルには以下の記述が追加される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[gpg]
	program = C:/path/to/GnuPG/bin/gpg.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows 環境以外でも &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を classic version と stable/modern version で使い分けている場合は，この設定が役に立つだろう。&lt;/p&gt;

&lt;p&gt;なお Windows 環境であれば，特に理由がないかぎり， modern version を使うことをお薦めする。
Windows 環境へ &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を導入する方法については以下の拙文を参考にして欲しい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/&#34;&gt;GnuPG Modern Version for Windows ― インストール編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-2/&#34;&gt;GnuPG Modern Version for Windows ― gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;commit-に-openpgp-署名を付加する:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;Commit に OpenPGP 署名を付加する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; 時に OpenPGP 署名を付加したい場合は， version 2 以降なら，以下の設定で常時署名を行うようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global commit.gpgsign true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.gitconfig&lt;/code&gt; ファイルには以下の記述が追加される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[commit]
	gpgsign = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で逆に commit 時に署名を付加してほしくない場合は &lt;code&gt;--no-gpg-sign&lt;/code&gt; オプションを付加すればいいようだ。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの &lt;a href=&#34;https://atom.io/packages/git-plus&#34; title=&#34;git-plus&#34;&gt;git-plus&lt;/a&gt; パッケージで commit してみたが，きちんと署名もできていた。
「&lt;a href=&#34;http://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485&#34;&gt;GitHubでGPGにより署名されたコミットにバッジが表示されるようになったので設定してみる&lt;/a&gt;」には「GitHub DesktopはGPGによる署名をサポートしていません」とあるが， Facebook で教えてもらっとところによれば， &lt;code&gt;gpg-agent&lt;/code&gt; と Pinentry が正しく設定されていれば使えるそうだ。&lt;/p&gt;

&lt;p&gt;きちんと署名されているか確認するには &lt;code&gt;git log&lt;/code&gt; コマンドに &amp;ndash;show-signature オプションを付けるとよい。&lt;/p&gt;

&lt;h3 id=&#34;tag-にも-merge-にも署名できる:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;Tag にも Merge にも署名できる&lt;/h3&gt;

&lt;p&gt;タグに署名を付加する場合は &lt;code&gt;-s&lt;/code&gt; オプションを付けて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git tag -s -a v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればいい。
同様に merge でも &lt;code&gt;-S&lt;/code&gt; オプションを付けて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git merge -S branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でいいようだ。&lt;/p&gt;

&lt;h2 id=&#34;github-が-openpgp-署名に対応した:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;GitHub が OpenPGP 署名に対応した&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; で commit や tag に対する署名を表示できるようになったらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/2144-gpg-signature-verification&#34;&gt;GPG signature verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえばこんな感じに表示される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26315000570/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1671/26315000570_ba79ae50b1.jpg&#34; alt=&#34;OpenPGP Key in GitHub (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26315000570/&#34;&gt;OpenPGP Key in GitHub (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これを有効にするには &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に OpenPGP 公開鍵を登録して署名検証可能にしなければならない。
公開鍵の登録は設定画面で行う。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26494073882/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1679/26494073882_e53d80376b.jpg&#34; alt=&#34;OpenPGP Key in GitHub (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26494073882/&#34;&gt;OpenPGP Key in GitHub (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この画面で「New GPG key」ボタンを押すと以下の入力画面になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26520705641/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1598/26520705641_81e21edd32.jpg&#34; alt=&#34;OpenPGP Key in GitHub (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26520705641/&#34;&gt;OpenPGP Key in GitHub (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ここに公開鍵の armor テキストを貼り付けて「Add GPG key」ボタンを押せばよい。
これで OpenPGP 公開鍵の登録は完了である。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26586667165/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1493/26586667165_9b7d41f16d.jpg&#34; alt=&#34;OpenPGP Key in GitHub (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26586667165/&#34;&gt;OpenPGP Key in GitHub (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;なお公開鍵の armor テキストは以下のコマンドで取得できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --armor --export 7E20B81C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“&lt;code&gt;7E20B81C&lt;/code&gt;” は先ほど説明した鍵 ID である。&lt;/p&gt;

&lt;p&gt;Tag や commit に署名することで「なりすまし」に対する抑止になる。
これは特にチームで開発を行う場合に威力を発揮するだろう。
ぜひ習慣付けていきたいものである。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語 1.6.1 および 1.5.4 のセキュリティ・アップデート - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/golang-1_6_1-released/" />
		<id>tag:text.Baldanders.info,2016-04-17:/remark/2016/04/golang-1_6_1-released/</id>
		<published>2016-04-17T17:10:49+09:00</published>
		<updated>2016-04-17T17:10:49+09:00</updated>
		<summary>Go 言語に2つの脆弱性がある。脆弱性に対処した 1.6.1 および 1.5.4 がリリースされている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に2つの脆弱性がある。
脆弱性に対処した 1.6.1 および 1.5.4 がリリースされている。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;On Windows, Go loads system DLLs by name with LoadLibrary, making it vulnerable to DLL preloading attacks. For instance, if a user runs a Go executable from a Downloads folder, malicious DLL files also downloaded to that folder could be loaded into that executable.&lt;br&gt;
This is CVE-2016-3958 and was addressed by this change: &lt;a href=&#34;https://golang.org/cl/21428&#34;&gt;https://golang.org/cl/21428&lt;/a&gt;&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/9eqIHqaWvck&#34;&gt;[security] Go 1.6.1 and 1.5.4 are released - Google グループ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Go&#39;s crypto libraries passed certain parameters unchecked to the underlying big integer library, possibly leading to extremely long-running computations, which in turn makes Go programs vulnerable to remote denial of service attacks.  Programs using HTTPS client certificates or the Go SSH server libraries are both exposed to this vulnerability.&lt;br&gt;
This is CVE-2016-3959 and was addressed by this change: &lt;a href=&#34;https://golang.org/cl/21533&#34;&gt;https://golang.org/cl/21533&lt;/a&gt;&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/9eqIHqaWvck&#34;&gt;[security] Go 1.6.1 and 1.5.4 are released - Google グループ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;具体的に CVSS などを記述したページは見つからなかった。
が，順次更新する予定。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:7d490a36ea9eb5e6c363ce7b7d9161f0&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 2016年熊本地震 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/17-stories/" />
		<id>tag:text.Baldanders.info,2016-04-17:/remark/2016/04/17-stories/</id>
		<published>2016-04-17T15:38:38+09:00</published>
		<updated>2016-04-21T22:04:16+09:00</updated>
		<summary>2016年熊本地震 / 三半規管に異常あり / ATOM 1.7 と Visual Studio Code 1.0 が登場 / Windows 版 QuickTime がようやく終了 / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;疲れが溜まってるのか，ここのところ自宅帰って飯食ったらそのまま寝落ちしていることが多い。
妙に怒りっぽくなってるし（路面電車で隣に人が座っただけでイラッとする）気をつけないとなぁ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#eq:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;2016年熊本地震&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;三半規管に異常あり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#edit:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qt:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;eq:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;2016年熊本地震&lt;/h2&gt;

&lt;p&gt;まずは被災された方々にはお見舞い申し上げます。
地震関連 tweets をチェックしてたけど直下型のせいか M4, M5 クラスの余震でも震度5とか結構あって，これはちょっとキツいよね。
特に夜中の地震はトラウマで不眠症になったりするのでホンマに大変だと思います。
私自身は今は自分のことで手一杯なので何もできないのですが，まずは事態が落ち着いてくれることを祈ります。&lt;/p&gt;

&lt;p&gt;大きな災害なので流石にテレビ報道も見たんだけど，やっぱテレビはクズだね。
ヘリで上空から中継してる映像とかあるんだけど，あれ地上から「ウザい」と思われてるの知っててやってるのかね。
様々な映像を見るだに「日本のマスコミはクソ」としか言いようがない。&lt;/p&gt;

&lt;p&gt;でも国土地理院の &lt;a href=&#34;http://psgsv2.gsi.go.jp/koukyou/public/uav/&#34;&gt;UAV (Unmanned Aerial Vehicle)&lt;/a&gt; で空撮した映像はいいね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gsi.go.jp/BOUSAI/H27-kumamoto-earthquake-index.html&#34;&gt;平成２８年熊本地震に関する情報｜国土地理院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/DXTAAvVB2M8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DXTAAvVB2M8&#34;&gt;【国土地理院】　南阿蘇村河陽周辺の断層 - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;人が容易に入れないようなところでも drone なら入れるし，軽い荷物なら配送できる drone とかもあると聞くので，もっとこういう技術を活用したらいいと思うよ。&lt;/p&gt;

&lt;p&gt;危機状態に求められるリーダーと平時のリーダーとでは要件が異なる。
「政治判断」しかできない官僚・政治家や官僚的体質の企業・組織は危機状態に機能しないどころか障害になる。
彼らをバイパスして必要な情報や判断を必要な人に行き渡らせ有機的に連携できるか。
Crisis Management って結局はそういうことなんだよね。&lt;/p&gt;

&lt;p&gt;小川一水さんの『復活の地』でも読んで勉強しなはれ（笑）&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;【拡散希望】『阪神大震災被災者からのお願い』　嬉しいんです！嬉しいんですけどその援助、もうちょっとだけ待って下さい！ &lt;a href=&#34;https://t.co/2BgwW00mRx&#34;&gt;pic.twitter.com/2BgwW00mRx&lt;/a&gt;&lt;/p&gt;&amp;mdash; 澤田 圭 ｷｬﾗｸﾀｰﾃﾞｻﾞｲﾅｰ (@keisawada) &lt;a href=&#34;https://twitter.com/keisawada/status/721306607389253632&#34;&gt;2016年4月16日&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;関連ブックマーク-随時追記予定:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;関連ブックマーク（随時追記予定）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eri.u-tokyo.ac.jp/?page_id=183&amp;amp;id=12595&#34;&gt;平成28年（2016年）熊本地震（M6.5）の地学的背景と布田川断層帯・日奈久断層帯について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_002.pdf&#34;&gt;2016年4月17日地震調査委員会評価文（熊本地方地震）&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_003.pdf&#34;&gt;平成28 年4 月17日地震調査委員会図表（熊本地方地震）&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kumamoto-jishin.info/map.html&#34;&gt;避難所、給水、配給、空いているスーパーなどについてgooglemapまとめ | 熊本地震 情報掲示板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/gsi_kumamoto_160418.html&#34;&gt;熊本地震で観測した電子基準点の変位を、国土地理院がいち早く公表｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiroshima-u.ac.jp/news/show/id/25510&#34;&gt;広島大学　熊本県熊本地方を震源とする地震に関する記者説明会を開催しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160415_01.html&#34;&gt;2016年4月15日ニュース「熊本の大地震は横ずれ断層型 震源浅く揺れ大きく」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_01.html&#34;&gt;2016年4月18日ニュース「本震と余震は別の断層帯で発生 地震調査委と気象庁が見解」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_02.html&#34;&gt;2016年4月18日ニュース「被害状況を動画で公開 国土地理院がドローンで調査」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pref.kumamoto.jp/kiji_15425.html?type=top&#34;&gt;平成28年熊本地震に伴う被災地救援等のために使用する車両の取り扱いについて / 熊本県&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/usage/userreport/hinanpass_160420.html&#34;&gt;オープンデータで避難所地図を表示する「ヒナンパス」が、熊本地震に暫定対応｜利用者向け情報｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/its-jp_160419.html&#34;&gt;熊本地震で、ITSJapanが乗用車・トラックの通行実績情報を提供｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openstreetmap.jp/node/779&#34;&gt;熊本地震への対応について | OpenStreetMap Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;astro:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;三半規管に異常あり&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://fanfun.jaxa.jp/jaxatv/files/20160415_hitomi.pdf&#34;&gt;Ｘ線天文衛星「ひとみ」（ASTRO-H）の状況について&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/space/2016_04_15_asrtoh.html&#34;&gt;X線天文衛星「ひとみ」、2重のトラブルで「自分で回った」と推定 | Sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/04/20160419_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）の状況について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160420_01.html&#34;&gt;2016年4月20日ニュース「姿勢制御装置が誤作動 通信途絶えた天文衛星『ひとみ』」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;小天体かデブリにでもぶち当たったのかと思ったが，擬人化するなら三半規管の異常で「ピヨった」状態らしい。
太陽電池パネルの一部が千切れるほどの高速回転って相当だと思うけど。&lt;/p&gt;

&lt;p&gt;JAXA は通信が回復する可能性を期待して受信体制を続けるようだが，これは難しいんじゃないかなぁ。
宇宙じゃ「ちょいと行ってきて直す」とかできないからねぇ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;edit:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160414_753303.html&#34;&gt;GitHub、オープンソースのテキストエディター「Atom」の最新正式版v1.7を公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160415_753468.html&#34;&gt;Microsoft製の無償コードエディター「Visual Studio Code」がv1.0.0に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/visual_studio_code10.html&#34;&gt;オープンソースの開発ツール「Visual Studio Code」が正式版となるバージョン1.0に到達 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/74th/items/12521790a1c680af934c&#34;&gt;1.0になったVisualStudioCodeの強みと弱点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は Windows 版の &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を使ってるんだけど， tree view からのファイル削除をしくじるんだよなぁ（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; というより &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にインストールしているパッケージのせいかもしれんけど）。
多分あれって Windows のファイルシステムのせいだよなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/why-i-use-cmd-on-windows.htm&#34;&gt;Big Sky :: Windows ユーザは cmd.exe で生きるべき。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; はいい製品に育ったねぇ。
私は既に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; をメインに使ってるけど，これは「ちょっと使ってみようかな」と思わせる製品になった。&lt;/p&gt;

&lt;p&gt;最近の Microsoft は .NET Core と &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; がいい感じである。
逆に Windows 10 は過剰なコントロールでどんどんダメな OS になっていく。
もう Microsoft も Windows は事実上見捨ててるのだろう。&lt;/p&gt;

&lt;h2 id=&#34;qt:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.us-cert.gov/ncas/alerts/TA16-105A&#34;&gt;Apple Ends Support for QuickTime for Windows; New Vulnerabilities Announced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/ta/JVNTA92371676/&#34;&gt;JVNTA#92371676: QuickTime for Windows に複数のヒープバッファオーバフローの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac 版とかはどうか知らないが， Windows 版の QuickTime は最初からクソッタレな実装だった。
しかも当時は iTunes と抱き合わせでインストールされるので容易に捨てられず往生した覚えがある。&lt;/p&gt;

&lt;p&gt;CVSSv3 基本値は 6.3 なので「要注意」レベルだが，サポートされない製品を入れておく理由はない。
危険物はとっとと捨てましょう。&lt;/p&gt;

&lt;h2 id=&#34;other:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/linking-to-pirated-content-is-not-copyright-infringement-160407/&#34;&gt;Linking to Pirated Content Is Not Copyright Infringement, Says EU Court Adviser - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35081244/&#34;&gt;カナダ警察、「BlackBerry」のマスター暗号化キーを入手していた&amp;ndash;メッセージの解読に利用 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2016/04/white-house-source-code-policy-big-win-open-government&#34;&gt;White House Source Code Policy a Big Win for Open Government | Electronic Frontier Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/topics/alert280413.html&#34;&gt;【注意喚起】ランサムウェア感染を狙った攻撃に注意：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/blog/2016/04/working-on-html5-1/&#34;&gt;Working on HTML5.1 | W3C Blog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/w3c/html&#34;&gt;w3c/html: Working Draft of the HTML specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/w3chtml519github.html&#34;&gt;W3C、「HTML5.1」を今年9月に勧告とする計画。仕様はGitHubで公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.globalvoices.org/2016/04/13/40418/&#34;&gt;中国は「オーウェル風ディストピア」？「社会信用制度」とは · Global Voices 日本語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.creativecommons.org/2016/04/14/japanese-beatmaking-event-producers-create-cc-remixes-just-four-hours/&#34;&gt;At Japanese Beatmaking Event, Producers Create CC Remixes in Just Four Hours - Creative Commons blog - Creative Commons&lt;/a&gt; : 日本のイベントに本家 CC が反応していることに驚いた。昨年のソウルのイベントでは CCjp はほぼ無視してたのにね&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000386.html&#34;&gt;[Announce] Libgcrypt 1.7.0 released&lt;/a&gt; : SHA-3 や ChaCha など新しいアルゴリズムが登場&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJOESS6/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ymtvyHUmL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJOESS6/baldandersinf-22/&#34;&gt;復活の地１&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;小川一水 &lt;/dd&gt;&lt;dd&gt;早川書房 2012-09-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKEY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKEY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;復活の地２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKG2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKG2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;復活の地３&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKDK/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKDK.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第六大陸２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKDU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKDU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第六大陸1&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKYO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKYO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天涯の砦&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;コミカライズ版もある。てか，コミカライズ版を最初に読んだ（笑） 大きな災害がある度にこの作品を思い出す。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-04-17&#34;&gt;2016-04-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;ハッブル望遠鏡の時はスペースシャトルが運用されていた時代なので，望遠鏡のところまで行って修理したけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： まじめに規制に従っている人ほど馬鹿を見る社会 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/10-stories/" />
		<id>tag:text.Baldanders.info,2016-04-10:/remark/2016/04/10-stories/</id>
		<published>2016-04-10T18:44:29+09:00</published>
		<updated>2016-04-11T23:40:13+09:00</updated>
		<summary>まじめに規制に従っている人ほど馬鹿を見る社会 / Linux サブシステムは Windows の終わりの始まり / 鍵管理システム CONIKS / Go 言語を使うようになって変わったこと / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;3月は去りました。
春になっちゃったよ。&lt;/p&gt;

&lt;p&gt;うっかり左手首を痛めてしまった（疲労がたまるとたまになる）のでいろいろ控えてた。
溜まりまくった小ネタを消化しないと。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#code:131c422dd318de78a778ce2a1d39851c&#34;&gt;まじめに規制に従っている人ほど馬鹿を見る社会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bash:131c422dd318de78a778ce2a1d39851c&#34;&gt;Linux サブシステムは Windows の終わりの始まり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pki:131c422dd318de78a778ce2a1d39851c&#34;&gt;鍵管理システム CONIKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#go:131c422dd318de78a778ce2a1d39851c&#34;&gt;Go 言語を使うようになって変わったこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:131c422dd318de78a778ce2a1d39851c&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;code:131c422dd318de78a778ce2a1d39851c&#34;&gt;まじめに規制に従っている人ほど馬鹿を見る社会&lt;/h2&gt;

&lt;p&gt;もう何度も書いているが「警察にできることは犯罪者にもできる」。
問題は犯罪者にできることが警察にもできるかどうか駄菓子菓子&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080404/&#34;&gt;米政府によるスマホデータ取り出しの協力要請、ACLUが実態調査 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/01/news114.html&#34;&gt;FBIのiPhoneロック解除方法、Appleに知らされない可能性も (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/08/news060.html&#34;&gt;FBI長官、「購入したロック解除ツールはiPhone 5sでは機能しなかった」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/09/20160408justice-department-keeps-pushing-apple-to-unlock-iphone-in-new-york-drug-case/&#34;&gt;司法省がまたAppleにiPhoneアンロック要求、今度はAppleが“相手を間違えた”国を訴訟か | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FBI が端末を突破するのに外部企業を使ったということ，そして企業がそれに応じたことは重要だ。
もちろん実は NSA の息のかかった企業だった，としても驚かないけど。&lt;/p&gt;

&lt;p&gt;企業は利があると思えば警察にも犯罪者にだって加担する。
今回の件のポイントは「犯罪者にできることが警察にできるとは限らない」と証明してしまったことだ。
セキュリティ企業は新しい時代の「死の商人」になるかもしれない。&lt;/p&gt;

&lt;p&gt;警察が優位に立てるのは犯罪者よりもパワー（暴力・権力を含む）を有している場合のみである。
コンピュータ・ネットワーク技術あるいは暗号技術において政府・警察は優位に立てない。
米国司法省は法規制によって優位に立てると思ってるようだが，こんなもの最初から「法の外」にいる犯罪者やテロリストに対しては効力がない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/09/news022.html&#34;&gt;暗号化解除をめぐる米法案、司法当局へのバックドア提供を義務付け - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080962/&#34;&gt;バックドア提供を拒む企業に制裁金を&amp;ndash;米国で法案が公開 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これは「飲酒運転を減らすために飲酒運転規制を厳罰化する」というのとは話が違う。
犯罪者にはインパクトがないし，まじめに規制に従っている人ほど「馬鹿を見る」ことになる。&lt;/p&gt;

&lt;p&gt;有害なルールに従う必要はないし，それに従うことはむしろリスクを高めることになる。&lt;/p&gt;

&lt;h2 id=&#34;bash:131c422dd318de78a778ce2a1d39851c&#34;&gt;Linux サブシステムは Windows の終わりの始まり&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/31/20160330be-very-afraid-hell-has-frozen-over-bash-is-coming-to-windows-10/&#34;&gt;Build 2016で驚きの発表―Microsoftはこの夏Windows 10でBashシェルをサポート | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35080406/&#34;&gt;「Windows 10」で動作するUbuntuのBashシェル&amp;ndash;その実現方法 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://satonaoki.wordpress.com/2016/03/31/bash-ubuntu-windows/&#34;&gt;開発者がWindows 10でBashシェルとユーザー モードのUbuntu Linuxバイナリを実行可能に | S/N Ratio (by SATO Naoki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/mariadbmariadb_columnstoreolap.html&#34;&gt;MariaDB、カラム型データベースエンジン「MariaDB ColumnStore」発表。OLAPへ参入 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;もともと Windows は POSIX サブシステムを持っている。
今回はそれに加えて&lt;/del&gt; Ubuntu ベースの Linux サブシステムを組み込むということらしいが子亀の上に親亀を乗っけるようなものだ。&lt;/p&gt;

&lt;p&gt;Windows の基本的な設計思想は20～25年くらい前の古いものだ。
しかも DOS/Windows はもともとシングルユーザ用に設計されたもので UNIX 等のマルチユーザ向けの OS とは全く異なる。&lt;/p&gt;

&lt;p&gt;Linux のベースとなっている UNIX もそうとう古いが，マルチユーザを前提とした考え方は今でも通用するし，なにより Linux はもはや UNIX に縛られない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160331/linux25years&#34;&gt;Linux公開25周年を受けたリーナス・トーバルズのインタビュー - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35080722/&#34;&gt;Linux創始者トーバルズ氏、IoTを語る&amp;ndash;「セキュリティは二の次」と警鐘 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows は永遠に Windows に縛られ続ける。
Microsoft が満を持して出した Windows 10 も結局は Windows に縛られている。&lt;/p&gt;

&lt;p&gt;Windows が時代遅れなのは明らかである。
Microsoft 自らこういう無茶をすること自体が「Windows の終わりの始まり」だ。
個人的に2020年までに自宅 PC のメインを Linux 機に換装する予定だが，ちょっと計画を前倒ししたほうがいいかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35080364/&#34;&gt;目的別のおすすめLinuxディストリビューション&amp;ndash;あなたにぴったりなのはどれ？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;追記:131c422dd318de78a778ce2a1d39851c&#34;&gt;追記&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/why-i-use-cmd-on-windows.htm&#34;&gt;Big Sky :: Windows ユーザは cmd.exe で生きるべき。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;激しく同意。
もっとも私は &lt;a href=&#34;http://text.baldanders.info/remark/2015/conemu-and-nyagos/&#34;&gt;ConEmu &amp;amp; NYAGOS&lt;/a&gt; だけど（笑）&lt;/p&gt;

&lt;h2 id=&#34;sig:131c422dd318de78a778ce2a1d39851c&#34;&gt;WhatsApp がついに Signal ベースの E2E 暗号化を実装する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/blog/whatsapp-complete/&#34;&gt;Open Whisper Systems &amp;gt;&amp;gt; Blog &amp;gt;&amp;gt; WhatsApp&amp;rsquo;s Signal Protocol integration is now complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techcrunch.com/2016/04/05/whatsapp-completes-end-to-end-encryption-rollout/&#34;&gt;WhatsApp completes end-to-end encryption rollout | TechCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/06/news069.html&#34;&gt;Facebook傘下のWhatsApp、完全暗号化を完了　「政府もわれわれも解除できない」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/06/20160405whatsapp-completes-end-to-end-encryption-rollout/&#34;&gt;WhatsApp、全てのプラットフォームのエンドツーエンド暗号化を完了 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともと WhatsApp が Signal ベースの暗号化システムを実装することは予告されていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/&#34;&gt;Open Whisper Systems&lt;/a&gt; (&lt;a href=&#34;https://github.com/WhisperSystems&#34;&gt;GitHub&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://support.whispersystems.org/hc/en-us/articles/212477768-Is-it-secure-Can-I-trust-it-&#34;&gt;Is it private? Can I trust it? – Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signal 自体は SMS アプリを置き換えることのできる優れたアプリなのだが SNS ベースのメッセンジャー・アプリとしては機能的に劣る。
WhatsApp がその辺を埋めることになるかどうか。
でも日本のユーザにはウケないかなぁ。&lt;/p&gt;

&lt;p&gt;メールは ProtonMail， SMS ベースのメッセンジャーには Signal，それ以外のメッセンジャーには WhatsApp と，だいぶ揃ってきたねぇ。&lt;/p&gt;

&lt;h2 id=&#34;pki:131c422dd318de78a778ce2a1d39851c&#34;&gt;鍵管理システム CONIKS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coniks.cs.princeton.edu/&#34;&gt;CONIKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/04/coniks.html&#34;&gt;CONIKS - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;CONIKS is a key management system for end users capable of integration in end-to-end secure communication services. The main idea is that users should not have to worry about managing encryption keys when they want to communicate securely, but they also should not have to trust their secure communication service providers to act in their interest.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://coniks.cs.princeton.edu/&#34;&gt;CONIKS&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とりあえずメーリング・リストに入ってみた。&lt;/p&gt;

&lt;h2 id=&#34;go:131c422dd318de78a778ce2a1d39851c&#34;&gt;Go 言語を使うようになって変わったこと&lt;/h2&gt;

&lt;p&gt;内容自体にさほど文句があるわけではないが（細かい部分は置いておいて），「interface を中心に設計する」という記述が気になって。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;947e9a6ef68c4310baf21afdec4fcfab&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;私はそんなにたくさんの言語を知っているわけではないが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を勉強するようになって設計の考え方が少し変わった。
まさに「制約は構造を生む」（by 結城浩「数学ガール」シリーズより）が如く，言語仕様によって思考も影響を受けるのである。
以下にいくつか例を挙げよう。&lt;/p&gt;

&lt;h3 id=&#34;value-object-から考える:131c422dd318de78a778ce2a1d39851c&#34;&gt;Value Object から考える&lt;/h3&gt;

&lt;p&gt;さて，いつもの図。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/DDD.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/DDD.svg&#34; alt=&#34;Domain-Driven Design&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/DDD.svg&#34;&gt;Domain-Driven Design&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Domain Layer の中身は Domain Service, Entity, そして Value Object に分類される。
ビジネスロジックは図の右側，つまり Entity や Value Object に記述されるのが良い設計だと言われている（記述の重複を避けられるため）。
ただし Value Object はしばしば省略されることが多い。&lt;/p&gt;

&lt;p&gt;Value Object の特徴は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内部状態を持たず不変である&lt;/li&gt;
&lt;li&gt;属性（property）の比較のみでオブジェクト同士が等価かどうか決定できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして実装上の要件としては「軽量」であることが求められる。
何故なら Value Object は Entity の属性として使われることが多く Value Object がボトルネックになるとシステム全般へのインパクトが大きいからだ。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はこの Value Object の実装にとても向いている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」 — プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/function-and-pointer/&#34;&gt;関数とポインタ — プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴である「強い型付け」も Value Object を念頭に置いて考えるなら合理的な仕様であることが分かるだろう。&lt;/p&gt;

&lt;h3 id=&#34;多態性を-振る舞い-から考える:131c422dd318de78a778ce2a1d39851c&#34;&gt;多態性を「振る舞い」から考える&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の多態性（polymorphism）は振る舞いによってのみ規定される（&lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia, the free encyclopedia&#34;&gt;duck typing&lt;/a&gt;）。
つまり「猫」のように振る舞うのであれば実体がロボットだろうがコスプレイヤーだろうが全部「猫」として括れるのである。
そして「猫」のようにあるためにロボットやコスプレイヤーの identity を書き換える必要はない。
これはとても重要な事である。&lt;/p&gt;

&lt;p&gt;たとえば「猫」を実装する際に，それに多態性を持たせなければならないかどうかは設計の割と早い段階で決めなければならないことが多い。
そうして先に &lt;code&gt;interface&lt;/code&gt; などを決めなければ具体的なクラスを記述することができない。
しかし &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではアプローチが逆になる。
先にロボットやコスプレイヤーといった具体的な型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）をバンバン作り，個々の振る舞いを見て，あとから「あっ，これ「猫」で括れるぢゃん♥」となるわけだ。
言い方を変えるなら refactoring 向きであるとも言える。&lt;/p&gt;

&lt;h3 id=&#34;要件定義からコードを書く:131c422dd318de78a778ce2a1d39851c&#34;&gt;要件定義からコードを書く&lt;/h3&gt;

&lt;p&gt;これは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に限らないが， refactoring しやすい言語は prototyping に向いている言語であるとも言える。
Prototyping に向いているということはプロジェクトのかなり早い段階（たとえば要件定義）からコードを書けるということでもある。
結局エンジニアにとって信用できるのは百万語を連ねた設計書より「動くコード」なのである。&lt;/p&gt;

&lt;h2 id=&#34;other:131c422dd318de78a778ce2a1d39851c&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/transmission-releases-long-awaited-bittorrent-client-for-windows-160327/&#34;&gt;Transmission Releases Long-Awaited BitTorrent Client For Windows - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/npm-and-left-pad/&#34;&gt;NPMとleft-pad : 私たちはプログラミングのやり方を忘れてしまったのか？ | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/29/20160328windows-users-finally-have-a-good-bittorrent-client/&#34;&gt;WindowsにBitTorrentクライアントの決定版Transmissionがやってくる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iij.ad.jp/news/pressrelease/2016/0329-2.html&#34;&gt;IIJ、Webサイトにおけるユーザ認証のセキュリティを強化する 「IIJ SmartKeyマネージメントサービス」を提供開始 | 2016年 | IIJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/technicalwatch/201600330.html&#34;&gt;IPAテクニカルウォッチ「公衆無線LAN利用に係る脅威と対策」：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/research/apt-guide.html&#34;&gt;高度サイバー攻撃(APT)への備えと対応ガイド～企業や組織に薦める一連のプロセスについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://p2ptk.org/copyright/231&#34;&gt;著作権削除要請の28％が「疑わしい」との研究結果 – P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://current.ndl.go.jp/node/31200&#34;&gt;国立極地研究所情報図書室、ウェブサイトをCC BYで公開 | カレントアウェアネス・ポータル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fanfun.jaxa.jp/jaxatv/files/20160408_hitomi.pdf&#34;&gt;Ｘ線天文衛星「ひとみ」（ASTRO-H）の状況について - 20160408_hitomi.pdf&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/030201/2016_04_02_jspoc.html&#34;&gt;X線天文衛星「ひとみ」、回転は破片を誤認？米軍発表 | Sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tsukamoto/-f42bf7b5e25e&#34;&gt;定時帰宅のススメ — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/09/20160408spacex-just-landed-a-rocket-on-a-drone-ship-for-the-first-time/&#34;&gt;SpaceXのFalcon 9ロケット、洋上のドローン艀への軟着陸についに成功 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sonickun.hatenablog.com/entry/2016/04/03/183220&#34;&gt;GoogleがTLSでの採用を提唱している共通鍵暗号方式「ChaCha」についてまとめた - sonickun.log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:131c422dd318de78a778ce2a1d39851c&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>関数とポインタ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/function-and-pointer/" />
		<id>tag:text.Baldanders.info,2016-03-29:/golang/function-and-pointer/</id>
		<published>2016-03-29T22:16:41+09:00</published>
		<updated>2016-03-29T22:16:41+09:00</updated>
		<summary>Go 言語の引数は基本的に「値渡し（call by value）」である。「参照渡し（call by reference）」にしたい場合はポインタを使う。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;いまさらな内容なのだが覚え書きとして記しておく。&lt;/p&gt;

&lt;h2 id=&#34;go-言語における-calling-sequence:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Go 言語における Calling Sequence&lt;/h2&gt;

&lt;p&gt;まずは簡単な足し算の関数を定義してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x int, y int) int {
	return x + y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;add&lt;/code&gt; に続く括弧内が引数を定義していて，括弧の後ろの &lt;code&gt;int&lt;/code&gt; は返り値の型&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; を示している。
&lt;code&gt;add()&lt;/code&gt; 関数を呼び出すには以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func add(x, y int) int {
	return x + y
}

func main() {
	ans := add(42, 13)
	fmt.Println(ans)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; は同じ int 型なので以下のように記述することもできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y int) int {
	return x + y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返り値として複数の値を定義することもできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func split(sum int) (int, int) {
	x = sum * 4 / 9
	y = sum - x
	return x, y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また返り値は以下のように名前をつけることもできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y int) (ans int) {
	ans = x + y
	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後の &lt;code&gt;return&lt;/code&gt; がないとコンパイル・エラーになるので注意。
この書き方は &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;defer&lt;/a&gt; 構文と組み合わせるときに威力を発揮する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	err := r()
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(&amp;quot;Normal End.&amp;quot;)
	}
}

func r() (err error) {
	defer func() {
		if rec := recover(); rec != nil {
			err = fmt.Errorf(&amp;quot;Recovered from: %v&amp;quot;, rec)
		}
	}()

	f()
	err = nil
	return
}

func f() {
	panic(&amp;quot;Panic!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; では &lt;code&gt;r()&lt;/code&gt; 関数内で &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を捕まえ， 返り値の &lt;code&gt;err&lt;/code&gt; に値をセットしなおしている。&lt;/p&gt;

&lt;h3 id=&#34;go-言語の引数は-値渡し:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Go 言語の引数は「値渡し」&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の引数は基本的に「値渡し（call by value）」である。
たとえば先程の足し算を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y int) int {
	x += y
	return x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義した場合でも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func add(x, y int) int {
	x += y
	return x
}

func main() {
    x := 42
    y := 13
	ans := add(x, y)
	fmt.Printf(&amp;quot;%d + %d = %d\n&amp;quot;, x, y, ans) //output: 42 + 13 = 55
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;呼び出し元で &lt;code&gt;add()&lt;/code&gt; 関数の引数に渡した instance は関数実行後も変化しない。
このため「値渡し」は thread safe なコードに向いている。
たとえば value object を構成する際には関連する関数は「値渡し」のほうが安全である。
ただし関数呼び出し時に instance の値が常にコピーされるため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，サイズの大きな instance の場合は呼び出し時のコストが高くなる。&lt;/p&gt;

&lt;p&gt;引数を「参照渡し（call by reference）」にしたい場合はポインタを使う。
つまり instance のポインタ値を渡すのである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func add(x, y *int) int {
	*x += *y
	return *x
}

func main() {
	x := 42
	y := 13
	ans := add(&amp;amp;x, &amp;amp;y)
	fmt.Printf(&amp;quot;%d + %d = %d\n&amp;quot;, x, y, ans) //output: 55 + 13 = 55
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコードでは &lt;code&gt;add()&lt;/code&gt; 関数実行後の &lt;code&gt;x&lt;/code&gt; の値が変更されている。
内部状態を持つ instance を引数に指定する場合は参照渡しにする必要がある。
しかし引数を参照渡しにすると関数実行が thread safe でなくなる可能性がある。
また引数の値が nil の場合も考慮する必要がある。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では通常の方法ではポインタ演算ができない。
たとえば，ついうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y *int) int {
	x += y
	return *x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか書いてしまっても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;invalid operation: x += y (operator + not defined on pointer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とコンパイル・エラーになる。
ポインタ演算が必要な場合は &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージを使う。&lt;/p&gt;

&lt;h3 id=&#34;slice-map-channel-は常に-参照渡し:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Slice, Map, Channel は常に「参照渡し」&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; は組み込み型だが内部状態を持つ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
したがって，これらの型の instance を引数に渡す場合はつねに「参照渡し」になる（つまり instance のコピーは発生しない）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func setItem(ary map[int]int, index, item int) {
	ary[index] = item
}

func main() {
    ary := map[int]int{0: 0}
	fmt.Println(ary) //output: map[0:0]
	setItem(ary, 0, 1)
	fmt.Println(ary) //output: map[0:1]
	setItem(ary, 10, 10)
	fmt.Println(ary) //output: map[0:1 10:10]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし固定の配列や &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; の instance は「値」として振る舞うため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;，引数に指定した場合も「値渡し」になる。
&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; とは挙動が異なるためテキトーなコードを書いていると混乱しやすい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func setItem(ary [4]int, index, item int) {
	ary[index] = item
}

func main() {
	ary := [4]int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	setItem(ary, 1, 10)
	fmt.Println(ary) //output: [0 1 2 3]
	ary[2] = 200
	fmt.Println(ary) //output: [0 1 200 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;固定配列や &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型を「参照渡し」にしたい場合はやはりポインタ値を渡す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func setItem(ary *[4]int, index, item int) {
	(*ary)[index] = item
}

func main() {
	ary := [4]int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	setItem(&amp;amp;ary, 1, 10)
	fmt.Println(ary) //output: [0 10 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の instance は「不変（immutable）」なので「参照渡し」が必要な局面はほとんど無いと思われる。
固定配列は不変ではないが，配列を操作するのであれば固定配列ではなく &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; のほうが扱いやすい。
たとえば上のコードでは &lt;code&gt;ary := []int{0, 1, 2, 3}&lt;/code&gt; と初期化すれば &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; として扱える。&lt;/p&gt;

&lt;h2 id=&#34;method-receiver:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Method Receiver&lt;/h2&gt;

&lt;p&gt;ある型に関数を関連付ける場合は method receiver を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Vertex struct {
	X int
	Y int
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(v Vertex)&lt;/code&gt; の部分が method receiver である。
&lt;code&gt;Add()&lt;/code&gt; 関数を呼び出すには以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}

func main() {
	v := Vertex{X: 1, Y: 2}
	vv := v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v)  //output: X = 1, Y = 2
	fmt.Println(vv) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数の calling sequence としては &lt;code&gt;v.Add(dv)&lt;/code&gt; と &lt;code&gt;Vertex.Add(v, dv)&lt;/code&gt; は等価である。
つまり &lt;code&gt;v&lt;/code&gt; は &lt;code&gt;Add()&lt;/code&gt; 関数の0番目の引数として振る舞い，「値渡し」でセットされる。&lt;/p&gt;

&lt;p&gt;Method receiver の型をポインタ型にすれば「参照渡し」にできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v *Vertex) Add(dv Vertex) {
	if v == nil {
		return
	}
	v.X += dv.X
	v.Y += dv.Y
}

func main() {
	v := &amp;amp;Vertex{X: 1, Y: 2}
	v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合も calling sequence としては &lt;code&gt;v.Add(dv)&lt;/code&gt; と &lt;code&gt;(*Vertex).Add(v, dv)&lt;/code&gt; は等価である。&lt;/p&gt;

&lt;h3 id=&#34;method-receiver-の暗黙的変換:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Method Receiver の暗黙的変換&lt;/h3&gt;

&lt;p&gt;Method receiver を「値渡し」にした場合，呼び出し元の instance がポインタ型であっても暗黙的に「値渡し」に変換される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}

func main() {
	v := &amp;amp;Vertex{X: 1, Y: 2} //pointer
	vv := v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v)  //output: X = 1, Y = 2
	fmt.Println(vv) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Method receiver を「参照渡し」にした場合も暗黙的に「参照渡し」に変換される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v *Vertex) Add(dv Vertex) {
	if v == nil {
		return
	}
	v.X += dv.X
	v.Y += dv.Y
}

func main() {
	v := Vertex{X: 1, Y: 2} //not pointer
	v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;method-receiver-の値が-nil-の場合:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Method Receiver の値が nil の場合&lt;/h3&gt;

&lt;p&gt;Method receiver の値が nil の場合はどうなるか。
まずは「値渡し」の場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}

func main() {
	v := (*Vertex)(nil) //nil
	vv := v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v)
	fmt.Println(vv)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合は &lt;code&gt;Add()&lt;/code&gt; 関数呼び出し時に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; になる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;panic: runtime error: invalid memory address or nil pointer dereference
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁこれは分かりやすいよね。
では「参照渡し」の場合はどうなるか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v *Vertex) Add(dv Vertex) {
	if v == nil {
		return
	}
	v.X += dv.X
	v.Y += dv.Y
}

func main() {
	v := (*Vertex)(nil) //nil
	v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v) //output: &amp;lt;nil&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は &lt;code&gt;Add()&lt;/code&gt; 関数呼び出し時点では &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; にはならない。
上のコードでは &lt;code&gt;v&lt;/code&gt; に nil が渡される。
したがって &lt;code&gt;Add()&lt;/code&gt; 関数内の条件文を削除すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *Vertex) Add(dv Vertex) {
	v.X += dv.X
	v.Y += dv.Y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;v&lt;/code&gt; 内の要素を参照としたところで &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; になる。
Method receiver を「参照渡し」にする場合は nil 値に注意する必要がある。&lt;/p&gt;

&lt;h2 id=&#34;for-range-構文も-値渡し:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;for-range 構文も「値渡し」&lt;/h2&gt;

&lt;p&gt;余談だが for-range 構文も「値渡し」（つまりコピーが発生する）なので注意が必要である。
たとえば以下のコードで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	ary := []int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	for _, item := range ary {
		item += 10
	}
	fmt.Println(ary) //output: [0 1 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for-range 構文内の &lt;code&gt;item&lt;/code&gt; は &lt;code&gt;ary&lt;/code&gt; 内の要素を指すのではなく要素のコピーである。
したがって &lt;code&gt;item&lt;/code&gt; を操作しても &lt;code&gt;ary&lt;/code&gt; には影響しない。
&lt;code&gt;ary&lt;/code&gt; 内の要素を操作するのであれば素朴に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	ary := []int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	for i := 0; i &amp;lt; len(ary); i++ {
		ary[i] += 10
	}
	fmt.Println(ary) //output: [10 11 12 13]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするしかない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://skatsuta.github.io/2015/12/29/value-receiver-pointer-receiver/&#34;&gt;Go 言語の値レシーバとポインタレシーバ | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;型については「&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;このコードについては「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」で解説している。ちなみに &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を潰して error を返すのはエラー・ハンドリングとしてはいいやり方ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;値がどこにコピーされるかは型によって異なる。 &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 以外の基本型は値がスタックに積まれる。 &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; および基本型以外はヒープ領域に値がコピーされそのポインタがスタックに積まれる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; は内部状態を持つため &lt;code&gt;new()&lt;/code&gt; 関数ではなく &lt;code&gt;make()&lt;/code&gt; 関数で instance を生成する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の実体は &lt;code&gt;[]byte&lt;/code&gt; 型である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;たとえば固定の配列や &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の instance は nil 値を持たない。 &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型のゼロ値は空文字列である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 安全と安心をいっしょくたにする輩を信用してはいけない - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/27-stories/" />
		<id>tag:text.Baldanders.info,2016-03-27:/remark/2016/03/27-stories/</id>
		<published>2016-03-27T02:38:30+09:00</published>
		<updated>2016-04-09T21:39:04+09:00</updated>
		<summary>安全と安心をいっしょくたにする輩を信用してはいけない / 漫画家小山田いくさん死去 / RFC 7763 The text/markdown Media Type / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#sec:44fe24037ebc2e15984f28577ab100a4&#34;&gt;安全と安心をいっしょくたにする輩を信用してはいけない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iku:44fe24037ebc2e15984f28577ab100a4&#34;&gt;漫画家小山田いくさん死去&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#md:44fe24037ebc2e15984f28577ab100a4&#34;&gt;RFC 7763 The text/markdown Media Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:44fe24037ebc2e15984f28577ab100a4&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;sec:44fe24037ebc2e15984f28577ab100a4&#34;&gt;安全と安心をいっしょくたにする輩を信用してはいけない&lt;/h2&gt;

&lt;p&gt;一昨年前に Facebook で呟いていた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;安心は思い込みさえすればお手軽に手に入るが、安全を手に入れるには少なくないコストがかかるし、誰かから貰えたりもしない。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どんな文脈で言ったか憶えてないが，まぁいつものことだろう。&lt;/p&gt;

&lt;p&gt;安全でなくても安心（感）は手に入る。
そして人が素朴に求めるのは安全ではなく安心のほうだ。
これが悪いほうに作用した典型例が Apple 製品である。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;375&#34; src=&#34;https://www.youtube-nocookie.com/embed/bmpSJwZ5xqA&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bmpSJwZ5xqA&#34;&gt;セキュリティ MacCM - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;当時， Apple はユーザに対して安心感を「売る」キャンペーンを大々的に展開した。
また App Store からセキュリティ関連アプリを排除したりしたこともあった（今はどうなってるか知らないが）。
Apple の失敗はユーザに安心感を与えるために安全を omit してしまったことだ。
そのせいで Apple は大勢のユーザを危険に晒すことになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/03/24/162/&#34;&gt;FBIとAppleの対立が急転、サン電子子会社がiPhoneロック解除で協力か | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gigazine.net/news/20160324-fbi-unlock-iphone/&#34;&gt;iPhoneの暗号化をAppleの協力なしで解除する7つの方法 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/29/20160328justice-department-drops-lawsuit-against-apple-over-iphone-unlocking-case/&#34;&gt;司法省、対Apple訴訟を取り下げ―テロ容疑者のiPhoneはFBIがアンロックに成功 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今まで何度も言っているが「警察にできることは犯罪者にもできる」。
自力で iPhone を突破できなかった FBI は外部の企業を使うようだ。
つまり警察は犯罪者以下だと証明してしまったわけだ。&lt;/p&gt;

&lt;p&gt;IPA も気をつけなよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/sec/reports/20160324.html&#34;&gt;「つながる世界の開発指針」を公開：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;追加ブックマーク:44fe24037ebc2e15984f28577ab100a4&#34;&gt;追加ブックマーク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080404/&#34;&gt;米政府によるスマホデータ取り出しの協力要請、ACLUが実態調査 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/01/news114.html&#34;&gt;FBIのiPhoneロック解除方法、Appleに知らされない可能性も (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/08/news060.html&#34;&gt;FBI長官、「購入したロック解除ツールはiPhone 5sでは機能しなかった」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iku:44fe24037ebc2e15984f28577ab100a4&#34;&gt;漫画家小山田いくさん死去&lt;/h2&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;小山田いく先生。お亡くなりになりました。&lt;br&gt;お疲れ様でした。&lt;/p&gt;&amp;mdash; 田上 喜久 (@HgKjDWcYgmlilNs) &lt;a href=&#34;https://twitter.com/HgKjDWcYgmlilNs/status/713252253725904896&#34;&gt;2016年3月25日&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nlab.itmedia.co.jp/nl/articles/1603/25/news127.html&#34;&gt;漫画家・小山田いくさん亡くなる　代表作に出身地・長野県小諸市を舞台にした「すくらっぷ・ブック」など - ねとらぼ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「すくらっぷ・ブック」の主要キャラは私より1歳下（連載当時）で思春期真っ盛りの私はシンクロしまくりだった。
社会人になって読み返したらこっ恥ずかしい台詞のオンパレードで赤面するのだが，今でも1980年代までに出た単行本は実家に全部ある。&lt;/p&gt;

&lt;p&gt;手塚治虫さんとか石森章太郎さんとかの作品って私からはだいぶ上の世代なんだよね。
私等くらいの世代だと小山田いくさんとかご兄弟のたがみよしひささんとか竹本泉さんとかあたりが思春期リアルなんじゃないだろうか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;その時代の作家さんが亡くなるのはやっぱくるねぇ。
合掌。&lt;/p&gt;

&lt;h2 id=&#34;md:44fe24037ebc2e15984f28577ab100a4&#34;&gt;RFC 7763 The text/markdown Media Type&lt;/h2&gt;

&lt;p&gt;Markdown が RFC になったらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7763&#34;&gt;RFC 7763 - The text/markdown Media Type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文法についても定義されているけど markdown って既に方言バリバリだからなぁ。&lt;/p&gt;

&lt;h2 id=&#34;other:44fe24037ebc2e15984f28577ab100a4&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chuck0523/items/ee23293f2645d40cb317&#34;&gt;【意訳】たった今、npmのパッケージを解放しました。 - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm&#34;&gt;The npm Blog — kik, left-pad, and npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/25/20160324email-is-dying-among-mobiles-youngest-users/&#34;&gt;モバイル最若年層では、Eメールが死につつある | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/docker_for_macwindows.html&#34;&gt;MacOSとWindowsのネイティブ仮想化を用いたDocker純正ツール「Docker for Mac/Windows」登場、VirtualBoxは不要に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:44fe24037ebc2e15984f28577ab100a4&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/483544213X/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/518uMdKYp3L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/483544213X/baldandersinf-22/&#34;&gt;すくらっぷ・ブック (1) (fukkan.com―小山田いく選集)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;小山田 いく &lt;/dd&gt;&lt;dd&gt;ブッキング 2006-06-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/425310200X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/425310200X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;週刊少年チャンピオン40th 創刊40周年記念特別編集&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4835442970/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4835442970.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;魑魅 (小山田いく選集 2期)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;思春期の頃の愛読書でした。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-07-01&#34;&gt;2015/07/01&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;まぁ他にも新谷かおるさんとか聖悠紀さんとか人によって色々あるだろうけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>いまさら『数学ガール／ガロア理論』を読んだ時の話 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/mathgirl-galois-theory/" />
		<id>tag:text.Baldanders.info,2016-03-22:/remark/2016/03/mathgirl-galois-theory/</id>
		<published>2016-03-22T23:19:00+09:00</published>
		<updated>2016-03-22T23:19:00+09:00</updated>
		<summary>というわけで，以前に「ガロア理論」の中身がよく分からなかったって方は「数学ガールの秘密ノート」シリーズを読んでから再読してみると理解が進むかもしれない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;http://qiita.com/&#34;&gt;Qiita&lt;/a&gt; で面白い記事を見つける。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taketo1024/items/bd356c59dc0559ee9a0b&#34;&gt;Swiftで代数学入門 〜 1. 数とは何か？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34;&gt;前にも書いた&lt;/a&gt;が，私の母国語はアセンブラとC言語である。
これは私の出自が「制御システム」だからである。
なので，組み込み系はもちろん業務アプリケーションでも「いかに対象を制御するか」を念頭に置いてプログラミングを行っている。
しかし「関数型言語」は「制御」に関してはどうにも具合が悪い。
いや，もちろん Erlang のような優れた言語もあるし，決して「関数型言語」が制御に向かないわけではないのだが，シャンタッ君並に小さい私の脳みそが「関数型言語」のコードをノイマン型コンピュータのインストラクションに上手く「コンパイル」してくれないのである。&lt;/p&gt;

&lt;p&gt;でもようやく近年になって少し見方が変わってきて，「対象を制御する」のではなく「対象を記述する」手段としてプログラミングを考えるようになってきた。
そういう意味で「数学を記述する」この連載は教科書としてうってつけである。
Swift は Apple 製ということで Objective-C 並に毛嫌いしていたが（仕事ならやりますよ，もちろん），オープンソースになったことだし， iOS 以外にも使えるのならちょっと勉強してみようかと思っていたところなのだった。&lt;/p&gt;

&lt;p&gt;そういえば「ガロア理論」って「数学ガール」シリーズでもやってたなぁ&amp;hellip; と思って&lt;a href=&#34;http://www.baldanders.info/archives.shtml&#34;&gt;昔のブログ記事&lt;/a&gt;を探しまわったが，ない。
あれ？ 読書感想文を書いてないじゃん，私。
そういや2012年頃ってエラい仕事が忙しくて「ガロア理論」もすぐには読めなかったんだっけ。
やっちまったなぁ。&lt;/p&gt;

&lt;p&gt;というわけで前置きが長くなったが，今更『数学ガール／ガロア理論』の感想文を書いてみる。
もう多少ネタバレしててもいいよね。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今回はやはりミルカさん回か。
いやユーリちゃんも今回はいい感じだったんだけどね。
終盤のミルカさんの「教師」っぷりには思わず「ミルカさんも大人になったなぁ」とホロリとしてしまった。
しかし，それよりもリサちゃん（「ちゃん」は不要）の出番が少ないです！ もっと出してください。&lt;/p&gt;

&lt;p&gt;今回の話は「ガロア理論」だけあって「教師と生徒」を一方の軸として物語が進んでいく。
さらに主要キャラクター達が教師役と生徒役とで立ち位置を入れ替え（置換）ていくのが面白い。
また「教師と生徒」というのは著者の結城浩さんの言う「&lt;a href=&#34;http://rentwi.textfile.org/?708541967391547392s&#34;&gt;対話&lt;/a&gt;」形式のひとつだ。
こういう幾重にも重なった「協奏（concerto）」は音楽的でもある。&lt;/p&gt;

&lt;p&gt;実は群論についてはあまり真面目に勉強しなかったんだよなぁ。
大学の講義でちょろんと習った覚えはあるけど，それだけ。
私にとって数学は単なる「道具」で，道具の中身を弄くり回すことについては興味が薄かった。&lt;/p&gt;

&lt;p&gt;だから「あみだくじ」から話が始まって「これはラグランジュ分解式だな」と分かっても，そこから先にどう展開するか読めない。
でも逆にそれが私にとって面白かったようだ。
今回この記事を書くために再読したが，やっぱりワクワクしながら読めた。&lt;/p&gt;

&lt;p&gt;改めて読んで気づいたんだけど，「数学ガールの秘密ノート」シリーズは「数学ガール」シリーズの「補題」になってるんだね。
とくに昨年出た「&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/mathgirl-note-vector/&#34;&gt;ベクトルの真実&lt;/a&gt;」やさらにその前の「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000685.shtml&#34;&gt;丸い三角関数&lt;/a&gt;」なんかは今回の「ガロア理論」と直接リンクしている。&lt;/p&gt;

&lt;p&gt;というわけで，以前に「ガロア理論」の中身がよく分からなかったって方は「数学ガールの秘密ノート」シリーズを読んでから再読してみると理解が進むかもしれない。
そんで「ガロア理論」を読んだら改めて最初のリンク先の記事へ GO！&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41szGJIR-jL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34;&gt;数学ガール／ガロア理論&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2012-05-29&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1D6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ゲーデルの不完全性定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1FO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／乱択アルゴリズム&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;あみだくじからガロア理論へ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-22&#34;&gt;2016-03-22&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「テレビは既に生活の中心ではない」 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/not-need-tv/" />
		<id>tag:text.Baldanders.info,2016-03-21:/remark/2016/03/not-need-tv/</id>
		<published>2016-03-21T15:42:05+09:00</published>
		<updated>2016-03-21T15:42:05+09:00</updated>
		<summary>「テレビを観る時間が長く、体を動かさない人は、認知テストの得点が低い」んだそうだ（笑）</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nakamorikzs.net/entry/2016/03/20/061040&#34;&gt;4K放送での録画禁止発言でCCCDの「失敗」を思い出す - 空気を読まない中杜カズサ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにうちはアナログ停波以来テレビを捨てた。
BS も映らない古いブラウン管テレビだったので，撤去して部屋が広くなった。
ゲーム機は繋がらなくなったが（笑） テレビはワンセグで「ニチアサ」を観るくらい。
あと行きつけのお好み焼き屋で見るか。
Facebook の NHK のページでは番組予告とかやってるけど，そのとき「観たいなぁ」と思っても忘れて観ないことのほうが多い。
わざわざ「テレビを観る」のは（番組の内容に対して）コストが高いのだ。&lt;/p&gt;

&lt;p&gt;まだ HDD の容量が100GBで「大容量」とか言われてた時代。
HDD 増設のついでにパソコン用の TV チューナーを買ったのよ。
それで見逃した番組を録り溜めしておいて後でまとめて見ればいいやって。
でもこれ数ヶ月で破綻したんだよねぇ。
そこで私は悟った。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;今見れないものは後でだって見ない&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要するにそのテレビ番組が観たいって思うのは「捏造された欲求」なのだよ。
扇情的なパッケージを見てついエロ DVD を買ったり借りたりしちゃったのと同じ。
「捏造された欲求」は喉元を過ぎれば忘れてしまう。
それに「後で見る」は事態の先送りにすぎない。
そう気づいたら楽になり，そこから「テレビを見ない」ことが既定になった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8bdebbecd617429ba528f39dbc9fbcc2:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8bdebbecd617429ba528f39dbc9fbcc2:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;「テレビを見ない」ことが既定になって次に何が起こったかというと音楽を聴かなくなった。
厳密に言うと「流行りの音楽」を聴かなくなった。
私のアイドルの知識は初期の「モー娘。」で止まってる。
なぜかというとテレビを見なくなったから。
テレビを見なくなると「流行りの音楽」との接点がなくなる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8bdebbecd617429ba528f39dbc9fbcc2:r&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8bdebbecd617429ba528f39dbc9fbcc2:r&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;CCCDが音楽市場にどのように影響したのかは不明ですし、わかる方法はなかなかありません。ただ、もし習慣的に音楽CDを買っていた人が、これを境に買わないという逆の習慣をつけてしまったとしたら、結果的にCDの売り上げを減らしてしまったことになります。そうなると非常に皮肉な結果だと思うのです&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://nakamorikzs.net/entry/2016/03/20/061040&#34;&gt;4K放送での録画禁止発言でCCCDの「失敗」を思い出す&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;私の場合，これまで述べたような経緯なので「CCCD のせいで買わなくなった」かというと必ずしもそうではない気もするのだが，学生時代から聴いてたアーティスト（山本正之さんや谷山浩子さんなど）の CD も買わなくなったので CCCD の影響は少なからずあったと思う。&lt;/p&gt;

&lt;p&gt;ここ数年また音楽を少しずつ聴くようになったのはアニメ等をネットで観れるようになったことと Amazon MP3 のおかげで CD を買わなくても直接デジタルで音楽を買えるようになったことが要因だと思う。
なので最近聴く音楽は激しく偏っていて昔とは嗜好が異なっている。&lt;/p&gt;

&lt;p&gt;音楽もアニメ・ドラマもそれ以外のコンテンツも，今はサービス単位の subscription 制が当たり前になり「水のように」聞いたり見たりできるようになった。
誰しも可処分時間は有限であり，ネット上のサービスも含めて「パイの奪い合い」になっている。
「若者の◯◯離れ」というのは要するに「敗者の弁」である。
そういった状況の中でテレビというメディアの存在理由が問われていると思う。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;ただ、現在のところなんとかテレビを見る、そして情報のコアにするという習慣とがある程度の年齢以上には保たれているところでしょう。つまり、テレビは「テレビを見る」という習慣の命綱であるとも言えます。ところが録画を禁止することによって「テレビを見る」という習慣自体を途絶えさせてしまえば、一気に視聴者離れが進んでしまうのではないでしょうか。特にネットが生活に密着している40代以下では&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://nakamorikzs.net/entry/2016/03/20/061040&#34;&gt;4K放送での録画禁止発言でCCCDの「失敗」を思い出す&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;しかし，子どもと年寄りは就労世代に比べて明らかに可処分時間が多い。
特に年寄りは「録画して後で観る」なんて習慣はないんじゃないのかなぁ。
そうなるとテレビはますます「お達者倶楽部」になっていくのかもしれない。
でも「テレビを観る時間が長く、体を動かさない人は、認知テストの得点が低い」んだそうだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/02/25/tv-binging-exercise-skipping-poor-cognitive-function/&#34;&gt;「活動的でないテレビ好き」は認知機能が低い：研究結果 « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これってネットで一日中動画サイトを徘徊しているような人にも当てはまる気がするが，まぁお気をつけを。&lt;/p&gt;

&lt;p&gt;そういえば停波したアナログ帯域は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://k-tai.impress.co.jp/docs/news/20160229_745943.html&#34;&gt;3月1日放送開始のデジタルラジオ「i-dio」、番組など詳細発表 - ケータイ Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;てなことになってるらしい。
なんとも役人臭プンプンなサービスだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8bdebbecd617429ba528f39dbc9fbcc2:id&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8bdebbecd617429ba528f39dbc9fbcc2:id&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，これなら地上デジタル波要らないんじゃないのかなぁ。
テレビコンテンツは衛星とケーブルに全部移して，情報系は i-dio でいいんだから，地上デジタル波の帯域は停波・返却してもっと世の中の役に立つことに使うべきだよね。
21世紀の今，電波を「放送」に使うのは激しく無駄遣いだと思うのだが，どうだろう。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8bdebbecd617429ba528f39dbc9fbcc2:1&#34;&gt;実際にはアナログ停波するまでテレビはつけっぱなしで音声をオフにしていた。 BGV として利用していたわけだね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8bdebbecd617429ba528f39dbc9fbcc2:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8bdebbecd617429ba528f39dbc9fbcc2:r&#34;&gt;ちなみにラジオは社会人になってから聴かなくなった。なんでだろう。少年マンガ誌も読まなくなったんだよな。まぁ少年マンガ誌は自前で買ったことなかった（友人が読み終わったのを読んでた）から，読まなくなっても当たり前だけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8bdebbecd617429ba528f39dbc9fbcc2:r&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8bdebbecd617429ba528f39dbc9fbcc2:id&#34;&gt;ホント日本の役人って「利権」をつくるのがうまいよねぇ。まぁ電波を免許制にするかぎり，それ自体が巨大な利権だけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8bdebbecd617429ba528f39dbc9fbcc2:id&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： NIST SP 800-175B Draft - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/20-stories/" />
		<id>tag:text.Baldanders.info,2016-03-20:/remark/2016/03/20-stories/</id>
		<published>2016-03-20T19:09:04+09:00</published>
		<updated>2016-03-26T13:11:22+09:00</updated>
		<summary>NIST SP 800-175B Draft / 翻案は「二次創作」を指すものではない / 引っ越しの際に真っ先に捨てるのは「本」</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#nist:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;NIST SP 800-175B Draft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adapt:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;翻案は「二次創作」を指すものではない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#book:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;引っ越しの際に真っ先に捨てるのは「本」&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;nist:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;NIST SP 800-175B Draft&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://csrc.nist.gov/publications/drafts/800-175/sp800-175b_draft.pdf&#34;&gt;NIST Special Publication 800-175B Guideline for Using Cryptographic Standards in the Federal Government: Cryptographic Mechanisms&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;519行目より&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;SKIPJACK is referenced in FIPS 185 and s pecified in a classified document. SKIPJACK is no longer considered adequate for the protection of federal information and has been withdrawn as a FIPS.  The use of SKIPJACK for applying cryptographic protection (e.g., encryption) is not approved, although it is permissible to use the algorithm for decrypting information.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://csrc.nist.gov/publications/drafts/800-175/sp800-175b_draft.pdf&#34;&gt;NIST Special Publication 800-175B&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;SKIPJACK 暗号は NSA が1990年代に考えた 80bits 鍵長のブロック暗号で，当時「強い」と言われていた DES よりも暗号強度が高かった。
NSA はこの暗号アルゴリズムと「鍵預託（key escrow）」機能を持つ公開鍵暗号システムを組み合わせたものをコンピュータ・チップに内蔵させた。
これが Clipper Chip である。&lt;/p&gt;

&lt;p&gt;AT&amp;amp;T は自社の電話暗号化システムに Clipper Chip を搭載する契約を政府と結んだ（見返りに AT&amp;amp;T は政府という大口の顧客を得ることになる）。
一方，1992年末にクリントンが大統領に選出され，その副大統領ゴアによる「情報ハイウェイ」構想が打ち立てられた。
FBI や NSA はこの機に乗じて Clipper Chip を売り込んだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;実際には Clipper Chip は大きな批判にさらされた。
「自宅の玄関の鍵のコピーを警察署に預けなければならないとしたらどうするか？」（Steven Levy 著『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化&lt;/a&gt;』より）というわけだ。
Clipper Chip は Big Brother Chip と揶揄された。
最終的に鍵預託の仕様に欠陥が見つかったことなどがきっかけで Clipper Chip は凋落し電話やパソコンに使われることはなかった。&lt;/p&gt;

&lt;p&gt;鍵預託の仕様は1994年に &lt;span&gt;&lt;a href=&#34;http://csrc.nist.gov/publications/fips/fips185/fips185.pdf&#34;&gt;FIPS 185&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; として標準化されたが，これが正式に obsolete となったのはようやく2015年である。
SKIPJACK 暗号も当時は強力と言われていたが，今や 80bits ぽっちの暗号が（古い資産を復号する以外の）役に立たないことは皆さんご存知の通り。&lt;/p&gt;

&lt;p&gt;しかしこの20年余りの間，大規模テロが起こるたびに米国政府（というか FBI）は同じような試みを繰り返しては失敗している。
国防上の理由と称して国民をテロリストと同列に監視対象に入れようとしているわけだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/03/cryptography_is.html&#34;&gt;Cryptography Is Harder Than It Looks - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adapt:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;翻案は「二次創作」を指すものではない&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dotplace.jp/archives/21269&#34;&gt;北本かおり×ドミニク・チェン×山内康裕：二次創作とライセンス 「ただコンテンツを眺めるだけじゃなく、自由に使うことによって文化が成長する。」 - DOTPLACE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dotplace.jp/archives/21441&#34;&gt;北本かおり×ドミニク・チェン×山内康裕：二次創作とライセンス 「非親告罪化には、著者の『許可したいです』という意思を発露する手段が奪われていく感じがします。」 - DOTPLACE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dotplace.jp/archives/21458&#34;&gt;北本かおり×ドミニク・チェン×山内康裕：二次創作とライセンス 「海賊版を禁止して広がるのを止めてしまうのか、『いいから出しちゃえ』って進んだ人が結局最後に勝つのか。」 - DOTPLACE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現行の（ベルヌ条約にもとづく）著作権法はあらゆる「表現」に対して自動的に著作権を付与する。
それこそ風呂場の鼻歌やコースターの裏の落書きにも著作権が付与されてしまう。&lt;/p&gt;

&lt;p&gt;「著作権」がクリエイターや出版社だけの問題であるならば，このリンク先の議論は有効だと思う。
しかし実際にはそうではないのだ。
著作権の非親告罪化を「二次創作」への脅威として捉えるのは問題の矮小化である。&lt;/p&gt;

&lt;p&gt;山田奨治さんの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622073455/baldandersinf-22/&#34;&gt;〈海賊版〉の思想&lt;/a&gt;』のあとがきにこんな記述がある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;図工の時間に、ある児童が行詰まってしまった。いいアイデアが、どうしても浮かばないのだ。先生は「お友だちが作っているのをみて、参考にしてごらん」という。そこで、図工の得意な子が何を作っているかをみにいったら、こういわれた。「ぼくのまねをすると、著作権のしんがいになるよ。」&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;〈海賊版〉の思想&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;非親告罪化した著作権法のもとで，「ある児童」が「図工の得意な子」の作品を翻案すればその子は犯罪者で「先生」も共犯者だ，「図工の得意な子」がそれに対してどう思うかに関わらず。
あるいは子どもがテレビの前でプリキュアダンスを踊ってそれをお父さんがビデオで撮ったなら，その親子も犯罪者確定である。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/cc-licenses/01-copyright/&#34;&gt;著作権と著作権法&lt;/a&gt;」でも書いたが，ユーザにとって表現は他者とのコミュニケーション手段であり，コミュニケーションとしての表現はすべて翻案なのである。
もし非親告罪化を認めるのなら，それは明確に「表現の自由」の侵害である。&lt;/p&gt;

&lt;p&gt;米国には fair use doctrine があり&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:fud&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:fud&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，上記のケースも fair use として認められるかもしれない。
しかし日本にはそのような仕組みはない。
それどころか&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;一般社団法人日本音楽著作権協会常務理事の浅石道夫氏が「エンドユーザーと権利者の対立を表にだして自らは存在感を消している。他人の財産（著作物）を使って利益を生み出す事業者による詭弁」と真っ向から切り捨てた。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.cnet.com/news/business/35079134/&#34;&gt;デジタル時代の「孤児作品」問題を解消するには--権利者団体が議論 - CNET Japan&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;などと言ってはばからないのが現状である。&lt;/p&gt;

&lt;h2 id=&#34;book:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;引っ越しの際に真っ先に捨てるのは「本」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160314_748044.html&#34;&gt;引っ越しの際に出た不用品、トップは本、モノの所有に固執しない時代に？ -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;紙の本の愛好者は様々な理由をつけて紙の本を擁護しようとするが，実際にはこんなもんである。
うちの母親は年金をもらう歳になってから積極的に本を読むようになったが（今まで我慢してたんだねぇ，ゴメン），読み終わった本は片っ端から売りに出しているらしい。&lt;/p&gt;

&lt;p&gt;もはや多くの人にとって「本」は知識や教養の象徴ではなく，「読み捨て」の消費財である。
また「本」をそのような位置づけにしたのは他ならぬ作家と出版社である。
「本」がそういう位置付けなら，そりゃあブックオフや図書館を利用するほうが合理的だよね。
個人的には「本」も音楽や映像と同じく「水のように」なるべきだと思うな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
まぁ，もしそうなったら本屋は今のレコード・ショップ並にニッチに特化するしかないけど。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/03/02/little-bookstore-in-northern-street/&#34;&gt;北海道のシャッター通りに本屋をつくる « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/03/17/beyond-cool-japan-04/&#34;&gt;アメリカのインディペンデント書店が強いわけ « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tasukumizuno.hatenablog.com/entry/2016/03/14/190655&#34;&gt;オープンアクセス（OA）とクリエイティブコモンズ（CC） - 水野祐（@TasukuMizuno）のブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sonydna.com/sdna/solution/report02.html&#34;&gt;セキュリティ| レポート2015年度版ダウンロード | ソニーデジタルネットワークアプリケーションズ株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/nobody-wants-use-your-product/&#34;&gt;誰もあなたの製品を使いたいと思ってはいない : 製品をデザインするための考え方 | プロダクト・サービス | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160314_747958.html&#34;&gt;電子書籍の利用率が2割弱で頭打ち、「利用意向なし」が増加、「関心なし」と合わせると6割以上に -INTERNET Watch&lt;/a&gt; : 米国でも3割ちょっとらしいので，日本ならそんなもんだろう&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/articles/-/41026&#34;&gt;シリアのクルド勢力がシリア北部の自治を宣言へ：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nationalinterest.org/feature/vladimir-putin-godfather-kurdistan-15358&#34;&gt;Vladimir Putin, Godfather of Kurdistan? | The National Interest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/articles/-/41028&#34;&gt;シリアのクルド人勢力の自治への動きに関する報道：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/articles/-/41027&#34;&gt;シリアのクルド人勢力の自治政府宣言の背後に米露の協調・支持はあるのか？：池内恵 | 中東の部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2016/03/51254/&#34;&gt;自動運転車のAIが「ドライバー」であるとした米国運輸省の回答の意味（前編）「NHTSAの発表は無人運転車に関するFMVSSの解釈を示しただけ」とは - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2016/03/51258/&#34;&gt;自動運転車AIが「ドライバー」であるとした米国運輸省の回答の意味（後編）完全自動運転車が問う「人間とテクノロジー」の関係 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622073455/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41WpTRWCAvL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622073455/baldandersinf-22/&#34;&gt;〈海賊版〉の思想‐18世紀英国の永久コピーライト闘争&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;山田 奨治 &lt;/dd&gt;&lt;dd&gt;みすず書房 2007-12-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4121023390/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4121023390.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ロラン・バルト -言語を愛し恐れつづけた批評家 (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4087207846/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4087207846.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;盗作の言語学 表現のオリジナリティーを考える (集英社新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480689281/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480689281.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;18歳の著作権入門 (ちくまプリマー新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「コピーライト永久独占を目論む大書店主に挑む〈海賊出版者〉ドナルドソンの肖像。法廷闘争を軸に著作権を史的に考察する。」（帯文より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-10-17&#34;&gt;2015-10-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:a&#34;&gt;クリントン政権は最初は暗号技術の輸出規制を撤廃しようと考えていた。それに対抗する方便として暗号チップに「鍵預託」機能を埋め込む方法を提案したわけだ。「鍵預託」を使えば暗号強度を損なうことなく，かつ米国政府はいつでも暗号通信の中身を解読できると売り込んだ。1993年に起きた世界貿易センター破壊テロも追い風になったようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:fud&#34;&gt;ある利用が Fair use に該当するかどうかは「利用の目的や本質」「原作品の本質」「抜粋の量や実質性」「原作品の価値への影響」という4つの観点で議論される。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:fud&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:c&#34;&gt;漫画アプリとか一部は既にそうなってるけど。でもそれってもう「本」のメタファーから外れてる気はするけどね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ProtonMail のアカウントを作りました - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/protonmail/" />
		<id>tag:text.Baldanders.info,2016-03-20:/remark/2016/03/protonmail/</id>
		<published>2016-03-20T11:45:24+09:00</published>
		<updated>2016-04-09T21:39:04+09:00</updated>
		<summary>というわけで ProtonMail のアカウントを作った。よさげなら本サイトの連絡先アドレスとして使おうかと思っている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35079779/&#34;&gt;暗号化電子メールのProtonMailがベータ段階を卒業&amp;ndash;「iOS」「Android」アプリを公開 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://protonmail.com/blog/protonmail-launch-worldwide/&#34;&gt;Announcement: ProtonMail has launched worldwide! - ProtonMail Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ProtonMail&#34;&gt;ProtonMail&lt;/a&gt; (GitHub)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openpgpjs.org/&#34; title=&#34;OpenPGP.js | OpenPGP JavaScript Implementation&#34;&gt;OpenPGP.js&lt;/a&gt; : フロントエンドで使われている暗号化ライブラリ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで &lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; のアカウントを作った。
よさげなら本サイトの連絡先アドレスとして使うことも検討してみる。&lt;/p&gt;

&lt;p&gt;個人で利用するなら無料で使える。
ただしストレージサイズや1日あたりの流量に制限がある。
カスタム・ドメインを設定したり複数のアドレスが必要な場合は 48 ユーロ/年から利用できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fc5da43f8e84407b8293f0bf2d4818ea:ch&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fc5da43f8e84407b8293f0bf2d4818ea:ch&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;MUA (Messaging User Agent) は &lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; が提供するもの以外は使えないようだ。
今のところ Android および iOS 用のアプリが提供されているほか， Web サービスもある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=ch.protonmail.android&#34;&gt;ProtonMail - Encrypted Email - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/protonmail-encrypted-email/id979659905&#34;&gt;ProtonMail Encrypted Email - Easy To Use, Free For All on the App Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/serial/netserv/20160331_750622.html&#34;&gt;エンドツーエンドでの暗号化で第三者の解読を防ぐWebメールサービス「ProtonMail」 - 知っ得！旬のネットサービス - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; ユーザ間のメールは自動的に End-to-End で暗号化される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fc5da43f8e84407b8293f0bf2d4818ea:pm1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fc5da43f8e84407b8293f0bf2d4818ea:pm1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; 以外からのメールについてもストレージへの保存は暗号化されるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://protonmail.com/security-details&#34;&gt;ProtonMail | Security Features Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; 以外のユーザにメールを送る場合は，あらかじめパスワードを決めておけば，暗号化メールを作成することができる。
メール受信者は以下のような内容のメールを受け取る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;I am using ProtonMail to send and receive secure emails. Click the link below to decrypt and view my message:
View Secure Message
Message expires
2016-04-16 08:48:06 GMT
(672 hours after this message was sent.)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“View Secure Message” のリンクから &lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; のサイトに移動しパスワードを入力すれば該当のメッセージを見ることができる（アカウントは不要）。
更に，そのまま返信すれば暗号化メールで返信できる。
これって Phishing のリスクがあるし，どうやって安全にパスワードを交換するかという問題もあるのだが，まぁしょうがないのかな。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; へ PGP/MIME 署名したメールを送ってみたが解釈してくれなかった。
ただし&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;In the future, we will be adding to ProtonMail the ability to import and export PGP keys. By complying with OpenPGP, it will be possible to do things like, download ProtonMail messages and decrypt them locally using your own PGP software.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://protonmail.com/blog/protonmail-open-source-crytography/&#34;&gt;ProtonMail Open Source Cryptography - ProtonMail Blog&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということらしいので，楽しみに待つことにする。
&lt;a href=&#34;http://text.baldanders.info/remark/2015/use-the-signal-luke/&#34;&gt;OpenPGP はセキュリティやプライバシーに関心のない人からは「面倒」と思われている&lt;/a&gt;らしいが，この辺のギャップを &lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; が埋めてくれることを期待したい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fc5da43f8e84407b8293f0bf2d4818ea:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fc5da43f8e84407b8293f0bf2d4818ea:m&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151112/jonnycantencrypt&#34;&gt;なぜジョニーは今もやっぱり暗号化できないのか：現在のPGPクライアントの使いやすさ評価 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fc5da43f8e84407b8293f0bf2d4818ea:ch&#34;&gt;&lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; の開発主体はスイスにある。なお米ドルでの決済も可能。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fc5da43f8e84407b8293f0bf2d4818ea:ch&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fc5da43f8e84407b8293f0bf2d4818ea:pm1&#34;&gt;アカウント作成時にアカウント認証用のパスワードと mailbox のパスワードを設定する必要がある。 mailbox のパスワードは復号に使われていて（つまり公開鍵暗号方式を使っている） &lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; 側では保持していない（保持していたら &lt;a href=&#34;https://protonmail.com/&#34; title=&#34;Secure email: ProtonMail is free encrypted email.&#34;&gt;ProtonMail&lt;/a&gt; 側も復号できることになる）。またメールには有効期限を付けることができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fc5da43f8e84407b8293f0bf2d4818ea:pm1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fc5da43f8e84407b8293f0bf2d4818ea:m&#34;&gt;電子メールを含む全てのメッセージング・サービスは，プライバシー要件の有無にかかわらず，全て End-to-End で暗号化すべきだし，そうでないサービス（Gmail 等も含めて）は将来的には排除すべきと思う。ただ，現状としてはメッセージング・サービスには本当に個人的なやり取りから広告や Phishing まであらゆるメッセージが乗ってしまう。&lt;a href=&#34;http://text.baldanders.info/remark/2015/cipher-risk/&#34;&gt;暗号化されたメッセージから悪意を排除するのは難しい&lt;/a&gt;。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fc5da43f8e84407b8293f0bf2d4818ea:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
