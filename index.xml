<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-05-04:/</id>
	<updated>2016-05-04T23:28:56+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>Satoshi Nakamoto の OpenPGP 鍵 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/05/openpgp-key-of-satoshi-nakamoto/" />
		<id>tag:text.Baldanders.info,2016-05-04:/remark/2016/05/openpgp-key-of-satoshi-nakamoto/</id>
		<published>2016-05-04T23:28:56+09:00</published>
		<updated>2016-05-04T23:28:56+09:00</updated>
		<summary>“Satoshi Nakamoto” の OpenPGP 鍵について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;色々話題になっているようで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/05/03/20160502major-questions-arise-over-craig-wrights-claim-to-be-satoshi-nakamoto/&#34;&gt;オーストラリア人起業家、Craig WrightがBitcoinの発明者、Satoshi Nakamotoなのか？ | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpplover.blogspot.jp/2016/05/craig-wrightsatoshi-nakamoto.html&#34;&gt;本の虫: Craig WrightがSatoshi Nakamotoだとする証明はない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/2015/12/bitcoins-creator-satoshi-nakamoto-is-probably-this-unknown-australian-genius/&#34;&gt;Bitcoin’s Creator Satoshi Nakamoto Is Probably This Unknown Australian Genius | WIRED&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/05/03/bitcoins-creator-satoshi-nakamoto-is-1/&#34;&gt;この無名の天才がビットコイン発明者「サトシ・ナカモト」である証拠（1）｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/05/04/bitcoins-creator-satoshi-nakamoto-is-2/&#34;&gt;この無名の天才がビットコイン発明者「サトシ・ナカモト」である証拠（2）｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中で&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;保管先のMITサーヴァーのデータベースをチェックしてみると、この公開鍵は〈satoshin@vistomail.com〉というメールアドレスに紐づけられているのがわかる。これはビットコインを紹介する白書を暗号研究メーリングリストに投稿する際にナカモトが使用したアドレス、〈satoshi@vistomail.com〉によく似ている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2016/05/04/bitcoins-creator-satoshi-nakamoto-is-2/&#34;&gt;この無名の天才がビットコイン発明者「サトシ・ナカモト」である証拠（2）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるが，おそらく&lt;a href=&#34;https://sks-keyservers.net/pks/lookup?op=vindex&amp;amp;search=0x491F9BDF0F7BD4AD&#34;&gt;これ&lt;/a&gt;を指していると思われる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e6b619ada4a24c5f61dc589b3b570094:sks&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e6b619ada4a24c5f61dc589b3b570094:sks&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: SKS 1.1.5+
Comment: Hostname: keys2.kfwebs.net

mQGNBEkJIQMBDADjtKw8NGu8XpU9WgxfiF5O9AkmBO7D9sBeIuNR4ULFLbzdD6MRQOyRYi9G
OxsSHohRgZpG146slEpASDdD//TJCH72yTtModYKWI7z6WWgXSNQvwKb+q2G9SeJ2N+2t1Bk
FuM+WOGstGTQiEB+Oj6OlJPI9I3YoE8T2VC8m5BrHdIi2W4R1vbuCGry0To7L9MygtuxmGfl
qrUiG0teiKNy0mpZaMDXJHAyLLaamHj25HXcHhq8LyyQHCE6iCcXY8iD/Dma98+ZcEEEQDfO
rmK7HVSU/Rh29VNJ2fgnJM+hhsmJnIPpxt6NIwhtY66U0lKWozOHnJSc1xIMv562NMxQUs3P
Vzrqyd5I/3gSnU+dhoHTSkbjNKWvAhIpEHNNYQ/4lub5bEblGhtvVYp67DUgjYrQmxscK3da
svXhegiCRrQ2qSTqH160NMxe/ycF/KlPeRlnPoWmDEEAz4tWxgZOMK/bUyleS5MaU128J1hY
SS9gGME0COycN/2ygCEQOm8AEQEAAbQpQnVaeiBzcGFjZWRvdXQgICA8c2F0b3NoaW5Admlz
dG9tYWlsLmNvbT6JAb8EEwECACkFAkkJIQMCGwMFCRSvv40HCwkIBwMCAQYVCAIJCgsEFgID
AQIeAQIXgAAKCRBJH5vfD3vUrfWXC/9arLWyt3zRKU7RMr8sGtD2Uh2gBsk2okqTgdWF+wn3
z8IPLER7zQ/sLPklTHtwi0lNzY7DS+w5NJTPSF4NbqcM8UOXOrQvqCatlLNHftbOuPCNoJpI
SxEAQygkJIJcsBpmGxJadnnjDZNkAFHJEY8PPHyxm9CBpI2vowCifrEAoYB5lV39YEbY9ur8
mIdJfsvW5HhKEUydvJCQn8Pm1i69MHB1Pv4ZLzbf/3iiH+/2A9Ug5upwB4+QJPBE7mC+88xn
YPWRNVCuGF6Bny0Q+b+MPvnD9rFxCzyQUlPhM229cDnVjwDRWSapEVvC2VDAki93x9fzOOiE
96sINhal0atie/9jwkMqAMIlgWCoVBX+4IrION2k0N562JSzwv1+TfpIURLu1dNuxK20uVWT
E1ltVJqkGVyK4JUKluXeDJORr9pDvkr2GLgLDCx/9ynZK/cR54Tt78d0RfYKzwPnTzTU0V5f
5lfHfHwhA4kuoGMdp9a/dmomq71RZ1SfQgeiPae0KVNhdG9zaGkgTmFrYW1vdG8gPHNhdG9z
aGluQHZpc3RvbWFpbC5jb20+iQG/BBMBAgApBQJJCSEDAhsDBQkUr7+NBwsJCAcDAgEGFQgC
CQoLBBYCAwECHgECF4AACgkQSR+b3w971K31lwv/Wqy1srd80SlO0TK/LBrQ9lIdoAbJNqJK
k4HVhfsJ98/CDyxEe80P7Cz5JUx7cItJTc2Ow0vsOTSUz0heDW6nDPFDlzq0L6gmrZSzR37W
zrjwjaCaSEsRAEMoJCSCXLAaZhsSWnZ54w2TZABRyRGPDzx8sZvQgaSNr6MAon6xAKGAeZVd
/WBG2Pbq/JiHSX7L1uR4ShFMnbyQkJ/D5tYuvTBwdT7+GS823/94oh/v9gPVIObqcAePkCTw
RO5gvvPMZ2D1kTVQrhhegZ8tEPm/jD75w/axcQs8kFJT4TNtvXA51Y8A0VkmqRFbwtlQwJIv
d8fX8zjohPerCDYWpdGrYnv/Y8JDKgDCJYFgqFQV/uCKyDjdpNDeetiUs8L9fk36SFES7tXT
bsSttLlVkxNZbVSapBlciuCVCpbl3gyTka/aQ75K9hi4Cwwsf/cp2Sv3EeeE7e/HdEX2Cs8D
50801NFeX+ZXx3x8IQOJLqBjHafWv3ZqJqu9UWdUn0IHoj2nuQGNBEkJIQMBDADCL3vhbxGE
dtVn1jyzEajYm2Cto1JKGqGVCBU0v3kPYDfhdlHGjeJ3HYfWZABUgeYSzUPVGrS3++j4sxxS
m3peNg8nybmo8aMwrGHJmeP+xerN29Pxra1TNxz/nndM1wZYN+hHA+zrIQiyYQ9IiUROvRSu
z5CSTRYh5P0JdfezuaTFktRMMINizBkSOKNM2Kz/O4e0J7FIIC5oM/uIthAMuwYuivDTR618
nCo0KObuyd4Eak7UxvYlA8L3Da/Vt2Q2zgtq9kmRZNoChfzljBRQb+z4xI/13OV7RmIHjadG
nC/ZJd8OXyln+SWbBPpiJmQ39vZOmxAY4z8M2wkto7ILtlUyL+3DSUjXScYFJVq8VDW55k5W
vKIdBjipXONi9/55LZnJPKhlt5Ip/azFQnZ5ZcVDFK6db257wvLojLqBEHNFhuVuYz3ANmPe
jlsjU4wJi3nNfjcHAzBODzhdvg5kmdaiSQ/mhGE2gzzW7e9jyrNrdxXp8tiARwB4Ke3F/rkA
EQEAAYkBpQQYAQIADwUCSQkhAwIbDAUJFK+/jQAKCRBJH5vfD3vUrVdIDACaghW/bj0njw64
ar1JqtG7QDsTcakTZHIuN62X3ewLqUO/3t2bWgC7YMZqX4IA3Iqz3Z0l2rLYbISFx0Ur19a+
xAA8uUhe400UfVLyPLNlvAL6Qzw3QGokOF45bKuX8Tjd/t0prJF3IBcbHih/bH6tAzLQEj8A
3p9/vkW5pezmQqyemaJaEEE75fDGmgiB/nxGPfL8mS4R2LmgUadqquSqhWXk0S9U9Y2z+vFU
LBFt4/M57YWOzryLO/MOPVDFUe604zCXy7s6LVRdjRI8V0h/WzskmEFE9UBwNDpM6jExl9xo
8M1M2ICOewrxE33HoF0dbbW+QFIH2mCWXt8bzfdOvhMTYzaQWOHvYIKPLZqFVDfFC7TBGdY4
mNx2/kxQ5GARUcd1zKI6RoKD60mq1KciTJdJSp5xdCNNfatGgiSFEcYRn8NsWr9nT+5H/yjz
VVFPo9kHgEuxnT8TTeOj189tiLItQUBx/3ZYkAjhIt/hYpo9wif7KSgqjlF6K1n7ZVA=
=LSEt
-----END PGP PUBLIC KEY BLOCK-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを &lt;a href=&#34;(http://www.mew.org/~kazu/proj/pgpdump/&#34;&gt;&lt;code&gt;pgpdump&lt;/code&gt;&lt;/a&gt; にかけるとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Old: Public Key Packet(tag 6)(397 bytes)
        Ver 4 - new
        Public key creation time - Thu Oct 30 11:50:43 東京 (標準時) 2008
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(3072 bits) - ...
        RSA e(17 bits) - ...
Old: User ID Packet(tag 13)(41 bytes)
        User ID - BuZz spacedout   &amp;lt;satoshin@vistomail.com&amp;gt;
Old: Signature Packet(tag 2)(447 bytes)
        Ver 4 - new
        Sig type - Positive certification of a User ID and Public Key packet(0x13).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Thu Oct 30 11:50:43 東京 (標準時) 2008
        Hashed Sub: key flags(sub 27)(1 bytes)
                Flag - This key may be used to certify other keys
                Flag - This key may be used to sign data
        Hashed Sub: key expiration time(sub 9)(4 bytes)
                Time - Wed Oct 30 10:00:00 東京 (標準時) 2019
        Hashed Sub: preferred symmetric algorithms(sub 11)(6 bytes)
                Sym alg - AES with 256-bit key(sym 9)
                Sym alg - AES with 192-bit key(sym 8)
                Sym alg - AES with 128-bit key(sym 7)
                Sym alg - CAST5(sym 3)
                Sym alg - Triple-DES(sym 2)
                Sym alg - IDEA(sym 1)
        Hashed Sub: preferred hash algorithms(sub 21)(5 bytes)
                Hash alg - SHA256(hash 8)
                Hash alg - SHA1(hash 2)
                Hash alg - SHA384(hash 9)
                Hash alg - SHA512(hash 10)
                Hash alg - SHA224(hash 11)
        Hashed Sub: preferred compression algorithms(sub 22)(3 bytes)
                Comp alg - ZLIB &amp;lt;RFC1950&amp;gt;(comp 2)
                Comp alg - BZip2(comp 3)
                Comp alg - ZIP &amp;lt;RFC1951&amp;gt;(comp 1)
        Hashed Sub: features(sub 30)(1 bytes)
                Flag - Modification detection (packets 18 and 19)
        Hashed Sub: key server preferences(sub 23)(1 bytes)
                Flag - No-modify
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x491F9BDF0F7BD4AD
        Hash left 2 bytes - f5 97
        RSA m^d mod n(3071 bits) - ...
                -&amp;gt; PKCS-1
Old: User ID Packet(tag 13)(41 bytes)
        User ID - Satoshi Nakamoto &amp;lt;satoshin@vistomail.com&amp;gt;
Old: Signature Packet(tag 2)(447 bytes)
        Ver 4 - new
        Sig type - Positive certification of a User ID and Public Key packet(0x13).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Thu Oct 30 11:50:43 東京 (標準時) 2008
        Hashed Sub: key flags(sub 27)(1 bytes)
                Flag - This key may be used to certify other keys
                Flag - This key may be used to sign data
        Hashed Sub: key expiration time(sub 9)(4 bytes)
                Time - Wed Oct 30 10:00:00 東京 (標準時) 2019
        Hashed Sub: preferred symmetric algorithms(sub 11)(6 bytes)
                Sym alg - AES with 256-bit key(sym 9)
                Sym alg - AES with 192-bit key(sym 8)
                Sym alg - AES with 128-bit key(sym 7)
                Sym alg - CAST5(sym 3)
                Sym alg - Triple-DES(sym 2)
                Sym alg - IDEA(sym 1)
        Hashed Sub: preferred hash algorithms(sub 21)(5 bytes)
                Hash alg - SHA256(hash 8)
                Hash alg - SHA1(hash 2)
                Hash alg - SHA384(hash 9)
                Hash alg - SHA512(hash 10)
                Hash alg - SHA224(hash 11)
        Hashed Sub: preferred compression algorithms(sub 22)(3 bytes)
                Comp alg - ZLIB &amp;lt;RFC1950&amp;gt;(comp 2)
                Comp alg - BZip2(comp 3)
                Comp alg - ZIP &amp;lt;RFC1951&amp;gt;(comp 1)
        Hashed Sub: features(sub 30)(1 bytes)
                Flag - Modification detection (packets 18 and 19)
        Hashed Sub: key server preferences(sub 23)(1 bytes)
                Flag - No-modify
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x491F9BDF0F7BD4AD
        Hash left 2 bytes - f5 97
        RSA m^d mod n(3071 bits) - ...
                -&amp;gt; PKCS-1
Old: Public Subkey Packet(tag 14)(397 bytes)
        Ver 4 - new
        Public key creation time - Thu Oct 30 11:50:43 東京 (標準時) 2008
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(3072 bits) - ...
        RSA e(17 bits) - ...
Old: Signature Packet(tag 2)(421 bytes)
        Ver 4 - new
        Sig type - Subkey Binding Signature(0x18).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Thu Oct 30 11:50:43 東京 (標準時) 2008
        Hashed Sub: key flags(sub 27)(1 bytes)
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
        Hashed Sub: key expiration time(sub 9)(4 bytes)
                Time - Wed Oct 30 10:00:00 東京 (標準時) 2019
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x491F9BDF0F7BD4AD
        Hash left 2 bytes - 57 48
        RSA m^d mod n(3072 bits) - ...
                -&amp;gt; PKCS-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで，時期的にはそれっぽいが，よく見ると本人以外の署名がない。
これではこの鍵が本人かどうか確かめようがない。&lt;/p&gt;

&lt;p&gt;同じ日に作られた “Satoshi Nakamoto” 名義の鍵は他にもあって， &lt;a href=&#34;https://sks-keyservers.net/pks/lookup?op=vindex&amp;amp;search=0xD2D59294CDD2C21C&#34;&gt;&lt;code&gt;satoshi@vistomail.com&lt;/code&gt; の鍵&lt;/a&gt;もあるのだが，これもやはり本人の署名しかない。
更に &lt;a href=&#34;https://sks-keyservers.net/pks/lookup?op=vindex&amp;amp;search=0x18C09E865EC948A1&#34;&gt;&lt;code&gt;satoshin@gmx.com&lt;/code&gt; の鍵&lt;/a&gt;もあって，こちらには2009年の署名がいくつかある。&lt;/p&gt;

&lt;p&gt;御存知の通り OpenPGP の信用モデルは “web of trust” と呼ばれるもので，ユーザ間の相互署名によって信用度と有効性が担保される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e6b619ada4a24c5f61dc589b3b570094:ksp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e6b619ada4a24c5f61dc589b3b570094:ksp&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
故に自己署名しかない鍵では有効性を担保できない。
もっとも “Satoshi Nakamoto” は匿名で活動していたらしいので，他者の署名を得られなかった可能性もある。&lt;/p&gt;

&lt;p&gt;巷では否定的な意見が多いようだが，真相はわからない。
もっとも，今更名乗り出られてもねぇ。
本当に本人なら税務署が押し寄せてきて大変なことになりそうだが。&lt;/p&gt;

&lt;p&gt;そういえば昔，電子メールに署名する際に，メッセージに差出人や宛先の情報がない場合，それを使って第三者がいくらでも悪用できるって話題があったな。
この議論以降，電子メールの本文には必ず宛先の名前と自分自身を示す情報を含めるようにしている。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ:e6b619ada4a24c5f61dc589b3b570094&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:e6b619ada4a24c5f61dc589b3b570094&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e6b619ada4a24c5f61dc589b3b570094:sks&#34;&gt;OpenPGP 鍵サーバは互いに peer-to-peer で繋がり同期している。今回は MIT の鍵サーバではなく &lt;a href=&#34;https://sks-keyservers.net/&#34;&gt;&lt;code&gt;sks-keyservers.net&lt;/code&gt;&lt;/a&gt; から取得した。内容は同じである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e6b619ada4a24c5f61dc589b3b570094:sks&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e6b619ada4a24c5f61dc589b3b570094:ksp&#34;&gt;公開鍵の相互署名を行うために &lt;a href=&#34;https://en.wikipedia.org/wiki/Key_signing_party&#34;&gt;key signing party&lt;/a&gt; を行ったりする。もし，件の鍵が &lt;a href=&#34;https://en.wikipedia.org/wiki/Key_signing_party&#34;&gt;key signing party&lt;/a&gt; によって署名されていたなら，そのときの証言を以って本人の鍵かどうか証明できたわけだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e6b619ada4a24c5f61dc589b3b570094:ksp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 「なぜ、いま「著作権」について考えなければならないのか？」 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/30-stories/" />
		<id>tag:text.Baldanders.info,2016-04-30:/remark/2016/04/30-stories/</id>
		<published>2016-04-30T16:40:25+09:00</published>
		<updated>2016-04-30T16:40:25+09:00</updated>
		<summary>「なぜ、いま「著作権」について考えなければならないのか？」 / Apache Struts 2 の脆弱性 / 「ひとみ（ASTRO-H）」はやっぱりダメらしい / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#eu:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;「なぜ、いま「著作権」について考えなければならないのか？」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#struts:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Apache Struts 2 の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;「ひとみ（ASTRO-H）」はやっぱりダメらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;eu:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;「なぜ、いま「著作権」について考えなければならないのか？」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.newsweekjapan.jp/stories/world/2016/04/post-5010.php&#34;&gt;なぜ、いま「著作権」について考えなければならないのか？―ヨーロッパの現場から | ワールド | 最新記事 | ニューズウィーク日本版 オフィシャルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;面白い視点。
EU という「市場」ならではの問題であるともいえる。
まぁでも，所詮は EU 域内での話であって，言い換えれば EU 域外に対してどのように presence を示せるかという話だよね。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;たとえば、サービス事業者が国ごとに著作権のライセンス契約を結ばなければならないために、あるコンテンツが特定の国では見られるのに別の国では見られない、通称「ジオブロッキング」と呼ばれる問題がある。日本でも、Youtubeなどにアクセスしようとしたときに「この動画はお住まいの地域ではご覧になることができません」という警告が出て、動画にアクセスできなかったりすることがある。ヨーロッパではこれは日常茶飯事の光景だ。ヨーロッパには物理的な国境はないので、日本で言うと、たとえば東京都から神奈川県に移動したらいきなり動画が見られなくなった、と考えるとわかりやすいかもしれない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.newsweekjapan.jp/stories/world/2016/04/post-5010.php&#34;&gt;なぜ、いま「著作権」について考えなければならないのか？―ヨーロッパの現場から&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;結局は「知的財産権」の世界市場で誰が覇権をとるか。
それでも&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;つまり、「変わらなければいけないのは自明だが、どう変えるかを決めるのが決定的に難しい」、のがEUの著作権法の実情なのである。しかし、この一連の動きによって、「著作権」の本質とはなんなのか、特にコピーが無限にできるという性質をもつデジタルコンテンツに付帯する著作権とはなんなのか、といった問いに対する議論が活発に交わされることになった。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.newsweekjapan.jp/stories/world/2016/04/post-5010.php&#34;&gt;なぜ、いま「著作権」について考えなければならないのか？―ヨーロッパの現場から&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;という感じに議論になるだけまだマシな方だろう。
少なくとも TPP よりは。&lt;/p&gt;

&lt;h2 id=&#34;struts:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Apache Struts 2 の脆弱性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU91375252/&#34;&gt;JVNVU#91375252: Apache Struts2 に任意のコード実行の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/20160427-struts.html&#34;&gt;Apache Struts2 の脆弱性対策について(CVE-2016-3081)(S2-032)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2016/at160020.html&#34;&gt;Apache Struts 2 の脆弱性 (S2-032) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20160427/1461771099&#34;&gt;Apache Struts2 の脆弱性 (CVE-2016-3081)についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/alpha_pz/items/e6b41be70b12174dabda&#34;&gt;Struts2のDMI(Dynamic Method Invocation)とは何か - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVSSv3 基本評価値は 7.3 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;対策としては各バージョンの更新版を導入するか DMI (Dynamic Method Invocation) を無効にすればいいようだ。
もっとも 2.3.15.2 以降 DMI は既定で無効らしいので，そのまま無効にしておくのがよろしかろう。
Struts1 への影響は（すでに Apaches のサポート外なので）不明だが， DMI は 2 からの機能と聞いているので関係ないかな？&lt;/p&gt;

&lt;h2 id=&#34;astro:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;「ひとみ（ASTRO-H）」はやっぱりダメらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/04/20160428_hitomi_j.html&#34;&gt;JAXA | X線天文衛星ASTRO-H「ひとみ」の今後の運用について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういうこともあるんだねぇ。
でもまぁ&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;But Hitomi could still contribute to science. Because of the early failure with Suzaku, Hitomi scientists planned one important early observation. About eight days after launch, Hitomi turned its X-ray gaze on the Perseus cluster, about 250 million light years from Earth. By measuring the speed of gas flowing from the cluster, Hitomi can reveal how the mass of galaxy clusters changes over time as stars are born and die — a test of the crucial cosmological parameter known as dark energy.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.nature.com/news/software-error-doomed-japanese-hitomi-spacecraft-1.19835&#34;&gt;Software error doomed Japanese Hitomi spacecraft : Nature News &amp;amp; Comment&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;というわけで，初期観測が成果になる可能性もあるわけで，そうすれば「次」に繋がる可能性もあるわけだ。&lt;/p&gt;

&lt;p&gt;最近話題になった重力波観測と X 線観測は相補的な役割を果すことが期待されている。
今回の事故で萎縮することなく次へ進むことを祈る。&lt;/p&gt;

&lt;h2 id=&#34;other:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.change.org/p/%E5%B7%9D%E5%86%85%E5%8E%9F%E7%99%BA%E3%82%92%E6%AD%A2%E3%82%81%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84&#34;&gt;キャンペーン · 川内原発を止めてください。 · Change.org&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.change.org/p/%E5%B7%9D%E5%86%85%E5%8E%9F%E7%99%BA%E3%82%92%E6%AD%A2%E3%82%81%E3%81%AA%E3%81%84%E3%81%A7%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84&#34;&gt;キャンペーン · 川内原発を止めないでください！ · Change.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/8FwSHbMTEjQ&#34;&gt;Go 1.6.2 is released - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/npa_160422.html&#34;&gt;警察庁が「自動走行の公道実証実験」でガイドライン案を公表｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50766909.html&#34;&gt;エフセキュアブログ : Windows Script Hostを無効にする方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/tools-of-blind-programmer/&#34;&gt;視覚障碍者プログラマのためのツール | キャリア・働き方 | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://protonmail.com/blog/android-v130/&#34;&gt;ProtonMail Android BETA v1.3.0 Release Notes - ProtonMail Blog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://protonmail.com/blog/protonmail-ios-v1-2-3-release-notes/&#34;&gt;ProtonMail iOS BETA v1.2.3 Release Notes - ProtonMail Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/04/21/dinosaurs-werent-wiped-out-by/&#34;&gt;恐竜が絶滅したのは「隕石の衝突」のせいじゃない：研究結果｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/04/30/german-nuclear-plants-fuel-rod-system-swarming/&#34;&gt;ドイツ原発、燃料棒監視システムにマルウェアが見つかる｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757102852/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41YkbcP5IyL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757102852/baldandersinf-22/&#34;&gt;著作権２．０ ウェブ時代の文化発展をめざして (NTT出版ライブラリー―レゾナント)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;名和 小太郎 &lt;/dd&gt;&lt;dd&gt;エヌティティ出版 2010-06-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4569812902/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4569812902.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;著作権法がソーシャルメディアを殺す (PHP新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4334037070/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4334037070.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;「ネットの自由」vs.著作権: TPPは、終わりの始まりなのか (光文社新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4087202941/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4087202941.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;著作権とは何か―文化と創造のゆくえ (集英社新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166608347/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4166608347.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ビジネスパーソンのための契約の教科書 (文春新書 834)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798119806/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798119806.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;REMIX ハイブリッド経済で栄える文化と商業のあり方&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;名著です。今すぐ買うべきです。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-08-02&#34;&gt;2014/08/02&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>JavaScipt の演算誤差 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/arithmetic-error-by-javascript/" />
		<id>tag:text.Baldanders.info,2016-04-29:/remark/2016/04/arithmetic-error-by-javascript/</id>
		<published>2016-04-29T19:49:40+09:00</published>
		<updated>2016-04-29T19:49:40+09:00</updated>
		<summary>今回は小ネタ。JavaScript の数値演算における演算誤差の話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;今回は小ネタ。
実は最近の JavaScript についてはよく知らなかったりするので（勉強中），間違いとか「最近はもっと簡単にできるよ」とかいった点があったら指摘していただけると助かります。&lt;/p&gt;

&lt;p&gt;（そうそう。
&lt;a href=&#34;https://nodejs.org/en/blog/announcements/v6-release/&#34;&gt;node.js v6 のリリース&lt;/a&gt;おめでとうございます）&lt;/p&gt;

&lt;p&gt;JavaScript の数値（Number）型の実体は IEEE754 浮動小数点形式である。
他の言語でよく見るような整数型や decimal/currency 型というのは存在しない。
たとえばある値の百分率を取ろうとして，うっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let pc = 100.0 * rate;
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんてなコードを書くと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rate: 1.1199999999999999%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと表示され「はうーん」な感じになってしまう。
これは浮動小数点形式特有の演算誤差で，数値の符号化を2進数を基数として行っているためにどうしてもそうなってしまう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:824e390733f8890cf144f9b42d1dbd8c:fp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:824e390733f8890cf144f9b42d1dbd8c:fp&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;表示の上でこれを回避する方法はいくつかある。
よくあるのは以下の2つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;演算部分を他の言語（Java や SQL など）で行う。&lt;/li&gt;
&lt;li&gt;有効桁数以下を丸める&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ビジネスロジックを実装する Entity 以下のクラスを JavaScript 以外の言語で記述している場合は最初のやり方で問題ないだろう。
これができない場合でも，大抵の数値計算は「有効桁数」が仕様として決められている筈なので，2番目のやり方で &lt;code&gt;Math.round()&lt;/code&gt;, &lt;code&gt;Math.ceil()&lt;/code&gt;, &lt;code&gt;Math.floor()&lt;/code&gt; といった関数を組み合わせて表示桁数を調整できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:824e390733f8890cf144f9b42d1dbd8c:cf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:824e390733f8890cf144f9b42d1dbd8c:cf&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
たとえば先程の &lt;code&gt;percent()&lt;/code&gt; 関数を小数点以下3位で四捨五入するように変更すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let pc = Math.round(100000.0 * rate) / 1000.0;
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rate: 1.12%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示される。&lt;/p&gt;

&lt;p&gt;しかし他システムと連携していて有効桁が決まらないとか，要求として値を丸められては困る場合もある。
こういう場合は以下のようにするとよい。
（型を意識してもらうため冗長な書き方になっているがご容赦）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let sRate = rate.toString();
	let digits = sRate.indexOf(&amp;quot;.&amp;quot;);
	if (digits &amp;lt; 0) {
		digits = 0;
	} else {
		digits = sRate.length - (digits + 1);
	}
	let pc = (100 * sRate.replace(&amp;quot;.&amp;quot;, &amp;quot;&amp;quot;).valueOf()) / Math.pow(10, digits);
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで表示結果は &lt;code&gt;1.12%&lt;/code&gt; になる（ちなみに入力値が &lt;code&gt;1&lt;/code&gt; ならちゃんと &lt;code&gt;100%&lt;/code&gt; になる）。
つまり 0.0112 は $0.0112 = 112 \times 10^{-4}$ と整数部分と小数点以下の桁数に分解できるので，演算は整数部分で行い，最後に小数点以下の桁数分だけ割り算をすればよい。&lt;/p&gt;

&lt;p&gt;これは固定小数点形式の数値演算によく似ている。
ポイントは整数同士の演算に変換し最後に桁を揃えることである。
これなら演算誤差は生じない（ただし桁あふれに注意）。&lt;/p&gt;

&lt;p&gt;余談だが &lt;code&gt;percent()&lt;/code&gt; 関数では &lt;code&gt;100&lt;/code&gt; は固定値なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let sRate = rate.toString();
	let digits = sRate.indexOf(&amp;quot;.&amp;quot;);
	if (digits &amp;lt; 0) {
		digits = 0;
	} else {
		digits = sRate.length - (digits + 1);
	}
	let pc = (sRate.replace(&amp;quot;.&amp;quot;, &amp;quot;&amp;quot;)+&amp;quot;00&amp;quot;).valueOf() / (&amp;quot;1&amp;quot;+&amp;quot;0&amp;quot;.repeat(digits)).valueOf();
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば割り算1回で済む（数学関数と文字列操作のどちらがコストが高いかは微妙な気もするが）。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:824e390733f8890cf144f9b42d1dbd8c:fp&#34;&gt;最近の IEEE754-2008 では10進数を基数とした符号化も標準化されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:824e390733f8890cf144f9b42d1dbd8c:fp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:824e390733f8890cf144f9b42d1dbd8c:cf&#34;&gt;ググってみると &lt;code&gt;Math.ceil()&lt;/code&gt; を切り上げ， &lt;code&gt;Math.floor()&lt;/code&gt; を切り捨てと紹介している記事を見かけるが厳密には間違いである。正しくは &lt;code&gt;Math.ceil()&lt;/code&gt; は天井関数（ceiling function）で &lt;code&gt;Math.floor()&lt;/code&gt; は床関数（floor function）である。切り上げや切り捨てとは負値の扱いで挙動が異なるので注意が必要。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:824e390733f8890cf144f9b42d1dbd8c:cf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>delicious.com が del.icio.us に移行するらしい（出戻り？） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/delicious-to-del_icio_us/" />
		<id>tag:text.Baldanders.info,2016-04-26:/remark/2016/04/delicious-to-del_icio_us/</id>
		<published>2016-04-26T22:29:08+09:00</published>
		<updated>2016-04-26T22:45:23+09:00</updated>
		<summary>昨日から delicious.com に繋がらねー！ と思ったら， del.icio.us に移行するというアナウンスが。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;昨日から &lt;a href=&#34;https://delicious.com/spiegel&#34;&gt;delicious.com&lt;/a&gt; に繋がらねー！ と思ったら， &lt;a href=&#34;http://del.icio.us/&#34;&gt;del.icio.us&lt;/a&gt; に移行するというアナウンスが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.delicious.com/2016/04/transition-to-del-icio-us/&#34;&gt;Transition to del.icio.us | The Official Delicious Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いや，移行するのは結構だけど，現行のサービスを止めるのは止めてくれないかなぁ。
おかげで2日分のブックマークが溜まりまくってエラいことに。&lt;/p&gt;

&lt;p&gt;とりあえず，ここに退避させておく。&lt;/p&gt;

&lt;p&gt;（「&lt;a href=&#34;http://text.baldanders.info/bookmarks/2016/04/26-bookmarks/&#34;&gt;2016-04-26 のブックマーク&lt;/a&gt;」に移動しました）&lt;/p&gt;

&lt;p&gt;ブックマークも自前で管理したほうがいいかなぁ。
タグ管理なんかしないでひたすらリンクを収集するだけならここでもできそうだし。
（はてブは問題外）&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Git Commit で OpenPGP 署名を行う - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/git-commit-with-openpgp-signature/" />
		<id>tag:text.Baldanders.info,2016-04-23:/remark/2016/04/git-commit-with-openpgp-signature/</id>
		<published>2016-04-23T15:17:49+09:00</published>
		<updated>2016-04-23T15:35:10+09:00</updated>
		<summary>Git で commit する際に OpenPGP 署名を付加できるらしい。いやぁ，今まで知らなかったよ。物知らずでごめん。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; で commit する際に OpenPGP 署名を付加できるらしい。
いやぁ，今まで知らなかったよ。
物知らずでごめん。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/uz/v2/Git-Tools-Signing-Your-Work&#34;&gt;Git - Signing Your Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485&#34;&gt;GitHubでGPGにより署名されたコミットにバッジが表示されるようになったので設定してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;openpgp-鍵の登録:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;OpenPGP 鍵の登録&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; に OpenPGP 鍵を設定するには以下のコマンドでいいようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global user.signingkey 7E20B81C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“&lt;code&gt;7E20B81C&lt;/code&gt;” は OpenPGP 鍵の鍵 ID である。
鍵ごとに異なる値になるので注意。
今回は「&lt;a href=&#34;http://www.baldanders.info/spiegel/pubkeys/&#34;&gt;OpenPGP 公開鍵リスト&lt;/a&gt;」で公開している鍵の鍵 ID を登録している。
この設定で &lt;code&gt;.gitconfig&lt;/code&gt; ファイルに以下の記述が追加される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[user]
	signingkey = 7E20B81C
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gpg-を直接指定する場合:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;Gpg を直接指定する場合&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の場合， &lt;code&gt;git bash&lt;/code&gt; に同梱されている &lt;code&gt;gpg.exe&lt;/code&gt; を使うのだが，困ったことにこれが classic version なのである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 1.4.20
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
Supported algorithms:
Pubkey: RSA, RSA-E, RSA-S, ELG-E, DSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既に &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の Windows 版をインストールしているのであれば，以下の設定で &lt;code&gt;gpg.exe&lt;/code&gt; をフルパス指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global gpg.program C:/path/to/GnuPG/bin/gpg.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;.gitconfig&lt;/code&gt; ファイルには以下の記述が追加される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[gpg]
	program = C:/path/to/GnuPG/bin/gpg.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows 環境以外でも &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を classic version と stable/modern version で使い分けている場合は，この設定が役に立つだろう。&lt;/p&gt;

&lt;p&gt;なお Windows 環境であれば，特に理由がないかぎり， modern version を使うことをお薦めする。
Windows 環境へ &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を導入する方法については以下の拙文を参考にして欲しい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/&#34;&gt;GnuPG Modern Version for Windows ― インストール編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-2/&#34;&gt;GnuPG Modern Version for Windows ― gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;commit-に-openpgp-署名を付加する:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;Commit に OpenPGP 署名を付加する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; 時に OpenPGP 署名を付加したい場合は， version 2 以降なら，以下の設定で常時署名を行うようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global commit.gpgsign true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.gitconfig&lt;/code&gt; ファイルには以下の記述が追加される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[commit]
	gpgsign = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で逆に commit 時に署名を付加してほしくない場合は &lt;code&gt;--no-gpg-sign&lt;/code&gt; オプションを付加すればいいようだ。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの &lt;a href=&#34;https://atom.io/packages/git-plus&#34; title=&#34;git-plus&#34;&gt;git-plus&lt;/a&gt; パッケージで commit してみたが，きちんと署名もできていた。
&lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions&#34;&gt;Git Extensions&lt;/a&gt; でも問題ないようだ。
「&lt;a href=&#34;http://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485&#34;&gt;GitHubでGPGにより署名されたコミットにバッジが表示されるようになったので設定してみる&lt;/a&gt;」には「GitHub DesktopはGPGによる署名をサポートしていません」とあるが， Facebook で教えてもらった話によれば， &lt;code&gt;gpg-agent&lt;/code&gt; と Pinentry が正しく設定されていれば使えるそうだ。&lt;/p&gt;

&lt;p&gt;きちんと署名されているか確認するには &lt;code&gt;git log&lt;/code&gt; コマンドに &amp;ndash;show-signature オプションを付けるとよい。&lt;/p&gt;

&lt;h3 id=&#34;tag-にも-merge-にも署名できる:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;Tag にも Merge にも署名できる&lt;/h3&gt;

&lt;p&gt;タグに署名を付加する場合は &lt;code&gt;-s&lt;/code&gt; オプションを付けて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git tag -s -a v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればいい。
同様に merge でも &lt;code&gt;-S&lt;/code&gt; オプションを付けて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git merge -S branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でいいようだ。&lt;/p&gt;

&lt;h2 id=&#34;github-が-openpgp-署名に対応した:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;GitHub が OpenPGP 署名に対応した&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; で commit や tag に対する署名を表示できるようになったらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/2144-gpg-signature-verification&#34;&gt;GPG signature verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえばこんな感じに表示される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26315000570/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1671/26315000570_ba79ae50b1.jpg&#34; alt=&#34;OpenPGP Key in GitHub (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26315000570/&#34;&gt;OpenPGP Key in GitHub (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これを有効にするには &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に OpenPGP 公開鍵を登録して署名検証可能にしなければならない。
公開鍵の登録は設定画面で行う。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26494073882/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1679/26494073882_e53d80376b.jpg&#34; alt=&#34;OpenPGP Key in GitHub (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26494073882/&#34;&gt;OpenPGP Key in GitHub (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この画面で「New GPG key」ボタンを押すと以下の入力画面になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26520705641/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1598/26520705641_81e21edd32.jpg&#34; alt=&#34;OpenPGP Key in GitHub (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26520705641/&#34;&gt;OpenPGP Key in GitHub (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ここに公開鍵の armor テキストを貼り付けて「Add GPG key」ボタンを押せばよい。
これで OpenPGP 公開鍵の登録は完了である。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26586667165/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1493/26586667165_9b7d41f16d.jpg&#34; alt=&#34;OpenPGP Key in GitHub (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26586667165/&#34;&gt;OpenPGP Key in GitHub (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;なお公開鍵の armor テキストは以下のコマンドで取得できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --armor --export 7E20B81C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“&lt;code&gt;7E20B81C&lt;/code&gt;” は先ほど説明した鍵 ID である。&lt;/p&gt;

&lt;p&gt;Tag や commit に署名することで「なりすまし」に対する抑止になる。
これは特にチームで開発を行う場合に威力を発揮するだろう。
ぜひ習慣付けていきたいものである。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:a01cbbc4e20e1b9ad2740c0dab99d889&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語 1.6.1 および 1.5.4 のセキュリティ・アップデート - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/golang-1_6_1-released/" />
		<id>tag:text.Baldanders.info,2016-04-17:/remark/2016/04/golang-1_6_1-released/</id>
		<published>2016-04-17T17:10:49+09:00</published>
		<updated>2016-04-17T17:10:49+09:00</updated>
		<summary>Go 言語に2つの脆弱性がある。脆弱性に対処した 1.6.1 および 1.5.4 がリリースされている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に2つの脆弱性がある。
脆弱性に対処した 1.6.1 および 1.5.4 がリリースされている。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;On Windows, Go loads system DLLs by name with LoadLibrary, making it vulnerable to DLL preloading attacks. For instance, if a user runs a Go executable from a Downloads folder, malicious DLL files also downloaded to that folder could be loaded into that executable.&lt;br&gt;
This is CVE-2016-3958 and was addressed by this change: &lt;a href=&#34;https://golang.org/cl/21428&#34;&gt;https://golang.org/cl/21428&lt;/a&gt;&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/9eqIHqaWvck&#34;&gt;[security] Go 1.6.1 and 1.5.4 are released - Google グループ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Go&#39;s crypto libraries passed certain parameters unchecked to the underlying big integer library, possibly leading to extremely long-running computations, which in turn makes Go programs vulnerable to remote denial of service attacks.  Programs using HTTPS client certificates or the Go SSH server libraries are both exposed to this vulnerability.&lt;br&gt;
This is CVE-2016-3959 and was addressed by this change: &lt;a href=&#34;https://golang.org/cl/21533&#34;&gt;https://golang.org/cl/21533&lt;/a&gt;&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/9eqIHqaWvck&#34;&gt;[security] Go 1.6.1 and 1.5.4 are released - Google グループ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;具体的に CVSS などを記述したページは見つからなかった。
が，順次更新する予定。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:7d490a36ea9eb5e6c363ce7b7d9161f0&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 2016年熊本地震 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/17-stories/" />
		<id>tag:text.Baldanders.info,2016-04-17:/remark/2016/04/17-stories/</id>
		<published>2016-04-17T15:38:38+09:00</published>
		<updated>2016-04-28T21:52:35+09:00</updated>
		<summary>2016年熊本地震 / 三半規管に異常あり / ATOM 1.7 と Visual Studio Code 1.0 が登場 / Windows 版 QuickTime がようやく終了 / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;疲れが溜まってるのか，ここのところ自宅帰って飯食ったらそのまま寝落ちしていることが多い。
妙に怒りっぽくなってるし（路面電車で隣に人が座っただけでイラッとする）気をつけないとなぁ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#eq:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;2016年熊本地震&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;三半規管に異常あり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#edit:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qt:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;eq:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;2016年熊本地震&lt;/h2&gt;

&lt;p&gt;まずは被災された方々にはお見舞い申し上げます。
地震関連 tweets をチェックしてたけど直下型のせいか M4, M5 クラスの余震でも震度5とか結構あって，これはちょっとキツいよね。
特に夜中の地震はトラウマで不眠症になったりするのでホンマに大変だと思います。
私自身は今は自分のことで手一杯なので何もできないのですが，まずは事態が落ち着いてくれることを祈ります。&lt;/p&gt;

&lt;p&gt;大きな災害なので流石にテレビ報道も見たんだけど，やっぱテレビはクズだね。
ヘリで上空から中継してる映像とかあるんだけど，あれ地上から「ウザい」と思われてるの知っててやってるのかね。
様々な映像を見るだに「日本のマスコミはクソ」としか言いようがない。&lt;/p&gt;

&lt;p&gt;でも国土地理院の &lt;a href=&#34;http://psgsv2.gsi.go.jp/koukyou/public/uav/&#34;&gt;UAV (Unmanned Aerial Vehicle)&lt;/a&gt; で空撮した映像はいいね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gsi.go.jp/BOUSAI/H27-kumamoto-earthquake-index.html&#34;&gt;平成２８年熊本地震に関する情報｜国土地理院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/DXTAAvVB2M8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DXTAAvVB2M8&#34;&gt;【国土地理院】　南阿蘇村河陽周辺の断層 - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;人が容易に入れないようなところでも drone なら入れるし，軽い荷物なら配送できる drone とかもあると聞くので，もっとこういう技術を活用したらいいと思うよ。&lt;/p&gt;

&lt;p&gt;危機状態に求められるリーダーと平時のリーダーとでは要件が異なる。
「政治判断」しかできない官僚・政治家や官僚的体質の企業・組織は危機状態に機能しないどころか障害になる。
彼らをバイパスして必要な情報や判断を必要な人に行き渡らせ有機的に連携できるか。
Crisis Management って結局はそういうことなんだよね。&lt;/p&gt;

&lt;p&gt;小川一水さんの『復活の地』でも読んで勉強しなはれ（笑）&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;【拡散希望】『阪神大震災被災者からのお願い』　嬉しいんです！嬉しいんですけどその援助、もうちょっとだけ待って下さい！ &lt;a href=&#34;https://t.co/2BgwW00mRx&#34;&gt;pic.twitter.com/2BgwW00mRx&lt;/a&gt;&lt;/p&gt;&amp;mdash; 澤田 圭 ｷｬﾗｸﾀｰﾃﾞｻﾞｲﾅｰ (@keisawada) &lt;a href=&#34;https://twitter.com/keisawada/status/721306607389253632&#34;&gt;2016年4月16日&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;関連ブックマーク-随時追記予定:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;関連ブックマーク（随時追記予定）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eri.u-tokyo.ac.jp/?page_id=183&amp;amp;id=12595&#34;&gt;平成28年（2016年）熊本地震（M6.5）の地学的背景と布田川断層帯・日奈久断層帯について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_002.pdf&#34;&gt;2016年4月17日地震調査委員会評価文（熊本地方地震）&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_003.pdf&#34;&gt;平成28 年4 月17日地震調査委員会図表（熊本地方地震）&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kumamoto-jishin.info/map.html&#34;&gt;避難所、給水、配給、空いているスーパーなどについてgooglemapまとめ | 熊本地震 情報掲示板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/gsi_kumamoto_160418.html&#34;&gt;熊本地震で観測した電子基準点の変位を、国土地理院がいち早く公表｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiroshima-u.ac.jp/news/show/id/25510&#34;&gt;広島大学　熊本県熊本地方を震源とする地震に関する記者説明会を開催しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160415_01.html&#34;&gt;2016年4月15日ニュース「熊本の大地震は横ずれ断層型 震源浅く揺れ大きく」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_01.html&#34;&gt;2016年4月18日ニュース「本震と余震は別の断層帯で発生 地震調査委と気象庁が見解」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_02.html&#34;&gt;2016年4月18日ニュース「被害状況を動画で公開 国土地理院がドローンで調査」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pref.kumamoto.jp/kiji_15425.html?type=top&#34;&gt;平成28年熊本地震に伴う被災地救援等のために使用する車両の取り扱いについて / 熊本県&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/usage/userreport/hinanpass_160420.html&#34;&gt;オープンデータで避難所地図を表示する「ヒナンパス」が、熊本地震に暫定対応｜利用者向け情報｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/its-jp_160419.html&#34;&gt;熊本地震で、ITSJapanが乗用車・トラックの通行実績情報を提供｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openstreetmap.jp/node/779&#34;&gt;熊本地震への対応について | OpenStreetMap Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.city.kumamoto.jp/hpkiji/pub/detail.aspx?c_id=5&amp;amp;type=top&amp;amp;id=12541&#34;&gt;災害ボランティアの受入について / 熊本市ホームページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;astro:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;三半規管に異常あり&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://fanfun.jaxa.jp/jaxatv/files/20160415_hitomi.pdf&#34;&gt;Ｘ線天文衛星「ひとみ」（ASTRO-H）の状況について&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/space/2016_04_15_asrtoh.html&#34;&gt;X線天文衛星「ひとみ」、2重のトラブルで「自分で回った」と推定 | Sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/04/20160419_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）の状況について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160420_01.html&#34;&gt;2016年4月20日ニュース「姿勢制御装置が誤作動 通信途絶えた天文衛星『ひとみ』」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/02/2016_04_26_astroh.html&#34;&gt;X線天文衛星「ひとみ」、浮かび上がった3つの問題点 | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;小天体かデブリにでもぶち当たったのかと思ったが，擬人化するなら三半規管の異常で「ピヨった」状態らしい。
太陽電池パネルの一部が千切れるほどの高速回転って相当だと思うけど。&lt;/p&gt;

&lt;p&gt;JAXA は通信が回復する可能性を期待して受信体制を続けるようだが，これは難しいんじゃないかなぁ。
宇宙じゃ「ちょいと行ってきて直す」とかできないからねぇ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;edit:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160414_753303.html&#34;&gt;GitHub、オープンソースのテキストエディター「Atom」の最新正式版v1.7を公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160415_753468.html&#34;&gt;Microsoft製の無償コードエディター「Visual Studio Code」がv1.0.0に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/visual_studio_code10.html&#34;&gt;オープンソースの開発ツール「Visual Studio Code」が正式版となるバージョン1.0に到達 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/74th/items/12521790a1c680af934c&#34;&gt;1.0になったVisualStudioCodeの強みと弱点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は Windows 版の &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を使ってるんだけど， tree view からのファイル削除をしくじるんだよなぁ（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; というより &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にインストールしているパッケージのせいかもしれんけど）。
多分あれって Windows のファイルシステムのせいだよなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/why-i-use-cmd-on-windows.htm&#34;&gt;Big Sky :: Windows ユーザは cmd.exe で生きるべき。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; はいい製品に育ったねぇ。
私は既に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; をメインに使ってるけど，これは「ちょっと使ってみようかな」と思わせる製品になった。&lt;/p&gt;

&lt;p&gt;最近の Microsoft は .NET Core と &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; がいい感じである。
逆に Windows 10 は過剰なコントロールでどんどんダメな OS になっていく。
もう Microsoft も Windows は事実上見捨ててるのだろう。&lt;/p&gt;

&lt;h2 id=&#34;qt:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.us-cert.gov/ncas/alerts/TA16-105A&#34;&gt;Apple Ends Support for QuickTime for Windows; New Vulnerabilities Announced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/ta/JVNTA92371676/&#34;&gt;JVNTA#92371676: QuickTime for Windows に複数のヒープバッファオーバフローの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac 版とかはどうか知らないが， Windows 版の QuickTime は最初からクソッタレな実装だった。
しかも当時は iTunes と抱き合わせでインストールされるので容易に捨てられず往生した覚えがある。&lt;/p&gt;

&lt;p&gt;CVSSv3 基本値は 6.3 なので「要注意」レベルだが，サポートされない製品を入れておく理由はない。
危険物はとっとと捨てましょう。&lt;/p&gt;

&lt;h2 id=&#34;other:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/linking-to-pirated-content-is-not-copyright-infringement-160407/&#34;&gt;Linking to Pirated Content Is Not Copyright Infringement, Says EU Court Adviser - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35081244/&#34;&gt;カナダ警察、「BlackBerry」のマスター暗号化キーを入手していた&amp;ndash;メッセージの解読に利用 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2016/04/white-house-source-code-policy-big-win-open-government&#34;&gt;White House Source Code Policy a Big Win for Open Government | Electronic Frontier Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/topics/alert280413.html&#34;&gt;【注意喚起】ランサムウェア感染を狙った攻撃に注意：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/blog/2016/04/working-on-html5-1/&#34;&gt;Working on HTML5.1 | W3C Blog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/w3c/html&#34;&gt;w3c/html: Working Draft of the HTML specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/w3chtml519github.html&#34;&gt;W3C、「HTML5.1」を今年9月に勧告とする計画。仕様はGitHubで公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.globalvoices.org/2016/04/13/40418/&#34;&gt;中国は「オーウェル風ディストピア」？「社会信用制度」とは · Global Voices 日本語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.creativecommons.org/2016/04/14/japanese-beatmaking-event-producers-create-cc-remixes-just-four-hours/&#34;&gt;At Japanese Beatmaking Event, Producers Create CC Remixes in Just Four Hours - Creative Commons blog - Creative Commons&lt;/a&gt; : 日本のイベントに本家 CC が反応していることに驚いた。昨年のソウルのイベントでは CCjp はほぼ無視してたのにね&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000386.html&#34;&gt;[Announce] Libgcrypt 1.7.0 released&lt;/a&gt; : SHA-3 や ChaCha など新しいアルゴリズムが登場&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:1b64e6a2c10ee0dfd48ff8752865129d&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJOESS6/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ymtvyHUmL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJOESS6/baldandersinf-22/&#34;&gt;復活の地１&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;小川一水 &lt;/dd&gt;&lt;dd&gt;早川書房 2012-09-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKEY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKEY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;復活の地２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKG2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKG2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;復活の地３&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKDK/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKDK.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第六大陸２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKDU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKDU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第六大陸1&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKYO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKYO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天涯の砦&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;コミカライズ版もある。てか，コミカライズ版を最初に読んだ（笑） 大きな災害がある度にこの作品を思い出す。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-04-17&#34;&gt;2016-04-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;ハッブル望遠鏡の時はスペースシャトルが運用されていた時代なので，望遠鏡のところまで行って修理したけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1b64e6a2c10ee0dfd48ff8752865129d:ht&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： まじめに規制に従っている人ほど馬鹿を見る社会 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/10-stories/" />
		<id>tag:text.Baldanders.info,2016-04-10:/remark/2016/04/10-stories/</id>
		<published>2016-04-10T18:44:29+09:00</published>
		<updated>2016-04-11T23:40:13+09:00</updated>
		<summary>まじめに規制に従っている人ほど馬鹿を見る社会 / Linux サブシステムは Windows の終わりの始まり / 鍵管理システム CONIKS / Go 言語を使うようになって変わったこと / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;3月は去りました。
春になっちゃったよ。&lt;/p&gt;

&lt;p&gt;うっかり左手首を痛めてしまった（疲労がたまるとたまになる）のでいろいろ控えてた。
溜まりまくった小ネタを消化しないと。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#code:131c422dd318de78a778ce2a1d39851c&#34;&gt;まじめに規制に従っている人ほど馬鹿を見る社会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bash:131c422dd318de78a778ce2a1d39851c&#34;&gt;Linux サブシステムは Windows の終わりの始まり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pki:131c422dd318de78a778ce2a1d39851c&#34;&gt;鍵管理システム CONIKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#go:131c422dd318de78a778ce2a1d39851c&#34;&gt;Go 言語を使うようになって変わったこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:131c422dd318de78a778ce2a1d39851c&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;code:131c422dd318de78a778ce2a1d39851c&#34;&gt;まじめに規制に従っている人ほど馬鹿を見る社会&lt;/h2&gt;

&lt;p&gt;もう何度も書いているが「警察にできることは犯罪者にもできる」。
問題は犯罪者にできることが警察にもできるかどうか駄菓子菓子&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080404/&#34;&gt;米政府によるスマホデータ取り出しの協力要請、ACLUが実態調査 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/01/news114.html&#34;&gt;FBIのiPhoneロック解除方法、Appleに知らされない可能性も (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/08/news060.html&#34;&gt;FBI長官、「購入したロック解除ツールはiPhone 5sでは機能しなかった」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/09/20160408justice-department-keeps-pushing-apple-to-unlock-iphone-in-new-york-drug-case/&#34;&gt;司法省がまたAppleにiPhoneアンロック要求、今度はAppleが“相手を間違えた”国を訴訟か | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FBI が端末を突破するのに外部企業を使ったということ，そして企業がそれに応じたことは重要だ。
もちろん実は NSA の息のかかった企業だった，としても驚かないけど。&lt;/p&gt;

&lt;p&gt;企業は利があると思えば警察にも犯罪者にだって加担する。
今回の件のポイントは「犯罪者にできることが警察にできるとは限らない」と証明してしまったことだ。
セキュリティ企業は新しい時代の「死の商人」になるかもしれない。&lt;/p&gt;

&lt;p&gt;警察が優位に立てるのは犯罪者よりもパワー（暴力・権力を含む）を有している場合のみである。
コンピュータ・ネットワーク技術あるいは暗号技術において政府・警察は優位に立てない。
米国司法省は法規制によって優位に立てると思ってるようだが，こんなもの最初から「法の外」にいる犯罪者やテロリストに対しては効力がない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/09/news022.html&#34;&gt;暗号化解除をめぐる米法案、司法当局へのバックドア提供を義務付け - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080962/&#34;&gt;バックドア提供を拒む企業に制裁金を&amp;ndash;米国で法案が公開 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これは「飲酒運転を減らすために飲酒運転規制を厳罰化する」というのとは話が違う。
犯罪者にはインパクトがないし，まじめに規制に従っている人ほど「馬鹿を見る」ことになる。&lt;/p&gt;

&lt;p&gt;有害なルールに従う必要はないし，それに従うことはむしろリスクを高めることになる。&lt;/p&gt;

&lt;h2 id=&#34;bash:131c422dd318de78a778ce2a1d39851c&#34;&gt;Linux サブシステムは Windows の終わりの始まり&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/31/20160330be-very-afraid-hell-has-frozen-over-bash-is-coming-to-windows-10/&#34;&gt;Build 2016で驚きの発表―Microsoftはこの夏Windows 10でBashシェルをサポート | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35080406/&#34;&gt;「Windows 10」で動作するUbuntuのBashシェル&amp;ndash;その実現方法 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://satonaoki.wordpress.com/2016/03/31/bash-ubuntu-windows/&#34;&gt;開発者がWindows 10でBashシェルとユーザー モードのUbuntu Linuxバイナリを実行可能に | S/N Ratio (by SATO Naoki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/mariadbmariadb_columnstoreolap.html&#34;&gt;MariaDB、カラム型データベースエンジン「MariaDB ColumnStore」発表。OLAPへ参入 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;もともと Windows は POSIX サブシステムを持っている。
今回はそれに加えて&lt;/del&gt; Ubuntu ベースの Linux サブシステムを組み込むということらしいが子亀の上に親亀を乗っけるようなものだ。&lt;/p&gt;

&lt;p&gt;Windows の基本的な設計思想は20～25年くらい前の古いものだ。
しかも DOS/Windows はもともとシングルユーザ用に設計されたもので UNIX 等のマルチユーザ向けの OS とは全く異なる。&lt;/p&gt;

&lt;p&gt;Linux のベースとなっている UNIX もそうとう古いが，マルチユーザを前提とした考え方は今でも通用するし，なにより Linux はもはや UNIX に縛られない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160331/linux25years&#34;&gt;Linux公開25周年を受けたリーナス・トーバルズのインタビュー - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35080722/&#34;&gt;Linux創始者トーバルズ氏、IoTを語る&amp;ndash;「セキュリティは二の次」と警鐘 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows は永遠に Windows に縛られ続ける。
Microsoft が満を持して出した Windows 10 も結局は Windows に縛られている。&lt;/p&gt;

&lt;p&gt;Windows が時代遅れなのは明らかである。
Microsoft 自らこういう無茶をすること自体が「Windows の終わりの始まり」だ。
個人的に2020年までに自宅 PC のメインを Linux 機に換装する予定だが，ちょっと計画を前倒ししたほうがいいかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35080364/&#34;&gt;目的別のおすすめLinuxディストリビューション&amp;ndash;あなたにぴったりなのはどれ？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;追記:131c422dd318de78a778ce2a1d39851c&#34;&gt;追記&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/why-i-use-cmd-on-windows.htm&#34;&gt;Big Sky :: Windows ユーザは cmd.exe で生きるべき。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;激しく同意。
もっとも私は &lt;a href=&#34;http://text.baldanders.info/remark/2015/conemu-and-nyagos/&#34;&gt;ConEmu &amp;amp; NYAGOS&lt;/a&gt; だけど（笑）&lt;/p&gt;

&lt;h2 id=&#34;sig:131c422dd318de78a778ce2a1d39851c&#34;&gt;WhatsApp がついに Signal ベースの E2E 暗号化を実装する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/blog/whatsapp-complete/&#34;&gt;Open Whisper Systems &amp;gt;&amp;gt; Blog &amp;gt;&amp;gt; WhatsApp&amp;rsquo;s Signal Protocol integration is now complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techcrunch.com/2016/04/05/whatsapp-completes-end-to-end-encryption-rollout/&#34;&gt;WhatsApp completes end-to-end encryption rollout | TechCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/06/news069.html&#34;&gt;Facebook傘下のWhatsApp、完全暗号化を完了　「政府もわれわれも解除できない」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/06/20160405whatsapp-completes-end-to-end-encryption-rollout/&#34;&gt;WhatsApp、全てのプラットフォームのエンドツーエンド暗号化を完了 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともと WhatsApp が Signal ベースの暗号化システムを実装することは予告されていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/&#34;&gt;Open Whisper Systems&lt;/a&gt; (&lt;a href=&#34;https://github.com/WhisperSystems&#34;&gt;GitHub&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://support.whispersystems.org/hc/en-us/articles/212477768-Is-it-secure-Can-I-trust-it-&#34;&gt;Is it private? Can I trust it? – Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signal 自体は SMS アプリを置き換えることのできる優れたアプリなのだが SNS ベースのメッセンジャー・アプリとしては機能的に劣る。
WhatsApp がその辺を埋めることになるかどうか。
でも日本のユーザにはウケないかなぁ。&lt;/p&gt;

&lt;p&gt;メールは ProtonMail， SMS ベースのメッセンジャーには Signal，それ以外のメッセンジャーには WhatsApp と，だいぶ揃ってきたねぇ。&lt;/p&gt;

&lt;h2 id=&#34;pki:131c422dd318de78a778ce2a1d39851c&#34;&gt;鍵管理システム CONIKS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coniks.cs.princeton.edu/&#34;&gt;CONIKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/04/coniks.html&#34;&gt;CONIKS - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;CONIKS is a key management system for end users capable of integration in end-to-end secure communication services. The main idea is that users should not have to worry about managing encryption keys when they want to communicate securely, but they also should not have to trust their secure communication service providers to act in their interest.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://coniks.cs.princeton.edu/&#34;&gt;CONIKS&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とりあえずメーリング・リストに入ってみた。&lt;/p&gt;

&lt;h2 id=&#34;go:131c422dd318de78a778ce2a1d39851c&#34;&gt;Go 言語を使うようになって変わったこと&lt;/h2&gt;

&lt;p&gt;内容自体にさほど文句があるわけではないが（細かい部分は置いておいて），「interface を中心に設計する」という記述が気になって。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;947e9a6ef68c4310baf21afdec4fcfab&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;私はそんなにたくさんの言語を知っているわけではないが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を勉強するようになって設計の考え方が少し変わった。
まさに「制約は構造を生む」（by 結城浩「数学ガール」シリーズより）が如く，言語仕様によって思考も影響を受けるのである。
以下にいくつか例を挙げよう。&lt;/p&gt;

&lt;h3 id=&#34;value-object-から考える:131c422dd318de78a778ce2a1d39851c&#34;&gt;Value Object から考える&lt;/h3&gt;

&lt;p&gt;さて，いつもの図。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/DDD.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/DDD.svg&#34; alt=&#34;Domain-Driven Design&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/DDD.svg&#34;&gt;Domain-Driven Design&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Domain Layer の中身は Domain Service, Entity, そして Value Object に分類される。
ビジネスロジックは図の右側，つまり Entity や Value Object に記述されるのが良い設計だと言われている（記述の重複を避けられるため）。
ただし Value Object はしばしば省略されることが多い。&lt;/p&gt;

&lt;p&gt;Value Object の特徴は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内部状態を持たず不変である&lt;/li&gt;
&lt;li&gt;属性（property）の比較のみでオブジェクト同士が等価かどうか決定できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして実装上の要件としては「軽量」であることが求められる。
何故なら Value Object は Entity の属性として使われることが多く Value Object がボトルネックになるとシステム全般へのインパクトが大きいからだ。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はこの Value Object の実装にとても向いている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」 — プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/function-and-pointer/&#34;&gt;関数とポインタ — プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴である「強い型付け」も Value Object を念頭に置いて考えるなら合理的な仕様であることが分かるだろう。&lt;/p&gt;

&lt;h3 id=&#34;多態性を-振る舞い-から考える:131c422dd318de78a778ce2a1d39851c&#34;&gt;多態性を「振る舞い」から考える&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の多態性（polymorphism）は振る舞いによってのみ規定される（&lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia, the free encyclopedia&#34;&gt;duck typing&lt;/a&gt;）。
つまり「猫」のように振る舞うのであれば実体がロボットだろうがコスプレイヤーだろうが全部「猫」として括れるのである。
そして「猫」のようにあるためにロボットやコスプレイヤーの identity を書き換える必要はない。
これはとても重要な事である。&lt;/p&gt;

&lt;p&gt;たとえば「猫」を実装する際に，それに多態性を持たせなければならないかどうかは設計の割と早い段階で決めなければならないことが多い。
そうして先に &lt;code&gt;interface&lt;/code&gt; などを決めなければ具体的なクラスを記述することができない。
しかし &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではアプローチが逆になる。
先にロボットやコスプレイヤーといった具体的な型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）をバンバン作り，個々の振る舞いを見て，あとから「あっ，これ「猫」で括れるぢゃん♥」となるわけだ。
言い方を変えるなら refactoring 向きであるとも言える。&lt;/p&gt;

&lt;h3 id=&#34;要件定義からコードを書く:131c422dd318de78a778ce2a1d39851c&#34;&gt;要件定義からコードを書く&lt;/h3&gt;

&lt;p&gt;これは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に限らないが， refactoring しやすい言語は prototyping に向いている言語であるとも言える。
Prototyping に向いているということはプロジェクトのかなり早い段階（たとえば要件定義）からコードを書けるということでもある。
結局エンジニアにとって信用できるのは百万語を連ねた設計書より「動くコード」なのである。&lt;/p&gt;

&lt;h2 id=&#34;other:131c422dd318de78a778ce2a1d39851c&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/transmission-releases-long-awaited-bittorrent-client-for-windows-160327/&#34;&gt;Transmission Releases Long-Awaited BitTorrent Client For Windows - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/npm-and-left-pad/&#34;&gt;NPMとleft-pad : 私たちはプログラミングのやり方を忘れてしまったのか？ | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/29/20160328windows-users-finally-have-a-good-bittorrent-client/&#34;&gt;WindowsにBitTorrentクライアントの決定版Transmissionがやってくる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iij.ad.jp/news/pressrelease/2016/0329-2.html&#34;&gt;IIJ、Webサイトにおけるユーザ認証のセキュリティを強化する 「IIJ SmartKeyマネージメントサービス」を提供開始 | 2016年 | IIJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/technicalwatch/201600330.html&#34;&gt;IPAテクニカルウォッチ「公衆無線LAN利用に係る脅威と対策」：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/research/apt-guide.html&#34;&gt;高度サイバー攻撃(APT)への備えと対応ガイド～企業や組織に薦める一連のプロセスについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://p2ptk.org/copyright/231&#34;&gt;著作権削除要請の28％が「疑わしい」との研究結果 – P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://current.ndl.go.jp/node/31200&#34;&gt;国立極地研究所情報図書室、ウェブサイトをCC BYで公開 | カレントアウェアネス・ポータル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fanfun.jaxa.jp/jaxatv/files/20160408_hitomi.pdf&#34;&gt;Ｘ線天文衛星「ひとみ」（ASTRO-H）の状況について - 20160408_hitomi.pdf&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/030201/2016_04_02_jspoc.html&#34;&gt;X線天文衛星「ひとみ」、回転は破片を誤認？米軍発表 | Sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tsukamoto/-f42bf7b5e25e&#34;&gt;定時帰宅のススメ — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/09/20160408spacex-just-landed-a-rocket-on-a-drone-ship-for-the-first-time/&#34;&gt;SpaceXのFalcon 9ロケット、洋上のドローン艀への軟着陸についに成功 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sonickun.hatenablog.com/entry/2016/04/03/183220&#34;&gt;GoogleがTLSでの採用を提唱している共通鍵暗号方式「ChaCha」についてまとめた - sonickun.log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:131c422dd318de78a778ce2a1d39851c&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>関数とポインタ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/function-and-pointer/" />
		<id>tag:text.Baldanders.info,2016-03-29:/golang/function-and-pointer/</id>
		<published>2016-03-29T22:16:41+09:00</published>
		<updated>2016-03-29T22:16:41+09:00</updated>
		<summary>Go 言語の引数は基本的に「値渡し（call by value）」である。「参照渡し（call by reference）」にしたい場合はポインタを使う。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;いまさらな内容なのだが覚え書きとして記しておく。&lt;/p&gt;

&lt;h2 id=&#34;go-言語における-calling-sequence:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Go 言語における Calling Sequence&lt;/h2&gt;

&lt;p&gt;まずは簡単な足し算の関数を定義してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x int, y int) int {
	return x + y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;add&lt;/code&gt; に続く括弧内が引数を定義していて，括弧の後ろの &lt;code&gt;int&lt;/code&gt; は返り値の型&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; を示している。
&lt;code&gt;add()&lt;/code&gt; 関数を呼び出すには以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func add(x, y int) int {
	return x + y
}

func main() {
	ans := add(42, 13)
	fmt.Println(ans)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; は同じ int 型なので以下のように記述することもできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y int) int {
	return x + y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返り値として複数の値を定義することもできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func split(sum int) (int, int) {
	x = sum * 4 / 9
	y = sum - x
	return x, y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また返り値は以下のように名前をつけることもできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y int) (ans int) {
	ans = x + y
	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後の &lt;code&gt;return&lt;/code&gt; がないとコンパイル・エラーになるので注意。
この書き方は &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;defer&lt;/a&gt; 構文と組み合わせるときに威力を発揮する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	err := r()
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(&amp;quot;Normal End.&amp;quot;)
	}
}

func r() (err error) {
	defer func() {
		if rec := recover(); rec != nil {
			err = fmt.Errorf(&amp;quot;Recovered from: %v&amp;quot;, rec)
		}
	}()

	f()
	err = nil
	return
}

func f() {
	panic(&amp;quot;Panic!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; では &lt;code&gt;r()&lt;/code&gt; 関数内で &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を捕まえ， 返り値の &lt;code&gt;err&lt;/code&gt; に値をセットしなおしている。&lt;/p&gt;

&lt;h3 id=&#34;go-言語の引数は-値渡し:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Go 言語の引数は「値渡し」&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の引数は基本的に「値渡し（call by value）」である。
たとえば先程の足し算を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y int) int {
	x += y
	return x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義した場合でも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func add(x, y int) int {
	x += y
	return x
}

func main() {
    x := 42
    y := 13
	ans := add(x, y)
	fmt.Printf(&amp;quot;%d + %d = %d\n&amp;quot;, x, y, ans) //output: 42 + 13 = 55
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;呼び出し元で &lt;code&gt;add()&lt;/code&gt; 関数の引数に渡した instance は関数実行後も変化しない。
このため「値渡し」は thread safe なコードに向いている。
たとえば value object を構成する際には関連する関数は「値渡し」のほうが安全である。
ただし関数呼び出し時に instance の値が常にコピーされるため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，サイズの大きな instance の場合は呼び出し時のコストが高くなる。&lt;/p&gt;

&lt;p&gt;引数を「参照渡し（call by reference）」にしたい場合はポインタを使う。
つまり instance のポインタ値を渡すのである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func add(x, y *int) int {
	*x += *y
	return *x
}

func main() {
	x := 42
	y := 13
	ans := add(&amp;amp;x, &amp;amp;y)
	fmt.Printf(&amp;quot;%d + %d = %d\n&amp;quot;, x, y, ans) //output: 55 + 13 = 55
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコードでは &lt;code&gt;add()&lt;/code&gt; 関数実行後の &lt;code&gt;x&lt;/code&gt; の値が変更されている。
内部状態を持つ instance を引数に指定する場合は参照渡しにする必要がある。
しかし引数を参照渡しにすると関数実行が thread safe でなくなる可能性がある。
また引数の値が nil の場合も考慮する必要がある。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では通常の方法ではポインタ演算ができない。
たとえば，ついうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func add(x, y *int) int {
	x += y
	return *x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか書いてしまっても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;invalid operation: x += y (operator + not defined on pointer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とコンパイル・エラーになる。
ポインタ演算が必要な場合は &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージを使う。&lt;/p&gt;

&lt;h3 id=&#34;slice-map-channel-は常に-参照渡し:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Slice, Map, Channel は常に「参照渡し」&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; は組み込み型だが内部状態を持つ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
したがって，これらの型の instance を引数に渡す場合はつねに「参照渡し」になる（つまり instance のコピーは発生しない）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func setItem(ary map[int]int, index, item int) {
	ary[index] = item
}

func main() {
    ary := map[int]int{0: 0}
	fmt.Println(ary) //output: map[0:0]
	setItem(ary, 0, 1)
	fmt.Println(ary) //output: map[0:1]
	setItem(ary, 10, 10)
	fmt.Println(ary) //output: map[0:1 10:10]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし固定の配列や &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; の instance は「値」として振る舞うため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;，引数に指定した場合も「値渡し」になる。
&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; とは挙動が異なるためテキトーなコードを書いていると混乱しやすい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func setItem(ary [4]int, index, item int) {
	ary[index] = item
}

func main() {
	ary := [4]int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	setItem(ary, 1, 10)
	fmt.Println(ary) //output: [0 1 2 3]
	ary[2] = 200
	fmt.Println(ary) //output: [0 1 200 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;固定配列や &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型を「参照渡し」にしたい場合はやはりポインタ値を渡す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func setItem(ary *[4]int, index, item int) {
	(*ary)[index] = item
}

func main() {
	ary := [4]int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	setItem(&amp;amp;ary, 1, 10)
	fmt.Println(ary) //output: [0 10 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の instance は「不変（immutable）」なので「参照渡し」が必要な局面はほとんど無いと思われる。
固定配列は不変ではないが，配列を操作するのであれば固定配列ではなく &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; のほうが扱いやすい。
たとえば上のコードでは &lt;code&gt;ary := []int{0, 1, 2, 3}&lt;/code&gt; と初期化すれば &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; として扱える。&lt;/p&gt;

&lt;h2 id=&#34;method-receiver:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Method Receiver&lt;/h2&gt;

&lt;p&gt;ある型に関数を関連付ける場合は method receiver を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Vertex struct {
	X int
	Y int
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(v Vertex)&lt;/code&gt; の部分が method receiver である。
&lt;code&gt;Add()&lt;/code&gt; 関数を呼び出すには以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}

func main() {
	v := Vertex{X: 1, Y: 2}
	vv := v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v)  //output: X = 1, Y = 2
	fmt.Println(vv) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数の calling sequence としては &lt;code&gt;v.Add(dv)&lt;/code&gt; と &lt;code&gt;Vertex.Add(v, dv)&lt;/code&gt; は等価である。
つまり &lt;code&gt;v&lt;/code&gt; は &lt;code&gt;Add()&lt;/code&gt; 関数の0番目の引数として振る舞い，「値渡し」でセットされる。&lt;/p&gt;

&lt;p&gt;Method receiver の型をポインタ型にすれば「参照渡し」にできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v *Vertex) Add(dv Vertex) {
	if v == nil {
		return
	}
	v.X += dv.X
	v.Y += dv.Y
}

func main() {
	v := &amp;amp;Vertex{X: 1, Y: 2}
	v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合も calling sequence としては &lt;code&gt;v.Add(dv)&lt;/code&gt; と &lt;code&gt;(*Vertex).Add(v, dv)&lt;/code&gt; は等価である。&lt;/p&gt;

&lt;h3 id=&#34;method-receiver-の暗黙的変換:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Method Receiver の暗黙的変換&lt;/h3&gt;

&lt;p&gt;Method receiver を「値渡し」にした場合，呼び出し元の instance がポインタ型であっても暗黙的に「値渡し」に変換される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}

func main() {
	v := &amp;amp;Vertex{X: 1, Y: 2} //pointer
	vv := v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v)  //output: X = 1, Y = 2
	fmt.Println(vv) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Method receiver を「参照渡し」にした場合も暗黙的に「参照渡し」に変換される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v *Vertex) Add(dv Vertex) {
	if v == nil {
		return
	}
	v.X += dv.X
	v.Y += dv.Y
}

func main() {
	v := Vertex{X: 1, Y: 2} //not pointer
	v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v) //output: X = 4, Y = 6
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;method-receiver-の値が-nil-の場合:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;Method Receiver の値が nil の場合&lt;/h3&gt;

&lt;p&gt;Method receiver の値が nil の場合はどうなるか。
まずは「値渡し」の場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v Vertex) Add(dv Vertex) Vertex {
	v.X += dv.X
	v.Y += dv.Y
	return v
}

func main() {
	v := (*Vertex)(nil) //nil
	vv := v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v)
	fmt.Println(vv)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合は &lt;code&gt;Add()&lt;/code&gt; 関数呼び出し時に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; になる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;panic: runtime error: invalid memory address or nil pointer dereference
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁこれは分かりやすいよね。
では「参照渡し」の場合はどうなるか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X = &amp;quot;, v.X, &amp;quot;, Y = &amp;quot;, v.Y)
}

func (v *Vertex) Add(dv Vertex) {
	if v == nil {
		return
	}
	v.X += dv.X
	v.Y += dv.Y
}

func main() {
	v := (*Vertex)(nil) //nil
	v.Add(Vertex{X: 3, Y: 4})
	fmt.Println(v) //output: &amp;lt;nil&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は &lt;code&gt;Add()&lt;/code&gt; 関数呼び出し時点では &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; にはならない。
上のコードでは &lt;code&gt;v&lt;/code&gt; に nil が渡される。
したがって &lt;code&gt;Add()&lt;/code&gt; 関数内の条件文を削除すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v *Vertex) Add(dv Vertex) {
	v.X += dv.X
	v.Y += dv.Y
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;v&lt;/code&gt; 内の要素を参照としたところで &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; になる。
Method receiver を「参照渡し」にする場合は nil 値に注意する必要がある。&lt;/p&gt;

&lt;h2 id=&#34;for-range-構文も-値渡し:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;for-range 構文も「値渡し」&lt;/h2&gt;

&lt;p&gt;余談だが for-range 構文も「値渡し」（つまりコピーが発生する）なので注意が必要である。
たとえば以下のコードで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	ary := []int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	for _, item := range ary {
		item += 10
	}
	fmt.Println(ary) //output: [0 1 2 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for-range 構文内の &lt;code&gt;item&lt;/code&gt; は &lt;code&gt;ary&lt;/code&gt; 内の要素を指すのではなく要素のコピーである。
したがって &lt;code&gt;item&lt;/code&gt; を操作しても &lt;code&gt;ary&lt;/code&gt; には影響しない。
&lt;code&gt;ary&lt;/code&gt; 内の要素を操作するのであれば素朴に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	ary := []int{0, 1, 2, 3}
	fmt.Println(ary) //output: [0 1 2 3]
	for i := 0; i &amp;lt; len(ary); i++ {
		ary[i] += 10
	}
	fmt.Println(ary) //output: [10 11 12 13]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするしかない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:8182ac28bc68eb736cad9fff25d78d28&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://skatsuta.github.io/2015/12/29/value-receiver-pointer-receiver/&#34;&gt;Go 言語の値レシーバとポインタレシーバ | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;型については「&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:t&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;このコードについては「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」で解説している。ちなみに &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を潰して error を返すのはエラー・ハンドリングとしてはいいやり方ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:p&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;値がどこにコピーされるかは型によって異なる。 &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 以外の基本型は値がスタックに積まれる。 &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; および基本型以外はヒープ領域に値がコピーされそのポインタがスタックに積まれる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:copy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; は内部状態を持つため &lt;code&gt;new()&lt;/code&gt; 関数ではなく &lt;code&gt;make()&lt;/code&gt; 関数で instance を生成する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:make&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の実体は &lt;code&gt;[]byte&lt;/code&gt; 型である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:str&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;たとえば固定の配列や &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の instance は nil 値を持たない。 &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型のゼロ値は空文字列である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8182ac28bc68eb736cad9fff25d78d28:n&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 安全と安心をいっしょくたにする輩を信用してはいけない - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/27-stories/" />
		<id>tag:text.Baldanders.info,2016-03-27:/remark/2016/03/27-stories/</id>
		<published>2016-03-27T02:38:30+09:00</published>
		<updated>2016-04-28T21:52:18+09:00</updated>
		<summary>安全と安心をいっしょくたにする輩を信用してはいけない / 漫画家小山田いくさん死去 / RFC 7763 The text/markdown Media Type / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#sec:44fe24037ebc2e15984f28577ab100a4&#34;&gt;安全と安心をいっしょくたにする輩を信用してはいけない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iku:44fe24037ebc2e15984f28577ab100a4&#34;&gt;漫画家小山田いくさん死去&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#md:44fe24037ebc2e15984f28577ab100a4&#34;&gt;RFC 7763 The text/markdown Media Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:44fe24037ebc2e15984f28577ab100a4&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;sec:44fe24037ebc2e15984f28577ab100a4&#34;&gt;安全と安心をいっしょくたにする輩を信用してはいけない&lt;/h2&gt;

&lt;p&gt;一昨年前に Facebook で呟いていた。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;安心は思い込みさえすればお手軽に手に入るが、安全を手に入れるには少なくないコストがかかるし、誰かから貰えたりもしない。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どんな文脈で言ったか憶えてないが，まぁいつものことだろう。&lt;/p&gt;

&lt;p&gt;安全でなくても安心（感）は手に入る。
そして人が素朴に求めるのは安全ではなく安心のほうだ。
これが悪いほうに作用した典型例が Apple 製品である。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;375&#34; src=&#34;https://www.youtube-nocookie.com/embed/bmpSJwZ5xqA&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bmpSJwZ5xqA&#34;&gt;セキュリティ MacCM - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;当時， Apple はユーザに対して安心感を「売る」キャンペーンを大々的に展開した。
また App Store からセキュリティ関連アプリを排除したりしたこともあった（今はどうなってるか知らないが）。
Apple の失敗はユーザに安心感を与えるために安全を omit してしまったことだ。
そのせいで Apple は大勢のユーザを危険に晒すことになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/03/24/162/&#34;&gt;FBIとAppleの対立が急転、サン電子子会社がiPhoneロック解除で協力か | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gigazine.net/news/20160324-fbi-unlock-iphone/&#34;&gt;iPhoneの暗号化をAppleの協力なしで解除する7つの方法 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/29/20160328justice-department-drops-lawsuit-against-apple-over-iphone-unlocking-case/&#34;&gt;司法省、対Apple訴訟を取り下げ―テロ容疑者のiPhoneはFBIがアンロックに成功 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今まで何度も言っているが「警察にできることは犯罪者にもできる」。
自力で iPhone を突破できなかった FBI は外部の企業を使うようだ。
つまり警察は犯罪者以下だと証明してしまったわけだ。&lt;/p&gt;

&lt;p&gt;IPA も気をつけなよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/sec/reports/20160324.html&#34;&gt;「つながる世界の開発指針」を公開：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;追加ブックマーク:44fe24037ebc2e15984f28577ab100a4&#34;&gt;追加ブックマーク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080404/&#34;&gt;米政府によるスマホデータ取り出しの協力要請、ACLUが実態調査 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/01/news114.html&#34;&gt;FBIのiPhoneロック解除方法、Appleに知らされない可能性も (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/08/news060.html&#34;&gt;FBI長官、「購入したロック解除ツールはiPhone 5sでは機能しなかった」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/27/20160426fbi-to-keep-apple-guessing-on-san-bernardino-iphone-hack/&#34;&gt;FBIは銃撃犯のiPhoneをハッキングしたツールの詳細をAppleに開示しない意向 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iku:44fe24037ebc2e15984f28577ab100a4&#34;&gt;漫画家小山田いくさん死去&lt;/h2&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;小山田いく先生。お亡くなりになりました。&lt;br&gt;お疲れ様でした。&lt;/p&gt;&amp;mdash; 田上 喜久 (@HgKjDWcYgmlilNs) &lt;a href=&#34;https://twitter.com/HgKjDWcYgmlilNs/status/713252253725904896&#34;&gt;2016年3月25日&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nlab.itmedia.co.jp/nl/articles/1603/25/news127.html&#34;&gt;漫画家・小山田いくさん亡くなる　代表作に出身地・長野県小諸市を舞台にした「すくらっぷ・ブック」など - ねとらぼ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「すくらっぷ・ブック」の主要キャラは私より1歳下（連載当時）で思春期真っ盛りの私はシンクロしまくりだった。
社会人になって読み返したらこっ恥ずかしい台詞のオンパレードで赤面するのだが，今でも1980年代までに出た単行本は実家に全部ある。&lt;/p&gt;

&lt;p&gt;手塚治虫さんとか石森章太郎さんとかの作品って私からはだいぶ上の世代なんだよね。
私等くらいの世代だと小山田いくさんとかご兄弟のたがみよしひささんとか竹本泉さんとかあたりが思春期リアルなんじゃないだろうか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;その時代の作家さんが亡くなるのはやっぱくるねぇ。
合掌。&lt;/p&gt;

&lt;h2 id=&#34;md:44fe24037ebc2e15984f28577ab100a4&#34;&gt;RFC 7763 The text/markdown Media Type&lt;/h2&gt;

&lt;p&gt;Markdown が RFC になったらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7763&#34;&gt;RFC 7763 - The text/markdown Media Type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文法についても定義されているけど markdown って既に方言バリバリだからなぁ。&lt;/p&gt;

&lt;h2 id=&#34;other:44fe24037ebc2e15984f28577ab100a4&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chuck0523/items/ee23293f2645d40cb317&#34;&gt;【意訳】たった今、npmのパッケージを解放しました。 - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm&#34;&gt;The npm Blog — kik, left-pad, and npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/25/20160324email-is-dying-among-mobiles-youngest-users/&#34;&gt;モバイル最若年層では、Eメールが死につつある | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/docker_for_macwindows.html&#34;&gt;MacOSとWindowsのネイティブ仮想化を用いたDocker純正ツール「Docker for Mac/Windows」登場、VirtualBoxは不要に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:44fe24037ebc2e15984f28577ab100a4&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/483544213X/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/518uMdKYp3L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/483544213X/baldandersinf-22/&#34;&gt;すくらっぷ・ブック (1) (fukkan.com―小山田いく選集)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;小山田 いく &lt;/dd&gt;&lt;dd&gt;ブッキング 2006-06-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/425310200X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/425310200X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;週刊少年チャンピオン40th 創刊40周年記念特別編集&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4835442970/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4835442970.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;魑魅 (小山田いく選集 2期)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;思春期の頃の愛読書でした。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-07-01&#34;&gt;2015/07/01&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;まぁ他にも新谷かおるさんとか聖悠紀さんとか人によって色々あるだろうけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:44fe24037ebc2e15984f28577ab100a4:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
