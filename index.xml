<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/index.xml" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml/index.xml" />
	<id>tag:text.Baldanders.info,2016-12-02:/</id>
	<updated>2016-12-02T20:32:33+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.17</generator>

	
	<entry>
		<title>Security Release Go 1.7.4 and 1.6.4 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/12/security-release-golang-1_7_4-and-1_6_4/" />
		<id>tag:text.Baldanders.info,2016-12-02:/remark/2016/12/security-release-golang-1_7_4-and-1_6_4/</id>
		<published>2016-12-02T20:32:33+09:00</published>
		<updated>2016-12-02T20:32:33+09:00</updated>
		<summary>数日前から予告されていたが， Go 言語の 1.7.4 と 1.6.4 がリリースされた。詳細が分かり次第，ここに追記する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;数日前から&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/YOqTqcJtiJI&#34;&gt;予告&lt;/a&gt;されていたが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の 1.7.4 と 1.6.4 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/2lP5z9i9ySY&#34;&gt;[security] Go 1.7.4 and Go 1.6.4 are released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティ脆弱性を含むので（特に Web 関連で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を使ってる方は）必ずアップデートすること。
なお，特に理由がない限り 1.7 系を使うことをお勧めする。&lt;/p&gt;

&lt;p&gt;ひとつは &lt;a href=&#34;https://golang.org/pkg/crypto/x509/&#34; title=&#34;x509 - The Go Programming Language&#34;&gt;&lt;code&gt;crypto/x509&lt;/code&gt;&lt;/a&gt; パケージに関するもの&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go-review.googlesource.com/#/c/33721/&#34;&gt;Change If681c514: crypto/x509: read Darwin trust settings for root CAs | go-review.googlesource Code Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/18141&#34;&gt;crypto/x509: honor OS X certificate trust settings · Issue #18141 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もうひとつは &lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; パッケージに関するものだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go-review.googlesource.com/#/c/30410/&#34;&gt;Change Ib394655b: net/http: multipart ReadForm close file after copy | go-review.googlesource Code Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/17965&#34;&gt;net/http: backport &amp;ldquo;multipart ReadForm close file after copy&amp;rdquo; to 1.7 · Issue #17965 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CVE 番号とかはまだ付いてないのかな？
詳細が分かり次第，ここに追記する。&lt;/p&gt;

&lt;p&gt;そうそう。
1.8 ベータ版も登場している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/Wgv6NGcntlQ&#34;&gt;Go 1.8 Beta 1 is released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://beta.golang.org/doc/go1.8&#34;&gt;Go 1.8 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;GOPATH&lt;/code&gt; 環境変数にデフォルト値ができたらしい。
あと &lt;code&gt;go bug&lt;/code&gt; コマンドってなんだ？&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>2017年直前の閏秒について - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/leap-second-2017/" />
		<id>tag:text.Baldanders.info,2016-11-29:/remark/2016/11/leap-second-2017/</id>
		<published>2016-11-29T22:06:59+09:00</published>
		<updated>2016-11-29T22:06:59+09:00</updated>
		<summary>年も押し迫ってきたし関連情報も出てき始めているので，あらためて記事を再構成し関連リンクを順次追加していくことにする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/07/10-stories/#ls&#34;&gt;以前に紹介した&lt;/a&gt;けど，年も押し迫ってきたし関連情報も出てき始めているので，あらためて記事を再構成し関連リンクを順次追加していくことにする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nict.go.jp/press/2016/07/08-1.html&#34;&gt;プレスリリース | 「うるう秒」挿入のお知らせ | NICT-情報通信研究機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/business/35085582/&#34;&gt;2016年12月31日にうるう秒が追加へ - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UTC の2017年直前に閏秒が挿入される。
日本時間では，時差があるので，2017年1月1日午前9:00直前に閏秒が挿入されることになる。
これにより UTC と TAI の差は37秒となる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;実施年月日&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;調整時間（秒）&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;$UTC - TAI$（秒）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1972年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;―&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-10$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1972年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-11$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1973年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-12$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1974年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-13$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1975年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-14$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1976年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-15$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1977年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-16$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1978年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-17$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1979年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-18$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1980年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-19$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1981年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-20$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1982年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-21$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1983年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-22$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1985年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-23$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1988年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-24$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1990年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-25$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1991年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-26$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1992年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-27$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1993年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-28$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1994年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-29$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1996年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-20$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1997年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-31$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1999年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-32$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2006年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-33$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2009年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-34$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2012年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-35$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-36$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-37$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;閏秒について&#34;&gt;閏秒について&lt;/h2&gt;

&lt;p&gt;日常生活で接する時刻系としては UT （universal time; 世界時）と UTC （coordinated universal time; 協定世界時）の2つが存在する。
2つの時刻系は基準となる物差しが異なる。&lt;/p&gt;

&lt;p&gt;UT は恒星時（sidereal time）系の一種で，簡単に言うと地球の自転速度を基準にしている。
私たちの日常生活は太陽や月などに大きな影響を受けているので， UT を用いるのは妥当と言える。
一方で UT は観測値であり，しかも地球の自転速度は一定ではなく予測できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:es&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:es&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; のが欠点だった。
そこで「同じ間隔で時を刻む時刻系」の要求が高まってくる。&lt;/p&gt;

&lt;p&gt;かなりの試行錯誤の末，最終的に原子時（atmic time）系が採用されることになった。
具体的には1958年1月1日0時0分0秒 UT2&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ut2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ut2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を原点とした TAI&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tai&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tai&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; （international atomic time; 国際原子時）である。&lt;/p&gt;

&lt;p&gt;そして UT と TAI との間のギャップを埋めるのが UTC なのである。&lt;/p&gt;

&lt;p&gt;UTC は TAI と同じ原子時系で TAI との差が整数秒になるように調整される。
また UT に対する差は 0.9 秒以内になるように調整される。
この「調整」を行う手段が閏秒（leap second）である。&lt;/p&gt;

&lt;p&gt;閏秒は UTC の1月1日直前または7月1日直前に挿入あるいは削除される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:410&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:410&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
UT が観測値である以上「いつ閏秒が発生するか」は長期的には予測できないが，少なくとも半年前には&lt;a href=&#34;http://jjy.nict.go.jp/QandA/data/leapsec.html&#34; title=&#34;日本標準時プロジェクト Information of Leap second&#34;&gt;告知&lt;/a&gt;される。&lt;/p&gt;

&lt;h2 id=&#34;コンピュータ-システムにおける閏秒の問題&#34;&gt;コンピュータ・システムにおける閏秒の問題&lt;/h2&gt;

&lt;p&gt;コンピュータ・システムにおける閏秒の問題は概ね以下の2つに大別できる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;閏秒の挿入による見かけ上の時刻の巻き戻し&lt;/li&gt;
&lt;li&gt;タイムスタンプの処理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下，もう少し詳しく解説する。&lt;/p&gt;

&lt;h3 id=&#34;閏秒の挿入による見かけ上の時刻の巻き戻し&#34;&gt;閏秒の挿入による見かけ上の時刻の巻き戻し&lt;/h3&gt;

&lt;p&gt;現在，多くのコンピュータシステムは &lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34; title=&#34;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&#34;&gt;NTP (Network Time Protocol)&lt;/a&gt; によって時刻同期を行っている。
閏秒が発生する際に &lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34; title=&#34;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&#34;&gt;NTP&lt;/a&gt; では LI (Leap Indicator) をセットするのだが，閏秒を挿入する際には見かけ上の時刻の巻き戻しが発生する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;23:59:59.000000（→ 23:59:59.999999）→ 23:59:59.000000 → 00:00:00.000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サービスやアプリケーションのいくつか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:debug&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:debug&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; は「時刻の巻き戻し」が考慮されていないため，巻き戻しのタイミングで重大なエラーが発生する可能性がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34; title=&#34;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&#34;&gt;NTP&lt;/a&gt; には LI をセットせず時刻の巻き戻しを行わない SLEW モードがあり，このモードにすることで問題を回避できる。
ただし SLEW モードは時刻のギャップが起きた際の同期に時間がかかるため，モードの使い分けが必要になるかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;タイムスタンプの処理&#34;&gt;タイムスタンプの処理&lt;/h3&gt;

&lt;p&gt;タイムスタンプは電子署名などでは欠かせない技術要素である（「否認防止（non-repudiation）」には正しい時刻が必要）。
タイムスタンプを提供するサービスでは厳密に UTC に準拠して運営されている。
したがって閏秒の瞬間に「2016年12月31日 23:59:60 UTC」といったタイムスタンプがセットされる可能性がある。&lt;/p&gt;

&lt;p&gt;このタイムスタンプを扱う際に処理系によっては誤動作を起こす可能性があるのだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/J_3woo86/items/8641b98c14278569ab94&#34;&gt;【殴り書き】javascriptにおけるうるう秒の調査 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/J_3woo86/items/31ffd000786273fd05e6&#34;&gt;【殴り書き】C#におけるうるう秒調査 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;タイムスタンプ・サービスを行っているプロバイダには，閏秒の前後でサービスを止めて「23:59:60 UTC」なタイムスタンプが発生しないようにしているところもあるようだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;h3 id=&#34;技術情報&#34;&gt;技術情報&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/1027910.html&#34;&gt;来年の元旦に「うるう秒」挿入、システム障害などのトラブル回避に向けて引き続き警戒を -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hitachi-support.com/alert/ss/HWS16-002/index.htm&#34;&gt;製品使用上の重要なお知らせ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsukamoto/items/5bbecd29ac40ac16e039&#34;&gt;VMware製品へのうるう秒調整の影響 - Qiita&lt;/a&gt; : 最新版に更新されている

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=2126101&#34;&gt;NTP のスルー モードの有効化 (2126101) | VMware KB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.seiko-cybertime.jp/time/column3.html&#34;&gt;サマータイム、うるう秒とタイムスタンプの関係｜タイムスタンプ入門｜セイコーサイバータイム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34;&gt;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3161&#34;&gt;RFC 3161 - Internet X.509 Public Key Infrastructure Time Stamp Protocol (TSP)&lt;/a&gt; （&lt;a href=&#34;https://www.ipa.go.jp/security/rfc/RFC3161JA.html&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;その他の四方山話&#34;&gt;その他の四方山話&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/topics/html/topics2013_1.html&#34;&gt;閏秒(うるう秒)とは何か - 国立天文台暦計算室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.nao.ac.jp/contents/about-naoj/reports/report-naoj/11-34-2.pdf&#34;&gt;暦象年表の改訂について&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000840.shtml&#34;&gt;暦の改訂（DE405 から DE430 へ） — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2015/06/30/torvalds_leapsecond/&#34;&gt;Linux開発者リーナス・トーヴァルズ、来る「うるう秒」を語る｜WIRED.jp&lt;/a&gt; ： 2015年の記事&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/leap-second/&#34;&gt;うるう秒は当分存続らしい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昔書いた以下の記事は内容が古くて地球時（terrestrial time; TT）などを含む座標時系への言及がないけど，閏秒に関する歴史的経緯を知るという意味では参考になるかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000109.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 序章 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000118.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 恒星時系と世界時系 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000127.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 暦表時系 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000130.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 原子時系と閏秒 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000147.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 新しい暦計算システムと力学時 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51mQCyP04rL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;天体の位置計算&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;長沢 工 &lt;/dd&gt;&lt;dd&gt;地人書館 1985-09&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805206349/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805206349.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日の出・日の入りの計算―天体の出没時刻の求め方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4769908180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4769908180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文計算入門―一球面三角から軌道計算まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805204141/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805204141.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;パソコンで見る天体の動き&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416114710/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4416114710.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文年鑑2015年版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00R4X7R0M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00R4X7R0M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;月刊 星ナビ 2015年 02月号 [雑誌]&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-01-11&#34;&gt;2015/01/11&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51EnYDL31WL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;猫暦 ねこよみ コミック 1-3巻セット (ねこぱんちコミックス)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ねこしみず 美濃 &lt;/dd&gt;&lt;dd&gt;少年画報社 2016-07-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想は&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/nekoyomi/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-29&#34;&gt;2016-11-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:es&#34;&gt;地球の自転は（潮汐摩擦などにより）大雑把に言って少しずつ遅くなる傾向にある。実はこれが分かったのって20世紀に入ってからなのだよ（問題の認識は19世紀後半からあった）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:es&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ut2&#34;&gt;観測から得られた時刻を UT0 と呼ぶ。 UT0 に対し極運動等の補正をかけたものを UT1 と呼ぶ。現在 UT と言う場合にはこの UT1 を指す。 UT2 は UT1 から更に自転速度の季節変動分を均した値である。現在の UTC が採用されるまでは UT2 が主に使われていたらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ut2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:tai&#34;&gt;現在の TAI の定義は「回転するジオイド上で実現される SI の秒を目盛りの単位とした, 地心座標系で定義される座標時（coordinate time）の目盛り」（&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E5%8E%9F%E5%AD%90%E6%99%82&#34; title=&#34;国際原子時 - Wikipedia&#34;&gt;訳は Wikipedia より&lt;/a&gt;）となっている。ちなみに「SI の秒」は「セシウム 133 の原子の基底状態の2つの超微細構造準位の間の遷移に対応する放射の周期の9192631770倍の継続時間」（&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%A7%92&#34; title=&#34;秒 - Wikipedia&#34;&gt;訳は Wikipedia より&lt;/a&gt;）である。この「SI の秒」を使っている時刻系は全て原子時系とも言える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tai&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:410&#34;&gt;これ以外には4月1日直前および10月1日直前も第2優先日として閏秒が発生する可能性があるが，過去においてこの日に閏秒が発生したことはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:410&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:debug&#34;&gt;2012年の閏秒の挿入時には数多くのサービスに障害が発生したが，その後の改善や回避策により2015年には大きな混乱もなく閏秒を迎えられた。なお Linux 系のシステムには &lt;code&gt;right/Asia/Tokyo&lt;/code&gt; のような閏秒を考慮したタイムゾーンも存在するが，旧来の &lt;code&gt;Asia/Tokyo&lt;/code&gt; のようなタイムゾーンとの間で UNIX Time の互換性がなくなるのとタイムスタンプ処理と同じ問題が発生してしまうため推奨されないことも多い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:debug&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「ふくろう」閉店 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/fukurou-closed/" />
		<id>tag:text.Baldanders.info,2016-11-28:/remark/2016/11/fukurou-closed/</id>
		<published>2016-11-28T20:56:23+09:00</published>
		<updated>2016-11-30T21:40:51+09:00</updated>
		<summary>ホンマ2年間楽しませていただきました。ご馳走様です。気軽に食べて呑める店を開拓しないとなぁ...</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;丸2年お世話になったお好み焼き屋の「ふくろう」がよんどころない事情で閉店になった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.netandfield.com/shar/2016/11/post-2712.html&#34;&gt;ラスト「ふくろう」 - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あいにく風邪を引いてしまってラスト・イベントには参加できなかったのだが，食材やお酒が余ってたらしく，翌日に「飲みに来ない？」と誘ってもらった。
ありがたや。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31269009055/&#34;&gt;&lt;img srcset=&#34;https://c8.staticflickr.com/6/5681/31269009055_b06cd5a21a.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ふくろう&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31269009055/&#34;&gt;ふくろう&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;お好み焼き屋と言いながらあんまりお好み焼きは食べなかったり（めっさ美味いんだけどね。全粒粉のソバがねぇ）。
いや，大将の創作料理（？）が美味しくって。
&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000836.shtml&#34; title=&#34;ふくろう「野菜三昧」イベント — Baldanders.info&#34;&gt;「野菜三昧」イベント&lt;/a&gt;とか，幻の塩ラーメンとか，広島バーガーとか，芋煮会とか，たこ焼きのデスソース添えとか&amp;hellip; （笑）&lt;/p&gt;

&lt;p&gt;今回は「1ポンドステーキ」をいただいた。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31232932936/&#34;&gt;&lt;img srcset=&#34;https://c1.staticflickr.com/6/5468/31232932936_779273aa65.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;1ポンドステーキ。大ラス？&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31232932936/&#34;&gt;1ポンドステーキ。大ラス？&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;私は全部は無理なので，他のお客さんと分けっこして食べた。
料理をシェアするのって楽しいよね。&lt;/p&gt;

&lt;p&gt;ホンマ2年間楽しませていただきました。
ご馳走様です。
気軽に食べて呑める店を開拓しないとなぁ&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000760.shtml&#34;&gt;The お好み焼 ふくろう — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000775.shtml&#34;&gt;いいにく（11.29）の日，他 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000836.shtml&#34;&gt;ふくろう「野菜三昧」イベント — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.netandfield.com/shar/2016/11/post-2715.html&#34;&gt;巨大パエリアパンと大将の魂を受け継ぎました - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B016B68NGO/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/D1P4hjDg0uS._SL160_.png&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B016B68NGO/baldandersinf-22/&#34;&gt;[まとめ買い] あつあつふーふー（アクションコミックス）&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;佐藤両々 &lt;/dd&gt;&lt;dd&gt; &lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;お好み焼きが食べたくなる漫画。広島弁が微妙なのは仕様らしい。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-28&#34;&gt;2016-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「2004年」に留まり続ける日本の Creative Commons - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/creative-commons/" />
		<id>tag:text.Baldanders.info,2016-11-23:/remark/2016/11/creative-commons/</id>
		<published>2016-11-23T12:48:40+09:00</published>
		<updated>2016-11-23T12:48:40+09:00</updated>
		<summary>日本の「クリエイティブ・コモンズ・ジャパン」や「出版業界」はどこへ行きたいのだろう。独占か？ それとも囲い込みか？ 「現状維持」は停滞ではなく退行だよ。それをこの十数年の間に音楽出版も書籍出版も他の知財分野も思い知ったんじゃないの？</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;Facebook の TL で見かけたので早速見てみたのだが&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/JEPAslide/ss-68121343&#34;&gt;クリエイティブ・コモンズと著作権の新しい潮流&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;んー。
なんだろう，この既視感は。&lt;/p&gt;

&lt;p&gt;個人的には「&lt;a href=&#34;https://creativecommons.jp/&#34;&gt;クリエイティブ・コモンズ・ジャパン&lt;/a&gt;」の&lt;a href=&#34;https://twitter.com/TasukuMizuno&#34;&gt;水野祐&lt;/a&gt;理事の仕事とその成果には敬意を表すものだし，上のスライドは「出版業界」をターゲットにしているようなので，それ故に（“&lt;a href=&#34;https://stateof.creativecommons.org/2015/&#34; title=&#34;Creative Commons — State of the Commons 2015 — It&#39;s been a remarkable year, most notably for the more than 1.1 billion works under one of the CC licenses, CC0, or the public domain mark.&#34;&gt;State of the Commons&lt;/a&gt;” のデータを使いながら） Free Culture の F の字も出ないのはしょうがないのかな，と思わなくもない。&lt;/p&gt;

&lt;p&gt;駄菓子菓子。&lt;/p&gt;

&lt;p&gt;このスライドに出ているような話は大体2003年から2004年&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:04&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:04&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;くらいの間に議論されているものの繰り返しに過ぎないように見える。
当時と違うのは，八田真行さんの「&lt;a href=&#34;https://mag.osdn.jp/03/09/29/0955208&#34; title=&#34;クリエイティヴ・コモンズに関する悲観的な見解 | OSDN Magazine&#34;&gt;クリエイティヴ・コモンズに関する悲観的な見解&lt;/a&gt;」に代表されるような「ブートストラップ問題」は（世界的には）既に脱している，ということくらいだろうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は既に「基盤」として欠かせないものになっているし，そのために L10N を廃し他の「自由なライセンス」との互換性について配慮できるところまで来たのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:lt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:lt&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;個人的には「&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; とは」などと考えるフェーズは2004年で終わったと考えている。
ライセンスは道具に過ぎない。
大事なことは，「表現」を巡ってどんなエコシステムを築きたいのか，だ。
道具を眺めていてもビジョンは浮かばない。&lt;/p&gt;

&lt;p&gt;たとえば日本独特の商慣行である同人市場を守りたい（これをビジョンと言っていいのか分からないが）なら，&lt;a href=&#34;http://www.slideshare.net/JEPAslide/ss-68121343&#34; title=&#34;クリエイティブ・コモンズと著作権の新しい潮流&#34;&gt;スライド&lt;/a&gt;にも出てきた「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dm&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dm&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;」を利用する手もある。
&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; にこだわる必要はないのだ。&lt;/p&gt;

&lt;p&gt;一方，本家 &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; はとっくの昔に Free Culture へと舵を切った。&lt;/p&gt;

&lt;p&gt;日本の「&lt;a href=&#34;https://creativecommons.jp/&#34;&gt;クリエイティブ・コモンズ・ジャパン&lt;/a&gt;」や「出版業界」はどこへ行きたいのだろう。
独占か？ それとも囲い込みか？ 「現状維持」は停滞ではなく退行だよ。
音楽出版も書籍出版も他の知財分野も，それをこの十数年の間に思い知ったんじゃないの？&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/&#34;&gt;改訂3版： CC Licenses について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000796.shtml&#34;&gt;Free Culture Licenses — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/share-your-work/public-domain/freeworks/&#34;&gt;Understanding Free Cultural Works - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsu-zine.com/books/copyright-3dprinting&#34;&gt;3Dプリンティングと著作権を考える - 達人出版会&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/2016/04/19/attribute-3d-printed-objects/&#34;&gt;How should we attribute 3D printed objects? - Creative Commons&lt;/a&gt; （&lt;a href=&#34;https://creativecommons.jp/2016/07/26/3d%E3%83%97%E3%83%AA%E3%83%B3%E3%83%88%E3%81%A7%E3%81%A7%E3%81%8D%E3%81%9F%E7%89%A9%E3%81%AB%E3%81%AF%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9%E8%A1%A8/&#34; title=&#34;3Dプリントでできた物にはどのようなライセンス表示をすべきか？ | クリエイティブ・コモンズ・ジャパン&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://logmi.jp/17817&#34;&gt;「もはや計画は不要になった」 MITメディアラボ・伊藤穰一氏が語る、&amp;rdquo;インターネット後の世界&amp;rdquo;と&amp;rdquo;新しい原理&amp;rdquo; - ログミー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gamespark.jp/article/2016/01/19/63159.html&#34;&gt;オタク市場調査が発表…同人誌市場は757億円、「サバゲー」ブーム到来の兆し、「現在も過去も恋人無」は31.2%など(矢野経済研究所調べ) | Game*Spark - 国内・海外ゲーム情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/inflorescencia/20070923/1190527778&#34;&gt;CCLの議論延長戦@twitterのまとめ - 半可思惟&lt;/a&gt; : 懐かしい&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/519QAE3KNFL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34;&gt;Free Culture&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ローレンス・レッシグ 山形 浩生 守岡 桜 &lt;/dd&gt;&lt;dd&gt;翔泳社 2004-07-23&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798102040/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798102040.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コモンズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798115002.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;CODE VERSION 2.0&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798119806/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798119806.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;REMIX ハイブリッド経済で栄える文化と商業のあり方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4152092769/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4152092769.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;閉じこもるインターネット――グーグル・パーソナライズ・民主主義&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4004304652/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4004304652.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;現代社会の理論―情報化・消費化社会の現在と未来 (岩波新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;Free Culture の原典。白田秀彰さんの「&lt;a href=&#39;http://orion.mt.tama.hosei.ac.jp/hideaki/freeannotation.htm&#39;&gt;FREE ANNOTATION&lt;/a&gt;」も併せてどうぞ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-02-04&#34;&gt;2015/02/04&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:04&#34;&gt;2004年は &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; バージョン 2.1 日本版がリリースされた年である。ちなみに &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の最初のバージョンは2002年末にリリースされ2012年には&lt;a href=&#34;http://10.creativecommons.org/&#34; title=&#34;#cc10 Creative Commons Tenth Anniversary&#34;&gt;10周年のお祝い&lt;/a&gt;も行われた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:04&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:lt&#34;&gt;ライセンスを巡るここ10年間のトレンドがこのグローバル化と互換性といっていいだろう。この流れはまず FLOSS の分野から始まり &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; や他のライセンスへ波及している。 &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; では CC0, BY, BY-SA を Free Culture Licenses として他の4つのライセンス条件と区別し，他の「自由なライセンス」との互換性を図っている。そういう観点でいえば今更カスタマイズ性がどうのというのは「遅れてる」としか言いようがない。音楽は音楽だけでは閉じないし文章は文章だけでは閉じない。画像・映像も同じ。コードは人の手によって互いに混じりあい関連しあうことで意味を成すのである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:lt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dm&#34;&gt;「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」はある意味で &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; とは真っ向から対立する。「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」を読めばわかるが，このライセンスは翻案のインターネット配信を明確に禁止している。それどころか許諾の対象を「二次創作同人誌」の「同人誌即売会」に限定しているのだ。（なぜこれが「複製から配信（公衆送信）へと移行しつつある出版業界」という文脈で登場するのか理解しかねるが）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dm&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>モンテカルロ法による円周率の推定（その4 PRNG） - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/estimate-of-pi-4-prng/" />
		<id>tag:text.Baldanders.info,2016-11-20:/golang/estimate-of-pi-4-prng/</id>
		<published>2016-11-20T23:33:55+09:00</published>
		<updated>2016-11-22T10:08:25+09:00</updated>
		<summary>math/rand パッケージでは rand.Source interface を持つ別の擬似乱数生成器を使うことができる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi/&#34;&gt;モンテカルロ法による円周率の推定（その1）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-2-cli/&#34;&gt;モンテカルロ法による円周率の推定（その2 CLI）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-3-gaussian/&#34;&gt;モンテカルロ法による円周率の推定（その3 Gaussian）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-4-prng/&#34;&gt;モンテカルロ法による円周率の推定（その4 PRNG）&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;「モンテカルロ法による円周率の推定」もひととおり終わったので，今回は擬似乱数生成器（pseudo random number generator）の話。&lt;/p&gt;

&lt;h2 id=&#34;math-rand-の擬似乱数生成器&#34;&gt;math/rand の擬似乱数生成器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では &lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; パッケージで擬似乱数を取り扱えることは「&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi/&#34; title=&#34;モンテカルロ法による円周率の推定（その1）&#34;&gt;その1&lt;/a&gt;」で紹介した通り。
&lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; パッケージに実装されている擬似乱数生成器はラグ付フィボナッチ法（Lagged Fibonacci Generator）のバリエーションらしい。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;If I am not mistaken again, the generator is an ALFG (Additive Lagged Fibonacci Generator, thats what Wikipedia calls it). Knuth describes the algorithm in Volume 2 of The art of computer programming in section 3.2.2 (around equation 7). Both Wikipedia and Knuth state the parameter combination 607,273 as possible combination with a period length of 2^(e-1)*(2^607-1) where e is the length of the random number in bits.&lt;br&gt;
I actually found a few references examining its properties and it seems to be a good rng so faar, but there is still seems to be a lack of mathematical background and it is fairly easy to get into trouble by not seeding properly.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-nuts/RZ1G3_cxMcM&#34;&gt;[Announce] A rand package for high quality 64bit random numbers (possibly go2)&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ラグ付フィボナッチ法は&lt;a href=&#34;#lcg&#34;&gt;線形合同法（後述）&lt;/a&gt;を改善することを目的としたものでフィボナッチ数の生成法を元にしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lagged_Fibonacci_generator&#34;&gt;Lagged Fibonacci generator - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ラグ付フィボナッチ法は以下の式で表される。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[ \begin{array}{ll}
S_{n} \equiv S_{n-j} * S_{n-k} \pmod{m}, &amp; 0 \lt j \lt k
\end{array} \]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;ラグ付フィボナッチ法は $*$ 演算子によってバリエーションがあるが &lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; パッケージの実装では加算を使うため “&lt;strong&gt;Additive&lt;/strong&gt; Lagged Fibonacci Generator” ということらしい。
ソースコードで言うとこの部分かな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
func (rng *rngSource) Int63() int64 {
	rng.tap--
	if rng.tap &amp;lt; 0 {
		rng.tap += _LEN
	}

	rng.feed--
	if rng.feed &amp;lt; 0 {
		rng.feed += _LEN
	}

	x := (rng.vec[rng.feed] + rng.vec[rng.tap]) &amp;amp; _MASK
	rng.vec[rng.feed] = x
	return x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;擬似乱数生成器のバリエーション&#34;&gt;擬似乱数生成器のバリエーション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; パッケージでは以下の &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt; を持つ別の擬似乱数生成器を使うことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A Source represents a source of uniformly-distributed
// pseudo-random int64 values in the range [0, 1&amp;lt;&amp;lt;63).
type Source interface {
	Int63() int64
	Seed(seed int64)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下に2つほど紹介する。&lt;/p&gt;

&lt;h3 id=&#34;lcg&#34;&gt;線形合同法&lt;/h3&gt;

&lt;p&gt;線形合同法（Linear Congruential Generator）は昔の擬似乱数ライブラリでよく使われていたアルゴリズムで，以下の式で表される。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
X_{n+1} = (A \times X_{n} + B) \bmod M
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;定数 $A$ および $B$ の与え方により幾つかバリエーションがある。&lt;/p&gt;

&lt;p&gt;線形合同法のメリットは実装サイズが小さく計算量も少ない点だろうか。
一方デメリットとしては，多次元で疎に分布する性質があり，周期も小さいため乱数を大量に発生させる必要がある科学技術シミュレーションなどには向かないと言われている。
このためメモリサイズが限られるマイクロ・コントローラのようなものでもない限り線形合同法が使われることはなくなった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;でわざわざ線形合同法を実装しているパッケージは少ないのだが，たとえば以下のパッケージがある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dgl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dgl&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davidminor/gorand&#34;&gt;davidminor/gorand: Basic golang implementation of a permuted congruential generator for pseudorandom number generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;mt&#34;&gt;Mersenne Twister&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html&#34; title=&#34;Mersenne Twister: A random number generator (since 1997/10)&#34;&gt;Mersenne Twister&lt;/a&gt; とは&lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/&#34; title=&#34;Makoto Matsumoto Home Page&#34;&gt;松本眞&lt;/a&gt;・西村拓士両氏によって1996年に発表された擬似乱数生成アルゴリズムである。
他の擬似乱数生成アルゴリズムと比べて以下の特徴があるそうだ。
（「&lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/what-is-mt.html&#34; title=&#34;What &amp;amp; how is MT?&#34;&gt;Mersenne Twister とは?&lt;/a&gt;」より）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;従来の様々な生成法の欠点を考慮して設計されています。&lt;/li&gt;
&lt;li&gt;従来にない長周期，高次元均等分布を持ちます。（周期が $2^{19937}-1$ で&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:mt1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:mt1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;、623次元超立方体の中に 均等に分布することが証明されています。）&lt;/li&gt;
&lt;li&gt;生成速度がかなり速い。（処理系にもよりますが、パイプライン処理やキャッシュメモリ のあるシステムでは、Cの標準ライブラリの &lt;code&gt;rand()&lt;/code&gt; より高速なこと もあります。なお、開発当時には cokus 版は &lt;code&gt;rand()&lt;/code&gt; より4倍程度高速でしたが、その後 ANSI-C の &lt;code&gt;rand()&lt;/code&gt; が LCG 法から lagged-fibonacci に 変更されたこともあり、2002年現在 rand と MT の速度差はあまりありません。）&lt;/li&gt;
&lt;li&gt;メモリ効率が良い。（32ビット以上のマシン用に設計された &lt;code&gt;mt19937.c&lt;/code&gt; は、 624ワードのワーキングメモリを消費するだけです。 1ワードは32ビット長とします。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html&#34; title=&#34;Mersenne Twister: A random number generator (since 1997/10)&#34;&gt;Mersenne Twister&lt;/a&gt; の&lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/license.html&#34; title=&#34;Mersenne Twisterの商用について&#34;&gt;オリジナル・コードは BSD ライセンスで提供&lt;/a&gt;されている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/MersenneTwister-Lab&#34; title=&#34;MersenneTwister-Lab&#34;&gt;公式のリポジトリ&lt;/a&gt;には C/C++ による実装のみのようだが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で実装している人もいるようである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/seehuhn/mt19937&#34;&gt;seehuhn/mt19937: An implementation of Takuji Nishimura&amp;rsquo;s and Makoto Matsumoto&amp;rsquo;s Mersenne Twister pseudo random number generator in Go.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nutterts/randgen&#34;&gt;nutterts/randgen: Pseudo Random Number Generators implementing the Go(lang) math/rand.Source Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/farces/mt19937_64&#34;&gt;farces/mt19937_64: Mersenne Twister (int64) for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cuixin/goalg&#34;&gt;cuixin/goalg: golang algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cpmech/gosl&#34;&gt;cpmech/gosl: Go scientific library&lt;/a&gt; : &lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/&#34; title=&#34;SIMD-oriented Fast Mersenne Twister&#34;&gt;SFMT&lt;/a&gt; や &lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/TINYMT/&#34; title=&#34;Tiny Mersenne Twister&#34;&gt;TinyMT&lt;/a&gt; に対応。オリジナルのコードを &lt;a href=&#34;https://golang.org/cmd/cgo/&#34; title=&#34;cgo - The Go Programming Language&#34;&gt;cgo&lt;/a&gt; で結合しているのでクロス環境では注意&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;擬似乱数生成器を組み込む&#34;&gt;擬似乱数生成器を組み込む&lt;/h2&gt;

&lt;p&gt;では，先ほど紹介した擬似乱数生成器を今回のコードに組み込んでみることにしよう。
こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package gencmplx

import (
	&amp;quot;math/rand&amp;quot;

	&amp;quot;github.com/davidminor/gorand/lcg&amp;quot;
	&amp;quot;github.com/seehuhn/mt19937&amp;quot;
)

//RNGs is kind of RNG
type RNGs int

const (
	NULL RNGs = iota
	GO
	LCG
	MT
)

//NewRndSource returns Source of random numbers
func NewRndSource(rng RNGs, seed int64) rand.Source {
	switch rng {
	case LCG:
		return lcg.NewLcg64(uint64(seed))
	case MT:
		mt := mt19937.New()
		mt.Seed(seed)
		return mt
	default:
		return rand.NewSource(seed)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gencmplx.NewRndSource()&lt;/code&gt; 関数で &lt;code&gt;rand.Source&lt;/code&gt; オブジェクトを生成する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pm&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pm&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
これを「&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi/&#34; title=&#34;モンテカルロ法による円周率の推定（その1）&#34;&gt;その1&lt;/a&gt;」で作った &lt;code&gt;gencmplx.New()&lt;/code&gt; 関数に渡せばよい。&lt;/p&gt;

&lt;p&gt;CLI は以下のように調整してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go estmt --help
Estimate of Pi with Monte Carlo method.

Usage:
  pi estmt [flags]

Flags:
  -e, --ecount int   Count of estimate (default 100)

Global Flags:
  -p, --pcount int       Count of points (default 10000)
  -r, --rsource string   Source of RNG (GO/LCG/MT) (default &amp;quot;GO&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で，それぞれの擬似乱数生成器で評価を行ってみようと思ったのだが，今回のケースに限ってはあまり違いが出ないようである。&lt;/p&gt;

&lt;p&gt;まずは&lt;a href=&#34;#lcg&#34;&gt;線形合同法&lt;/a&gt;の場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go estmt -e 10000 -p 100000 -r LCG &amp;gt; estmt100k-lcg.dat
random number generator: LCG
minimum value: 3.12204
maximum value: 3.16224
average value: 3.14164
standard deviation: 0.00524 (68.3%)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/histogram-lcg.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/histogram-lcg.png 611w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/qq100k-plot-lcg.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/qq100k-plot-lcg.png 611w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;p&gt;次は &lt;a href=&#34;#mt&#34;&gt;Mersenne Twister&lt;/a&gt; の場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go estmt -e 10000 -p 100000 -r MT &amp;gt; estmt100k-mt.dat
random number generator: MT
minimum value: 3.12380
maximum value: 3.16140
average value: 3.14165
standard deviation: 0.00517 (67.8%)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/histogram-mt.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/histogram-mt.png 611w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/qq100k-plot-mt.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/qq100k-plot-mt.png 611w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;p&gt;もっと多次元だったりすると変わってくるのかなぁ。&lt;/p&gt;

&lt;h2 id=&#34;暗号技術用途の乱数生成器&#34;&gt;暗号技術用途の乱数生成器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では暗号技術用途の乱数として &lt;a href=&#34;https://golang.org/pkg/crypto/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;crypto/rand&lt;/code&gt;&lt;/a&gt; パッケージが用意されている。
これは &lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; とは互換性がない。&lt;/p&gt;

&lt;p&gt;具体的には，UNIX 系のプラットフォームでは乱数生成に &lt;code&gt;/dev/urandom&lt;/code&gt; デバイスを参照している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dr&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
また Windows プラットフォームでは &lt;a href=&#34;https://technet.microsoft.com/ja-jp/library/cc734124.aspx&#34;&gt;CryptoAPI 2.0&lt;/a&gt; の &lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa379942.aspx&#34; title=&#34;CryptGenRandom function&#34;&gt;&lt;code&gt;CryptGenRandom&lt;/code&gt;&lt;/a&gt; 関数を使っている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:win&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:win&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;そもそも暗号技術用途の乱数生成器は科学技術シミュレーションやゲームで使う擬似乱数生成器とは要件が異なる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4086&#34;&gt;RFC 4086 - Randomness Requirements for Security&lt;/a&gt; （&lt;a href=&#34;https://www.ipa.go.jp/security/rfc/RFC4086JA.html&#34; title=&#34;セキュリティのための乱雑性についての要件&#34;&gt;IPA による日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf&#34;&gt;NIST Special Publication 800-90A Revision 1: Recommendation for Random Number Generation Using Deterministic Random Bit Generators&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;従前の観点から統計的にテストされた乱雑性は、セキュリティ用途に要求される予測困難性と同等では&lt;strong&gt;ありません&lt;/strong&gt;。&lt;br&gt;
例えば、（CRC Standard Mathematical Tables からのランダムテーブルのような）広く利用可能な一定のシーケンスの利用は、攻撃者に対して非常に弱いです。これを学習したり、推測する攻撃者は、容易に（過去・未来を問わず）そのシーケンス [CRC] に基づいて、すべてのセキュリティを破ることができます。他の例として、AES を 1, 2, 3 ... のような連続した整数を暗号化する一定の鍵と共に使うことは、優れた統計的乱雑性をもつが予測可能な出力を作り出します。他方、6 面のサイコロを連続して転がして、その結果の値を ASCII にエンコードすることは、実質的に予測困難なコンポーネントをもちながらも「統計的に貧弱な出力」を作り出します。それゆえ、「統計的テストの合否は、『何かが予測不可能であるか否か、あるいは、予測可能であるか否か』を表さないこと」に注意してください。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/rfc/RFC4086JA.html&#34;&gt;RFC 4086 - セキュリティのための乱雑性についての要件&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;暗号技術用途の乱数生成器は，暗号分野においては中核技術のひとつであるが，一度に大量の乱数を生成させる必要のある科学技術シミュレーションなどの用途には向かない。
上手く使い分けてほしい。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/mersenne-twister/&#34;&gt;Mersenne Twister に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pcg-random.org/&#34;&gt;PCG, A Family of Better Random Number Generators | PCG, A Better Random Number Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2014/03/11/037/&#34;&gt;/dev/randomではなく/dev/urandomを使うべき理由? | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dgl&#34;&gt;ただし &lt;a href=&#34;https://github.com/davidminor/gorand&#34; title=&#34;davidminor/gorand: Basic golang implementation of a permuted congruential generator for pseudorandom number generation&#34;&gt;&lt;code&gt;github.com/davidminor/gorand&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/lcg&lt;/code&gt; には不具合があって &lt;code&gt;Int63()&lt;/code&gt; 関数で負の値を出力する場合がある。とりあえず fork 版の &lt;a href=&#34;https://github.com/davidminor/gorand&#34; title=&#34;spiegel-im-spiegel/gorand: Basic golang implementation of a permuted congruential generator for pseudorandom number generation&#34;&gt;&lt;code&gt;github.com/spiegel-im-spiegel/gorand&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/lcg&lt;/code&gt; で修正している。 Pull request も出したけど，古いコードだし，もうメンテしてないかなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dgl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:mt1&#34;&gt;$2^{19937}-1$ はメルセンヌ素数で &lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html&#34; title=&#34;Mersenne Twister: A random number generator (since 1997/10)&#34;&gt;Mersenne Twister&lt;/a&gt; の名前の由来になっている。 &lt;a href=&#34;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html&#34; title=&#34;Mersenne Twister: A random number generator (since 1997/10)&#34;&gt;Mersenne Twister&lt;/a&gt; では周期サイズごとに複数の実装があるが， $2^{19937}-1$ がポピュラーな実装として広く使われているようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:mt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pm&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;におけるオブジェクトの多態性については「&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;」を参考にどうぞ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pm&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dr&#34;&gt;&lt;code&gt;/dev/urandom&lt;/code&gt; はハードウェア・デバイスから十分なエントロピー源が得られない場合は内部で疑似乱数生成器を使用する。このため一時は &lt;code&gt;/dev/urandom&lt;/code&gt; の脆弱性が疑われたが，現時点では事実上は問題ないとされている。一方で，スマートデバイスのような場合はハードウェア・デバイスからのエントロピー源だけでは外部から推測され易いため，性能のよい疑似乱数生成器を組み合わせるほうが有効になる場合もあるようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:win&#34;&gt;&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/windows/desktop/aa379942.aspx&#34; title=&#34;CryptGenRandom function&#34;&gt;&lt;code&gt;CryptGenRandom&lt;/code&gt;&lt;/a&gt; 関数の内部実装は公開されていないが，やはりキーボードやマウス等のデバイスの挙動をエントロピー源とし， NIST の SP800-90 勧告に従った実装をしているようである。余談だが SP800-90 は乱数生成の一部のアルゴリズムで脆弱性が発見され（これがまた NSA 絡みだったものだから大騒ぎになった），現在は修正版の &lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf&#34; title=&#34;Recommendation for Random Number Generation Using Deterministic Random Bit Generators&#34;&gt;SP800-90A Revision 1&lt;/a&gt;が発行されている。（参考：&lt;a href=&#34;http://www.cryptrec.go.jp/topics/cryptrec_20131106_dual_ec_drbg.html&#34;&gt;擬似乱数生成アルゴリズム Dual_EC_DRBG について&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:win&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG 2.1.16 released - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/gnupg-2_1_16-released/" />
		<id>tag:text.Baldanders.info,2016-11-20:/remark/2016/11/gnupg-2_1_16-released/</id>
		<published>2016-11-20T18:02:54+09:00</published>
		<updated>2016-11-20T18:02:54+09:00</updated>
		<summary>今回はセキュリティ・アップデートはなし。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q4/000398.html&#34;&gt;[Announce] GnuPG 2.1.16 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はセキュリティ・アップデートはなし。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New algorithm for selecting the best ranked public key when using a mail address with &lt;code&gt;-r&lt;/code&gt;, &lt;code&gt;-R&lt;/code&gt;, or &lt;code&gt;--locate-key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: New option &lt;code&gt;--with-tofu-info&lt;/code&gt; to print a new &amp;ldquo;&lt;code&gt;tfs&lt;/code&gt;&amp;rdquo; record in colon formatted key listings.&lt;/li&gt;
&lt;li&gt;gpg: New option &lt;code&gt;--compliance&lt;/code&gt; as an alternative way to specify options like &lt;code&gt;--rfc2440&lt;/code&gt;, &lt;code&gt;--rfc4880&lt;/code&gt;, et al.&lt;/li&gt;
&lt;li&gt;gpg: Many changes to the TOFU implementation.&lt;/li&gt;
&lt;li&gt;gpg: Improve usability of &lt;code&gt;--quick-gen-key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: In &lt;code&gt;--verbose&lt;/code&gt; mode print a diagnostic when a pinentry is launched.&lt;/li&gt;
&lt;li&gt;gpg: Remove code which warns for old versions of gnome-keyring.&lt;/li&gt;
&lt;li&gt;gpg: New option &lt;code&gt;--override-session-key-fd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: Option &lt;code&gt;--output&lt;/code&gt; does now work with &lt;code&gt;--verify&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpgv: New option &lt;code&gt;--output&lt;/code&gt; to allow saving the verified data.&lt;/li&gt;
&lt;li&gt;gpgv: New option &lt;code&gt;--enable-special-filenames&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;agent, dirmngr: New &lt;code&gt;--supervised&lt;/code&gt; mode for use by systemd and alike.&lt;/li&gt;
&lt;li&gt;agent: By default listen on all available sockets using standard names.&lt;/li&gt;
&lt;li&gt;agent: Invoke scdaemon with &lt;code&gt;--homedir&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;dirmngr: On Linux now detects the removal of its own socket and terminates.&lt;/li&gt;
&lt;li&gt;scd: Support ECC key generation.&lt;/li&gt;
&lt;li&gt;scd: Support more card readers.&lt;/li&gt;
&lt;li&gt;dirmngr: New option &lt;code&gt;--allow-version-check&lt;/code&gt; to download a software version database in the background.&lt;/li&gt;
&lt;li&gt;dirmngr: Use system provided CAs if no &lt;code&gt;--hkp-cacert&lt;/code&gt; is given.&lt;/li&gt;
&lt;li&gt;dirmngr: Use a default keyserver if none is explicitly set&lt;/li&gt;
&lt;li&gt;gpgconf: New command &lt;code&gt;--query-swdb&lt;/code&gt; to check software versions against an copy of an online database.&lt;/li&gt;
&lt;li&gt;gpgconf: Print the socket directory with &lt;code&gt;--list-dirs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;tools: The WKS tools now support draft version -02.&lt;/li&gt;
&lt;li&gt;tools: Always build gpg-wks-client and install under libexec.&lt;/li&gt;
&lt;li&gt;tools: New option&lt;code&gt;--supported&lt;/code&gt; for gpg-wks-client.&lt;/li&gt;
&lt;li&gt;The log-file option now accepts a value &amp;ldquo;&lt;code&gt;socket://&lt;/code&gt;&amp;rdquo; to log to the socket named &amp;ldquo;S.log&amp;rdquo; in the standard socket directory.&lt;/li&gt;
&lt;li&gt;Provide fake pinentries for use by tests cases of downstream developers.&lt;/li&gt;
&lt;li&gt;Fixed many bugs and regressions.&lt;/li&gt;
&lt;li&gt;Many changes and improvements for the test suite.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パッと見， &lt;a href=&#34;https://en.wikipedia.org/wiki/Trust_on_first_use&#34; title=&#34;Trust on first use - Wikipedia&#34;&gt;TOFU (Trust On First Use)&lt;/a&gt; 周りをかなりいじってる感じかねぇ。&lt;/p&gt;

&lt;p&gt;Windows 版を起動するとこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.1.16
libgcrypt 1.7.3
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いつもの感じ。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM × NYAGOS ＝ ♥ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/nyagos-with-atom/" />
		<id>tag:text.Baldanders.info,2016-11-20:/remark/2016/11/nyagos-with-atom/</id>
		<published>2016-11-20T16:29:24+09:00</published>
		<updated>2016-11-20T16:29:24+09:00</updated>
		<summary>やっとこれで Windows 環境でも ATOM にターミナル・エミュレータが導入できるようになった。しかも NYAGOS が動く。素晴らしい！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 上で動くターミナル・エミュレータはいくつかあるが，大抵は UNIX 互換環境を前提としたもので Windows では動かなかったり特別なインストール手順を要するものが殆どで使う気にならなかったりする。
そんな中で &lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; は Windows 環境でも簡単に導入できる優れもののようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://labs.spiffield.net/archives/508&#34;&gt;Atomのterminal-plusが動かないのでplatformio-ide-terminalを入れてみた | spiffieldLabs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kmry2045/items/b61a000ff257c01720e4&#34;&gt;ATOMエディタではじめるマイナー言語探訪(あんま怖くないNim②) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インストールは，他のパッケージと同じように， Settings の Install から選択してインストールすれば OK。
マジ簡単。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552246/&#34;&gt;&lt;img srcset=&#34;https://c7.staticflickr.com/6/5820/31089552246_cc66a5a325.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552246/&#34;&gt;platformio-ide-terminal (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ふむむ。
どうやら既定では PawerShell が立ち上がるようだ。
ってことは他の shell でもいけるんじゃね？&lt;/p&gt;

&lt;p&gt;ということで Settings を見ると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552576/&#34;&gt;&lt;img srcset=&#34;https://c1.staticflickr.com/6/5339/31089552576_cfa8e26522.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552576/&#34;&gt;platformio-ide-terminal (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
やっぱり shell を変えられるんだ。
ほんじゃあ &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; を入れてみよっか。
「Shell Override」の項目に &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; をフルパスで指定して  &lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; を起動する。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552456/&#34;&gt;&lt;img srcset=&#34;https://c1.staticflickr.com/6/5615/31089552456_609a1b8c62.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552456/&#34;&gt;platformio-ide-terminal (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおおおっ！ なにこれ素敵。
&lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; であれば UTF-8 を受け入れるので文字コードがどうとかあまり考えなくてよい。&lt;/p&gt;

&lt;p&gt;ん？ 待てよ。
ってことは git bash もいけるのか？ では同じように「Shell Override」の項目に git bash をフルパスで指定指定して  &lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; を起動してみる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552546/&#34;&gt;&lt;img srcset=&#34;https://c3.staticflickr.com/6/5745/31089552546_7a38f046da.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552546/&#34;&gt;platformio-ide-terminal (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;よいではないか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; を起動する際は， Windows では， &lt;code&gt;alt-shift-T&lt;/code&gt; を押下すればいいのだが，キーを3つ押さえるのは得意ではないので &lt;code&gt;ctrl-f1&lt;/code&gt; に振り直した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;.platform-win32 atom-workspace&#39;:
  &#39;ctrl-f1&#39;: &#39;platformio-ide-terminal:new&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あぁ。
やっとこれで Windows 環境でも &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にターミナル・エミュレータが導入できるようになった。
しかも &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; が動く。
素晴らしい！&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>AI の読解力，人の読解力 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/reading-comprehension/" />
		<id>tag:text.Baldanders.info,2016-11-20:/remark/2016/11/reading-comprehension/</id>
		<published>2016-11-20T01:04:36+09:00</published>
		<updated>2016-11-27T16:42:53+09:00</updated>
		<summary>「キーワードとパターンで解いている子、読んでいる子が意外にいる」ことに驚いているということが私には驚きだ。そんなの当たり前じゃないか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bylines.news.yahoo.co.jp/yuasamakoto/20161114-00064079/&#34;&gt;AI研究者が問う　ロボットは文章を読めない　では子どもたちは「読めて」いるのか？(湯浅誠) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ある意味で面白い話だが「キーワードとパターンで解いている子、読んでいる子が意外にいる」ことに驚いているということが私には驚きだ。
そんなの当たり前じゃないか。&lt;/p&gt;

&lt;p&gt;ちなみに私も読解力に関しては得意ではない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:blog&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:blog&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
上の記事の最後のほうに問題が2つ掲げられているが，私は2問目を間違えた。
私は子どものころからこういうミスが多い。
「条件忘れのテトラ」ちゃんに深く同情する。&lt;/p&gt;

&lt;p&gt;そういえば，子どものころは試験に出てくる問題にわざと誤読させるようなものも多かったので，余白に（絵心はないので）図を描いて問題を理解するように努めていた。
これも一種の受験テクニックである。&lt;/p&gt;

&lt;p&gt;日本の学校教育は「学問」を教えない。
基本的に問題を提示して解かせるだけだ。
その問題をどうやって解くかは（受験テクニックを含めて）教えてくれるが，問題の背景にある学問体系について学ばせてくれるわけではない。
学びたいなら自前でやることになる。
他人が提示した問題を解いていくだけなら「それなんてエキスパートシステム？」となるのは当然の帰結なのである。&lt;/p&gt;

&lt;p&gt;これは結城浩さんの「数学ガール」シリーズを読むようになって納得できたことだが， &lt;strong&gt;正しい理解には対話が不可欠&lt;/strong&gt; だと思う。
なぜなら「理解はプロセス」だからだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.tinect.jp/?p=33408&#34;&gt;「問題文を読んでもそこに何が書かれているのかわからない」子を教えていた時のお話 | Books&amp;amp;Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事では子どもの読解力を上げるために文章を絵で表す方法を紹介している。
絵本の読み聞かせがヒントになっているらしい。&lt;/p&gt;

&lt;p&gt;このやり方のポイントは絵を起点として対話が発生していることだと思う。
絵を文章にリンクさせるには何らかのトリガーが必要で，そのトリガーが「対話」なのである。
たとえば「読み聞かせ」ではなく子どもがひとりで絵本を読んでいるだけで理解が進むのか？ ということだ。&lt;/p&gt;

&lt;p&gt;「キーワードとパターンで解く」だけでは理解を放棄しているのと同じで，それを率先してやっているのが日本の学校なのである。
その呪縛から抜け出せるかどうかは（学校の外側の）環境に大きく依存する。
それなら富裕層が有利で貧困層が相対的に不利になってしまうのは当たり前とも言える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:s&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;機械も同じ。&lt;/p&gt;

&lt;p&gt;今の世の中にある殆んどの AI はエキスパートシステムのバリエーションにすぎない。
でも機械にはいくらでも「キーワードとパターン」の組み合わせを詰め込むことができる。
それは理解しているのとは異なるが「人間エキスパートシステム」を機械に置き換える程度には優秀であると言えよう。&lt;/p&gt;

&lt;p&gt;そもそも私は機械が人の言葉をそのまま理解する必要はないと思っている。
Human readable な言葉と machine readable な言葉は異なっていて当たり前だが，機械はまだ machine readable な言葉を獲得していない。
機械が自身の言葉を獲得して初めて人との対話が始まるのではないだろうか。&lt;/p&gt;

&lt;p&gt;これはたぶん素敵なことである。
私たち人間は「理解」について完全に理解しているとは言えない。
でも機械が人に迫り凌駕していくことで人もまた「理解」について理解を進めることができる。&lt;/p&gt;

&lt;p&gt;まさしくこれは「進化」なのである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000868.shtml&#34;&gt;プログラミングは「損得勘定」で考える — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/11/24/google-ai-language-create/&#34;&gt;グーグルの翻訳AIが「独自の言語」を生み出したといえる根拠｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NAQA33A/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41hSKEDU3zL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NAQA33A/baldandersinf-22/&#34;&gt;数学ガールの誕生　理想の数学対話を求めて&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2013-09-13&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／式とグラフ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01EL08HVS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／場合の数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-31&#34;&gt;2016-07-31&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;G. ポリア 柿内 賢信 &lt;/dd&gt;&lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621085298/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621085298.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;いかにして問題をとくか・実践活用編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4061497863/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4061497863.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学的思考法―説明力を鍛えるヒント  講談社現代新書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108819X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108819X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学×思考=ざっくりと  いかにして問題をとくか&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375698/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375698.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4185086180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4185086180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;授業研究に学ぶ高校新数学科の在り方&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014/09/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:blog&#34;&gt;そもそも私の脳内思考は言語的ではないので言語を脳内思考に decode し更にその結果を言語に encode するというのは割としんどい作業なのだ。歳をとってからは更にしんどくなった。私が拙い文章ながらブログを続けているのは訓練の一種だと思っている。楽しんでやってるけどね。もっとも周囲には「君のブログは何が書いてあるのか分からない」と酷評なのだが orz 仕事で書くドキュメントなら記述フォーマットが決まってるので問題ないんだけどねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:blog&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:s&#34;&gt;これは「なんでも学校でやれ」と言っているのではない。子どもの教育というのは（どんなに教育者が頑張っても）学校の中だけでは完結しないということだ。それを踏まえた上で教育政策を行うべきなのである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Git Extensions 2.49 × ConEmu ＝ ♥ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/git-extensions-2_49/" />
		<id>tag:text.Baldanders.info,2016-11-17:/remark/2016/11/git-extensions-2_49/</id>
		<published>2016-11-17T21:33:32+09:00</published>
		<updated>2016-11-17T21:33:32+09:00</updated>
		<summary>これなら Git Extensions で全部用事が済んでしまうことになる。素敵すぎる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;そういやそろそろ &lt;a href=&#34;https://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt; のアップデートがあるよなぁ，とか呑気にしてたら1週間以上も前にリリースされてたですよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gitextensions/gitextensions/releases/tag/v2.49&#34;&gt;Release Version 2.49 · gitextensions/gitextensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で，早速アップデートしたら凄いの。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31050770385/&#34;&gt;&lt;img srcset=&#34;https://c2.staticflickr.com/6/5536/31050770385_6303a5b486.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Git Extensions 2.49&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31050770385/&#34;&gt;Git Extensions 2.49&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;コンソールとして &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; がバインドされてて，そこから git bash が立ち上がってるじゃん。
素敵すぎる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt; は GUI アプリとしてはかなり出来がいいほうだと思うのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:st&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:st&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，やはり GUI だとどうしても「痒くても手が届かない」局面があるのよね。
&lt;a href=&#34;http://text.baldanders.info/remark/2015/git-commands/&#34; title=&#34;あまり使わないけど，たまに使おうとすると忘れてる Git コマンド集&#34;&gt;黒歴史を改竄したい&lt;/a&gt;ときとか（笑）&lt;/p&gt;

&lt;p&gt;まぁ，今までも &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; で別途ターミナルを立ち上げてコマンドラインからポチポチやってたんだけど，これなら &lt;a href=&#34;https://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt; で全部用事が済んでしまうことになる。&lt;/p&gt;

&lt;p&gt;ホンマ，ありがとう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/conemu-and-nyagos/&#34;&gt;ようやく ConEmu と NYAGOS を導入した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:st&#34;&gt;少なくとも &lt;a href=&#34;https://www.sourcetreeapp.com/&#34; title=&#34;SourceTree | Free Git and Hg Client for Mac and Windows&#34;&gt;SourceTree&lt;/a&gt; よりは好み。ただ &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を使うようになって以降は通常の commit &amp;amp; push は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 上で済ませたりする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:st&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>モンテカルロ法による円周率の推定（その3 Gaussian） - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/estimate-of-pi-3-gaussian/" />
		<id>tag:text.Baldanders.info,2016-11-14:/golang/estimate-of-pi-3-gaussian/</id>
		<published>2016-11-14T20:50:56+09:00</published>
		<updated>2016-11-22T10:01:36+09:00</updated>
		<summary>さて，前回書いたコードを利用していよいよ円周率の推定結果を評価してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi/&#34;&gt;モンテカルロ法による円周率の推定（その1）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-2-cli/&#34;&gt;モンテカルロ法による円周率の推定（その2 CLI）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-3-gaussian/&#34;&gt;モンテカルロ法による円周率の推定（その3 Gaussian）&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-4-prng/&#34;&gt;モンテカルロ法による円周率の推定（その4 PRNG）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;推定結果の分布&#34;&gt;推定結果の分布&lt;/h2&gt;

&lt;p&gt;さて，&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-2-cli/&#34; title=&#34;モンテカルロ法による円周率の推定（その2 CLI）&#34;&gt;前回&lt;/a&gt;書いたコードを利用して，いよいよ円周率の推定結果を評価してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/pi&#34;&gt;spiegel-im-spiegel/pi: Estimate of Pi with Monte Carlo method.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CLI はこんな感じになった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go estmt --help
Estimate of Pi with Monte Carlo method.

Usage:
  pi estmt [flags]

Flags:
  -e, --ecount int   Count of estimate (default 100)
  -p, --pcount int   Count of points (default 10000)

Global Flags:
      --config string   config file (default is $HOME/.pi.yaml)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まずは円周率の推定処理を10,000回繰り返してみる。
また推定処理のためのランダムな点の数 $n$ を1,000個，10,000個，100,000個と変えて実行してみようか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go estmt -e 10000 -p 1000 &amp;gt; estmt1k.dat
minimum value: 2.94800
maximum value: 3.31600
average value: 3.14199
standard deviation: 0.05104 (69.9%)

$ go run main.go estmt -e 10000 -p 10000 &amp;gt; estmt10k.dat
minimum value: 3.07240
maximum value: 3.20360
average value: 3.14178
standard deviation: 0.01654 (68.0%)

$ go run main.go estmt -e 10000 -p 100000 &amp;gt; estmt100k.dat
minimum value: 3.12360
maximum value: 3.16184
average value: 3.14163
standard deviation: 0.00518 (68.3%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後のはさすがに時間がかかるので，お茶でも飲みながら優雅に待ちましょう（笑）&lt;/p&gt;

&lt;p&gt;標準エラー出力に最小値，最大値，平均値（$E$），標準偏差（$\sigma$）を出力してみた。
標準偏差の後ろの括弧は $\left[ E-\sigma, E+\sigma \right]$ の範囲にある推定値の割合を示したものだ。&lt;/p&gt;

&lt;p&gt;円周率の推定処理の試行回数が十分大きいなら推定値の分布は正規分布（またはガウス分布）に近似できる筈である。
（以下の&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Standard_deviation_diagram.svg&#34; title=&#34;File:Standard deviation diagram.svg - Wikimedia Commons&#34;&gt;図は Wikimedia Commons のもの&lt;/a&gt;を拝借した。 &lt;a href=&#34;https://creativecommons.org/licenses/by/2.5/&#34; title=&#34;Creative Commons — Attribution 2.5 Generic — CC BY 2.5&#34;&gt;CC-BY-2.5 Generic&lt;/a&gt; で公開されている）
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Standard_deviation_diagram.svg&#34;&gt;&lt;img srcset=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Standard_deviation_diagram.svg/640px-Standard_deviation_diagram.svg.png 640w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;normal distribution from Wikimedia&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Standard_deviation_diagram.svg&#34;&gt;normal distribution from Wikimedia&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;そこで $n=100,000$ のときの推定結果についてヒストグラムを描いてみる。
幸いなことに &lt;a href=&#34;http://www.gnuplot.info/&#34; title=&#34;gnuplot homepage&#34;&gt;gnuplot&lt;/a&gt; では簡単にヒストグラムを作図できる。
こんな感じ（階級幅を0.001としている）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gnuplot&amp;gt; filter(x,y)=int(x/y)*y
gnuplot&amp;gt; plot &amp;quot;estmt100k.dat&amp;quot; u (filter($1,0.001)):(1) smooth frequency with boxes lc rgb &amp;quot;black&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gnuplot.info/&#34; title=&#34;gnuplot homepage&#34;&gt;gnuplot&lt;/a&gt; の出力結果はこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/histogram.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/histogram.png 640w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;p&gt;んー。
まぁ正規分布っぽい？&lt;/p&gt;

&lt;p&gt;もうひとつ，正規確率の分布を調べてみよう。
これも &lt;a href=&#34;http://www.gnuplot.info/&#34; title=&#34;gnuplot homepage&#34;&gt;gnuplot&lt;/a&gt; で描こうと思ったけど，少し面倒そうなので，ズルして以下を参考に &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;Home | LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; の Calc で描くことにした&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:calc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:calc&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hitorimarketing.net/tools/normal-quantile-quantile-plot.html&#34;&gt;正規確率プロット（Normal Q-Q Plot）の作成 with Excel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず結果だけ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/qq-plot.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/qq-plot.png 653w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;p&gt;プロットが直線状に並んでいれば正規分布であると言える。
図から見る限り，概ね正規分布になっているようである。&lt;/p&gt;

&lt;p&gt;しまった。
ここまで &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;が全然出てこなかった。
まぁ，いいや。
多分あと1回続きます。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-誤差評価&#34;&gt;おまけ：誤差評価&lt;/h2&gt;

&lt;p&gt;モンテカルロ法を使ってどの程度の精度で円周率が求まるかの考察については以下が参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby.kyoto-wu.ac.jp/info-com/NumericalModels/RandomProcess/estimateMCmodel.html&#34;&gt;モンテカルロ法の誤差を考える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これも横着して結果だけを拝借すると， $n=100,000$ で推定を行った場合の値の分布は，中央値を $\pi$，99%信頼区間を $\frac{4.230}{\sqrt{100,000}} = 0.013$ として， $\left[ \pi - 0.013, \pi + 0.013 \right]$ の範囲になるようだ。&lt;/p&gt;

&lt;h2 id=&#34;おまけの追記-正規確率の分布図について&#34;&gt;おまけの追記： 正規確率の分布図について&lt;/h2&gt;

&lt;p&gt;正規確率の分布図（Q-Q プロット）を描くのに毎回 Excel や Calc を使うのもどうかという気がしたので，こちらのプログラム側であらかじめ計算して，結果のプロット・データを &lt;a href=&#34;http://www.gnuplot.info/&#34; title=&#34;gnuplot homepage&#34;&gt;gnuplot&lt;/a&gt; に食わせるよう考えてみる。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;qq&lt;/code&gt; サブコマンドを追加し，この &lt;code&gt;qq&lt;/code&gt; サブコマンド時にデータファイルを読み込んで Q-Q プロットの計算を行うように CLI を変更する。（ついでに他のオプションも整理した）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go qq --help
make Q-Q plot data.

Usage:
  pi qq [data file] [flags]

Global Flags:
  -p, --pcount int   Count of points (default 10000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際の処理部分はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Execute output Q-Q plot data.
func Execute(cxt *Context) error {
	scanner := bufio.NewScanner(cxt.ui.Reader())
	pis := make([]float64, 0)
	for scanner.Scan() {
		pi, err := strconv.ParseFloat(scanner.Text(), 64)
		if err != nil {
			return errors.Wrap(err, &amp;quot;invalid data&amp;quot;)
		}
		pis = append(pis, pi)
	}
    ecf := float64(len(pis))

	sort.Float64s(pis)
	for i, pi := range pis {
		rank := (float64(i+1) - 0.5) / ecf
		cxt.ui.Outputln(fmt.Sprintf(&amp;quot;%v\t%v&amp;quot;, qnorm(rank), pi))
	}

	return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;qnorm()&lt;/code&gt; 関数は標準正規分布に対する累積分布関数の逆関数の値を返すのだが（Excel の &lt;code&gt;NORM.S.INV&lt;/code&gt; 関数相当），&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で書かれた適当なパッケージが見つからなかったので（もしあれば誰か教えて）以下のページのコードを &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用に書き直した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rangevoting.org/Qnorm.html&#34;&gt;RangeVoting.org - Java normal distribution calculator II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際にはこんな感じ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:const&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:const&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//qnorm function refers to http://rangevoting.org/Qnorm.html
// This function is licensed under GNU GPL version 3 or later.
func qnorm(p float64) float64 {
	const (
		split = 0.42
		a0    = 2.50662823884
		a1    = -18.61500062529
		a2    = 41.39119773534
		a3    = -25.44106049637
		b1    = -8.47351093090
		b2    = 23.08336743743
		b3    = -21.06224101826
		b4    = 3.13082909833
		c0    = -2.78718931138
		c1    = -2.29796479134
		c2    = 4.85014127135
		c3    = 2.32121276858
		d1    = 3.54388924762
		d2    = 1.63706781897
	)

	q := p - 0.5
	ppnd := float64(0)
	if math.Abs(q) &amp;lt;= split {
		r := q * q
		ppnd = q * (((a3*r+a2)*r+a1)*r + a0) / ((((b4*r+b3)*r+b2)*r+b1)*r + 1)
	} else {
		r := p
		if q &amp;gt; 0 {
			r = 1 - p
		}
		if r &amp;gt; 0 {
			r = math.Sqrt(-math.Log(r))
			ppnd = (((c3*r+c2)*r+c1)*r + c0) / ((d2*r+d1)*r + 1)
			if q &amp;lt; 0 {
				ppnd = -ppnd
			}
		}
	}
	return ppnd
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では早速動かしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go qq estmt100k.dat &amp;gt; qq100k.dat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成した &lt;code&gt;qq100k.dat&lt;/code&gt; ファイルを &lt;a href=&#34;http://www.gnuplot.info/&#34; title=&#34;gnuplot homepage&#34;&gt;gnuplot&lt;/a&gt; に食わせる。
こんな感じでいいだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gnuplot&amp;gt; unset key
gnuplot&amp;gt; set style line 1 pointsize 0.1 pointtype 7 linecolor rgb &amp;quot;black&amp;quot;
gnuplot&amp;gt; plot &amp;quot;qq100k.dat&amp;quot; linestyle 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果はこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/qq-plot2.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/qq-plot2.png 640w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;p&gt;ついでにこの分布図にフィットする直線 $y=ax+b$ の $a, b$ 値を調べてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gnuplot&amp;gt; f(x)=a*x+b
gnuplot&amp;gt; fit f(x) &amp;quot;qq100k.dat&amp;quot; via a,b
iter      chisq       delta/lim  lambda   a             b            
   0 5.5761271099e+04  0.00e+00 1.00e+00  1.000000e+00  1.000000e+00
   1 6.0252530865e-04 -9.25e+12 1.00e-01  5.277253e-03  3.141418e+00
   2 4.5071534394e-05 -1.24e+06 1.00e-02  5.177775e-03  3.141632e+00
   3 4.5071534393e-05 -1.23e-06 1.00e-03  5.177775e-03  3.141632e+00
iter      chisq       delta/lim  lambda   a             b            

After 3 iterations the fit converged.
final sum of squares of residuals : 4.50715e-005
rel. change during last iteration : -1.23364e-011

degrees of freedom    (FIT_NDF)                        : 9998
rms of residuals      (FIT_STDFIT) = sqrt(WSSR/ndf)    : 6.71421e-005
variance of residuals (reduced chisquare) = WSSR/ndf   : 4.50806e-009

Final set of parameters            Asymptotic Standard Error
=======================            ==========================
a               = 0.00517777       +/- 6.715e-007   (0.01297%)
b               = 3.14163          +/- 6.714e-007   (2.137e-005%)

correlation matrix of the fit parameters:
                a      b      
a               1.000 
b               0.000  1.000 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで $a$ が標準偏差， $b$ が平均値にマッチしている点に注目。
分布図と上の直線を重ねあわせるとこうなる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/qq-plot2b.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/qq-plot2b.png 640w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;

&lt;/figure&gt;

&lt;p&gt;んー。
こんなもんかな。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;code&gt;qq&lt;/code&gt; サブコマンドは，フィルタとしても機能するので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go estmt -e 100 -p 10000 | go run main.go qq &amp;gt; qq.dat
minimum value: 3.09640
maximum value: 3.18600
average value: 3.14158
standard deviation: 0.01654 (68.0%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といった感じにパイプでつなぐこともできる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/iwiwi/items/4c7635d4c84bc785e47a&#34;&gt;gnuplot でヒストグラム（頻度分布図）を描画する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kenmatsu4/items/59605dc745707e8701e0&#34;&gt;【統計学】Q-Qプロットの仕組みをアニメーションで理解する。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dsl4.eee.u-ryukyu.ac.jp/DOCS/gnuplot/node180.html&#34;&gt;簡単な例題&lt;/a&gt;：最小2乗法でデータに曲線や曲面をあてはめる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biwako.shiga-u.ac.jp/sensei/mnaka/ut/normdistinvtab.html&#34;&gt;付表：正規分布表　（ P から z を求める表） - 中川雅央（滋賀大学）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/416jAxVU4NL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34;&gt;数学ガール／乱択アルゴリズム&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ株式会社 2014-02-14&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1D6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ゲーデルの不完全性定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EYXMA9I/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00EYXMA9I.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／式とグラフ&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;工学ガール，リサちゃん登場！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-19&#34;&gt;2015/04/19&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:calc&#34;&gt;Calc でも Excel の関数がそのまま使えるようだ。助かる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:calc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:const&#34;&gt;余談だが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では untyped な定数を設定できる。型が評価されるのは，処理の中でその定数が使われた時点となる。数値の精度も使用時点で評価されるため，定義では大きい桁数の値を設定しても問題ない。（参考： &lt;a href=&#34;http://qiita.com/hkurokawa/items/a4d402d3182dff387674&#34;&gt;Go の定数の話 - Qiita&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:const&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
