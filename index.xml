<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2017-09-23:/</id>
	<updated>2017-09-23T10:27:43+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.27.1</generator>

	
	<entry>
		<title>GnuPG 2.2 に対応した Gpg4win 3.0.0 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/gpg4win-3_0_0-released/" />
		<id>tag:text.Baldanders.info,2017-09-22:/remark/2017/09/gpg4win-3_0_0-released/</id>
		<published>2017-09-22T23:13:02+09:00</published>
		<updated>2017-09-22T23:13:02+09:00</updated>
		<summary>Gpg4win (GNU Privacy Guard for Windows) は GnuPG を含む Windows 用のパッケージ群である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2 に対応した &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; 3.0.0 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2017-September/000073.html&#34;&gt;[Gpg4win-announce] Gpg4win 3.0.0 released&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://files.gpg4win.org/README-3.0.0.en.txt&#34;&gt;README&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gpg4win.org/version3.html&#34;&gt;Gpg4win - Whats new - Version 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; は &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を含む Windows 用のパッケージ群で，以下の製品で構成されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openpgp.org/software/kleopatra/&#34; title=&#34;Kleopatra - OpenPGP&#34;&gt;Kleopatra&lt;/a&gt; 3.0.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/software/gpa/&#34; title=&#34;GPA - The Gnu Privacy Assistant&#34;&gt;GPA&lt;/a&gt; 0.9.9&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.gnupg.org/GpgOL&#34; title=&#34;GpgOL - GnuPG wiki&#34;&gt;GpgOL&lt;/a&gt; 2.0.1&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gpg/gpgex&#34; title=&#34;gpg/gpgex: GnupG extension for the Windows Explorer&#34;&gt;GpgEX&lt;/a&gt; 1.0.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これまで &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; は &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.0.x をベースに製品を提供してきたが，ようやく最新版においついた感じだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://openpgp.org/software/kleopatra/&#34; title=&#34;Kleopatra - OpenPGP&#34;&gt;Kleopatra&lt;/a&gt; は &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の GUI ラッパーで OpenPGP 鍵および X.509 電子証明書の管理を行う。
&lt;a href=&#34;https://www.kde.org/applications/internet/kmail/&#34; title=&#34;KDE - KMail - Mail Client&#34;&gt;KMail&lt;/a&gt; と連動してメールの暗号化や復号を行うこともできるが Windows 用の &lt;a href=&#34;https://www.kde.org/applications/internet/kmail/&#34; title=&#34;KDE - KMail - Mail Client&#34;&gt;KMail&lt;/a&gt; は同梱されていない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/software/gpa/&#34; title=&#34;GPA - The Gnu Privacy Assistant&#34;&gt;GPA&lt;/a&gt; も同じく GUI ラッパーで，暗号化や復号を行うことができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.gnupg.org/GpgOL&#34; title=&#34;GpgOL - GnuPG wiki&#34;&gt;GpgOL&lt;/a&gt; は Microsoft Outlook 用の拡張機能で，Outlook 上で OpenPGP/MIME および S/MIME フォーマットによるメールの暗号化や復号を行うことができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gpg/gpgex&#34; title=&#34;gpg/gpgex: GnupG extension for the Windows Explorer&#34;&gt;GpgEX&lt;/a&gt; は Windows Explorer の拡張機能で， Explorer 上からファイルの暗号化や復号を行うことができる。
個人的に &lt;a href=&#34;https://github.com/gpg/gpgex&#34; title=&#34;gpg/gpgex: GnupG extension for the Windows Explorer&#34;&gt;GpgEX&lt;/a&gt; はかなり使い勝手がいいのでお勧めである。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; 以外で Windows 用で動作する製品は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メールの暗号化や復号については &lt;a href=&#34;https://www.mozilla.org/thunderbird/&#34;&gt;Thunderbird&lt;/a&gt;＋&lt;a href=&#34;https://addons.mozilla.org/thunderbird/addon/enigmail/&#34;&gt;Enigmail&lt;/a&gt; でも行うことができる&lt;/li&gt;
&lt;li&gt;Gmail や Outlook.com といった Web メール用に &lt;a href=&#34;https://www.mailvelope.com/&#34;&gt;Mailvelope&lt;/a&gt; という製品がある。こちらは &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; ではなく &lt;a href=&#34;https://openpgpjs.org/&#34; title=&#34;OpenPGP.js | OpenPGP JavaScript Implementation&#34;&gt;OpenPGP.js&lt;/a&gt; を使っている。 Chrome や Firefox の拡張機能として機能し，メールの暗号化や復号を行う。 Google も Chrome 拡張として &lt;a href=&#34;https://github.com/e2email-org/e2email&#34; title=&#34;e2email-org/e2email: E2EMail is a simple Chrome application - a Gmail client that exchanges OpenPGP mail.&#34;&gt;E2EMail&lt;/a&gt; を公開しているが &lt;a href=&#34;https://www.mailvelope.com/&#34;&gt;Mailvelope&lt;/a&gt; のほうが先んじている印象だ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt; は commit への電子署名に内部で &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を呼び出す（「&lt;a href=&#34;http://text.baldanders.info/remark/2016/04/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;」を参照）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とまぁ，地味ながら Windows でも &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は活躍してますよ，ということで。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35097359/&#34;&gt;グーグルのメール暗号化Chromeアプリケーション「E2EMail」がオープンソースに - ZDNet Japan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/&#34;&gt;GnuPG Modern Version for Windows ― インストール編&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-2/&#34;&gt;GnuPG Modern Version for Windows ― gpg-agent について&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/sequence-diagram/" />
		<id>tag:text.Baldanders.info,2017-09-21:/remark/2017/09/sequence-diagram/</id>
		<published>2017-09-21T16:54:32+09:00</published>
		<updated>2017-09-21T20:41:52+09:00</updated>
		<summary>久しぶりに本ブログをいじくって mermaid でシーケンス図を描けるようにしてみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;久しぶりに&lt;a href=&#34;http://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;本ブログ&lt;/a&gt;をいじくって &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; でシーケンス図を描けるようにしてみる。&lt;/p&gt;

&lt;h2 id=&#34;シーケンス図とは&#34;&gt;シーケンス図とは&lt;/h2&gt;

&lt;p&gt;一応説明しておくと，シーケンス図というのは複数の「もの」の間でのやり取りを時系列で表現したものである。
「もの」は相互作用するものなら何でもよく，以下のような会話も表現できる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    カバ-&gt;&gt;+カバン: あなた，泳げまして？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: 空は飛べるんですの？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: じゃあ，足が速いとか？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&gt;&gt;カバン: ううっ
    end
&lt;/div&gt;
&lt;figcaption&gt;カバとカバン&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;縦のラインを「ライフライン&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ll&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ll&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」と呼び（上から下に時間が流れる），横向きの矢印を「メッセージ」と呼ぶ。
“loop” で囲まれている部分は「複合フラグメント」と呼ばれるもので，シーケンス内の処理のかたまりを指す。
“loop” は文字通り繰り返し処理のこと。
カバンはカバに「何もできない」と言われて悶々としてしまったわけですね（笑）&lt;/p&gt;

&lt;p&gt;シーケンス図はオブジェクト指向設計ではとても重宝されている。
クラス間の相互作用を記述するだけじゃなくて，要件定義で「登場人物（人間とは限らない）」の関係を記述するのにも使われる（もちろん UML で使われる図はシーケンス図だけじゃないけどね）。&lt;/p&gt;

&lt;p&gt;ただ，これを手描きで作図するのは結構面倒くさい（図を描きながら試行錯誤するし）。
企業向けなら &lt;a href=&#34;http://astah.change-vision.com/&#34; title=&#34;astah システム設計、ソフトウェア開発支援ツール | Astah&#34;&gt;Astah*&lt;/a&gt; のような開発支援ツールを使う手もあるけれど，個人では手にあまるものだし，どうせ描くならテキスト入力でサクッとやりたいよね。&lt;/p&gt;

&lt;h2 id=&#34;mermaid-記法と-mermaid-js&#34;&gt;Mermaid 記法と  mermaid.js&lt;/h2&gt;

&lt;p&gt;そうした需要に応えてくれるのが &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/knsv/mermaid&#34;&gt;knsv/mermaid: Generation of diagram and flowchart from text in a similar manner as markdown&lt;/a&gt; ： こちらのドキュメントのほうが詳しい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば，先程の「カバとカバン」のやり取りは  &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で以下のように表せる。
直感的で分かりやすいでしょ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sd1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:sd1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sequenceDiagram
    カバ-&amp;gt;&amp;gt;+カバン: あなた、泳げまして？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: 空は飛べるんですの？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: じゃあ、足が速いとか？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;カバン: あなた、何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&amp;gt;&amp;gt;カバン: ううっ
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この記述をもとに Web ページ上で描画を行うには mermaid.js を使う。&lt;/p&gt;

&lt;h3 id=&#34;mermaid-js-の設定&#34;&gt;mermaid.js の設定&lt;/h3&gt;

&lt;p&gt;まず mermaid.js のセットアップは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/mermaid/dist/mermaid.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  mermaid.initialize({startOnLoad: true, theme: &#39;neutral&#39;});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この記述を HTML の末尾（&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; タグの直前）に記述する。&lt;/p&gt;

&lt;p&gt;mermaid.js は &lt;a href=&#34;https://unpkg.com/mermaid/&#34;&gt;CDN (Content Delivery Network) が用意されている&lt;/a&gt;ので利用することをお勧めする。
バージョンを指定する場合は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unpkg.com/mermaid@7.1.0/dist/mermaid.min.js&#34;&gt;https://unpkg.com/mermaid@7.1.0/dist/mermaid.min.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のように記述する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mermaid.initialize()&lt;/code&gt; 関数は初期化と描画を行う。
ページロード時に描画を行う場合は &lt;code&gt;startOnLoad&lt;/code&gt; を true にする。
また &lt;code&gt;theme&lt;/code&gt; は今（v7.1.0）のところ以下の4つが用意されている。
お好みでどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;neutral&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに mermaid.js に記述部分を認識させるために &lt;code&gt;&amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;&lt;/code&gt; で囲む。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;gt;
sequenceDiagram
    カバ-&amp;gt;&amp;gt;+カバン: あなた、泳げまして？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: 空は飛べるんですの？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: じゃあ、足が速いとか？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;カバン: あなた、何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&amp;gt;&amp;gt;カバン: ううっ
    end
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで最初に挙げたシーケンス図を描画してくれる。&lt;/p&gt;

&lt;h3 id=&#34;hugo-用の-shortcode&#34;&gt;Hugo 用の shortcode&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo | A Fast and Flexible Website Generator&#34;&gt;Hugo&lt;/a&gt; 用に &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/blob/master/layouts/shortcodes/fig-mermaid.html&#34;&gt;shortcode を作ってみた&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&amp;gt;
&amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;gt;{{ .Inner }}&amp;lt;/div&amp;gt;
{{ if .Get &amp;quot;title&amp;quot;}}&amp;lt;figcaption&amp;gt;{{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}{{ .Get &amp;quot;title&amp;quot; }}{{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/figcaption&amp;gt;{{ end }}
&amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この shortcode を使うなら以下のように記述すればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{{&amp;lt; fig-mermaid title=&amp;quot;カバとカバン&amp;quot; &amp;gt;}}
sequenceDiagram
    カバ-&amp;gt;&amp;gt;+カバン: あなた，泳げまして？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: 空は飛べるんですの？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: じゃあ，足が速いとか？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&amp;gt;&amp;gt;カバン: ううっ
    end
{{&amp;lt; /fig-mermaid &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo | A Fast and Flexible Website Generator&#34;&gt;Hugo&lt;/a&gt; を使っておられる方は参考にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;複雑な関係を分かりやすくする&#34;&gt;複雑な関係を分かりやすくする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;本ブログ&lt;/a&gt;にシーケンス図を組み込もうと思ったのは徳島県のチケット売買詐欺事件のシーケンスが分かりにくかったからだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20170910/1505065248&#34;&gt;徳島県警察の誤認逮捕事件についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で，リンク先の図を元にしてシーケンス図を起こしてみたのがこれ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    participant A as 愛知県女性A
    participant Tw as Twitter
    participant B as 京都女子中学生B
    participant C as 徳島県女子高生C
    participant D as 和歌山県女性D
    participant Tk as チケット売買サイト
    participant E as 関東女性E
    A-&gt;&gt;Tw: チケット売ります
    C-&gt;&gt;Tw: 購入希望
    D-&gt;&gt;Tw: 購入希望
    B-&gt;&gt;+Tw: 
    Tw--&gt;&gt;-B: A,B,Cのやり取りを発見
    B-&gt;&gt;+A: 売買交渉：8万円で購入希望
    B-&gt;&gt;+C: Aとして売買交渉：Aの口座に4万円送金指示
    B-&gt;&gt;+D: Aとして売買交渉：Aの口座に4万円送金指示
    B-&gt;&gt;+Tk: A名義でチケット出品
    C--&gt;&gt;-A: 4万円振込
    D--&gt;&gt;-A: 4万円振込
    E-&gt;&gt;Tk: 6万5千円で落札，送金
    B-&gt;&gt;A: 送付先をEの住所へ指示
    A--&gt;&gt;-E: チケット送付
    Tk--&gt;&gt;-B: 約6万円入金
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20170910/1505065248&#34;&gt;「[徳島県警察の誤認逮捕事件についてまとめてみた」より&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法ではこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;sequenceDiagram
    participant A as 愛知県女性A
    participant Tw as Twitter
    participant B as 京都女子中学生B
    participant C as 徳島県女子高生C
    participant D as 和歌山県女性D
    participant Tk as チケット売買サイト
    participant E as 関東女性E
    A-&amp;gt;&amp;gt;Tw: チケット売ります
    C-&amp;gt;&amp;gt;Tw: 購入希望
    D-&amp;gt;&amp;gt;Tw: 購入希望
    B-&amp;gt;&amp;gt;+Tw: 
    Tw--&amp;gt;&amp;gt;-B: A,B,Cのやり取りを発見
    B-&amp;gt;&amp;gt;+A: 売買交渉：8万円で購入希望
    B-&amp;gt;&amp;gt;+C: Aとして売買交渉：Aの口座に4万円送金指示
    B-&amp;gt;&amp;gt;+D: Aとして売買交渉：Aの口座に4万円送金指示
    B-&amp;gt;&amp;gt;+Tk: A名義でチケット出品
    C--&amp;gt;&amp;gt;-A: 4万円振込
    D--&amp;gt;&amp;gt;-A: 4万円振込
    E-&amp;gt;&amp;gt;Tk: 6万5千円で落札，送金
    B-&amp;gt;&amp;gt;A: 送付先をEの住所へ指示
    A--&amp;gt;&amp;gt;-E: チケット送付
    Tk--&amp;gt;&amp;gt;-B: 約6万円入金
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし，改めて見るとホンマ凄いよねぇ。
これを本当に一人で考えて実行したのならちょとした天才かもしれん。&lt;/p&gt;

&lt;h2 id=&#34;シーケンス図以外の図も描けるよ&#34;&gt;シーケンス図以外の図も描けるよ&lt;/h2&gt;

&lt;p&gt;さて，今（v7.1.0）のところ  &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法および mermaid.js は以下の図をサポートしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フローチャート&lt;/li&gt;
&lt;li&gt;シーケンス図&lt;/li&gt;
&lt;li&gt;ガント図&lt;/li&gt;
&lt;li&gt;クラス図（experimental）&lt;/li&gt;
&lt;li&gt;Git グラフ（experimental）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば，クラス図は以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;classDiagram
    friends&amp;lt;|--serval
    friends&amp;lt;|--raccoon
    friends&amp;lt;|--fennec
    serval : +Waai()
    raccoon : +Omakase-nanoda()
    fennec : +Haiyo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを mermaid.js で描画すると以下のようになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    friends&lt;|--serval
    friends&lt;|--raccoon
    friends&lt;|--fennec
    serval : +Waai()
    raccoon : +Omakase-nanoda()
    fennec : +Haiyo()
&lt;/div&gt;
&lt;figcaption&gt;フレンズ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;んー。
クラス図を描くなら多重度は必須なんだがなぁ（たとえば多対多の関係は実装できないため「設計が間違っている」と断言できる）。
これに関しては「これからに期待」といったところか。&lt;/p&gt;

&lt;h2 id=&#34;考えながら描く&#34;&gt;考えながら描く&lt;/h2&gt;

&lt;p&gt;クラス図やシーケンス図といったものは試行錯誤しながら描いていくものなので，切ったり貼ったりあるいは結合を変えたりといったことが簡単にできないと意味がない。
したがって，とにかく記述が簡単で見た目が直感的であるというのが大事になってくるわけだ，多少は機能を落としてでも。&lt;/p&gt;

&lt;p&gt;そういう意味で &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; はバランスのいい製品と言える。
まぁ，&lt;a href=&#34;http://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;本ブログ&lt;/a&gt;では頻繁に使うものではないかもしれないが，使える道具はあるに越したことはないだろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/sequence.html&#34;&gt;シーケンス図(Sequence Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/class.html&#34;&gt;クラス図(Class Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/rana_kualu/items/da394fd33ce019bf0ba7&#34;&gt;簡単にガントチャートとかクラス図とか書けるやつ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ririli/items/64320ed2918b1982f89d&#34;&gt;ちょっとしたシーケンス図を書くのにatom-mermaidが便利すぎる話 - Qiita&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.tonyballantyne.com/graphs.html&#34;&gt;Drawing Graphs using Dot and Graphviz&lt;/a&gt; : 図にこだわるのであれば &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の DOT 言語を使う手もある&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/rubytomato@github/items/51779135bc4b77c8c20d&#34;&gt;Graphvizとdot言語でグラフを描く方法のまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/04/hackmd/&#34;&gt;エディタ以上ワープロ未満の HackMD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ll&#34;&gt;UML 的にはライフラインは破線じゃないといけないのだけど，どういうわけか &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; では実線になっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ll&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sd1&#34;&gt;複合フラグメントは loop 以外には alt, opt, par のみサポートされているようだ。個人的には ref と  critical （par があるなら critical は必要）くらいは入れて欲しいところであるが&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG 2.2.1 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/gnupg-2_2_1-released/" />
		<id>tag:text.Baldanders.info,2017-09-20:/remark/2017/09/gnupg-2_2_1-released/</id>
		<published>2017-09-20T10:46:45+09:00</published>
		<updated>2017-09-20T10:46:45+09:00</updated>
		<summary>今回はセキュリティ・アップデートはなし。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.1 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q3/000415.html&#34;&gt;[Announce] GnuPG 2.2.1 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はセキュリティ・アップデートはなし。
主な修正点は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: Fix formatting of the user id in batch mode key generation if only &amp;ldquo;name-email&amp;rdquo; is given.&lt;/li&gt;
&lt;li&gt;gpgv: Fix annoying &amp;ldquo;not suitable for&amp;rdquo; warnings.&lt;/li&gt;
&lt;li&gt;wks: Convey only the newest user id to the provider.  This is the case if different names are used with the same addr-spec.&lt;/li&gt;
&lt;li&gt;wks: Create a complying user id for provider policy mailbox-only.&lt;/li&gt;
&lt;li&gt;wks: Add workaround for &lt;a href=&#34;https://posteo.de/&#34; title=&#34;Email green, secure, simple and ad-free - posteo.de -&#34;&gt;posteo.de&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;scd: Fix the use of large ECC keys with an OpenPGP card.&lt;/li&gt;
&lt;li&gt;dirmngr: Use system provided root certificates if no specific HKP certificates are configured.  If build with GNUTLS, this was already the case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最新版をインストールすると以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.1
libgcrypt 1.8.1
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Gzip 操作について覚え書き - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/gzip-operation/" />
		<id>tag:text.Baldanders.info,2017-09-19:/golang/gzip-operation/</id>
		<published>2017-09-19T17:31:49+09:00</published>
		<updated>2017-09-22T16:37:42+09:00</updated>
		<summary>このようにインスタンスの生存期間を意識することで Go 言語の得意なパターンに嵌めることが容易になる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ta_ta_ta_miya/items/3a1cba3a13418b732811&#34;&gt;gzip のやり方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事を見て「んん？」となったので，覚え書きとして &lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34; title=&#34;gzip - The Go Programming Language&#34;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; パッケージについて紹介する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/ta_ta_ta_miya/items/3a1cba3a13418b732811&#34; title=&#34;gzip のやり方 - Qiita&#34;&gt;リンク先の記事&lt;/a&gt;で挙げられているコードは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func makeGzip(body string) []byte {
  var b bytes.Buffer
  gw := gzip.NewWriter(&amp;amp;b)
  _, err := gw.Write([]byte(body)); if err != nil {
    ...
  }
  gw.Flush()
  gw.Close()
  return b.Bytes()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで &lt;code&gt;gw.Close()&lt;/code&gt; 関数を &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;defer&lt;/a&gt; 指定すると返ってくるバイト列が不完全なデータになってしまう，という話。
これは，&lt;a href=&#34;http://qiita.com/ta_ta_ta_miya/items/3a1cba3a13418b732811&#34; title=&#34;gzip のやり方 - Qiita&#34;&gt;リンク先の記事&lt;/a&gt;で指摘されている通り， &lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34; title=&#34;gzip - The Go Programming Language&#34;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Writer.Close()&lt;/code&gt; 関数で gzip のフッタデータをフラッシュしているからである。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Close closes the Writer by flushing any unwritten data to the underlying io.Writer and writing the GZIP footer. It does not close the underlying io.Writer.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34;&gt;gzip - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;つまり &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;defer&lt;/a&gt; で指定した関数は return 後に駆動するため &lt;code&gt;b.Bytes()&lt;/code&gt; 関数を呼び出した時点ではまだ不完全なデータということになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ここでちょっと考える。&lt;/p&gt;

&lt;p&gt;関数の再利用性を考えるのなら，関数内でバッファを生成してバッファ処理の結果を返すのはあまり筋がよろしくない。
また圧縮データを書き込む先はメモリバッファじゃなくてファイルかもしれない。&lt;/p&gt;

&lt;p&gt;ゆえに関数をこう書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func makeGzip(dst io.Writer, content []byte) error {
	zw, err := gzip.NewWriterLevel(dst, gzip.BestCompression)
	if err != nil {
		return err
	}
	defer zw.Close()

	if _, err := zw.Write(content); err != nil {
		return err
	}
	return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり圧縮データの書き込み先である &lt;code&gt;Writer&lt;/code&gt; を引数で指定するのである。
これなら生成した &lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34; title=&#34;gzip - The Go Programming Language&#34;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Writer.Close()&lt;/code&gt; 関数を問題なく &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;defer&lt;/a&gt; で指定できる。&lt;/p&gt;

&lt;p&gt;これを踏まえて完全なコードは以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;compress/gzip&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
)

func makeGzip(dst io.Writer, content []byte) error {
	zw, err := gzip.NewWriterLevel(dst, gzip.BestCompression)
	if err != nil {
		return err
	}
	defer zw.Close()

	if _, err := zw.Write(content); err != nil {
		return err
	}
	return nil
}

func main() {
	content := []byte(&amp;quot;Hello world\n&amp;quot;)

	file, err := os.Create(&amp;quot;test.txt.gz&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	defer file.Close()

	if err := makeGzip(file, content); err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコードでは圧縮データの書き込む先をファイルにしている。
もちろん書き込み先を &lt;a href=&#34;https://golang.org/pkg/bytes/&#34; title=&#34;bytes - The Go Programming Language&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Buffer&lt;/code&gt; に置き換えることもできる。
このようにインスタンスの生存期間を意識することで &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の得意なパターンに嵌めることが容易になる。&lt;/p&gt;

&lt;p&gt;ついでに対となる読み込み処理のコードも示しておこう。
ここでは復元したデータを標準出力に直接出力している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;compress/gzip&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
)

func readGzip(dst io.Writer, src io.Reader) error {
	zr, err := gzip.NewReader(src)
	if err != nil {
		return err
	}
	defer zr.Close()

	io.Copy(dst, zr)

	return nil
}

func main() {
	file, err := os.Open(&amp;quot;test.txt.gz&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	defer file.Close()

	if err := readGzip(os.Stdout, file); err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ところで，ファイル操作では生のデータを直接 gzip 圧縮するシチュエーションは少なく，大抵は tar と組み合わせることになる。
そこで tar と組み合わせ，指定フォルダ直下の複数ファイルを gzip 圧縮するコードも以下に示しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;archive/tar&amp;quot;
	&amp;quot;compress/gzip&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;path/filepath&amp;quot;
)

func makeTarGzip(dst io.Writer, rt string) error {
	zw, err := gzip.NewWriterLevel(dst, gzip.BestCompression)
	if err != nil {
		return err
	}
	defer zw.Close()

	tw := tar.NewWriter(zw)
	defer tw.Close()

	filepath.Walk(rt, func(path string, info os.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}
		fmt.Println(path)

		hd, e := tar.FileInfoHeader(info, &amp;quot;&amp;quot;)
		if e != nil {
			return e
		}
		content, e := ioutil.ReadFile(path)
		if e != nil {
			return e
		}

		if e := tw.WriteHeader(hd); e != nil {
			return e
		}
		if _, e := tw.Write(content); e != nil {
			return e
		}
		return nil
	})
	if err != nil {
		return err
	}

	return nil
}

func main() {
	file, err := os.Create(&amp;quot;test.tar.gz&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	defer file.Close()

	if err := makeTarGzip(file, &amp;quot;./&amp;quot;); err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;追記-別解あります&#34;&gt;【追記】別解あります&lt;/h2&gt;

&lt;p&gt;実は最初の &lt;code&gt;makeGzip()&lt;/code&gt; には別解がある。
要するに &lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34; title=&#34;gzip - The Go Programming Language&#34;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; 処理部分を関数スコープで囲ってしまえばいいのだ。
実際にはこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func makeGzip(body []byte) ([]byte, error) {
	var b bytes.Buffer
	err := func() error {
		gw := gzip.NewWriter(&amp;amp;b)
		defer gw.Close()

		if _, err := gw.Write(body); err != nil {
			return err
		}
		return nil
	}()
	return b.Bytes(), err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完全なコードはこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;compress/gzip&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
)

func makeGzip(body []byte) ([]byte, error) {
	var b bytes.Buffer
	err := func() error {
		gw := gzip.NewWriter(&amp;amp;b)
		defer gw.Close()

		if _, err := gw.Write(body); err != nil {
			return err
		}
		return nil
	}()
	return b.Bytes(), err
}

func main() {
	content := []byte(&amp;quot;Hello world\n&amp;quot;)

	file, err := os.Create(&amp;quot;test.txt.gz&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	defer file.Close()

	z, err := makeGzip(content)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}

	if _, err := file.Write(z); err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように（&lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;defer&lt;/a&gt; を含む）一連の処理を関数スコープで囲うやり方は，条件分岐や繰り返し処理の中で役に立つこともあるだろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kroton/items/431e6dad9e5e4dbc44cf&#34;&gt;「連結されたgzipを1行ずつ見る」をgolangでやったらハマった - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20151212021608.htm&#34;&gt;Big Sky :: golang では for ループの中で defer してはいけない。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b1&#34;&gt;この挙動から分かるとおり， &lt;a href=&#34;https://golang.org/pkg/bytes/&#34; title=&#34;bytes - The Go Programming Language&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Buffer.Bytes()&lt;/code&gt; 関数は，バッファの内容をそのまま返しているのではなく，内容のコピーを返している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『シンギュラリティの神話』を読む - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/the-myth-of-the-singularity/" />
		<id>tag:text.Baldanders.info,2017-09-18:/remark/2017/09/the-myth-of-the-singularity/</id>
		<published>2017-09-18T21:45:03+09:00</published>
		<updated>2017-09-20T15:40:36+09:00</updated>
		<summary>もし『そろそろ、人工知能の真実を話そう』が日本の読者になにがしかの衝撃を与えるとするなら，自らの稚拙さの方だろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（この記事は「&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/artificial-intelligence/&#34;&gt;AI と哲学？&lt;/a&gt;」の続編である）&lt;/p&gt;

&lt;p&gt;『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』読んだ。
めっさ疲れた。
疲労感つか徒労感？ が半端ない。&lt;/p&gt;

&lt;p&gt;原書のタイトルは “Le mythe de la Singularité&amp;rdquo; であり， Google 先生の力を借りて訳すなら「シンギュラリティの神話」といったところだろうか。
なんで翻訳本ってタイトルのセンスが壊滅してるんだろうねぇ。
まぁ副題が “Faut-il craindre l&amp;rsquo;intelligence artificielle ?&amp;rdquo; なので人工知能の話がメインになると言えなくもないけど，実際には人工知能に限る話ではないのだ。&lt;/p&gt;

&lt;p&gt;『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』は8章からなる本文と東京大学名誉教授の西垣通さんによる解説で構成されているが，作者の主張は一貫していて&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;シンギュラリティの提唱者が主張するような断絶が起こることを証明するものは何もない。
おそらく、これからも進歩は加速し続け、その大きな渦でわれわれを飲みこもうとするだろう。
しかし、その現実に目をふさいでしまうのではなく、行動することこそが求められている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;というものである。&lt;/p&gt;

&lt;p&gt;しかし，この主張の前準備のために延々7章を費やしているのである。
ちなみに7章まで読んだ私の感想は「呆れてものが言えない」だった。
あぁ，誤解のないように言っておくと作者のロジックや文章が酷いという意味じゃないからね（翻訳の妥当性は私には分からないけど）。&lt;/p&gt;

&lt;p&gt;本当に面白いのは8章と解説なのだが，8章に出てくる用語をきちんと理解するには7章までを読み込んでおかなければならない。
実に面倒くさい構成である。
これだから哲学者ってやつは&amp;hellip;&lt;/p&gt;

&lt;p&gt;というわけで，以降では『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』に登場する用語についていくつか紹介してみたいと思う。
これらを踏まえて読めば多少は理解が進むかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;用語について&#34;&gt;用語について&lt;/h2&gt;

&lt;h3 id=&#34;シンギュラリティ-singularity&#34;&gt;シンギュラリティ（Singularity）&lt;/h3&gt;

&lt;p&gt;タイトルにも出てくる「シンギュラリティ」という言葉だが，これはもともと数学用語らしい。
そののち科学の分野でも使われるようになったようだ。
例えばビッグバンやブラックホールは古典物理学が破綻する「特異点（singularity）」である。&lt;/p&gt;

&lt;p&gt;この「シンギュラリティ」の概念を人文科学（言語学や認識論など）の分野に取り入れようという動きが1970年代にあり，それが今回のメインテーマである「シンギュラリティ仮説」の下地になっているように見える。&lt;/p&gt;

&lt;p&gt;ちなみに「シンギュラリティ仮説」とは以下のような内容である（「解説」より）。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;シンギュラリティ仮説とは、二〇四五年あたりに AI の能力が人間を凌ぎ、機械支配が進んで世界のありさまが大きく変容してしまうという予測だ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;AI の能力が人間を凌ぐ2045年が「特異点」というわけだ。&lt;/p&gt;

&lt;p&gt;『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』を読んでて「この流れって既視感があるなぁ」と思ったが，よく考えたらこれって「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%BC%E3%82%AB%E3%83%AB%E4%BA%8B%E4%BB%B6&#34; title=&#34;ソーカル事件 - Wikipedia&#34;&gt;ソーカル事件&lt;/a&gt;」ぢゃん。&lt;/p&gt;

&lt;h3 id=&#34;ムーアの法則&#34;&gt;ムーアの法則&lt;/h3&gt;

&lt;p&gt;いや，もう，いまさら&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34; title=&#34;ムーアの法則 - Wikipedia&#34;&gt;ムーアの法則&lt;/a&gt;に言及するのは止めてほしいのだが，この&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34; title=&#34;ムーアの法則 - Wikipedia&#34;&gt;ムーアの法則&lt;/a&gt;が「シンギュラリティ仮説」の屋台骨のひとつになっているというのだから笑ってしまう。&lt;/p&gt;

&lt;p&gt;ちなみに元々の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34; title=&#34;ムーアの法則 - Wikipedia&#34;&gt;ムーアの法則&lt;/a&gt;は以下の文章から来ている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;部品あたりのコストが最小になるような複雑さは、毎年およそ2倍の割合で増大してきた。短期的には、この増加率が上昇しないまでも、現状を維持することは確実である。
より長期的には、増加率はやや不確実であるとはいえ、少なくとも今後10年間ほぼ一定の率を保てないと信ずべき理由は無い。
すなわち、1975年までには、最小コストで得られる集積回路の部品数は65,000に達するであろう。
私は、それほどにも大規模な回路が1個のウェハー上に構築できるようになると信じている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34;&gt;Cramming more components onto integrated circuits （和訳は Wikipedia より）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34; title=&#34;ムーアの法則 - Wikipedia&#34;&gt;ムーアの法則&lt;/a&gt;はゴードン・ムーア氏が1965年の論文で述べたもので，1975年までの短期的予測を述べたものに過ぎない。
なのに，たまたまその後も半導体部品の集積度が&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34; title=&#34;ムーアの法則 - Wikipedia&#34;&gt;ムーアの法則&lt;/a&gt;に追従するように進歩していったため，ほとんど御神託のようになってしまった。&lt;/p&gt;

&lt;p&gt;しかし，元々の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34; title=&#34;ムーアの法則 - Wikipedia&#34;&gt;ムーアの法則&lt;/a&gt;は今世紀早々に破綻しているのだ。
その後は微妙に解釈を変えて如何にも&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A0%E3%83%BC%E3%82%A2%E3%81%AE%E6%B3%95%E5%89%87&#34; title=&#34;ムーアの法則 - Wikipedia&#34;&gt;ムーアの法則&lt;/a&gt;に追従しているように見せかけているが，はっきり言って「粉飾決算」である。&lt;/p&gt;

&lt;h3 id=&#34;自立と自律&#34;&gt;自立と自律&lt;/h3&gt;

&lt;p&gt;いやぁ。
私は「自立」と「自律」について曖昧にしていたよ。
これからは気をつけよう。&lt;/p&gt;

&lt;p&gt;両者の違いは以下のようなものらしい。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;自立とは、仮想代理人ソフトウェアであるところのエージェントが自ら動き、誰の力も借りずに意思決定できることを言う。
[...]
一方、自律というのは哲学的な意味であり、自らが行動する際の基準と目的を明確を持ち、自ら規範を作り出すことができることをいう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この定義によれば，現在この世界に「自律機械」は存在しないし，現在の延長線上の未来においても「自律機械」は登場しそうもない。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;今、世の中で懸念されているのは、自立ではなく自律の方だが、学習能力を与えられ、自らのプログラムを改善できるようになっても、機械が自律することは考えられない。
なぜなら、機械は結局、人間に与えられた理論やルールにのっとって行動することになるからである。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;そのとーり！ （by 財津一郎）&lt;/p&gt;

&lt;h3 id=&#34;強い人工知能-と-弱い人工知能&#34;&gt;「強い人工知能」と「弱い人工知能」&lt;/h3&gt;

&lt;p&gt;「人工知能（artificial intelligence）」という言葉が登場したのは1955年のことらしい。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;若干はSFの世界に影響されていたかもしれないが、マッカーシーらの狙いは謙虚なものだった。
創造主に成りかわるつもりはなく、人間のコピーや超人を創り出そうというのでもない。
彼等の目的は、あくまでも実証的で現実的なものだった。
動物の知能であれ人間の知能であれ、認知機能を機械で模倣することで知能をもっとよく理解したいと考えたのだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;しかし，ここでも哲学者共が横槍を入れる。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;哲学者が問題にしたのは、実際に研究者やエンジニアが取り組んでいる研究活動というより、その向こうにある哲学的な思想だった。
サールが強い人工知能という言葉を説明の道具として使ったのは、一九八〇年代の初頭だった。
この強い人工知能こそが、先程定義した人工知能の仮像である。
なぜなら、強い人工知能とそもそもの意味での人工知能は、名前の上では似通っていても、目標も方法もまったく異なるものだからだ。
かつて、コンピュータでシミュレーションを行ない、実験によって検証することに基礎を置いた科学の一分野であったものが、今では論証だけに基づいた哲学的アプローチとなっている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;こうした「脱線」が「シンギュラリティ仮説」の下地になっているのだから，笑うしかない。&lt;/p&gt;

&lt;p&gt;ちなみにサールが唱えた「強い人工知能」は「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E8%AA%9E%E3%81%AE%E9%83%A8%E5%B1%8B&#34; title=&#34;中国語の部屋 - Wikipedia&#34;&gt;中国語の部屋&lt;/a&gt;」に登場する。&lt;/p&gt;

&lt;h4 id=&#34;中国語の部屋&#34;&gt;中国語の部屋&lt;/h4&gt;

&lt;p&gt;「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E8%AA%9E%E3%81%AE%E9%83%A8%E5%B1%8B&#34; title=&#34;中国語の部屋 - Wikipedia&#34;&gt;中国語の部屋&lt;/a&gt;」は人工知能を模した思考実験の論文だが，ほぼ同じ機能を持つプログラムは既に存在する。
「人工無脳」（現在はチャットボット（chatbot）などと呼ばれている）である。&lt;/p&gt;

&lt;p&gt;人工無脳は相手と擬似的なコミュニケーションを行うが，人工無脳はそのやり取りの意味を知っているわけではない。
入力に対して何らかのアルゴリズムを介し，バックエンドにある語彙を組み合わせて応答を返しているだけである。
これを以って人工無脳がそのやり取りを「理解」していると言えるか，というのが「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E8%AA%9E%E3%81%AE%E9%83%A8%E5%B1%8B&#34; title=&#34;中国語の部屋 - Wikipedia&#34;&gt;中国語の部屋&lt;/a&gt;」の命題である。&lt;/p&gt;

&lt;h3 id=&#34;可能性-蓋然性-信憑性&#34;&gt;可能性、蓋然性、信憑性&lt;/h3&gt;

&lt;p&gt;これも『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』では重要な言葉である。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;近頃は、われわれを翻弄するような科学的な言い回しが非常に多く、未来に対して異なるアプローチをとる三つの概念がよく混同されている。すなわち、可能性（possibilité）、蓋然性（probabilité）、信憑性（plausibilité）―― この三つが区別されていないために混乱が生じているのである。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;信憑性についてはもう少し説明が必要だろう。&lt;/p&gt;

&lt;p&gt;plausibilité (plausibility) の意味を Google 先生に訊くと「&lt;ruby&gt;&lt;rb&gt;尤度&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;ゆうど&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」と答えが返ってきた。
尤度とは統計学の用語らしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kenmatsu4/items/b28d1b3b3d291d0cc698&#34;&gt;【統計学】尤度って何？をグラフィカルに説明してみる。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただし，この本では「信憑性（plausibilité）」をそのような意味では使ってなくて，語源に近いニュアンスで&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;つまりそれは一般受けが良く、多くの人が起こると思っているということだ。だが、実際には可能性も蓋然性も保証されていない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;という感じで使っている。
要するに「シンギュラリティ仮説」には可能性も蓋然性もなく，ただ根拠のない信憑性のみで強引に推し進められているというわけだ。&lt;/p&gt;

&lt;h3 id=&#34;仮像-pseudomorphose&#34;&gt;仮像（Pseudomorphose）&lt;/h3&gt;

&lt;p&gt;これまでの記述でも度々出てきたが，「仮像」というのは『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』では最重要の言葉である。&lt;/p&gt;

&lt;p&gt;もともと「仮像」は科学用語で，たとえば鉱物が外形を保ったままで別の鉱物に置換されることを指したりするらしい。
そういや化石も仮像の一種だよね。&lt;/p&gt;

&lt;p&gt;この本ではこの「仮像」をもっと広い範囲に拡張する。
たとえば，「強い人工知能」は「弱い人工知能（＝そもそもの意味での人工知能）」の仮像である，といった具合にだ。
そして「シンギュラリティ仮説」を巡る言説を，仮像をキーワードにしてグノーシス主義と比較し，「シンギュラリティ仮説」の問題点を炙りだしている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;結局、このシンギュラリティ自身も啓蒙主義におけるヒューマニズムの仮像なのだ。
[...]
啓蒙主義には、ヒューマニズムの名のもとに進歩を限りなく続けていこうという理想がある。
そして、そのためには外の世界へ自らを無限に開放していかなければならない。
だがシンギュラリティは、完璧に作り上げられた結末の中に、未来を閉じ込めてしまうのである。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;正直に言って，この手の意味の拡張はものすごく危険な行為だと思うのだけど，私が気にしてもしょうがないし，まぁいいか。&lt;/p&gt;

&lt;h2 id=&#34;本当に面白くなるのは第八章から-笑&#34;&gt;本当に面白くなるのは第八章から（笑）&lt;/h2&gt;

&lt;p&gt;そろそろまとめに入ろうか。&lt;/p&gt;

&lt;p&gt;『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』の論点は2つあると思う。
ひとつは「シンギュラリティ仮説」に対して無邪気に礼賛なり嫌悪なりする人たちで，もうひとつは「シンギュラリティ仮説」に乗っかる「市場」である。&lt;/p&gt;

&lt;p&gt;前者については多くの（キリスト教圏外の）日本人は「ネタにマジレス（笑）」としか返せないだろう。
解説で西垣通さんは&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;AI と言えば、技術的改良と経済効果の話題だけ、あとはせいぜい幼稚な夢物語というのが、情けないことにこの国の常識だ。
本書がそんな常識に衝撃を与えることを切に願う。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と書かれているが，「シンギュラリティ仮説」を真面目に叫ぶ輩などカルト教祖&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:aum&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:aum&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; か詐欺師か，さもなくば厨二病患者に決まってる。
いまどき子供向けのラノベでも「ない」わ。&lt;/p&gt;

&lt;p&gt;後者に関してこの本では Google を例に挙げている。
確かに Google は「放火魔の消防士&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:mp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:mp&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;」だが，それは Google に限る話ではなく，そこらじゅうに転がっている。&lt;/p&gt;

&lt;p&gt;Google が誠実なのはユーザや消費者に対してではなく「市場」に対してである。
Google が言う “don&amp;rsquo;t be evil&amp;rdquo; も市場に対するメッセージであると解釈すれば納得だろう。&lt;/p&gt;

&lt;p&gt;例えば Google は「スノーデン」以前において&lt;a href=&#34;http://www.thesmokinggun.com/documents/internet/google-complete-privacy-does-not-exist&#34;&gt;「完全なプライバシーは存在しない」と公言&lt;/a&gt;し「&lt;a href=&#34;http://cloud.watch.impress.co.jp/epw/cda/infostand/2007/06/18/10531.html&#34;&gt;Google はプライバシーに敵対的&lt;/a&gt;」と大きな批判を浴びていた。
それが「スノーデン」以後は手のひらを返すようにプライバシー擁護を謳っている。&lt;/p&gt;

&lt;p&gt;この事実だけでも Google という企業の本質が垣間見えるだろう。
そしてそれは Google に限った話ではなく Amazon だって Facebook だって Microsoft だって Tesla だって同じ穴の狢なのである。&lt;/p&gt;

&lt;p&gt;そして「賢い企業」はどちらか一方に bet することはない。
掛けで必ず勝つには胴元になることである。&lt;/p&gt;

&lt;p&gt;自社の計算資源を「クラウド」として切り売りする企業にとって「「シンギュラリティ仮説」に対して無邪気に礼賛なり嫌悪なりする人たち」は大事なお客様である。
とくに Google は AI の計算資源すら対象にしているのである。
ならば，「放火魔の消防士」と呼ばれようが，「シンギュラリティ仮説」に群がる全ての人達を顧客として迎い入れるのが「正解」である。&lt;/p&gt;

&lt;p&gt;この点において日本の「IT 業界」は， Google などと比較すれば，全くもって稚拙であると言わざるをえない。
もし『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34; title=&#34;そろそろ、人工知能の真実を話そう (早川書房) | ジャン＝ガブリエル ガナシア, 小林 重裕・他, 伊藤 直子 | コンピュータサイエンス | Kindleストア | Amazon&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』が日本の読者になにがしかの衝撃を与えるとするなら，自らの稚拙さの方だろう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;結論：&lt;/strong&gt; シンギュラリティを口にする連中と哲学者は信用してはいけない&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://honz.jp/articles/-/44063&#34;&gt;『そろそろ、人工知能の真実を話そう』シンギュラリティ仮説の背後にうごめくもの - HONZ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wired.jp/2017/07/04/jean-gabriel-ganascia/&#34;&gt;AI時代に「哲学」は何を果たせるか？ 『そろそろ、人工知能の真実を話そう』著者に訊く｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2017/09/20/20170919googles-ai-chief-thinks-reports-of-the-ai-apocalypse-are-greatly-exaggerated/&#34;&gt;GoogleのAIのトップは曰く、人工知能という言葉自体が間違っている、誇大宣伝を生む温床だ | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51cD7DR87IL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう (早川書房)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジャン＝ガブリエル ガナシア 小林 重裕・他 &lt;/dd&gt;&lt;dd&gt;早川書房 2017-05-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;3&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B075842TRD/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B075842TRD.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;なぜ人工知能は人と会話ができるのか (マイナビ新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B073W485F6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B073W485F6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;AIが神になる日&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B072LD494B/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B072LD494B.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人工知能はどのようにして　「名人」を超えたのか？―――最強の将棋ＡＩポナンザの開発者が教える機械学習・深層学習・強化学習の本質&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B074PQ1KYJ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B074PQ1KYJ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ＡＩが人間を殺す日　車、医療、兵器に組み込まれる人工知能 (集英社新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B073S45MCC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B073S45MCC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;９プリンシプルズ　加速する未来で勝ち残るために (早川書房)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B072FMZL49/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B072FMZL49.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;隷属なき道 AIとの競争に勝つ ベーシックインカムと一日三時間労働 (文春e-book)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0744G41NQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0744G41NQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アマゾノミクス　データ・サイエンティストはこう考える (文春e-book)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B075D4YLGG/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B075D4YLGG.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;インダストリーX.0&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071P89MYL/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B071P89MYL.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ペンタゴンの頭脳　世界を動かす軍事科学機関DARPA&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B074H9SHPM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B074H9SHPM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;理系脳で考える　AI時代に生き残る人の条件 (朝日新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;シンギュラリティは起きない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-18&#34;&gt;2017-09-18&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309410391/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51sgo2CPdpL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309410391/baldandersinf-22/&#34;&gt;社会は情報化の夢を見る---［新世紀版］ノイマンの夢・近代の欲望 (河出文庫)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;佐藤 俊樹 &lt;/dd&gt;&lt;dd&gt;河出書房新社 2010-09-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4004304652/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4004304652.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;現代社会の理論―情報化・消費化社会の現在と未来 (岩波新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4641150370/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4641150370.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;質的社会調査の方法 -- 他者の合理性の理解社会学 (有斐閣ストゥディア)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062203855/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062203855.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人間と機械のあいだ 心はどこにあるのか&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480097813/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480097813.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;社会学的想像力 (ちくま学芸文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4121015371/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4121015371.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;不平等社会日本―さよなら総中流 (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4140910844/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4140910844.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ウェブ社会の思想 〈遍在する私〉をどう生きるか (NHKブックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4140911360/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4140911360.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;社会学入門 〈多元化する時代〉をどう捉えるか (NHKブックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4326550775/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4326550775.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;選択しないという選択: ビッグデータで変わる「自由」のかたち&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4121022033/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4121022033.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;集合知とは何か - ネット時代の「知」のゆくえ (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480069232/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480069232.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;モテる構造: 男と女の社会学 ((ちくま新書 1216))&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-19&#34;&gt;2017-09-19&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4488711022/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51J3DEJJ1TL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4488711022/baldandersinf-22/&#34;&gt;万物理論 (創元SF文庫)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;グレッグ・イーガン 山岸 真 &lt;/dd&gt;&lt;dd&gt;東京創元社 2004-10-28&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4488711014/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4488711014.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;宇宙消失 (創元SF文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150115311/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4150115311.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ディアスポラ (ハヤカワ文庫 SF)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150113378/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4150113378.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;祈りの海 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150112908/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4150112908.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;順列都市〈下〉 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150118264/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4150118264.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プランク・ダイヴ (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4150112894/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4150112894.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;順列都市〈上〉 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/415011594X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/415011594X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ひとりっ子 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4122056810/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4122056810.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;六本指のゴルトベルク (中公文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/415011451X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/415011451X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;しあわせの理由 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4582760465/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4582760465.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;文字逍遥 (平凡社ライブラリー)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;グレッグ・イーガンの名作。これも singularity を巡る物語だな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-18&#34;&gt;2017-09-18&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:aum&#34;&gt;私は「シンギュラリティ仮説」とグノーシス主義との比較部分を読んで，かつてのオウム真理教を連想してしまった。オウム真理教は医者や研究者などのいわゆる「理系」の信者が多かったことも特徴で（それ故にサリンを使ったテロにまで走ってしまうのだが），そういう意味でも類似性はあるのかな，などと思ったり。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:aum&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:mp&#34;&gt;日本語で言えば「マッチポンプ」。今まで知らなかったのだが「マッチポンプ」って和製外来語なんだねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:mp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「荒れた農場の掘ったて小屋でがなりたてる、いかさま師の集団」へ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/congreso/" />
		<id>tag:text.Baldanders.info,2017-09-17:/remark/2017/09/congreso/</id>
		<published>2017-09-17T16:28:42+09:00</published>
		<updated>2017-09-17T16:28:42+09:00</updated>
		<summary>ちうわけで，以前に本家サイトで書いた記事を再掲載してみる。これはホルヘ・ルイス・ボルヘスの『砂の本』に収録されている短編「会議」の読書感想文である。ネタバレに注意 ...しなくても大丈夫かな？</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nlab.itmedia.co.jp/nl/articles/1709/16/news007.html&#34;&gt;失われていくデジタル作品をどうアーカイブすべきか？　「メディアが消える時代」のマンガ・アニメ・ゲームを守るには (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;) - ねとらぼ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ときには著作権法すら捻じ曲げ，あらゆる手段を以って「独占」し続けた作り手側がが今更「失われていくデジタル作品をどうアーカイブすべきか？」だと？ 笑かすなよ。
やりたけりゃ Google 先生か国会図書館にでも頭を下げろ！&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:gp&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;ちうわけで，以前に&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000383.shtml&#34; title=&#34;『砂の本』より： 「会議」 — Baldanders.info&#34;&gt;本家サイトで書いた記事&lt;/a&gt;を思い出したので再掲載してみる。
これはホルヘ・ルイス・ボルヘスの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4087606244/baldandersinf-22/&#34; title=&#34;砂の本 (集英社文庫) | ホルヘ・ルイス ボルヘス, Jorge Luis Borges, 篠田 一士 |本 | 通販 | Amazon&#34;&gt;砂の本&lt;/a&gt;』に収録されている短編「会議」の読書感想文である。
ネタバレに注意 &amp;hellip;しなくても大丈夫かな？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ある人物の死によりメンバの最後の生き残りとなってしまった男が「会議（コングレソ）」と呼ばれる結社について語りだす。
 「会議」の議長（スポンサーでもある）は「あらゆる国のあらゆる人間を代表する世界会議」を組織することを思い立ち，その準備をすすめていた。
 「会議」の方向性が怪しくなってきたのは，世界中のあらゆる書物や書簡等の収集を（「会議」にはそれが不可欠であるという理由で）はじめてからだ。
 そして資金が完全に底をついたときに議長はようやく悟ることになる。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
 &lt;q&gt;わしらの企てた計画は、とてつもなく広大なもので、 ――いまのわしにはそれがわかるが―― 全世界を包含するほかないことになる。それは、荒れた農場の掘ったて小屋でがなりたてる、いかさま師の集団じゃない。世界会議は、世界の最初の瞬間と同時にはじまって、わしらが塵に帰ったときもなおつづいてゆくのだ。&lt;/q&gt;
 &lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;『砂の本』より「会議」&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;20年前の私ならこの文章に哲学っぽい思いを馳せるのだろが，今の私は「荒れた農場の掘ったて小屋でがなりたてる、いかさま師の集団」についてある具体的な対象を連想する。
それは Google だ。
Google は「世界中のあらゆる情報をグラフ化」しようと目論む組織&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ai&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ai&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; で，そのための莫大な資金を持っている。
彼等が「会議」の中核的な位置を占めるのか，それともただの「いかさま師の集団」なのか，それは多分これから分かる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/google-books-library-project/&#34;&gt;Google Books の Library Book Scan すら Fair Use と言われたのに&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4087606244/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51Q1RWgKY8L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4087606244/baldandersinf-22/&#34;&gt;砂の本 (集英社文庫)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ホルヘ・ルイス ボルヘス Jorge Luis Borges &lt;/dd&gt;&lt;dd&gt;集英社 2011-06-28&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4003279212/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4003279212.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;伝奇集 (岩波文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4003279220/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4003279220.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;創造者 (岩波文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4003279247/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4003279247.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;七つの夜 (岩波文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/400327928X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/400327928X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アレフ (岩波文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309464084/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4309464084.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;幻獣辞典 (河出文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4582765491/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4582765491.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エル・アレフ (平凡社ライブラリー)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4003279271/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4003279271.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ブロディーの報告書 (岩波文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480022775/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480022775.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エレンディラ (ちくま文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4003279255/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4003279255.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;詩という仕事について (岩波文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4560071144/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4560071144.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;不死の人 (白水Uブックス―海外小説の誘惑)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ボルヘスの作品群で個人的に一番好きな作品。13編の独立した短編をしりとりのように繋げて全体で輪を構成している。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-17&#34;&gt;2017-09-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:gp&#34;&gt;Google Books の Google Print 計画が始まったのは2003年12月である。つまり，今更アーカイブがどうとか10年以上も周回遅れの話である。当時はデジタル・アーカイブやそれに伴う著作権処理について&lt;a href=&#34;http://text.baldanders.info/remark/2015/google-books-library-project/&#34; title=&#34;Google Books の Library Book Scan すら Fair Use と言われたのに...&#34;&gt;世界中の「作家」を巻き込んでの大論争と大訴訟&lt;/a&gt;が起こったが日本ではまるで認知されてないのかね。あるいはかつて「私的録音録画補償金制度」に関連して議論された，特定の DRM や再生機器に依存することの危険性について結局は誰も何も気にしていなかったということなのか。記録や記憶は（ものによってタイムスケールの違いはあれ）必ず風化する。君たちは風化して「なくなった」ものを「なかったことにする」つもりなのか。つくづく日本は「クール」じゃないよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ai&#34;&gt;今では AI 技術すら駆使して目論見の実現に邁進している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ai&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Bluetooth 実装の脆弱性に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/vulnerability-in-bluetooth-implementation/" />
		<id>tag:text.Baldanders.info,2017-09-14:/remark/2017/09/vulnerability-in-bluetooth-implementation/</id>
		<published>2017-09-14T20:09:19+09:00</published>
		<updated>2017-09-16T08:29:51+09:00</updated>
		<summary>各 Bluetooth 実装に対して複数の脆弱性が存在する。特に古い Android 機器はベンダからのサポートを受けられない可能性が高いため Bluetooth を無効にすることを強く推奨する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.armis.com/blueborne/&#34;&gt;BlueBorne Information from the Research Team - Armis Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/240311&#34;&gt;Vulnerability Note VU#240311 - Multiple Bluetooth implementation vulnerabilities affect many devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jpcert.or.jp/at/2017/at170037.html&#34;&gt;Bluetooth の実装における脆弱性 &amp;ldquo;BlueBorne&amp;rdquo; に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jvn.jp/vu/JVNVU95513538/&#34;&gt;JVNVU#95513538: 様々な Bluetooth 実装に複数の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/20170914_blueborne.html&#34;&gt;Bluetooth の実装における複数の脆弱性について：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.st.ryukoku.ac.jp/~kjm/security/memo/2017/09.html#20170913_bluetooth&#34;&gt;セキュリティホール memo の情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;脆弱性の内容&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/LLNtZKpL0P8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LLNtZKpL0P8&#34;&gt;Armis - BlueBorne Explained - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;各 Bluetooth 実装に対して複数の脆弱性が存在する（「&lt;a href=&#34;https://jvn.jp/vu/JVNVU95513538/&#34;&gt;JVNVU#95513538&lt;/a&gt;」より抜粋）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バッファオーバーフロー（CVE-2017-1000251）： Linux カーネルの BlueZ モジュールに含まれる L2CAP の実装に脆弱性がある&lt;/li&gt;
&lt;li&gt;領域外メモリ参照（CVE-2017-1000250）： Linux 向けの BlueZ モジュールには、SDP（Service Discovery Protocol） の実装に脆弱性がある&lt;/li&gt;
&lt;li&gt;領域外読み込み（CVE-2017-0785）： Android の Bluetooth ソフトウェア・スタックにおいて SDP の実装に脆弱性がある&lt;/li&gt;
&lt;li&gt;ヒープベースのバッファオーバーフロー（CVE-2017-0781）： Android における BNEP (Bluetooth Network Encapsulation Protocol) の実装では、誤ったバッファサイズが memcpy 関数に渡される&lt;/li&gt;
&lt;li&gt;整数アンダーフロー（CVE-2017-0782）： Android における BNEP の実装では、&lt;code&gt;bnep_process_control_packet&lt;/code&gt; 関数において減算処理前のサイズチェックが適切に行われない脆弱性がある&lt;/li&gt;
&lt;li&gt;ヒープベースのバッファオーバーフロー（CVE-2017-14315）： Apple の Bluetooth Low-Energy Audio Protocol (LEAP) 実装では、受信したデータの CID を適切に検証しない問題がある&lt;/li&gt;
&lt;li&gt;中間者攻撃（CVE-2017-0783, CVE-2017-8628）： Android および Windows における Bluetooth の PAN プロファイル実装には、認証回避の脆弱性がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これは酷いな（笑）&lt;/p&gt;

&lt;p&gt;今回の脆弱性が厄介なのは攻撃者の機器とペアリングしていない状態でも機器が乗っ取られる可能性があるということだ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/Az-l90RCns8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Az-l90RCns8&#34;&gt;Blueborne - Android Take Over Demo - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;影響度-cvss&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/240311&#34;&gt;Vulnerability Note VU#240311 - Multiple Bluetooth implementation vulnerabilities affect many devices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CVSSv2 基本評価値 7.9 (&lt;code&gt;AV:A/AC:M/Au:N/C:C/I:C/A:C&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隣接ネットワーク（A）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中（M）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全面的（C）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全面的（C）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全面的（C）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Android : セキュリティパッチ レベル 2017年9月を適用していない Android&lt;/li&gt;
&lt;li&gt;Windows : 2017年9月マイクロソフトセキュリティ更新プログラムを適用していない Windows Vista 以降の Windows&lt;/li&gt;
&lt;li&gt;Linux : Kernel 3.3-rc1 以降のバージョン， BlueZ すべてのバージョン&lt;/li&gt;
&lt;li&gt;iOS, tvOS : iOS 9.3.5 およびそれ以前、AppleTV tvOS 7.2.2 およびそれ以前&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただし，上記以外の機器でも脆弱性が存在する可能性がある。
&lt;a href=&#34;https://www.kb.cert.org/vuls/id/240311&#34; title=&#34;Vulnerability Note VU#240311 - Multiple Bluetooth implementation vulnerabilities affect many devices&#34;&gt;Vulnerability Note Database の情報&lt;/a&gt;に常に留意すること。&lt;/p&gt;

&lt;p&gt;スマートホーム全滅かな（笑）&lt;/p&gt;

&lt;h2 id=&#34;対策-回避策&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Android : セキュリティパッチ レベル 2017年9月を適用すること

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://source.android.com/security/bulletin/2017-09-01&#34;&gt;Android Security Bulletin—September 2017  |  Android Open Source Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.armis.blueborne_detector&#34;&gt;BlueBorne Vulnerability Scanner by Armis - Google Play&lt;/a&gt; : 検証用の Android アプリ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Windows : &lt;a href=&#34;https://blogs.technet.microsoft.com/jpsecurity/2017/09/13/201709-security-bulletin/&#34;&gt;2017年9月マイクロソフトセキュリティ更新プログラム&lt;/a&gt;を適用すること

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://portal.msrc.microsoft.com/ja-JP/security-guidance/advisory/CVE-2017-8628&#34;&gt;CVE-2017-8628 | Microsoft Bluetooth ドライバーのなりすましの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Linux : 各ディストリビュータの情報に従い最新ソフトウェアを適用すること

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/security/vulnerabilities/blueborne&#34;&gt;Blueborne - Linux Kernel Remote Denial of Service in Bluetooth subsystem - CVE-2017-1000251 - Red Hat Customer Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.ubuntu.com/SecurityTeam/KnowledgeBase/BlueBorne&#34;&gt;SecurityTeam/KnowledgeBase/BlueBorne - Ubuntu Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://oss.sios.com/security/kernel-security-vulnerability-20170912&#34;&gt;Linux Kernelの脆弱性(Blueborne: CVE-2017-1000251) — | サイオスOSS | サイオステクノロジー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;iOS, tvOS : iOS 10.x, tvOS 10.x で修正済み&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修正版を受けられない場合は Bluetooth を無効にすることで回避できる。
特に古い Android 機器はベンダからのサポートを受けられない可能性が高いため Bluetooth を無効にすることを強く推奨する。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2017/09/13/20170912new-bluetooth-vulnerability-can-hack-a-phone-in-ten-seconds/&#34;&gt;新たに発見されたBluetoothの脆弱性はスマートフォンを10秒で乗っ取られる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forest.watch.impress.co.jp/docs/news/1080685.html&#34;&gt;数十億を超えるBluetooth機器に影響、ペアリングなしで乗っ取られる脆弱性“BlueBorne”が明らかに - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1709/14/news048.html&#34;&gt;Bluetooth実装の脆弱性「BlueBorne」、82億台に影響　無線経由で攻撃の恐れ - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35107191/&#34;&gt;多数のBluetooth接続機器に影響する脆弱性&amp;ndash;セキュリティ企業が警告 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://monoist.atmarkit.co.jp/mn/articles/1709/15/news081.html&#34;&gt;Bluetoothの脆弱性「BlueBorne」はIoT機器を狙う!? - MONOist（モノイスト）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sho.tdiary.net/20170914.html#p01&#34;&gt;BlueBorne脆弱性スキャナをためしてみる - ただのにっき(2017-09-14)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>AI と哲学？ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/artificial-intelligence/" />
		<id>tag:text.Baldanders.info,2017-09-14:/remark/2017/09/artificial-intelligence/</id>
		<published>2017-09-14T18:03:10+09:00</published>
		<updated>2017-09-14T18:03:10+09:00</updated>
		<summary>この記事は2017年7月頃に Facebook の TL に書き散らしてた記事を再構成したものです。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;この記事は2017年7月頃に Facebook の TL に書き散らしてた記事を再構成したものです。&lt;/p&gt;

&lt;p&gt;ちなみに『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;』は読んでません。
正直，哲学とかお腹いっぱいなのでもういいって感じですが，この本は面白そうなので，時間ができたら読んでもいいかもしれない。&lt;/p&gt;

&lt;p&gt;もし読んで考えが変わったら読書感想文でも書くかな（笑）&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wired.jp/2017/07/04/jean-gabriel-ganascia/&#34;&gt;AI時代に「哲学」は何を果たせるか？ 『そろそろ、人工知能の真実を話そう』著者に訊く｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AI の議論には2つの方向性がある。
ひとつは「人を超える知性」の創造で，もうひとつは「スマートな機械」の台頭だ。&lt;/p&gt;

&lt;p&gt;前者はいわゆる「近代の夢」であり，それこそ「フランケンシュタインの怪物」から「鉄腕アトム」まで人々が夢（悪夢を含む）見てきたことなのだ。
しかし，これに関して人類は挫折し続けている。
現在においてもまだ無理だろう。
また「人を超える知性」の創造は大抵の宗教で禁忌とされている（何故ならそれは人ではなく神の御業だから）。
AI 恐怖症患者が抱く嫌悪感の要因（のひとつ）はこの辺にあると思う。&lt;/p&gt;

&lt;p&gt;後者は「情報化社会」の先に必然的に訪れるものだ。
これはかつて『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B000J84WBQ/baldandersinf-22/&#34;&gt;第三の波&lt;/a&gt;』で予言され今のところ概ねその通りに進行している。
それは一方で「労働者」という名で美化された（私を含む）奴隷達の解放であり，もう一方で私たちの多くが自らの存在理由を見失う暗い未来でもある。
情報化社会は「労働者」の存在が資本主義の必要条件ではないと示しつつあるからだ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/gRm0sz6lNLQ&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gRm0sz6lNLQ&#34;&gt;チャールズ・チャップリン ~ モダン・タイムス | Modern Times 1936年 ‧ ドラマ/コメディ - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;AI を巡る議論では両者は明確に区別する必要がある。
しかし，「人を超える知性」であれ「スマートな機械」であれ，哲学はそれを記述できない。
哲学どころか「人を逸脱する存在」を真面目に議論できる（宗教ではなく）学問は古今東西存在しない。
既存のどんな学問に当てはめようとしても全て机上の空論に終わるだろう。&lt;/p&gt;

&lt;p&gt;問題はそこなのである。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51cD7DR87IL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071FHBGW8/baldandersinf-22/&#34;&gt;そろそろ、人工知能の真実を話そう (早川書房)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジャン＝ガブリエル ガナシア 小林 重裕・他 &lt;/dd&gt;&lt;dd&gt;早川書房 2017-05-25&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B075842TRD/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B075842TRD.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;なぜ人工知能は人と会話ができるのか (マイナビ新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B073W485F6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B073W485F6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;AIが神になる日&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B072LD494B/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B072LD494B.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人工知能はどのようにして　「名人」を超えたのか？―――最強の将棋ＡＩポナンザの開発者が教える機械学習・深層学習・強化学習の本質&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B073S45MCC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B073S45MCC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;９プリンシプルズ　加速する未来で勝ち残るために (早川書房)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B072FMZL49/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B072FMZL49.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;隷属なき道 AIとの競争に勝つ ベーシックインカムと一日三時間労働 (文春e-book)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0744G41NQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0744G41NQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アマゾノミクス　データ・サイエンティストはこう考える (文春e-book)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B074PQ1KYJ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B074PQ1KYJ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ＡＩが人間を殺す日　車、医療、兵器に組み込まれる人工知能 (集英社新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071P89MYL/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B071P89MYL.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ペンタゴンの頭脳　世界を動かす軍事科学機関DARPA&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0753937VK/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0753937VK.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;次世代リーダーを育て、新規事業を生み出す〈リクルート流〉イノベーション研修全技法&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B074H9SHPM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B074H9SHPM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;理系脳で考える　AI時代に生き残る人の条件 (朝日新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;読んでない。時間ができたら読んでもいいかもしれない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-14&#34;&gt;2017-09-14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309410391/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51sgo2CPdpL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309410391/baldandersinf-22/&#34;&gt;社会は情報化の夢を見る---［新世紀版］ノイマンの夢・近代の欲望 (河出文庫)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;佐藤 俊樹 &lt;/dd&gt;&lt;dd&gt;河出書房新社 2010-09-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;3&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4140910844/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4140910844.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ウェブ社会の思想―“遍在する私”をどう生きるか (NHKブックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4040800206/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4040800206.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人工知能は人間を超えるか ディープラーニングの先にあるもの (角川EPUB選書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798106801.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Free Culture&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4004304652/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4004304652.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;現代社会の理論―情報化・消費化社会の現在と未来 (岩波新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4121023226/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4121023226.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;仕事と家族 - 日本はなぜ働きづらく、産みにくいのか (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.9 と Type Alias - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/go-1_9-and-type-alias/" />
		<id>tag:text.Baldanders.info,2017-09-14:/golang/go-1_9-and-type-alias/</id>
		<published>2017-09-14T10:01:49+09:00</published>
		<updated>2017-09-14T10:01:49+09:00</updated>
		<summary>なんで type alias なんて妙ちきりんな言語仕様が追加されたかというと，実はこれ，リファクタリングの為に設けられたのである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;遅ればせながらの記事で申し訳ないが Go 1.9 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.9&#34;&gt;Go 1.9 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.9&#34;&gt;Go 1.9 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しい内容は&lt;a href=&#34;https://golang.org/doc/go1.9&#34; title=&#34;Go 1.9 Release Notes - The Go Programming Language&#34;&gt;リリースノート&lt;/a&gt;を見ていただくとして，今回の目玉は &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; alias 機能だろう。&lt;/p&gt;

&lt;p&gt;まず &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使った簡単な足し算を書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

type Num1 int

func (n1 Num1) Add(n2 Num1) Num1 {
	return n1 + n2
}

func main() {
	n1 := Num1(1)
	n2 := Num1(2)
	fmt.Println(n1.Add(n2))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は 3 と出力されるはずである。
ここで “&lt;code&gt;type Num2 Num1&lt;/code&gt;&amp;rdquo; と記述を追加し，この型を使って足し算を行ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

type Num1 int

func (n1 Num1) Add(n2 Num1) Num1 {
	return n1 + n2
}

type Num2 Num1

func main() {
	n1 := Num2(1)
	n2 := Num2(2)
	fmt.Println(n1.Add(n2))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行しようとすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;n1.Add undefined (type Num2 has no field or method Add)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とコンパイルエラーになる。
何故か。
&lt;code&gt;Num1&lt;/code&gt; と &lt;code&gt;Num2&lt;/code&gt; は異なる型だからだ。
型 &lt;code&gt;Num1&lt;/code&gt; に紐付いている関数 &lt;code&gt;Add()&lt;/code&gt; は，型 &lt;code&gt;Num2&lt;/code&gt; には紐付かない。
継承されないわけだ（&lt;code&gt;Num1&lt;/code&gt; へキャストはできる）。&lt;/p&gt;

&lt;p&gt;では今度は “&lt;code&gt;type Num2 = Num1&lt;/code&gt;&amp;rdquo; と記述を変更してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

type Num1 int

func (n1 Num1) Add(n2 Num1) Num1 {
	return n1 + n2
}

type Num2 = Num1

func main() {
	n1 := Num2(1)
	n2 := Num2(2)
	fmt.Println(n1.Add(n2))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度はコンパイルエラーにならず 3 と出力される。
この “&lt;code&gt;type Num2 = Num1&lt;/code&gt;&amp;rdquo; という構文が &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; alias を指し，この記述によって &lt;code&gt;Num1&lt;/code&gt; と &lt;code&gt;Num2&lt;/code&gt; は &lt;strong&gt;全く同じ型&lt;/strong&gt; として扱われる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;なんでこんな妙ちきりんな言語仕様が追加されたかというと，実はこれ，リファクタリングの為に設けられたのである。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Go now supports type aliases to support gradual code repair while moving a type between packages.
The type alias design document and an article on refactoring cover the problem in detail.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/go1.9&#34;&gt;Go 1.9 Release Notes&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;もともと &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はリファクタリングを厚遇する言語と言える。
たとえば &lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia&#34;&gt;duck typing&lt;/a&gt; などはその最たる例だろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/03/generics-vs-duck-typing/&#34;&gt;きみは Generics がとくいなフレンズなんだね，または「制約は構造を生む」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ，あまり積極的に使う機能ではないかもしれないが，こういうこともできると覚えておくといいだろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/weloan/items/8abbb4003cfa1031a9e9&#34;&gt;go言語1.9で追加予定の新機能 型エイリアス - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1EU/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41GPVATQiZL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1EU/baldandersinf-22/&#34;&gt;Java言語で学ぶリファクタリング入門&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2007-01-26&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8ATHGW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1BS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B073F45B97/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B073F45B97.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／積分を見つめて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00H372H40/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00H372H40.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマの数学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1AO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1AO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Java言語プログラミングレッスン 第3版（下）　オブジェクト指向を始めよう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B072JVPFL4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B072JVPFL4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;JavaScript関数型プログラミング 複雑性を抑える発想と実践法を学ぶ impress top gearシリーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071V7MY82/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B071V7MY82.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プリンシプル オブ プログラミング 3年目までに身につけたい 一生役立つ101の原理原則&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1A4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1A4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Java言語プログラミングレッスン 第3版（上）　Java言語を始めよう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0185E10ZQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0185E10ZQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;実践Javaコーディング作法&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんによる「リファクタリング本」。意外に Java 以外でも使える優れもの。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-14&#34;&gt;2017-09-14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a1&#34;&gt;全く同じ型なので継承関係はなく，別名定義した型に独自に関数を紐付けることはできない。ちなみに別パッケージの型に対しても別名定義が可能である： &lt;code&gt;type Time = time.Time&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG 2.2.0 がリリース（脆弱性の修正あり） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/09/gnupg-2_2_0-released/" />
		<id>tag:text.Baldanders.info,2017-09-14:/remark/2017/09/gnupg-2_2_0-released/</id>
		<published>2017-09-14T04:11:20+09:00</published>
		<updated>2017-09-14T04:11:20+09:00</updated>
		<summary>バージョン 2.2 は stable 版 2.0.x の置き換えになるようだ。なお 2.0.x は今年いっぱいでサポートを終了する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;個人的に色々あって更新が滞ってます。
ゴメン，ペコン。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q3/000413.html&#34;&gt;[Announce] GnuPG 2.2.0 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バージョン 2.2 は stable 版 2.0.x の置き換えになるようだ。
なお 2.0.x は今年いっぱいでサポートを終了する。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;This release marks the start of a new long term support series to replace the 2.0.x series which will reach end-of-life on 2017-12-31.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q3/000413.html&#34;&gt;GnuPG 2.2.0 released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;今までのように modarn 版と stable 版に分けて開発を進めるのかどうかについては記述がないので分からない。
2.1.23 からの変更点は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: Reverted change done in 2.1.23 so that &lt;code&gt;--no-auto-key-retrieve&lt;/code&gt; is again the default.&lt;/li&gt;
&lt;li&gt;Fixed a few minor bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ところで GnuPG が内部で使っている Libgcrypt に脆弱性が発見されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q3/000414.html&#34;&gt;[Announce] Libgcrypt 1.8.1 and 1.7.9 to fix CVE-2017-0379&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eprint.iacr.org/2017/806&#34;&gt;May the Fourth Be With You: A Microarchitectural Side Channel Attack on Several Real-World Applications of Curve25519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（スター・ウォーズかよ！）&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;We demonstrate the effect of this vulnerability on three software applications---encrypted git, email and messaging---that use Libgcrypt. In each case, we show how to craft malicious OpenPGP files that use the Curve25519 point of order 4 as a chosen ciphertext to the ECDH encryption scheme. We find that the resulting interactions of the point at infinity, order-2, and order-4 elements in the Montgomery ladder scalar-by-point multiplication routine create side channel leakage that allows us to recover the private key in as few as 11 attempts to access such malicious files.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://eprint.iacr.org/2017/806&#34;&gt;A Microarchitectural Side Channel Attack on Several Real-World Applications of Curve25519&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;たとえば暗号化メールを使った攻撃では&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;For an attack on encrypted email we use the Thunderbird plugin Enigmail. As Genkin et al. observe, Enigmail automatically decrypts incoming emails by passing them to GnuPG, which uses Libgcrypt as its cryptographic engine. To attack Enigmail, we inject an element of order 4 into Libgcrypt we send the victim a PGP/MIME-encoded e-mail, with the element of order-4 as the ciphertext.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://eprint.iacr.org/2017/806&#34;&gt;A Microarchitectural Side Channel Attack on Several Real-World Applications of Curve25519&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;といったシナリオが挙げられている。&lt;/p&gt;

&lt;p&gt;この問題を軽減（mitigate）したバージョン 1.8.1 および 1.7.9 がリリースされている。
なお Windows 用の GnuPG 2.2.0 バイナリには Libgcrypt 1.8.1 が同梱されている。&lt;/p&gt;

&lt;p&gt;影響度は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2017-0379&#34;&gt;NVD - CVE-2017-0379&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CVSSv3 基本評価値 7.5 (&lt;code&gt;CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一般にサイドチャネル攻撃はあまり影響度が高くないが &lt;a href=&#34;https://nvd.nist.gov/&#34; title=&#34;National Vulnerability Database&#34;&gt;NVD&lt;/a&gt; はかなり高めに見積もっているようである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:rh1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:rh1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;p&gt;インストールが上手くいけば以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.0
libgcrypt 1.8.1
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:rh1&#34;&gt;一方， &lt;a href=&#34;https://access.redhat.com/security/cve/cve-2017-0379&#34;&gt;Red Hat の評価&lt;/a&gt;は &lt;code&gt;CVSS:3.0/AV:L/AC:H/PR:L/UI:R/S:U/C:H/I:N/A:N&lt;/code&gt; で基本評価値 4.4 になっている。ただし&lt;a href=&#34;https://eprint.iacr.org/2017/806&#34; title=&#34;May the Fourth Be With You: A Microarchitectural Side Channel Attack on Several Real-World Applications of Curve25519&#34;&gt;論文&lt;/a&gt;を読むと攻撃シナリオとして Enigmail, Git-crypt, Pidgin-OpenPGP を使った方法が挙げられているので， &lt;a href=&#34;https://nvd.nist.gov/&#34; title=&#34;National Vulnerability Database&#34;&gt;NVD&lt;/a&gt; の評価のほうが近いかも。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:rh1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
