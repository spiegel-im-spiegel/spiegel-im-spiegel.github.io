<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2019-01-13:/</id>
	<updated>2019-01-13T22:45:09+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.53</generator>

	
	<entry>
		<title>しょうがないので Amazon アフィリエイト・リンク作成ツールを作ったですよ - release</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2019/01/amazon-product-advertising-api/" />
		<id>tag:text.Baldanders.info,2019-01-13:/release/2019/01/amazon-product-advertising-api/</id>
		<published>2019-01-13T22:45:09+09:00</published>
		<updated>2019-01-13T22:45:09+09:00</updated>
		<summary>ただし CLI (Command-Line Interface) ツール。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="https://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;昨年「&lt;a href=&#34;https://text.baldanders.info/remark/2018/10/amazon-affiliate-with-amakuri/&#34;&gt;Amazon アフィリエイトリンク作成サービスを Amakuri へ移行&lt;/a&gt;」したと書いたのだが Amazon の締めつけが厳しくて閉鎖するらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dadadadone.com/archives/159&#34;&gt;【Amakuri】2019年01月16日のPA-API利用ポリシー変更で気に掛かること - dadadadoneのメモ帳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dadadadone.com/archives/194&#34;&gt;【Amakuri】Amakuri は来年1月16日以降使えなくなるだろうという話 - dadadadoneのメモ帳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dadadadone.com/archives/235&#34;&gt;【Amakuri】来年15日にAmakuriは閉鎖いたします - dadadadoneのメモ帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;何してくれやがるですか Amazon さん &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;しょうがないので，自前で Amazon アフィリエイト・リンク作成ツールを作ったですよ。
ただし CLI (Command-Line Interface) ツール。
下手にサービスなんか作って BAN されるの嫌だし，なにより Web サービスは管理・運用が面倒臭い。&lt;/p&gt;

&lt;h2 id=&#34;ツールのインストール&#34;&gt;ツールのインストール&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34;&gt;GitHub - spiegel-im-spiegel/amazon-item: Searching Amazon Items, Powered by PA-API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだテストもしていない出来たてホヤホヤ（笑） まぁ，でも，ひと通りは動く。&lt;/p&gt;

&lt;p&gt;バイナリを用意していないので，インストールには &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; 1.11 以降のビルド環境（git を含む）が必要。
適当なフォルダで以下のコマンドを実行すれば &lt;code&gt;$GOPATH/bin&lt;/code&gt; フォルダにインストールされる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ export GO111MODULE=on
$ go mod init tools
$ go get github.com/spiegel-im-spiegel/amazon-item@latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一応，動作確認。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ amazon-item -h
Searching Amazon Items, Powered by Product Advertising API

Usage:
  amazon-item [flags]
  amazon-item [command]

Available Commands:
  help        Help about any command
  lookup      Lookup Amazon Item
  search      Search Amazon Items
  version     Print the version number

Flags:
      --access-key string      Access Key ID
      --associate-tag string   Associate Tag
      --config string          config file (default $HOME/.paapi.yaml)
  -h, --help                   help for amazon-item
      --marketplace string     Marketplace (default &amp;#34;webservices.amazon.co.jp&amp;#34;)
      --secret-key string      Secret Access Key

Use &amp;#34;amazon-item [command] --help&amp;#34; for more information about a command.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;使用準備&#34;&gt;使用準備&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; title=&#34;spiegel-im-spiegel/amazon-item: Searching Amazon Items, Powered by PA-API&#34;&gt;amazon-item&lt;/a&gt; を使うには Amazon Associate ID を持っていて Amazon &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;Product Advertising API&lt;/a&gt; の Access Key および Secret Key まで取得済みであることが前提となる。
取得できたら &lt;code&gt;$HOME&lt;/code&gt; ディレクトリに &lt;code&gt;.paapi.yaml&lt;/code&gt; ファイルを作って値を格納しておく（ファイル・アクセス管理に注意）。&lt;/p&gt;

&lt;p&gt;たとえばこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;associate-tag: mytag-20
access-key: AKIAIOSFODNN7EXAMPLE
secret-key: 1234567890&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお &lt;code&gt;associate-tag&lt;/code&gt; とは Amazon Associate ID のことである。&lt;/p&gt;

&lt;p&gt;これで準備 OK&lt;/p&gt;

&lt;h2 id=&#34;商品の検索&#34;&gt;商品の検索&lt;/h2&gt;

&lt;p&gt;商品の検索には &lt;code&gt;amazon-item search&lt;/code&gt; コマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ amazon-item search -h
Search Amazon Items by ItemSearch Method

Usage:
  amazon-item search [flags] keyword

Flags:
  -h, --help                    help for search
  -g, --response-group string   ResponseGroup (default &amp;#34;ItemAttributes,Small&amp;#34;)
  -s, --search-index string     SearchIndex (default &amp;#34;All&amp;#34;)
  -t, --template string         Template file

Global Flags:
      --access-key string      Access Key ID
      --associate-tag string   Associate Tag
      --config string          config file (default $HOME/.paapi.yaml)
      --marketplace string     Marketplace (default &amp;#34;webservices.amazon.co.jp&amp;#34;)
      --secret-key string      Secret Access Key&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;たとえば結城浩さんの『数学ガール/フェルマーの最終定理』の Kindle 版を探すなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;amazon-item search 数学ガール+フェルマーの最終定理+kindle&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などとすればよい。
検索結果は JSON 形式で標準出力に出力される。
&lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; コマンドなどで整形すれば見やすくなるだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;amazon-item search 数学ガール+フェルマーの最終定理+kindle | jq .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テンプレート・ファイルを用意すれば出力を任意に整形できる。
たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cat template/item-list.md
| ASIN | Title | Author | Binding | EAN | Publisher | PublicationDate | URL |
| ---- | ----- | ------ | ------- | --- | --------- | --------------- | --- |
{{ range .Items }}| {{ .ASIN }} | {{ .ItemAttributes.Title }} | {{ .ItemAttributes.Author }} | {{ .ItemAttributes.Binding }} | {{ .ItemAttributes.EAN }} | {{ .ItemAttributes.Publisher }} | {{ .ItemAttributes.ReleaseDate }} | {{ .URL }} |
{{ end }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようなテンプレートを用意して以下のように使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ amazon-item search -t template/item-list.md 数学ガール+フェルマーの最終定理+kindle
| ASIN | Title | Author | Binding | EAN | Publisher | PublicationDate | URL |
| ---- | ----- | ------ | ------- | --- | --------- | --------------- | --- |
| B00AXUD4EQ | 数学ガール　フェルマーの最終定理　1 (MFコミックス　フラッパーシリーズ) |  春日旬 | Kindle版 |  | KADOKAWA / メディアファクトリー | 2012-12-19 | https://www.amazon.co.jp/exec/obidos/ASIN/B00AXUD4EQ/mytag-20 |
| B00I8AT1CM | 数学ガール／フェルマーの最終定理 |  結城 浩 | Kindle版 |  | SBクリエイティブ | 2014-03-12 | https://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/mytag-20 |
| B00DONBQAI | 数学ガール　フェルマーの最終定理　3 (MFコミックス　フラッパーシリーズ) |  春日 旬 | Kindle版 |  | KADOKAWA / メディアファクトリー | 2013-06-27 | https://www.amazon.co.jp/exec/obidos/ASIN/B00DONBQAI/mytag-20 |
| B00AXUD4F0 | 数学ガール　フェルマーの最終定理　2 (MFコミックス　フラッパーシリーズ) |  春日旬 | Kindle版 |  | KADOKAWA / メディアファクトリー | 2012-12-19 | https://www.amazon.co.jp/exec/obidos/ASIN/B00AXUD4F0/mytag-20 |
| B0756XMQBN | 数学ガール フェルマーの最終定理 |  春日旬 春日 旬 | Kindle版 |  |  |  | https://www.amazon.co.jp/exec/obidos/ASIN/B0756XMQBN/mytag-20 |
| B00ZEIEY1E | [まとめ買い] 数学ガール　フェルマーの最終定理（コミックフラッパー） |  春日旬 春日 旬 | Kindle版 |  |  |  | https://www.amazon.co.jp/exec/obidos/ASIN/B00ZEIEY1E/mytag-20 |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで出力結果を markdown の表形式に整形できた。&lt;/p&gt;

&lt;h2 id=&#34;amazon-アフィリエイト-リンクを作成する&#34;&gt;Amazon アフィリエイト・リンクを作成する&lt;/h2&gt;

&lt;p&gt;ある商品に対して Amazon アフィリエイト・リンクを作成するには &lt;code&gt;amazon-item lookup&lt;/code&gt; コマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ amazon-item lookup -h
Lookup Amazon Item by ItemLookup Method

Usage:
  amazon-item lookup [flags]

Flags:
  -h, --help                    help for lookup
  -p, --id-type string          IdType (default &amp;#34;ASIN&amp;#34;)
  -d, --item-id string          ItemId
  -g, --response-group string   ResponseGroup (default &amp;#34;Images,ItemAttributes,Small&amp;#34;)
  -t, --template string         Template file
  -x, --xml                     Output with XML format

Global Flags:
      --access-key string      Access Key ID
      --associate-tag string   Associate Tag
      --config string          config file (default $HOME/.paapi.yaml)
      --marketplace string     Marketplace (default &amp;#34;webservices.amazon.co.jp&amp;#34;)
      --secret-key string      Secret Access Key&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;商品を指定するには ASIN コードを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ amazon-item lookup -d B00I8AT1CM&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特に指定しなければ JSON 形式で標準出力に出力される。
また &lt;code&gt;-x&lt;/code&gt; オプションをつければ XML 形式で（というか &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34; title=&#34;Product Advertising API&#34;&gt;PA-API&lt;/a&gt; の返す結果がそのまま）出力される。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;amazon-item lookup&lt;/code&gt; コマンドもテンプレート・ファイルで出力を整形できる。
たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cat template/lookup.md
{{ range .Items }}&amp;lt;div class=&amp;#34;hreview&amp;#34;&amp;gt;
  &amp;lt;div class=&amp;#34;photo&amp;#34;&amp;gt;&amp;lt;a class=&amp;#34;item url&amp;#34; href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;{{ .MediumImage.URL }}&amp;#34; width=&amp;#34;{{ .MediumImage.Width }}&amp;#34; alt=&amp;#34;photo&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;dl class=&amp;#34;fn&amp;#34;&amp;gt;
    &amp;lt;dt&amp;gt;&amp;lt;a href=&amp;#34;{{ .URL }}&amp;#34;&amp;gt;{{ .ItemAttributes.Title }}&amp;lt;/a&amp;gt;&amp;lt;/dt&amp;gt;
    {{ with .ItemAttributes.Author }}&amp;lt;dd&amp;gt;{{ . }}&amp;lt;/dd&amp;gt;{{ end }}
    &amp;lt;dd&amp;gt;{{ .ItemAttributes.Publisher }}{{ with .ItemAttributes.PublicationDate }} {{ . }}{{ end }}{{ with .ItemAttributes.ReleaseDate }} (Release {{ . }}){{ end }}&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;{{ .ItemAttributes.ProductGroup }} {{ .ItemAttributes.Binding }}&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;ASIN: {{ .ASIN }}{{ with .ItemAttributes.EAN }}, EAN: {{ . }}{{ end }}&amp;lt;/dd&amp;gt;
  &amp;lt;/dl&amp;gt;
  &amp;lt;p class=&amp;#34;powered-by&amp;#34; &amp;gt;reviewed by &amp;lt;a href=&amp;#39;#maker&amp;#39; class=&amp;#39;reviewer&amp;#39;&amp;gt;Spiegel&amp;lt;/a&amp;gt; on &amp;lt;abbr class=&amp;#34;dtreviewed&amp;#34; title=&amp;#34;{{ $.Today }}&amp;#34;&amp;gt;{{ $.Today }}&amp;lt;/abbr&amp;gt; (powered by &amp;lt;a href=&amp;#34;{{ $.AppURL }}&amp;#34; &amp;gt;{{ $.AppName }}&amp;lt;/a&amp;gt; {{ $.AppVersion }})&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;{{ end }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった感じにテンプレートファイルを作って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ amazon-item lookup -d B00I8AT1CM -t template/lookup.html
&amp;lt;div class=&amp;#34;hreview&amp;#34;&amp;gt;
  &amp;lt;div class=&amp;#34;photo&amp;#34;&amp;gt;&amp;lt;a class=&amp;#34;item url&amp;#34; href=&amp;#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/mytag-20&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://images-fe.ssl-images-amazon.com/images/I/41vT2D6sERL._SL160_.jpg&amp;#34; width=&amp;#34;113&amp;#34; alt=&amp;#34;photo&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;dl class=&amp;#34;fn&amp;#34;&amp;gt;
    &amp;lt;dt&amp;gt;&amp;lt;a href=&amp;#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/mytag-20&amp;#34;&amp;gt;数学ガール／フェルマーの最終定理&amp;lt;/a&amp;gt;&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;結城 浩&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;SBクリエイティブ 2008-07-29 (Release 2014-03-12)&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;eBooks Kindle版&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;ASIN: B00I8AT1CM&amp;lt;/dd&amp;gt;
  &amp;lt;/dl&amp;gt;
  &amp;lt;p class=&amp;#34;powered-by&amp;#34; &amp;gt;reviewed by &amp;lt;a href=&amp;#39;#maker&amp;#39; class=&amp;#39;reviewer&amp;#39;&amp;gt;Spiegel&amp;lt;/a&amp;gt; on &amp;lt;abbr class=&amp;#34;dtreviewed&amp;#34; title=&amp;#34;2019-01-13&amp;#34;&amp;gt;2019-01-13&amp;lt;/abbr&amp;gt; (powered by &amp;lt;a href=&amp;#34;https://github.com/spiegel-im-spiegel/amazon-item&amp;#34; &amp;gt;amazon-item&amp;lt;/a&amp;gt; v0.1.0)&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などと整形することができる。&lt;/p&gt;

&lt;p&gt;これで &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34; title=&#34;Product Advertising API&#34;&gt;PA-API&lt;/a&gt; の利用を Amazon から拒絶されなければ自前で何とかいけそうかな。
でも売上実績がないと &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34; title=&#34;Product Advertising API&#34;&gt;PA-API&lt;/a&gt; が使えなくなるんだよなぁ。
ホンマに勘弁してよ Amazon さん &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;追記-go-amazon-product-api-パッケージの置き換え&#34;&gt;【追記】 go-amazon-product-api パッケージの置き換え&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; title=&#34;spiegel-im-spiegel/amazon-item: Searching Amazon Items, Powered by PA-API&#34;&gt;amazon-item&lt;/a&gt; では &lt;a href=&#34;https://github.com/DDRBoxman/go-amazon-product-api&#34; title=&#34;DDRBoxman/go-amazon-product-api: Wrapper for the Amazon Product Advertising API&#34;&gt;DDRBoxman/go-amazon-product-api&lt;/a&gt; パッケージを使っているのだが &lt;code&gt;ItemAttributes&lt;/code&gt; の &lt;code&gt;Author&lt;/code&gt; および &lt;code&gt;Creator&lt;/code&gt; 項目の取り扱いに難があって複数の &lt;code&gt;Author&lt;/code&gt; や &lt;code&gt;Creator&lt;/code&gt; を上手く取り込めない。
これを改良したものを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/go-amazon-product-api&#34; title=&#34;spiegel-im-spiegel/go-amazon-product-api: Wrapper for the Amazon Product Advertising API&#34;&gt;spiegel-im-spiegel/go-amazon-product-api&lt;/a&gt; で公開している。&lt;/p&gt;

&lt;p&gt;パッケージを置き換えるには，最初のインストールのときにできる &lt;code&gt;go.mod&lt;/code&gt; ファイルに以下の行を追記する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;replace github.com/DDRBoxman/go-amazon-product-api v0.0.0-20190113062856-6736abd38089 =&amp;gt; github.com/spiegel-im-spiegel/go-amazon-product-api v0.0.0-20190113075218-1369f41b1e57&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この状態で再度&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get github.com/spiegel-im-spiegel/amazon-item@latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすれば &lt;a href=&#34;https://github.com/spiegel-im-spiegel/go-amazon-product-api&#34; title=&#34;spiegel-im-spiegel/go-amazon-product-api: Wrapper for the Amazon Product Advertising API&#34;&gt;spiegel-im-spiegel/go-amazon-product-api&lt;/a&gt; に置き換えてくれる。
やぁ 1.11 の&lt;a href=&#34;https://text.baldanders.info/golang/go-module-aware-mode/&#34; title=&#34;モジュール対応モードへの移行を検討する&#34;&gt;モジュール・モード&lt;/a&gt;は本当に便利だなや。&lt;/p&gt;

&lt;p&gt;これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ range .Items }}&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hreview&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;photo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;item url&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .URL }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .MediumImage.URL }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .MediumImage.Width }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;photo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dl&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .URL }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .ItemAttributes.Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ if .ItemAttributes.Author }}&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ range $i, $v := .ItemAttributes.Author }}{{ if ne $i 0 }}, {{ end }}{{ $v }}{{ end }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ end }}
    {{ if .ItemAttributes.Creator }}&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ range $i, $v := .ItemAttributes.Creator }}{{ if ne $i 0 }}, {{ end }}{{ $v.Value }}{{ with $v.Role }} ({{ . }}){{ end }}{{ end }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ end }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .ItemAttributes.Publisher }}{{ with .ItemAttributes.PublicationDate }} {{ . }}{{ end }}{{ with .ItemAttributes.ReleaseDate }} (Release {{ . }}){{ end }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .ItemAttributes.ProductGroup }} {{ .ItemAttributes.Binding }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;ASIN: {{ .ASIN }}{{ with .ItemAttributes.EAN }}, EAN: {{ . }}{{ end }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;powered-by&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;reviewed by &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;#maker&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;reviewer&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Spiegel&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; on &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;abbr&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dtreviewed&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ $.Today }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ $.Today }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;abbr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; (powered by &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ $.AppURL }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ $.AppName }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; {{ $.AppVersion }})&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ end }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のようにテンプレートを記述すれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ amazon-item lookup -d B01IGW5IIW -t template/lookup.html
&amp;lt;div class=&amp;#34;hreview&amp;#34;&amp;gt;
  &amp;lt;div class=&amp;#34;photo&amp;#34;&amp;gt;&amp;lt;a class=&amp;#34;item url&amp;#34; href=&amp;#34;https://www.amazon.co.jp/exec/obidos/ASIN/B01IGW5IIW/mytag-20&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://images-fe.ssl-images-amazon.com/images/I/51gC8Tmq1kL._SL160_.jpg&amp;#34; width=&amp;#34;113&amp;#34; alt=&amp;#34;photo&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;dl class=&amp;#34;fn&amp;#34;&amp;gt;
    &amp;lt;dt&amp;gt;&amp;lt;a href=&amp;#34;https://www.amazon.co.jp/exec/obidos/ASIN/B01IGW5IIW/mytag-20&amp;#34;&amp;gt;リーン開発の現場 カンバンによる大規模プロジェクトの
運営&amp;lt;/a&amp;gt;&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;ＨｅｎｒｉｋＫｎｉｂｅｒｇ, 角谷信太郎&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;市谷聡啓 (翻訳), 藤原大 (翻訳)&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;オーム社 2013-10-25 (Release 2017-07-15)&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;eBooks Kindle版&amp;lt;/dd&amp;gt;
    &amp;lt;dd&amp;gt;ASIN: B01IGW5IIW&amp;lt;/dd&amp;gt;
  &amp;lt;/dl&amp;gt;
  &amp;lt;p class=&amp;#34;powered-by&amp;#34; &amp;gt;reviewed by &amp;lt;a href=&amp;#39;#maker&amp;#39; class=&amp;#39;reviewer&amp;#39;&amp;gt;Spiegel&amp;lt;/a&amp;gt; on &amp;lt;abbr class=&amp;#34;dtreviewed&amp;#34; title=&amp;#34;2019-01-13&amp;#34;&amp;gt;2019-01-13&amp;lt;/abbr&amp;gt; (powered by &amp;lt;a href=&amp;#34;https://github.com/spiegel-im-spiegel/amazon-item&amp;#34; &amp;gt;amazon-item&amp;lt;/a&amp;gt; v0.1.0)&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように整形される。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/DDRBoxman/go-amazon-product-api&#34; title=&#34;DDRBoxman/go-amazon-product-api: Wrapper for the Amazon Product Advertising API&#34;&gt;DDRBoxman/go-amazon-product-api&lt;/a&gt; に pull request を送るか悩み中。
割と破壊的変更なんだよね。
もう少し考えてから判断しよう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://webservices.amazon.co.jp/scratchpad/&#34;&gt;Product Advertising API Scratchpad (beta)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.apitore.com/2016/08/01/amazon-product-advertising-api/&#34;&gt;AmazonのProduct Advertising APIの使い方 | Apitore blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://haniwaman.com/amazon-api-1/&#34;&gt;「Amazon API」の使い方を紹介します！最安値やランキング取得できるよ①－アソシエイトID（タグ）登録編－ | HPcode&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.dadadadone.com/archives/331&#34;&gt;Amakuriからの乗り換え先に、Amazon公式のWordPressプラグイン「Amazon Associates Link Builder」が良さそう - dadadadoneのメモ帳&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;出力例&#34;&gt;出力例&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB%EF%BC%8F%E3%83%95%E3%82%A7%E3%83%AB%E3%83%9E%E3%83%BC%E3%81%AE%E6%9C%80%E7%B5%82%E5%AE%9A%E7%90%86-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8AT1CM?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8AT1CM&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41vT2D6sERL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB%EF%BC%8F%E3%83%95%E3%82%A7%E3%83%AB%E3%83%9E%E3%83%BC%E3%81%AE%E6%9C%80%E7%B5%82%E5%AE%9A%E7%90%86-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8AT1CM?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8AT1CM&#34;&gt;数学ガール／フェルマーの最終定理&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    
    &lt;dd&gt;SBクリエイティブ 2008-07-29 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;eBooks Kindle版&lt;/dd&gt;
    &lt;dd&gt;ASIN: B00I8AT1CM&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「フェルマーの最終定理」というサブタイトルをみたとき「なんちう大風呂敷を広げるねん」と思ったものだが，実際に読んでみるとぐいぐい引き込まれる。ひっさびさに頭を使ったような気がする。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-01-13&#34;&gt;2019-01-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; &gt;amazon-item&lt;/a&gt; v0.1.0)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/%E3%83%AA%E3%83%BC%E3%83%B3%E9%96%8B%E7%99%BA%E3%81%AE%E7%8F%BE%E5%A0%B4-%E3%82%AB%E3%83%B3%E3%83%90%E3%83%B3%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%A7%E8%A6%8F%E6%A8%A1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%81%8B%E5%96%B6-%EF%BC%A8%EF%BD%85%EF%BD%8E%EF%BD%92%EF%BD%89%EF%BD%8B%EF%BC%AB%EF%BD%8E%EF%BD%89%EF%BD%82%EF%BD%85%EF%BD%92%EF%BD%87-ebook/dp/B01IGW5IIW?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B01IGW5IIW&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51gC8Tmq1kL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E3%83%AA%E3%83%BC%E3%83%B3%E9%96%8B%E7%99%BA%E3%81%AE%E7%8F%BE%E5%A0%B4-%E3%82%AB%E3%83%B3%E3%83%90%E3%83%B3%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%A7%E8%A6%8F%E6%A8%A1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%81%8B%E5%96%B6-%EF%BC%A8%EF%BD%85%EF%BD%8E%EF%BD%92%EF%BD%89%EF%BD%8B%EF%BC%AB%EF%BD%8E%EF%BD%89%EF%BD%82%EF%BD%85%EF%BD%92%EF%BD%87-ebook/dp/B01IGW5IIW?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B01IGW5IIW&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ＨｅｎｒｉｋＫｎｉｂｅｒｇ, 角谷信太郎&lt;/dd&gt;
    &lt;dd&gt;市谷聡啓 (翻訳), 藤原大 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オーム社 2013-10-25 (Release 2017-07-15)&lt;/dd&gt;
    &lt;dd&gt;eBooks Kindle版&lt;/dd&gt;
    &lt;dd&gt;ASIN: B01IGW5IIW&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私はこれで勉強しました。もう一回読み直すかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-01-13&#34;&gt;2019-01-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; &gt;amazon-item&lt;/a&gt; v0.1.0)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>NYAGOS 4.4.0 がリリースされた - release</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2019/01/nyagos-4_4_0-is-released/" />
		<id>tag:text.Baldanders.info,2019-01-12:/release/2019/01/nyagos-4_4_0-is-released/</id>
		<published>2019-01-12T17:23:12+09:00</published>
		<updated>2019-01-12T17:23:12+09:00</updated>
		<summary>実験レベルながら Linux に対応したですよ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="https://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos/&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid UNIXLike Commandline Shell for Windows&#34;&gt;NYAGOS&lt;/a&gt; 4.4.0 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.4.0_0&#34;&gt;Release 4.4.0_0 · zetamatta/nyagos · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変更点は以下の通り。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Support Linux (experimental)&lt;/li&gt;
&lt;li&gt;Fix the problem that current directories per drive were not inherited to child processes.&lt;/li&gt;
&lt;li&gt;Use the library &amp;quot;mattn/go-tty&amp;quot; instead of &amp;quot;zetamatta/go-getch&amp;quot;&lt;/li&gt;
&lt;li&gt;Stop using msvcrt.dll via &amp;quot;syscall&amp;quot; directly&lt;/li&gt;
&lt;li&gt;On linux, the filename NUL equals /dev/null&lt;/li&gt;
&lt;li&gt;Add lua-variable nyagos.goos&lt;/li&gt;
&lt;li&gt;(#341) Fix an unexpected space is inserted after wide characters

&lt;ul&gt;
&lt;li&gt;On Windows10, enable stdout virtual terminal processing always&lt;/li&gt;
&lt;li&gt;If git.exe push disable virtual terminal processing, enable again.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(#339) Fix that wildcard pattern .??* matches ..

&lt;ul&gt;
&lt;li&gt;It requires github.com/zetamatta/go-findfile tagged 20181223-2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;Linux サポート(実験レベル)&lt;/li&gt;
&lt;li&gt;ドライブ毎のカレントディレクトリが子プロセスに継承されなかった問題を修正&lt;/li&gt;
&lt;li&gt;ライブラリ &amp;quot;zetamatta/go-getch&amp;quot; のかわりに &amp;quot;mattn/go-tty&amp;quot; を使うようにした&lt;/li&gt;
&lt;li&gt;msvcrt.dll を直接syscall経由で使わないようにした。&lt;/li&gt;
&lt;li&gt;Linux でも NUL を /dev/null 相当へ&lt;/li&gt;
&lt;li&gt;Lua変数 nyagos.goos を追加&lt;/li&gt;
&lt;li&gt;(#341) Windows10で全角文字の前に文字を挿入すると、不要な空白が入る不具合を修正

&lt;ul&gt;
&lt;li&gt;それに伴い、Windows10 では virtual terminal processing を常に有効に&lt;/li&gt;
&lt;li&gt;git.exe pushが無効にしても再び有効にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(#339) ワイルドカード .??* が .. にマッチする問題を修正

&lt;ul&gt;
&lt;li&gt;要 github.com/zetamatta/go-findfile tagged 20181230-2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.4.0_beta&#34;&gt;Release 4.4.0_beta&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Remove beta&lt;/li&gt;
&lt;li&gt;To call a batchfile, stop to use &lt;code&gt;/V:ON&lt;/code&gt; for CMD.EXE&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;βを外した&lt;/li&gt;
&lt;li&gt;バッチファイルを呼ぶ時に、&lt;code&gt;/V:ON&lt;/code&gt; を CMD.EXE に使わないようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.4.0_0&#34;&gt;Release 4.4.0_0&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;実験レベルながら Linux に対応したですよ。
これって Windows を捨てようとしている私へのご褒美？ 正直に言って Linux に移行する際の shell をどうしようか悩んでたのよ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:lua1&#34;&gt;&lt;a href=&#34;#fn:lua1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
まぁ，当分先の話だが。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/gnu_bash_5010.html&#34;&gt;「GNU Bash 5.0」リリース、10年ぶりのメジャーバージョンアップ － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:lua1&#34;&gt;普段は bash でいいのだが，現在 &lt;a href=&#34;https://github.com/zetamatta/nyagos/&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid UNIXLike Commandline Shell for Windows&#34;&gt;NYAGOS&lt;/a&gt; 上で運用している Lua スクリプトを Linux でも使いたいなぁ，なんて。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:lua1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 指先のスローライフ，他 - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/01/12-stories/" />
		<id>tag:text.Baldanders.info,2019-01-12:/remark/2019/01/12-stories/</id>
		<published>2019-01-12T15:09:11+09:00</published>
		<updated>2019-01-12T15:09:11+09:00</updated>
		<summary>指先のスローライフ / Time Line について語るのは性癖の暴露にしかならない / 嗜癖する SNS / ここってブログなのだろうか</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;おおっ。
久しぶりの「週末スペシャル」だな。
今回は主に Facebook の TL に書き散らしたネタを放出する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#slow&#34;&gt;指先のスローライフ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tl&#34;&gt;Time Line について語るのは性癖の暴露にしかならない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#addict&#34;&gt;嗜癖する SNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trackback&#34;&gt;ここってブログなのだろうか&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;slow&#34;&gt;指先のスローライフ&lt;/h2&gt;

&lt;p&gt;引っ越してから手書きで文字を書く機会が増えた。&lt;/p&gt;

&lt;p&gt;私は子供の頃から悪筆だったが（書道教室に通ったが直らなかった），ソフトウェア業界に入って拍車がかかった。
まぁ，脳みそで考える速度で書こうとする（そして失敗する）から当たり前なのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:kb1&#34;&gt;&lt;a href=&#34;#fn:kb1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;そこで現在はなるべくゆっくり書くように気をつけていて，おかげで学生時代レベルの悪筆に改善しつつある。
私にとって「ゆっくり書く」ということは「ゆっくり考える」ことと同じで，これぞ「スローライフ」って感じである。&lt;/p&gt;

&lt;p&gt;まじでペン字とか習ったほうがいいんじゃないかと思い始めてるが，どうだろう。&lt;/p&gt;

&lt;h2 id=&#34;tl&#34;&gt;Time Line について語るのは性癖の暴露にしかならない&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.tinect.jp/?p=55243&#34;&gt;「SNSにつながるのをやめたほうがいいのでは……」という人々について。 | Books&amp;amp;Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでドラッカーを引くのは適切とは思えないのだが。
それ以前に Twitter を上げて Facebook を下げる意図が分からない。&lt;/p&gt;

&lt;p&gt;因みに私は，自身の Twitter TL の7割は（retweet も含めて）絵師さんの tweet で，残りの3割の半分くらいは作家さんやサービス・プロバイダからのプロモーション tweet だ。
これは意図的にそうしていて，かつて Tumblr を利用してた頃の名残でもある。&lt;/p&gt;

&lt;p&gt;もっと言うと，私の Facebook TL の半分はメディア・ニュースで，主に（近況のやり取りや戯れ言を書き散らす以外は）情報摂取のために利用している。
これで &lt;a href=&#34;https://text.baldanders.info/remark/2017/01/slack/&#34; title=&#34;いまさら聞けない Slack の使い方&#34;&gt;Slack を使った巡回&lt;/a&gt;を組み合わせれば欲しい情報にはだいたい手が届く。
だからユーザの制御の外から差し込まれる広告には本気でムカつくんだよ。&lt;/p&gt;

&lt;p&gt;前にもどこかで書いた気がするが「Twitter は〇〇で Facebook は△△」という決めつけには自身の性癖の暴露以上の意味はない。
私達は望んで TL をそのように構成しているのだ。
ましてやその性癖をフィルター・バブルに転嫁する物言いには嘲笑うしかない。
フィルター・バブルは私達が思う以上に巧妙で（市場経済という名の）業深きものである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scrapbox.io/spiegel-branch/%E3%82%BF%E3%82%A4%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E5%A5%B4%E9%9A%B7&#34;&gt;タイムラインの奴隷 - Spiegel&#39;s Branch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;addict&#34;&gt;嗜癖する SNS&lt;/h2&gt;

&lt;p&gt;そういえば今朝，こんな記事を見つけた。
記事自体は相関関係と因果関係を意図的に誤用するク◯記事だけど（下品でゴメン）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/01/12/2019-01-10-facebook-addiction-research/&#34;&gt;Facebookヘビーユーザーはドラッグ中毒者のようにまともな判断ができない  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;人間関係嗜癖は嗜癖問題の最たるもので，別に SNS でなくとも人と人とが交わる場なら，たとえば &lt;a href=&#34;https://wirelesswire.jp/2016/11/57893/&#34; title=&#34;ネットにしか居場所がないということ（前編） - WirelessWire News&#34;&gt;Wikipedia でも見ることができる&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;嗜癖（あるいはその典型としての依存症）の何が問題かというと，それによって（往々にして他者を巻き込んで）日常生活が破壊されるからであるが，これは持病というか性格のようなもので，決定的な破綻を招かないよう一生付き合って（向き合って）いくしかない。
そのために必要なのであれば Facebook のような SNS から距離を置くというのも必要な措置かも知れない。&lt;/p&gt;

&lt;p&gt;ここでは何度も書いているが，技術で社会は変わらない。
社会を構成し駆動し変えることができるのはあくまでも人間である。
もちろん進化の階梯を機械に明け渡して人類は退場するというのなら話は別だけど（笑）&lt;/p&gt;

&lt;p&gt;科学技術や情報技術は社会を変えるための極めて有力な「道具」だとは言えるけど，人の所業を技術や機械に転嫁するのは欺瞞であり怠慢であると私は思う。&lt;/p&gt;

&lt;h2 id=&#34;trackback&#34;&gt;ここってブログなのだろうか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.mu/tokuriki/n/n07b476f8be0e&#34;&gt;noteの記事引用通知機能は，初めてのトラックバックの感動を思い出させてくれそう｜徳力基彦（tokuriki）｜note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Medium も note もすっかり放置プレイ状態だな，私。
Git でソース管理して CI で deploy とかやり始めると「オン書き」に全く魅力を感じなくなる。&lt;/p&gt;

&lt;p&gt;そもそも私がブログでトラックバックを止めたのは不特定からの spam がウザすぎるからで，確かにサービス・プロバイダが管理すれば spam を回避できるんだろうけど，それってサービスに囲い込まれているだけでサービスの外には一歩も出れないということだ。
でも本当にそれはトラックバックと言えるんだろうか。&lt;/p&gt;

&lt;p&gt;ブログからトラックバックもコメントも排除するってことは限りなくテキスト・サイトに回帰するってことだよね（笑） やっぱ Disqus 外してテキスト・サイトにしようか。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07L616SP6/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41v64QozUhL._SL160_.jpg&#34; width=&#34;113&#34; height=&#34;160&#34; alt=&#34;6代目 日ペンの美子ちゃん&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07L616SP6/baldandersinf-22&#34;&gt;6代目 日ペンの美子ちゃん&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;服部 昇大&lt;/dd&gt;
    &lt;dd&gt;一迅社&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;6代目？ そんなに代替わりしているのか。何故か個人的には3代目の印象が強い。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2019.1.12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4414429145/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41NXMXRCBVL._SL160_.jpg&#34; width=&#34;110&#34; height=&#34;160&#34; alt=&#34;嗜癖する人間関係―親密になるのが怖い&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4414429145/baldandersinf-22&#34;&gt;嗜癖する人間関係―親密になるのが怖い&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アン・ウィルソン シェフ&lt;/dd&gt;
    &lt;dd&gt;誠信書房&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;終盤になると「霊性」という単語が頻出するけど，日本のいわゆる「スピリチュアル」や類似のカルトの言説とは意味が異なるのでご注意を。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2019.1.12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:kb1&#34;&gt;キーボードで入力すればほぼ考える速度で入力できるんだけどねぇ（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:kb1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>（不完全ながら） HTTPS 接続に対応した - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/01/replace-to-https/" />
		<id>tag:text.Baldanders.info,2019-01-07:/remark/2019/01/replace-to-https/</id>
		<published>2019-01-07T17:53:06+09:00</published>
		<updated>2019-01-07T17:53:06+09:00</updated>
		<summary>各ページに埋め込まれる他サイトのスクリプトや画像等のマテリアルに HTTPS に対応していないものがあるため不完全な対応になっている点はご了承の程を。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;遅まきながら&lt;a href=&#34;https://baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;本家サイト&lt;/a&gt;の HTTPS 接続に対応した。&lt;/p&gt;

&lt;p&gt;いや，随分前に「&lt;a href=&#34;https://www.sakura.ne.jp/&#34;&gt;さくらのレンタルサーバ&lt;/a&gt;」で &lt;a href=&#34;https://letsencrypt.org/&#34; title=&#34;Let&#39;s Encrypt - Free SSL/TLS Certificates&#34;&gt;Let&#39;s Encrypt&lt;/a&gt; を用いた &lt;a href=&#34;https://www.sakura.ne.jp/function/freessl.html&#34; title=&#34;無料SSLサーバー証明書 Let&#39;s Encrypt - レンタルサーバーはさくらインターネット&#34;&gt;TLS 設定が簡単になった&lt;/a&gt;という話は聞いてたのよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sakura.ad.jp/information/pressreleases/2017/10/10/90197/&#34;&gt;さくらインターネットの「さくらのレンタルサーバ」、コントロールパネル上の簡単操作で無料SSL証明書「Let’s Encrypt」を設定可能に | さくらインターネット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chalow.net/2018-01-14-1.html&#34;&gt;当ブログもHTTPSになりました！さくらの500円サーバーで「Let&#39;s Encrypt」によるSSL化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20180420/https&#34;&gt;今更ではあるが、本家サイトのHTTPS対応を行った - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただし，個人的には積極的に HTTPS に切り替える動機はなかった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tls1&#34;&gt;&lt;a href=&#34;#fn:tls1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; ので放置していた。&lt;/p&gt;

&lt;p&gt;ところが Facebook で聞いた話によると米国では ISP が Web の通信に対して何らかの干渉を行う懸念を払拭できないとかで，そういえば米国では&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/hacker-ethic-2/&#34;&gt;「ネットの中立性」は公式に破れている&lt;/a&gt;し日本もいずれそうなるだろうとは想像に難くない。&lt;/p&gt;

&lt;p&gt;そうであるなら，そういった通信に対する干渉を抑止するためにも HTTPS を有効にしておくのは意味があるだろうと考えを改めることにした。
まぁ，ページの広告エリアに採掘コードを差し込むとか，セキュリティと称して HTTPS 通信に中間者攻撃をかまして出歯亀するとかいったことが横行している状況で HTTPS でどこまで安全が担保されるのかは分からないが。&lt;/p&gt;

&lt;p&gt;なお，各ページに埋め込まれる他サイトのスクリプトや画像等のマテリアルに HTTPS に対応していないものがあるため不完全な対応になっている点はご了承の程を&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:site1&#34;&gt;&lt;a href=&#34;#fn:site1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
これは徐々に改修していく予定。&lt;/p&gt;

&lt;p&gt;このため，当面は HTTP と HTTPS の両方とも有効にして運用し強制的な HTTPS リダイレクトはしない。
上述したように，私は HTTPS をデータの機密性および完全性の観点からはあまり信用してないので「やらないよりはマシ」というスタンスで運用することにする。&lt;/p&gt;

&lt;h2 id=&#34;2019年の目標&#34;&gt;2019年の目標&lt;/h2&gt;

&lt;p&gt;実は今年の目標というか TODO として&lt;a href=&#34;https://baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;本家サイト&lt;/a&gt;の改造を考えていて，具体的には&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;本家サイト&lt;/a&gt;を &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; ベースに再構築する（ただし URL はできるだけ変えない）&lt;/li&gt;
&lt;li&gt;Flickr の写真を引き揚げて&lt;a href=&#34;https://baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;本家サイト&lt;/a&gt;に移転する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;と考えている。
今回の HTTP 接続対応はそのついでというわけだ。
上の2つのうち 2 に関しては既に全バックアップをとって手元にデータはあるのだが，&lt;a href=&#34;https://baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;本家サイト&lt;/a&gt;での公開については 1 の作業と併せて行う予定なので，しばらく先のことになるだろう。&lt;/p&gt;

&lt;p&gt;これ以外にもうひとつ問題があって， Amazon アフィリエイト・リンク作成サービスの &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; title=&#34;Amakuri [Amazonアフィリエイトリンク作成ツール]&#34;&gt;Amakuri&lt;/a&gt; がサービスを終了するらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dadadadone.com/archives/235&#34;&gt;【Amakuri】来年15日にAmakuriは閉鎖いたします - dadadadoneのメモ帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/10/amazon-affiliate-with-amakuri/&#34; title=&#34;Amazon アフィリエイトリンク作成サービスを Amakuri へ移行する&#34;&gt;G-Tools さんに続いて&lt;/a&gt;お宅もか &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;どうしよう。
たぶん類似サービスは軒並み閉鎖だよね，これ。
自前でツールを用意するしかないのか。
それが面倒くさいから人様のサービスを利用してたのに。&lt;/p&gt;

&lt;h2 id=&#34;ここのブログ-も-https-接続に対応していた&#34;&gt;&lt;a href=&#34;https://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;ここのブログ&lt;/a&gt;も  HTTPS 接続に対応していた&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;ここのブログ&lt;/a&gt;は &lt;a href=&#34;https://github.com/spiegel-im-spiegel/spiegel-im-spiegel.github.io&#34;&gt;GitHub Page&lt;/a&gt; なのだが，なにもしないのに何時の間にか HTTPS 接続に対応していたらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.github.com/2018-05-01-github-pages-custom-domains-https/&#34;&gt;Custom domains on GitHub Pages gain support for HTTPS | The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こちらも当面は HTTP と HTTPS の両方とも有効にして運用するが Flickr の写真と Amazon アフィリエイト・リンクの目処が立てば HTTPS 強制にしてもいいかも知れない。&lt;/p&gt;

&lt;h3 id=&#34;追記-e-words-用語集止めました&#34;&gt;【追記】 e-Words 用語集止めました&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;ここのブログ&lt;/a&gt;ではページ下部に &lt;a href=&#34;http://e-words.jp/&#34; title=&#34;IT用語辞典 e-Words&#34;&gt;e-Words&lt;/a&gt; 用語集のブログパーツを貼り付けていたのだが，既にメンテナンスされていないようで，かなり前から説明ページが消えてるし，しかも HTTP 接続オンリーで HTTPS なページに貼り付けるとブラウザから reject されるので，今回を機に削除することにした。&lt;/p&gt;

&lt;p&gt;本当は &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; も止めたい。
&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; の埋め込みコードは Firefox からはトラッキング・コードと見做されているため reject される。
設定を緩めればいける&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dq1&#34;&gt;&lt;a href=&#34;#fn:dq1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; のだが，それも微妙な気もする。
&lt;a href=&#34;https://twitter.com/spiegel_2007&#34;&gt;Twitter&lt;/a&gt; か &lt;a href=&#34;https://www.facebook.com/baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;Facebook ページ&lt;/a&gt;でフィードバックを，という手もあるが...&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sakura.ad.jp/information/news/2018/12/19/1968198392/&#34;&gt;ウェブサイトの常時SSL化普及へ向けたさくらのレンタルサーバの取り組み | さくらインターネット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rinopo/sakura-init&#34;&gt;GitHub - rinopo/sakura-init: さくらのレンタルサーバを借りたとき最初にすること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tapioca-hiroyuki.net/?blog=git0320&#34;&gt;Gitのリモートリポジトリにプッシュすると自動的にWebサイトが更新されるリポジトリを作成する |  Arcany&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/zprodev/items/0a16bc51866ee6a7a102&#34;&gt;さくらレンタルサーバーとSourceTreeでGit環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.sakura.ad.jp/hc/ja/articles/206054622&#34;&gt;.htaccessによるアクセス制御 – さくらのサポート情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pecopla.net/seo-column/sakura-server-redirect-method&#34;&gt;さくらのレンタルサーバーでのリダイレクト設定「.htaccess」を使ってhttp→httpsとwww有り無し統一のやり方 | SEO対策なら株式会社ペコプラ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gordiustears.net/trouble-with-wordpress-on-sakura-internet/&#34;&gt;さくらインターネットでWordPressを動かす時の定番のトラブル | ゴルディアスの涙目&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.flickr.net/en/2018/11/01/changing-flickr-free-accounts-1000-photos/&#34;&gt;Why we’re changing Flickr  free accounts | Flickr Blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://jp.techcrunch.com/2018/11/03/2018-11-02-flickrs-new-business-model-could-see-works-deleted-from-creative-commons/&#34;&gt;Flickrの新しいビジネスモデルでCreative Commonsの作品は消されるのか  |  TechCrunch Japan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:tls1&#34;&gt;こう言ったら専門家の方には鼻で笑われるだろうが，セキュリティ専門家が言う「木の葉を隠すなら林の中」理論で馬も鹿も HTTPS ってのには首を傾げてしまう。ましてや SEO 対策で HTTPS に切り替えるとか阿呆としか言いようがない。ひとつのドメインやサービスで，ページや状況によって HTTP と HTTPS を使い分けるな，というのならその通りだと思うけれど。まぁ &lt;a href=&#34;https://letsencrypt.org/&#34; title=&#34;Let&#39;s Encrypt - Free SSL/TLS Certificates&#34;&gt;Let&#39;s Encrypt&lt;/a&gt; が正式リリースされたし「面倒臭い」以外に HTTPS にしない理由はないので，今回はいい機会になったと考えている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tls1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:site1&#34;&gt;なにせ1999年以来19年分の垢がこびりついたサイトなので。って今年は（&lt;a href=&#34;https://baldanders.info/spiegel/log/&#34;&gt;本格的に Web で活動を始めて&lt;/a&gt;から）20周年やん！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:site1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dq1&#34;&gt;どうも Firefox 側でホワイトリストまたはブラックリストを持っていて，トラッキング・コードの配信元から有効/無効を判断してるっぽい。ホワイトリスト方式またはブラックリスト方式は運用する側にどうしても恣意が混入してしまう。この辺は spam メール対策で懲りているので賢いやり方に見えない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dq1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』を読む（ボーナストラック以外） - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/01/infoshare2/" />
		<id>tag:text.Baldanders.info,2019-01-04:/remark/2019/01/infoshare2/</id>
		<published>2019-01-04T19:53:34+09:00</published>
		<updated>2019-01-04T19:53:34+09:00</updated>
		<summary>具体的な話はせず与太話をいくつか書くに留めておくことにするので悪しからずご了承のほどを。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;『もうすぐ絶滅するという開かれたウェブについて &lt;a href=&#34;https://www.yamdas.org/infoshare2/&#34; title=&#34;『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』サポートページ&#34;&gt;続・情報共有の未来&lt;/a&gt;』（以後「&lt;a href=&#34;https://www.yamdas.org/infoshare2/&#34; title=&#34;『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』サポートページ&#34;&gt;続・情報共有の未来&lt;/a&gt;」と略称する）をよーやく読み終わったですよ。&lt;/p&gt;

&lt;p&gt;買ったのも2018年の5月に入ってからだし，私的事情で積ん読期間が結構あったということもあるけど，50章は（長いとか多いとかじゃなくて）デカい！ 読み終わった直後はクラクラしたですよ（笑） ちなみに2018年9月時点で v1.0.1 がリリースされている。&lt;/p&gt;

&lt;p&gt;今回も &lt;a href=&#34;https://dynalist.io/&#34;&gt;Dynalist&lt;/a&gt; でメモを取りながら読んだ。
最初に目次を拾ってコピペし，章ごとに思ったことをメモったり，気になるフレーズを引用したりする。
「技術的保護手段」で縛られた本ではできない芸当であり，ホンマ，&lt;a href=&#34;https://tatsu-zine.com/&#34;&gt;達人出版会&lt;/a&gt;様グッジョブ！ って感じである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dynalist.io/&#34;&gt;Dynalist&lt;/a&gt; に残したメモを眺めると，思ったより量が多くて，これを全部記事に盛り込んでたら文字数が膨大になりそう。
なので具体的な話はせず与太話をいくつか書くに留めておくことにする。&lt;/p&gt;

&lt;p&gt;なお，ボーナストラックの感想は書かない（多分）。
こちらは一言「泣ける！」とだけ記しておこう。&lt;/p&gt;

&lt;h2 id=&#34;情報力-をめぐるゲーム&#34;&gt;「情報力」をめぐるゲーム&lt;/h2&gt;

&lt;p&gt;他の記事でも書いているが，SF作家（？）の野尻抱介さん曰く「黄色矮星人は2人いれば力比べを始める」のだそうだ。
「情報共有の未来」とは「情報力」という power をめぐるゲームだと考えれば分かりやすい。
これは白田秀彰さんの&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/too-many-ghosts/&#34; title=&#34;今こそ「グリゴリの捕縛」を読め！ または遍在する草薙素子&#34;&gt;「グリゴリの捕縛」を読み直す&lt;/a&gt;ことで腑に落ちた。&lt;/p&gt;

&lt;p&gt;ゲームであればルールが必要である。
つまりルール（＝法）メイキングがとても重要ということだ。&lt;/p&gt;

&lt;p&gt;インターネットは基本的にコピーの連鎖でできている。
コピーによってデータと情報を血液のように循環させるわけだ。
したがってコピーを支配する「もの」がインターネットにおける勝者になれる。
国際的な著作権ルールが&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/copy-control-and-access-control/&#34; title=&#34;「技術的保護手段」と「技術的利用制限手段」&#34;&gt;アクセス・コントロールの独占&lt;/a&gt;へと野放図に向かっているのもそれ故だろう。&lt;/p&gt;

&lt;h2 id=&#34;ぼくがかんがえたさいきょうのいんたねっと史&#34;&gt;ぼくがかんがえたさいきょうのいんたねっと史&lt;/h2&gt;

&lt;p&gt;私が考えるに，インターネット・ユーザに要求される唯一のルールは「インターネットに参加する」ことであり，そこに付随するコストとリスクと責任を（手の届く範囲で）引き受けることである。
インターネットは（コンビニとかで&lt;code&gt;w&lt;/code&gt;）買うものではなく，作る（make）ものだ。&lt;/p&gt;

&lt;p&gt;本来インターネットに接続するマシンは，網または網間を繋ぐ「ノード」として機能する。
しかしノードを構築・維持するには相応のコストがかかる。
回線だって安くないし，そもそもカセットテープやフロッピー・ディスクで運用しているマイコンやパソコンなんか全くお呼びではなかった。
でも，この「参入障壁」こそが初期インターネットを守っていたのである。&lt;/p&gt;

&lt;p&gt;これが崩れたのが1990年代のインターネット商用化で，多くのユーザは ISP にぶら下がる「奴隷端末」になることと引き換えに「インターネットに参加する」ことなくインターネットに接続してデータや情報を得ることが可能になった。&lt;/p&gt;

&lt;p&gt;この状況を更に後押しするのがクラウドと SNS を含む XaaS である。
ゼロ年代以降に台頭した各種 XaaS は「独占的なマスター・ノードとそれにぶら下がる数多の奴隷端末」という構造を強化したわけだ。&lt;/p&gt;

&lt;p&gt;市場原理に基づいて駆動するインターネットは「情報力」を背景とした新たな階級を生み出し「支配なき統制」とも言うべき構造を構築した。
たとえば Bitcoin/Blockchain は最初こそ脱中央集権的な通貨システムとして期待されたが，結局は&lt;a href=&#34;https://text.baldanders.info/remark/2018/05/internet-as-a-class-system/&#34; title=&#34;階級社会としてのインターネット&#34;&gt;新たな階級社会を駆動するシステム&lt;/a&gt;となった。&lt;/p&gt;

&lt;p&gt;私を含む多くのユーザはクラウドや XaaS を通じてインターネットに「参加」しているつもりかも知れないが，本当はそれをただ「使用」しているに過ぎないかも知れない。
テレビ・リモコンの4色ボタンを押すだけではテレビというシステムに参加しているとは言わない。&lt;/p&gt;

&lt;h2 id=&#34;エンジニアこそ-狂狷の徒-たれ-hahahugoshortcode-0xc0059d6a00-4-hbhb&#34;&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/hacker-ethic/&#34;&gt;エンジニアこそ「狂狷の徒」たれ&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4344980158/baldandersinf-22&#34;&gt;はやぶさ―不死身の探査機と宇宙研の物語&lt;/a&gt;』にこんな一節がある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;理学は、真理の探究であり、工学は善の実現である。そして、藝術は美の表現である－－これで所謂「真美善」が揃う&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4344980158/baldandersinf-22&#34;&gt;はやぶさ―不死身の探査機と宇宙研の物語&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;何を以って「善」とするかは&lt;a href=&#34;https://baldanders.info/spiegel/log2/000242.shtml&#34; title=&#34;本当にヤバいのは「技術者」ではない人達だと思う — Baldanders.info&#34;&gt;非常に難しい&lt;/a&gt;ところだが，少なくとも職業エンジニアとしての私はこれを自らの矜持として行動してきたつもりである。&lt;/p&gt;

&lt;p&gt;『&lt;a href=&#34;https://www.yamdas.org/infoshare/&#34; title=&#34;『情報共有の未来』サポートページ&#34;&gt;情報共有の未来&lt;/a&gt;』も，その続編たる『&lt;a href=&#34;https://www.yamdas.org/infoshare2/&#34; title=&#34;『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』サポートページ&#34;&gt;続・情報共有の未来&lt;/a&gt;』も &lt;a href=&#34;http://shift-inc.co.jp/gtl/generativity/&#34; title=&#34;SHIFT Inc » Generativity&#34;&gt;generativity&lt;/a&gt; をキーワードにしている。
もし &lt;a href=&#34;http://shift-inc.co.jp/gtl/generativity/&#34; title=&#34;SHIFT Inc » Generativity&#34;&gt;generativity&lt;/a&gt; を「善」と位置付けるなら，如何にしてそれを実装するか試行錯誤するのが「狂狷の徒」たるエンジニアがインターネットに「参加」する条件だろう。&lt;/p&gt;

&lt;p&gt;書籍として『&lt;a href=&#34;https://www.yamdas.org/infoshare2/&#34; title=&#34;『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』サポートページ&#34;&gt;続・情報共有の未来&lt;/a&gt;』を読み通して最初に感じたのは「私ってインターネットを信用していないんだなぁ」ということだった。&lt;/p&gt;

&lt;p&gt;私から見て初期インターネットの背景にはヒッピー文化があると思うが，結果としてその文化は市場経済に塗りつぶされた。
でも初期インターネットを夢想する「老害」たちは当時の「黄金時代」を忘れられず，かといって「ネットのテレビ化」も止められないという状況に陥っている。&lt;/p&gt;

&lt;p&gt;これがこの本を読んで感じたインターネットに対する印象だ。
もしインターネットが「幼年期」を抜けて &lt;a href=&#34;http://shift-inc.co.jp/gtl/generativity/&#34; title=&#34;SHIFT Inc » Generativity&#34;&gt;generativity&lt;/a&gt; に象徴される「成年期」に向かおうというのなら「開かれたウェブ」が「もうすぐ絶滅する」というのは，ひょっとしたら（痛みは伴うとしても）歓迎すべき事態なのかも知れない。&lt;/p&gt;

&lt;p&gt;まぁ，そのとき私はもう&lt;a href=&#34;https://text.baldanders.info/remark/2016/12/real-is-not-therapy/&#34; title=&#34;ネットには居場所がないということ&#34;&gt;ネットにいない&lt;/a&gt;かも知れないが。&lt;/p&gt;

&lt;h2 id=&#34;ref&#34;&gt;参考になる（かもしれない）ページ&lt;/h2&gt;

&lt;p&gt;以下に『&lt;a href=&#34;https://www.yamdas.org/infoshare2/&#34; title=&#34;『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』サポートページ&#34;&gt;続・情報共有の未来&lt;/a&gt;』の Web 連載時に反応した記事や関連しそうな記事を挙げてみた。
参考になれば（私が）ラッキーということで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://baldanders.info/spiegel/log2/000242.shtml&#34;&gt;本当にヤバいのは「技術者」ではない人達だと思う — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baldanders.info/spiegel/log2/000401.shtml&#34;&gt;ディズニーランド的コモンズと Creative Commons — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baldanders.info/spiegel/log2/000611.shtml&#34;&gt;『情報共有の未来』を読む — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baldanders.info/spiegel/log2/000638.shtml&#34;&gt;『インテンション・エコノミー』を読む — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baldanders.info/spiegel/log2/000692.shtml&#34;&gt;恐るべき結婚 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baldanders.info/spiegel/log2/000737.shtml&#34;&gt;「ネット上の中傷やヘイトスピーチにどう対処すべきか」より — Baldanders.info&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://baldanders.info/spiegel/log2/000794.shtml&#34;&gt;俺達がインターネットだ！ — Baldanders.info&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/05/its-complicated/&#34;&gt;『つながりっぱなしの日常を生きる』を読む&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/05/filter-bubble/&#34;&gt;『フィルターバブル』を読む&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/11/the-shadow-web/&#34;&gt;“The Shadow Web” （再掲載）&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/06/goodbye-hatena-diary/&#34;&gt;「さよならはてなダイアリー」 ― 黒 Web 2.0 の終焉&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/09/anti-intellectualism/&#34;&gt;ようやく『反知性主義』を読んだ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/10/artificial-intelligence/&#34;&gt;AI は人（の良心）を殺すか？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/12/real-is-not-therapy/&#34;&gt;ネットには居場所がないということ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/12/fermented-internet/&#34;&gt;「インターネットと発酵」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/too-many-ghosts/&#34;&gt;今こそ「グリゴリの捕縛」を読め！ または遍在する草薙素子&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://scrapbox.io/spiegel-branch/%E3%82%BF%E3%82%A4%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E5%A5%B4%E9%9A%B7&#34;&gt;タイムラインの奴隷 - Spiegel&#39;s Branch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/hacker-ethic/&#34;&gt;エンジニアこそ「狂狷の徒」たれ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/hacker-ethic-2/&#34;&gt;「ネットの中立性」と「後出しジャンケン」と「メディアによる検閲を迂回する」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/artificial-intelligence/&#34;&gt;本当に「良心」を無意味化する時代がやってくる？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/artificial-intelligence-book/&#34;&gt;『AI vs. 教科書が読めない子どもたち』を読む&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/blockchain-and-pki/&#34;&gt;「仮想通貨」と公開鍵基盤&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/04/handling-privacy/&#34;&gt;誰がプライバシーを支配するのか&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/05/internet-as-a-class-system/&#34;&gt;階級社会としてのインターネット&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/05/information-illiterate/&#34;&gt;「情報弱者」を再々定義する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/copyright-law-is-revised/&#34;&gt;年末年始に施行される改正著作権法に関する覚え書き&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://orion.mt.tama.hosei.ac.jp/hideaki/kenporon.htm&#34;&gt;グリゴリの捕縛 あるいは 情報時代の憲法について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/tsukamoto/wiki-2984796&#34;&gt;群衆の知恵・集団的知性とWikiコラボレーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kzk-memo.blogspot.com/2010/04/collective-intelligencewisdom-of-crowds.html&#34;&gt;MEMO: 集団的知性（Collective Intelligence）と、群衆の知恵（Wisdom of Crowds）の違い&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1712/26/news104.html&#34;&gt;総務省、IoT機器に「認証マーク」導入へ　サイバー攻撃急増で - ITmedia NEWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cruel.org/economist/courier200712.html&#34;&gt;クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;
    &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/877/cover_s.jpg&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;yomoyomo&lt;/dd&gt;
      &lt;dd&gt;達人出版会 2017-12-25&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://wirelesswire.jp/author/yomoyomo/&#34;&gt;WirelessWire News 連載&lt;/a&gt;の書籍化。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
    &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;
    &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/15/cover_s.jpg&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare&#34;&gt;情報共有の未来&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;yomoyomo&lt;/dd&gt;
      &lt;dd&gt;達人出版会 2011-12-30&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;p class=&#34;description&#34;&gt;同名ブログの書籍化。感想は&lt;a href=&#34;https://baldanders.info/spiegel/log2/000611.shtml&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
    &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4344980158/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41pq6GlY%2BGL._SL160_.jpg&#34; width=&#34;100&#34; height=&#34;160&#34; alt=&#34;はやぶさ―不死身の探査機と宇宙研の物語 (幻冬舎新書)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4344980158/baldandersinf-22&#34;&gt;はやぶさ―不死身の探査機と宇宙研の物語 (幻冬舎新書)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;吉田 武&lt;/dd&gt;
    &lt;dd&gt;幻冬舎&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;宇宙研（ISAS）の歴史とともに日本の宇宙開発について解説する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B012VRLPRG/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41-khbugqTL._SL160_.jpg&#34; width=&#34;106&#34; height=&#34;160&#34; alt=&#34;反知性主義―アメリカが生んだ「熱病」の正体―（新潮選書）&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B012VRLPRG/baldandersinf-22&#34;&gt;反知性主義―アメリカが生んだ「熱病」の正体―（新潮選書）&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;森本 あんり&lt;/dd&gt;
    &lt;dd&gt;新潮社&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;アメリカの近代思想史または宗教史といった位置付けだろうか。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; height=&#34;160&#34; alt=&#34;信頼と裏切りの社会&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー&lt;/dd&gt;
    &lt;dd&gt;エヌティティ出版&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。そういいえば『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B01MZGVHOA/baldandersinf-22&#34;&gt;超監視社会&lt;/a&gt;』は積ん読のまま読んでない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4150504598/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41UdjkE4OpL._SL160_.jpg&#34; width=&#34;108&#34; height=&#34;160&#34; alt=&#34;フィルターバブル──インターネットが隠していること (ハヤカワ文庫NF)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4150504598/baldandersinf-22&#34;&gt;フィルターバブル──インターネットが隠していること (ハヤカワ文庫NF)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;イーライ・パリサー&lt;/dd&gt;
    &lt;dd&gt;早川書房&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ネットにおいて私たちは自由ではなく，それと知らず「フィルターバブル」に捕らわれている。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B0125TZSZ0/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/616sjle5ITL._SL160_.jpg&#34; width=&#34;109&#34; height=&#34;160&#34; alt=&#34;つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B0125TZSZ0/baldandersinf-22&#34;&gt;つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ダナ・ボイド&lt;/dd&gt;
    &lt;dd&gt;草思社&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B01J1I8PRQ/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/5132MaXTkGL._SL160_.jpg&#34; width=&#34;112&#34; height=&#34;160&#34; alt=&#34;社会は情報化の夢を見る (河出文庫)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B01J1I8PRQ/baldandersinf-22&#34;&gt;社会は情報化の夢を見る (河出文庫)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;佐藤俊樹&lt;/dd&gt;
    &lt;dd&gt;河出書房新社&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/31e2h91IUWL._SL160_.jpg&#34; width=&#34;103&#34; height=&#34;160&#34; alt=&#34;イノベーション 悪意なき嘘 (双書 時代のカルテ)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22&#34;&gt;イノベーション 悪意なき嘘 (双書 時代のカルテ)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;名和 小太郎&lt;/dd&gt;
    &lt;dd&gt;岩波書店&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>2019年 公有化に関する2つの話題 - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/01/public-domain-material/" />
		<id>tag:text.Baldanders.info,2019-01-02:/remark/2019/01/public-domain-material/</id>
		<published>2019-01-02T11:06:50+09:00</published>
		<updated>2019-01-05T10:08:21+09:00</updated>
		<summary>むしろこれを機会に「自由」について日本人もそろそろ真面目に考えてみるというのはどうだろう。そういう2019年になれば幸いである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;あけましておめでとうございます。
2019年もよろしくおねがいします。&lt;/p&gt;

&lt;p&gt;先日から&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/i-am-a-sunday-programmer/&#34;&gt;実家に引きこもっている&lt;/a&gt;のだが，テレビによる「平成最後の〇〇」連呼にウンザリしていまいゲームと読書で自堕落に暮らしている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:era1&#34;&gt;&lt;a href=&#34;#fn:era1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
おかげ様で『&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;』の本編を読み終えちまったぜ（感想は後日）。&lt;/p&gt;

&lt;p&gt;毎年この時期の恒例である「公有化される作品の作家」リストの話題だが，&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/copyright-law-is-revised/&#34; title=&#34;年末年始に施行される改正著作権法に関する覚え書き&#34;&gt;昨年末に施行された改正著作権法&lt;/a&gt;のおかげで20年先送りされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aozora.gr.jp/soramoyou/soramoyou2018.html#000500&#34;&gt;これからの20年に向けて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aozora.gr.jp/soramoyou/soramoyouindex.html#000507&#34;&gt;20年先の種を蒔く――真実は時の娘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一方，米国においては著作権保護期間延長が決まってからちょうど20年経ったそうで，ようやく今年から「公有化される作品の作家」が追加される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/2018/12/05/join-us-for-a-grand-re-opening-of-the-public-domain/&#34;&gt;Join us for A Grand Re-Opening of the Public Domain - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.archive.org/2018/12/05/join-us-for-a-grand-re-opening-of-the-public-domain-january-25-2019/&#34;&gt;Join us for A Grand Re-Opening of the Public Domain | Internet Archive Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20181210/reopeningpublicdomain&#34;&gt;アメリカにパブリックドメインが帰ってくることを祝してインターネット・アーカイブに寄付した - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういった先行例を見ても今回の（政局によりなし崩し的に決められた）著作権期間延長が著作権法の目的（第1条「文化の発展に寄与することを目的とする」）に背くものであることが分かると思う。&lt;/p&gt;

&lt;p&gt;まぁ，いつまで愚痴っていてもしょうがない。
できることをしよう。&lt;/p&gt;

&lt;p&gt;まず『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4899840721/baldandersinf-22&#34;&gt;インターネット図書館 青空文庫&lt;/a&gt;』の巻末に寄せられた&lt;a href=&#34;https://www.tomita-michio.jp/&#34; title=&#34;飛翔 – 富田倫生のページ&#34;&gt;富田倫生&lt;/a&gt;さんの文章が&lt;a href=&#34;https://www.aozora.gr.jp/&#34; title=&#34;青空文庫 Aozora Bunko&#34;&gt;青空文庫&lt;/a&gt;に収録された。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aozora.gr.jp/cards/000055/card59489.html&#34;&gt;図書カード：「天に積む宝」のふやし方、へらし方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.aozora.gr.jp/index_pages/person55.html&#34; title=&#34;作家別作品リスト：富田 倫生&#34;&gt;Profile&lt;/a&gt; を見て気付いたが，&lt;a href=&#34;https://www.tomita-michio.jp/&#34; title=&#34;飛翔 – 富田倫生のページ&#34;&gt;富田倫生&lt;/a&gt;さんって広島市の出身なんだねぇ。
広島でこの手のイベントをやればいいのに。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.aozora.gr.jp/soramoyou/soramoyouindex.html#000503&#34; title=&#34;20年先の種を蒔く――真実は時の娘&#34;&gt;2019年に公有化される筈だった作品の作家リスト&lt;/a&gt;を見ると翻訳家の方が2人ほどいらっしゃる。
ご存知とは思うが，翻案された作品には（原作者とは別に）翻案者にも著作権が発生する。
したがって原作者の作品の著作権が切れていても翻案者の保護期間が残っている場合もあるわけだ。&lt;/p&gt;

&lt;p&gt;これに対して翻訳者の方が翻訳文に &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; を付けるなどして意図的に&lt;a href=&#34;https://www.aozora.gr.jp/&#34; title=&#34;青空文庫 Aozora Bunko&#34;&gt;青空文庫&lt;/a&gt;に収録する場合もある。
ちなみに私は&lt;a href=&#34;https://www.aozora.gr.jp/index_pages/person10.html&#34; title=&#34;作家別作品リスト：大久保 ゆう&#34;&gt;大久保ゆう&lt;/a&gt;さんによるシャーロック・ホームズ・シリーズの翻訳のファンである。
また，翻訳文に限らずとも&lt;a href=&#34;https://www.aozora.gr.jp/index_pages/person21.html&#34; title=&#34;作家別作品リスト：白田 秀彰&#34;&gt;白田秀彰&lt;/a&gt;さんのように自身の論文を&lt;a href=&#34;https://www.aozora.gr.jp/&#34; title=&#34;青空文庫 Aozora Bunko&#34;&gt;青空文庫&lt;/a&gt;に登録している方もおられる。&lt;/p&gt;

&lt;p&gt;公有化されていなくても作品を「自由」にすることはできるのだ。&lt;/p&gt;

&lt;p&gt;余談だが Change.org で以下のキャンペーンが上がっている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.change.org/p/%E6%97%A5%E6%9C%AC%E5%9B%BD%E6%94%BF%E5%BA%9C-%E8%91%97%E4%BD%9C%E6%A8%A9%E4%BF%9D%E8%AD%B7%E6%9C%9F%E9%96%93%E3%81%AE%E5%BB%B6%E9%95%B7%E3%82%92%E4%B9%97%E3%82%8A%E8%B6%8A%E3%81%88%E3%81%A6-%E4%BD%9C%E5%93%81%E3%82%92%E6%AD%BB%E8%94%B5%E3%81%8B%E3%82%89%E6%95%91%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF%E3%82%92%E9%80%B2%E3%82%81%E3%82%88%E3%81%86&#34;&gt;キャンペーン · 日本国政府: 著作権保護期間の延長を乗り越えて、作品を死蔵から救うためのしくみを進めよう！ · Change.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ私は署名に参加するくらいしかできないが，こういうものもあると覚えていただけると嬉しい。&lt;/p&gt;

&lt;p&gt;著作権保護期間延長は明確に改悪だと思うが今さら文句を言っても始まらないし，むしろこれを機会に「自由」について日本人もそろそろ真面目に考えてみるというのはどうだろう。
そういう2019年になれば幸いである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cruel.org/economist/courier200712.html&#34;&gt;クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/hacker-ethic/&#34;&gt;エンジニアこそ「狂狷の徒」たれ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4899840721/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51V8S7TXJ5L._SL160_.jpg&#34; width=&#34;112&#34; height=&#34;160&#34; alt=&#34;インターネット図書館 青空文庫&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4899840721/baldandersinf-22&#34;&gt;インターネット図書館 青空文庫&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;野口 英司&lt;/dd&gt;
    &lt;dd&gt;はる書房&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;青空文庫の活動について紹介。作品を収録した DVD も付いてる！ 巻末に載っている&lt;a href=&#34;https://www.tomita-michio.jp/&#34;&gt;富田倫生&lt;/a&gt;さんの文章は&lt;a href=&#34;https://www.aozora.gr.jp/cards/000055/card59489.html&#34;&gt;青空文庫に収録&lt;/a&gt;されている。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2019.1.2&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4756117074/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/5131GA04AHL._SL160_.jpg&#34; width=&#34;108&#34; height=&#34;160&#34; alt=&#34;本の未来 (Ascii books)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4756117074/baldandersinf-22&#34;&gt;本の未来 (Ascii books)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;富田 倫生&lt;/dd&gt;
    &lt;dd&gt;アスキー&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;e-book の未来を予見する試みの書。あるいは本とコンピュータの関係について。&lt;a href=&#34;https://www.aozora.gr.jp/cards/000055/card56499.html&#34;&gt;青空文庫にも収録&lt;/a&gt;されている。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2019.1.2&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4775929259/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51KBkKGu6NL._SL160_.jpg&#34; width=&#34;160&#34; height=&#34;160&#34; alt=&#34;シャーロック・ホームズ「赤毛連盟」&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4775929259/baldandersinf-22&#34;&gt;シャーロック・ホームズ「赤毛連盟」&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アーサー コナン・ドイル, Arthur Conan Doyle&lt;/dd&gt;
    &lt;dd&gt;でじじ発行/パンローリング発売&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;&#34;https://www.aozora.gr.jp/&gt;青空文庫&lt;/a&gt;に収録されているシャーロック・ホームズ・シリーズの翻訳を朗読する。第一弾は「赤毛連盟（Red-Headed League）」で佐々木健さんによる朗読。一人で何役もこなす佐々木健さんがかっこいい！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2019.1.4&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:era1&#34;&gt;生前退位による改元なんだからそこまでの重みはないし，重くしないための生前退位でもあると思うのだが。昭和から平成への改元は「冷戦終結」と重なっており歴史的にも意味のある大転換だったが，年単位で激しく変化する昨今に改元程度の変化ではインパクトが小さいだろう。まぁ歴史は過ぎてみないと分からないが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:era1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語で Factory Method Pattern を構成できるか - golang</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/factory-method-pattern/" />
		<id>tag:text.Baldanders.info,2018-12-30:/golang/factory-method-pattern/</id>
		<published>2018-12-30T15:24:48+09:00</published>
		<updated>2018-12-31T09:01:54+09:00</updated>
		<summary>継承できないなら注入すればいいじゃない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="https://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;少し前に面白い記事を見かけたのだが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/daiching/items/e986ccd8a3f18c56c406&#34;&gt;Go言語で factory method パターンを書いてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「これって factory method pattern じゃないよね」と思いつつ「&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には「継承」がない」ことを説明する好例だと気付いたので今回の記事を書いてみた。&lt;/p&gt;

&lt;h2 id=&#34;factory-method-pattern-とは&#34;&gt;Factory Method Pattern とは&lt;/h2&gt;

&lt;p&gt;まずは factory method pattern の解説から。
以下にクラス図を示す。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./factory-method-pattern.puml&#34;&gt;&lt;img src=&#34;./factory-method-pattern.png&#34; srcset=&#34;./factory-method-pattern.png 1165w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;Product&lt;/code&gt; は抽象クラスで &lt;code&gt;ConcreteProduct&lt;/code&gt; が &lt;code&gt;Product&lt;/code&gt; の実装クラスである。
&lt;code&gt;Creator&lt;/code&gt; クラスの &lt;code&gt;factoryMethod()&lt;/code&gt; メソッドは &lt;code&gt;Product&lt;/code&gt; インスタンスを返す抽象メソッドで，サブクラスの &lt;code&gt;ConcreteCreator&lt;/code&gt; で実装されている。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Creator&lt;/code&gt; クラスを利用する側はサブクラスの &lt;code&gt;ConcreteCreator&lt;/code&gt; を &lt;code&gt;Creator&lt;/code&gt; クラスとして生成し &lt;code&gt;anOperation()&lt;/code&gt; メソッドをキックする。&lt;/p&gt;

&lt;p&gt;ポイントは &lt;code&gt;anOperation()&lt;/code&gt; メソッドが実装メソッドで，内部では &lt;code&gt;factoryMethod()&lt;/code&gt; メソッドが呼ばれている点である。
ただし &lt;code&gt;Creator&lt;/code&gt; インスタンスの実体は &lt;code&gt;ConcreteCreator&lt;/code&gt; クラスなので， &lt;code&gt;anOperation()&lt;/code&gt; メソッドから呼ばれるのはオーバーライドされた &lt;code&gt;ConcreteCreator&lt;/code&gt; のほうの &lt;code&gt;factoryMethod()&lt;/code&gt; であることが期待される，というわけだ。&lt;/p&gt;

&lt;p&gt;本来なら &lt;code&gt;Creator&lt;/code&gt; インスタント生成時にどの &lt;code&gt;ConcreteProduct&lt;/code&gt; インスタンスを（&lt;code&gt;Product&lt;/code&gt; クラスとして）使うのか判断すればいいのだが（これが factory pattern），それだと &lt;code&gt;ConcreteProduct&lt;/code&gt; クラスが増えるたびに &lt;code&gt;Creator&lt;/code&gt; クラスも修正しなければならず管理が煩雑になる。&lt;/p&gt;

&lt;p&gt;そこで &lt;code&gt;ConcreteProduct&lt;/code&gt; クラスと一対一に対応する &lt;code&gt;ConcreteCreator&lt;/code&gt; クラスをつくり，その中でどの &lt;code&gt;ConcreteProduct&lt;/code&gt; インスタンスを（&lt;code&gt;Product&lt;/code&gt; クラスとして）使うのか判断している，つまり「&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22&#34; title=&#34;増補改訂版 Java言語で学ぶデザインパターン入門 | 結城 浩 | コンピュータ・IT | Kindleストア | Amazon&#34;&gt;インスタンス作成をサブクラスにまかせる&lt;/a&gt;」のである。&lt;/p&gt;

&lt;h2 id=&#34;go-言語-には-継承-inheritance-がない&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には「継承（Inheritance）」がない&lt;/h2&gt;

&lt;p&gt;しかし，このデザイン・パターンは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では使えない。
何故なら「&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には「継承」がない」からである。&lt;/p&gt;

&lt;h3 id=&#34;汎化と構造的部分型-structural-subtyping&#34;&gt;汎化と構造的部分型（Structural Subtyping）&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではクラス間の「汎化」関係を実装する手段として interface 型を持っているが，これは「振る舞い」のみを定義する。
先程の &lt;code&gt;Creator&lt;/code&gt; クラスのように抽象メソッドと実装メソッドをひとつのクラスの中に混ぜ込むことはできない。
Interface のような型を一般的には「構造的部分型」と呼ぶらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dt1&#34;&gt;&lt;a href=&#34;#fn:dt1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;埋め込み-embedding-と委譲-delegation&#34;&gt;埋め込み（Embedding）と委譲（Delegation）&lt;/h3&gt;

&lt;p&gt;もうひとつ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には型を構造体のフィールドとして埋め込む機能がある。
たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という型があるとして&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすれば &lt;code&gt;child&lt;/code&gt; 型は &lt;code&gt;parent&lt;/code&gt; 型の属性や操作をそのまま使うことができる。
こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#39;m parent type.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//I&amp;#39;m parent type.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//I&amp;#39;m parent type.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;child&lt;/code&gt; 型は &lt;code&gt;parent&lt;/code&gt; 型を（擬似的に）継承しているように見える。
更に &lt;code&gt;child&lt;/code&gt; 型に対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#39;m child type.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という関数を追加すれば&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#39;m parent type.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#39;m child type.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//I&amp;#39;m parent type.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//I&amp;#39;m child type.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;という感じになり &lt;code&gt;child&lt;/code&gt; 型の &lt;code&gt;Say()&lt;/code&gt; 関数が &lt;code&gt;parent&lt;/code&gt; 型の &lt;code&gt;Say()&lt;/code&gt; 関数をオーバーライドしているように見える。
ところが &lt;code&gt;parent&lt;/code&gt; 型に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Speek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という関数を追加し，これを使って喋らせてみると&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#39;m parent type.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Speek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#39;m child type.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Say&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Speek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//I&amp;#39;m child type.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//I&amp;#39;m parent type.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;となり &lt;code&gt;Speek()&lt;/code&gt; 関数はあくまでも &lt;code&gt;parent&lt;/code&gt; 型の &lt;code&gt;Say()&lt;/code&gt; 関数を呼び出していることが分かる。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の埋め込みフィールドは「継承」ではなく「委譲」として機能する。
したがって C++ や Java の仮想関数のようにメソッドがオーバーライドされることもない。
型の中で関数名が被った際の暗黙の優先順位は決められているためオーバーライドしているように見えるだけなのである。&lt;/p&gt;

&lt;p&gt;これを先程の factory method pattern のクラス図に当てはめて考えると &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で無理やり実装しようとしても&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./delegation.puml&#34;&gt;&lt;img src=&#34;./delegation.png&#34; srcset=&#34;./delegation.png 1306w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;という感じになり，そもそも &lt;code&gt;Creator&lt;/code&gt; を抽象クラスに（polymorphic に）できないし，サブクラスの &lt;code&gt;ConcreteCreator&lt;/code&gt; から &lt;code&gt;anOperation()&lt;/code&gt; メソッドを呼び出しても内部で呼び出される &lt;code&gt;factoryMethod()&lt;/code&gt; メソッドは &lt;code&gt;Creator&lt;/code&gt; クラスのものということになる。&lt;/p&gt;

&lt;h2 id=&#34;継承-できないなら-注入-すればいいじゃない&#34;&gt;「継承」できないなら「注入」すればいいじゃない&lt;/h2&gt;

&lt;p&gt;さて，どうしようか。
とりあえずコードを書きながら考えてみよう。&lt;/p&gt;

&lt;p&gt;最初に紹介した記事を参考にしつつ，まずは &lt;code&gt;Product&lt;/code&gt; に相当する interface 型を以下のように定義するところから始めようか。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//Human is Product class of factory method pattern
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;SelfIntroduction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;続いて &lt;code&gt;ConcreteProduct&lt;/code&gt; に相当する型も定義する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//NamedHuman is parent class with name property
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NamedHuman&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;MyName&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nh&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NamedHuman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;〈名無し〉&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyName&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//Man is Concrete Product class of factory method pattern
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Man&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;NamedHuman&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Man&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SelfIntroduction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;だぜ！&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//woman is Concrete Product class of factory method pattern
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Woman&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;NamedHuman&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Woman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SelfIntroduction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;よ！&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちょっと分かりにくいかも知れないが，クラス図にすると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./human.puml&#34;&gt;&lt;img src=&#34;./human.png&#34; srcset=&#34;./human.png 1134w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;となっていて &lt;code&gt;Man&lt;/code&gt; 型および &lt;code&gt;Woman&lt;/code&gt; 型が（&lt;code&gt;Human&lt;/code&gt; 型に対する） &lt;code&gt;ConcreteProduct&lt;/code&gt; クラスに相当するのが分かると思う。
ちょろんと動かしてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewMan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Man&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewWoman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Woman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewMan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;太郎&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewWoman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;花子&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SelfIntroduction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SelfIntroduction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//太郎だぜ！
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//花子よ！
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/KYQV48YV2pz&#34; title=&#34;The Go Playground&#34;&gt;問題なく動作する&lt;/a&gt;ことが確認できた。&lt;/p&gt;

&lt;p&gt;ここまで書いたコードを眺めてみると &lt;code&gt;NewMan()&lt;/code&gt; および &lt;code&gt;NewWoman()&lt;/code&gt; 関数が &lt;code&gt;factoryMethod()&lt;/code&gt; メソッドと似た機能を有していることが分かる。
じゃあ，これらの関数を実行時に &lt;code&gt;Creator&lt;/code&gt; クラスに埋め込むように構成すればいんじゃね？&lt;/p&gt;

&lt;p&gt;さっそく書いてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//Speaker is Creator class of factory method pattern
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Speaker&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;createHuman&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Speaker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createHuman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SelfIntroduction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;createHuman&lt;/code&gt; は関数型のメンバ変数で &lt;code&gt;func(string) Human&lt;/code&gt; のインタフェースを持つ関数を表す。
これはすなわち &lt;code&gt;NewMan()&lt;/code&gt; および &lt;code&gt;NewWoman()&lt;/code&gt; 関数のことである。&lt;/p&gt;

&lt;p&gt;それでは実際に動かしてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewSpeeker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Human&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Speaker&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Speaker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createHuman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewSpeeker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewMan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewSpeeker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewWoman&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;太郎&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Speech&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;花子&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//太郎だぜ！
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//花子よ！
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/_QFnKteL_c6&#34; title=&#34;The Go Playground&#34;&gt;よーし，うむうむ，よーし&lt;/a&gt;。
クラス図にするとこんな感じだろうか（factory method pattern のクラス図と比較してみよう）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./injection.puml&#34;&gt;&lt;img src=&#34;./injection.png&#34; srcset=&#34;./injection.png 1168w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;これってだいぶ不格好だけど，まさしく依存（オブジェクト）の注入（dependency injection pattern）だよね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:di1&#34;&gt;&lt;a href=&#34;#fn:di1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ていうか &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;プログラマは error 型や標準パッケージの &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Reader&lt;/code&gt; などを通じて息をするように「依存の注入」を行っているわけで，「継承できないなら注入すればいいじゃない」という感じで，自国語に得意なパターンへ持ち込むのが得策だと思う。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Factory_Method_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3&#34;&gt;Factory Method パターン - Wikipedia&lt;/a&gt; : クラス図はこちらを参考にした&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;Dependency injection - Wikipedia&lt;/a&gt; : 英語版と日本語版でかなり内容が異なるのだが大丈夫か？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
- [The Go Playground](https://play.golang.org/p/lQlNziXLf9F)
--&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41mh5r0NwLL._SL160_.jpg&#34; width=&#34;126&#34; height=&#34;160&#34; alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.7&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dt1&#34;&gt;Interface 型の性質を示すものとして &lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia&#34;&gt;duck typing&lt;/a&gt; がよく挙げられる。私も以前はそう思っていたが &lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia&#34;&gt;duck typing&lt;/a&gt; は動的型付き言語で型を決定する手法（のひとつ）を指すのだそうだ。もちろん &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は静的型付き言語なのでこれに当てはまらない。じゃあ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の interface 型は何かというと&lt;a href=&#34;https://methane.hatenablog.jp/entry/ruby-python-go-typing&#34; title=&#34;Python と Ruby と typing - methaneのブログ&#34;&gt;「構造的部分型」と呼ぶのが正しい&lt;/a&gt;ようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:di1&#34;&gt;私は dependency injection を「依存性の注入」と訳すことに懐疑的だという&lt;a href=&#34;http://blog.a-way-out.net/blog/2015/08/31/your-dependency-injection-is-wrong-as-I-expected/&#34; title=&#34;やはりあなた方のDependency Injectionはまちがっている。 — A Day in Serenity (Reloaded) — PHP, FuelPHP, Linux or something&#34;&gt;主張&lt;/a&gt;に同意します。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:di1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>真面目に PlantUML (3) : クラス図 - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/" />
		<id>tag:text.Baldanders.info,2018-12-29:/remark/2018/12/plantuml-3-class-diagrams/</id>
		<published>2018-12-29T18:11:06+09:00</published>
		<updated>2018-12-30T13:10:09+09:00</updated>
		<summary>今回はクラス図について。 オブジェクト図やパッケージ図までだどりつけなかった orz</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;今回はクラス図（class diagram）について。
クラス図はシステムの構成要素であるクラスを定義しクラス同士の関係を表現したものである。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;クラスの定義&#34;&gt;クラスの定義&lt;/h2&gt;

&lt;p&gt;まずはクラスの定義から。&lt;/p&gt;

&lt;p&gt;クラスはひとつの「名前」，0個以上の「属性」，0個以上の「操作」で構成され，以下のように表す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle

class &amp;#34;Class Name&amp;#34; as Class {
  {field} Attributes
  {method} Operations
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./declare-class.puml&#34;&gt;&lt;img src=&#34;./declare-class.png&#34; srcset=&#34;./declare-class.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;抽象クラスの場合は「名前」をイタリック（または斜体）で表す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;abstract&lt;/code&gt; を付けることで抽象クラスとして扱われる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle

abstract class &amp;#34;Abstract Class&amp;#34; as Class1
abstract class &amp;#34;Interface Class&amp;#34; as Class2  &amp;lt;&amp;lt;interface&amp;gt;&amp;gt;

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./declare-abstract-class.puml&#34;&gt;&lt;img src=&#34;./declare-abstract-class.png&#34; srcset=&#34;./declare-abstract-class.png 784w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;interface&amp;gt;&amp;gt;&lt;/code&gt; はステレオタイプ（stereotype）と呼ばれているもので，ここではクラスの種別を表している。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ではアイコンを使ってクラス種別を表現できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

show circle

class ImplementClass
abstract class AbstractClass
interface InterfaceClass
enum Enum {
  ONE
  TWO
  THREE
}
annotation Annotation
class CustomClass &amp;lt;&amp;lt; (S,orchid) custom &amp;gt;&amp;gt;

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./classes.puml&#34;&gt;&lt;img src=&#34;./classes.png&#34; srcset=&#34;./classes.png 1429w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;最後の CustomClass ではアイコンをカスタムで指定している。&lt;/p&gt;

&lt;!--
## 名前とパッケージ

UML ではクラスの「名前」を

```text
パッケージ名:クラス名
```

で表記する。
ただしパッケージ名は省略可能。

[PlantUML] では “`.`” をデリミタとしてパッケージとクラス名を分離することもできる。

```puml
@startuml

hide circle

Package2.Class1 -|&gt; Package1.BaseClass
Package2.Class1 *-- Package2.Class2

Package1.BaseClass &lt;|-- Package3.Class1
Package3.Class1 *- Package3.Class2

@enduml
```

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./package.puml&#34;&gt;&lt;img src=&#34;./package.png&#34; srcset=&#34;./package.png 1059w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
--&gt;

&lt;h3 id=&#34;属性-attribute-操作-operation-可視性-visibility&#34;&gt;属性（attribute），操作（operation），可視性（Visibility）&lt;/h3&gt;

&lt;p&gt;UML ではクラス内の「属性」を以下のように表記する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;可視性 名前:型 [=初期値] {制約条件}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「操作」も同じように&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;可視性 名前([引数の名前:引数の型[, ...]]) : 戻り値の型&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と表記する。&lt;/p&gt;

&lt;p&gt;「可視性」は属性・操作にアクセスできるスコープを示し，以下の記号で表す。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;可視性&lt;/th&gt;
&lt;th&gt;スコープ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Private&lt;/strong&gt; 自クラスでのみアクセス可能&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Public&lt;/strong&gt; 全てのパッケージ・クラスでアクセス可能&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Protected&lt;/strong&gt; 自クラスとその派生クラスでアクセス可能&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Package Protected&lt;/strong&gt; 同じパッケージ内でアクセス可能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
skinparam classAttributeIconSize 0

class ClassName {
  {field} + publicField : String = &amp;#34;string&amp;#34; {read only}
  {field} - privatefield : int
  {field} # protectedfield : double
  {field} ~ protectedfieldInPackage : Object

  {method} + publicMethod(s : String, v : int) : void
  {method} - privateMethod() : int
  {method} # protectedMethod() : double
  {method} ~ protectedMethodInPackage() : Object
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members1.puml&#34;&gt;&lt;img src=&#34;./members1.png&#34; srcset=&#34;./members1.png 787w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;さらに &lt;code&gt;classAttributeIconSize&lt;/code&gt; を指定して可視性の部分をアイコン化することもできる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

show circle
&lt;span class=&#34;hl&#34;&gt;skinparam classAttributeIconSize 10
&lt;/span&gt;
class ClassName {
  {field} + publicField : String = &amp;#34;string&amp;#34; {read only}
  {field} - privatefield : int
  {field} # protectedfield : double
  {field} ~ protectedfieldInPackage : Object

  {method} + publicMethod(s : String, v : int) : void
  {method} - privateMethod() : int
  {method} # protectedMethod() : double
  {method} ~ protectedMethodInPackage() : Object
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members2.puml&#34;&gt;&lt;img src=&#34;./members2.png&#34; srcset=&#34;./members2.png 806w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h3 id=&#34;クラス変数-クラス-メソッド&#34;&gt;クラス変数，クラス・メソッド&lt;/h3&gt;

&lt;p&gt;クラス変数やクラス・メソッドはアンダーラインで表す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;static&lt;/code&gt; または &lt;code&gt;classifier&lt;/code&gt; を付けることでクラス変数やクラス・メソッドであることを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
skinparam classAttributeIconSize 0

class ClassName {
  {classifier} {field} + staticField : String = &amp;#34;string&amp;#34; {read only}
  {classifier} {method} + staticMethod() : void
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members3.puml&#34;&gt;&lt;img src=&#34;./members3.png&#34; srcset=&#34;./members3.png 767w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h3 id=&#34;抽象メソッド&#34;&gt;抽象メソッド&lt;/h3&gt;

&lt;p&gt;抽象メソッドはイタリック（または斜体）で表す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;abstract&lt;/code&gt; を付けることで抽象メソッドであることを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
skinparam classAttributeIconSize 0

class ClassName {
  {abstract} {method} + abstractMethod() : void
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members4.puml&#34;&gt;&lt;img src=&#34;./members4.png&#34; srcset=&#34;./members4.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; はクラス・メンバについてかなりアドホックに記述できるため，とりあえずメモ書きを残しておいて，あとから厳密に決めていくのがいいかも知れない。&lt;/p&gt;

&lt;h2 id=&#34;クラス間の関係&#34;&gt;クラス間の関係&lt;/h2&gt;

&lt;p&gt;クラス間の関係はクラス同士を線で繋いで表すが，線（矢印）の種類によって関係の違いを表現できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle

Class01 &amp;lt;|-- Class02 : Generalization
Class03 &amp;lt;|.. Class04 : Realization
Class05 &amp;lt;.. Class06 : Dependency
Class07 -- Class08 : Association
Class09 o-- Class10 : Aggregation
Class11 *-- Class12 : Composition

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./relation.puml&#34;&gt;&lt;img src=&#34;./relation.png&#34; srcset=&#34;./relation.png 1982w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;それぞれの意味は以下の通り&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;種別&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Generalization&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;汎化&lt;/strong&gt; いわゆる is-a 関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Realization&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;実現&lt;/strong&gt; interface 型のような抽象クラスとの汎化関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Dependency&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;依存&lt;/strong&gt; 矢印の相手に対して依存関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Association&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;関連&lt;/strong&gt; クラス間で関連がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Aggregation&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;集約&lt;/strong&gt;  関連の一種で，全体-部分の関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Composition&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;コンポジション&lt;/strong&gt; 集約の一種だが片方のみでは成り立たないような強い関係を示す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;多重度-multiplicity&#34;&gt;多重度（Multiplicity）&lt;/h3&gt;

&lt;p&gt;関連する2つのクラスについて多重度を設定する。
たとえば Class A と Class B の間に 1:多 の関係があるなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
hide empty members

class &amp;#34;Class A&amp;#34; as A
class &amp;#34;Class B&amp;#34; as B

A &amp;#34;1&amp;#34; -- &amp;#34;*&amp;#34; B : Association

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./multi.puml&#34;&gt;&lt;img src=&#34;./multi.png&#34; srcset=&#34;./multi.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;などと記述する。
多重度表記とその意味は以下の通り。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;多重度&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1つのみ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0,1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロまたは1つ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0..n&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロ以上多数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1..n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1以上多数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt; と同じ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;クラス図を使った設計では多重度の決定が最優先&#34;&gt;クラス図を使った設計では多重度の決定が最優先&lt;/h3&gt;

&lt;p&gt;クラス図を使って設計を行う場合は多重度を最優先で考える。
すなわち&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;システムに必要なクラスを列挙する&lt;/li&gt;
&lt;li&gt;関連のあるクラスを線で繋ぐ&lt;/li&gt;
&lt;li&gt;繋がっているクラスについて多重度を決定する&lt;/li&gt;
&lt;li&gt;クラスの種別を決定する&lt;/li&gt;
&lt;li&gt;クラス・メンバを検討する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という順番で考えていくとよいだろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;Class Diagram syntax and features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://online.visual-paradigm.com/tutorials/class-diagram-tutorial/&#34;&gt;Class Diagram Tutorial&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/class.html&#34;&gt;クラス図(Class Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample&#34;&gt;GitHub - spiegel-im-spiegel/plantuml-sample: Samples for PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>真面目に PlantUML (2) : シーケンス図 - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/" />
		<id>tag:text.Baldanders.info,2018-12-28:/remark/2018/12/plantuml-2-sequence-diagram/</id>
		<published>2018-12-28T18:18:03+09:00</published>
		<updated>2018-12-29T18:11:06+09:00</updated>
		<summary>さっそく今回はシーケンス図を PlantUML で書いてみようか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34; title=&#34;真面目に PlantUML (1) : PlantUML のインストール&#34;&gt;前回&lt;/a&gt;でインストールまで終わったので，今回から各図の書き方について記しておく。
なお，今回から &lt;code&gt;skinparam&lt;/code&gt; 定義をまとめた &lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample/blob/master/skinparams.iuml&#34; title=&#34;plantuml-sample/skinparams.iuml at master · spiegel-im-spiegel/plantuml-sample&#34;&gt;&lt;code&gt;skinparams.iuml&lt;/code&gt;&lt;/a&gt; ファイルを用意し，このファイルを食わせることで見た目の調整を行うことにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -Dfile.encoding=UTF-8 -jar plantuml.jar -nometadata -charset UTF-8 -config skinparams.iuml *.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さっそく今回はシーケンス図を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で書いてみようか。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;オブジェクトとライフライン&#34;&gt;オブジェクトとライフライン&lt;/h2&gt;

&lt;p&gt;UML のシーケンス図（sequence diagram）はオブジェクト同士のやり取り（相互作用）を時系列で表したものである。
オブジェクトの粒度は設計により様々で，人やシステムを表す場合もあればクラス単位の場合もある。
たとえば Alice と Bob が挨拶を交わす場合は&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;と表す。
上の矩形がオブジェクトを表す。
そこから真下に伸びる点線は「ライフライン（lifeline）」と呼ばれているもので，上から下に時間が進行している。
横向きの矢印は「メッセージ（message）」と呼ばれていて，一方のオブジェクトからもう一方へ何らかのアクションを起こしたことを示している。&lt;/p&gt;

&lt;p&gt;上図の場合は，まず Alice から Bob へ “hello” を行い，その後に Bob から Alice へ “hello” を行ったことを表す。
ただし，この時点では2つの “hello” に関係があるかどうかは分からない。&lt;/p&gt;

&lt;p&gt;UML のシーケンス図ではオブジェクトは矩形で表されるが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; には以下の図形も用意されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:obj1&#34;&gt;&lt;a href=&#34;#fn:obj1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Actor
participant Participant
boundary Boundary
control Control
entity Entity
database Database
collections Collections

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./objects.puml&#34;&gt;&lt;img src=&#34;./objects.png&#34; srcset=&#34;./objects.png 1950w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;メインフレーム&#34;&gt;メインフレーム&lt;/h2&gt;

&lt;p&gt;全体を囲むフレームを表示する場合には &lt;code&gt;mainframe&lt;/code&gt; で指定する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;mainframe sd Hello World
&lt;/span&gt;
participant Alice
participant Bob

Alice-&amp;gt;&amp;gt;Bob : hello
Alice&amp;lt;&amp;lt;-Bob : hello

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./mainframe.puml&#34;&gt;&lt;img src=&#34;./mainframe.png&#34; srcset=&#34;./mainframe.png 684w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;メッセージ詳細&#34;&gt;メッセージ詳細&lt;/h2&gt;

&lt;p&gt;シーケンス図におけるメッセージのやりとりについて，いくつかパターンを書いてみる。&lt;/p&gt;

&lt;h3 id=&#34;同期メッセージ-synchronous-message&#34;&gt;同期メッセージ（Synchronous Message）&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Synchronous Message
&lt;span class=&#34;hl&#34;&gt;activate B
&lt;/span&gt;
B -&amp;gt; B : Internal call

A &amp;lt;&amp;lt;-- B : Reply Message
&lt;span class=&#34;hl&#34;&gt;deactivate B
&lt;/span&gt;
@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./sync.puml&#34;&gt;&lt;img src=&#34;./sync.png&#34; srcset=&#34;./sync.png 857w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;矢印の種類に注意。&lt;/p&gt;

&lt;p&gt;「メッセージ」となっているが必ずしも通信を行っているわけではなく，相手オブジェクトのメソッドを呼び出す場合もこのような記述になる。&lt;/p&gt;

&lt;p&gt;Object B のライフラインにある縦長の矩形は「実行仕様（execution specification）」と呼ばれるもので，その期間中に何らかの処理を行っていることを示す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;activate&lt;/code&gt;/&lt;code&gt;deactivate&lt;/code&gt; で指定可能（直前のメッセージがトリガとなる）。
Object B は Object A からのメッセージを受けて内部処理を行って結果を Object A に返しているわけやね。&lt;/p&gt;

&lt;h3 id=&#34;非同期メッセージ-asynchronous-message&#34;&gt;非同期メッセージ（Asynchronous Message）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

A -&amp;gt;&amp;gt; C : Asynchronous Message
activate C

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

A &amp;lt;&amp;lt;-- C : Reply Message
deactivate C

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./async.puml&#34;&gt;&lt;img src=&#34;./async.png&#34; srcset=&#34;./async.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;矢印の種類，特に同期メッセージとの違いに注意。&lt;/p&gt;

&lt;p&gt;Object A と Object B の間，および Object A と Object C の間は同期していないため，処理の終了を待っているわけですね。
分かります。
ちなみに &lt;code&gt;hnote&lt;/code&gt; はコメントを表す。
&lt;code&gt;note&lt;/code&gt; だと付箋紙っぽい図形だが &lt;code&gt;hnote&lt;/code&gt; なら六角形（hexagon）になる。&lt;/p&gt;

&lt;h3 id=&#34;メッセージの不達&#34;&gt;メッセージの不達&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

&lt;span class=&#34;hl&#34;&gt;A x&amp;lt;-- B : No Reply
&lt;/span&gt;deactivate B

hnote over A : Timeout

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./timeout.puml&#34;&gt;&lt;img src=&#34;./timeout.png&#34; srcset=&#34;./timeout.png 790w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;異常系シーケンスでよく見かけるやつ。
この例は Object B からの応答がなくてタイムアウトしちゃった状態を表す。&lt;/p&gt;

&lt;h3 id=&#34;スコープ外からのメッセージ-found-lost-message&#34;&gt;スコープ外からのメッセージ（Found/Lost Message）&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

&lt;span class=&#34;hl&#34;&gt;[o-&amp;gt;&amp;gt; A : Found Message
&lt;/span&gt;activate A

A -&amp;gt; B : Synchronous Message
activate B

B -&amp;gt; B : Internal call
activate B

&lt;span class=&#34;hl&#34;&gt;B -&amp;gt;&amp;gt;o] : Lost Message
&lt;/span&gt;deactivate B

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./found-lost.puml&#34;&gt;&lt;img src=&#34;./found-lost.png&#34; srcset=&#34;./found-lost.png 1126w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;スコープ外のオブジェクトとのやり取りを表す。
メッセージがロストしているわけではない。
本当は黒丸なんだけど，何故か黒丸が使えない。&lt;/p&gt;

&lt;h2 id=&#34;複合フラグメント-combined-fragment&#34;&gt;複合フラグメント（Combined Fragment）&lt;/h2&gt;

&lt;p&gt;シーケンス図で条件分岐やループなどの制御構造を表現するために以下のような「複合フラグメント」を記述できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Alice
actor Bob

Alice -&amp;gt;&amp;gt; Bob: Hello

alt successful case
  Bob --&amp;gt;&amp;gt; Alice: Hello
else failure case
  Bob --&amp;gt;&amp;gt; Alice: Who?
  loop 3 times
    Alice -&amp;gt;&amp;gt; Bob: Hello again
  end loop
end alt

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./fragment.puml&#34;&gt;&lt;img src=&#34;./fragment.png&#34; srcset=&#34;./fragment.png 596w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;この例では &lt;code&gt;alt ... else ... end&lt;/code&gt;, &lt;code&gt;loop ... end&lt;/code&gt; で囲まれた部分が複合フラグメントに相当する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では複合フラグメントとして以下のものが使える（&lt;code&gt;group&lt;/code&gt; は汎用）。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;alt&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Alternative&lt;/strong&gt; 指定した条件下で分岐処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Option&lt;/strong&gt; 指定した条件下で行う処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Loop&lt;/strong&gt; 指定した条件下で繰り返し処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Break&lt;/strong&gt; 指定した条件下で中断処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;par&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;par&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Parallel&lt;/strong&gt; 並列処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Critical&lt;/strong&gt; クリティカル・セッション&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group ignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Ignore&lt;/strong&gt; 無効な処理または重要でない処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;consider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group consider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Consider&lt;/strong&gt; 有効な処理または重要な処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Assert&lt;/strong&gt; 処理が成り立つために条件が必要なことを示す&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;neg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group neg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Negation&lt;/strong&gt; 本来起こりえない処理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;外部参照&#34;&gt;外部参照&lt;/h3&gt;

&lt;p&gt;複合フラグメントとはちょっと違うが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;ref&lt;/code&gt; を使ってシーケンスの一部を外部参照として表せる。
使い方は &lt;code&gt;note&lt;/code&gt;/&lt;code&gt;hnote&lt;/code&gt; と同じ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Request

&lt;span class=&#34;hl&#34;&gt;ref over A,B
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Initialize
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;end ref
&lt;/span&gt;
A &amp;lt;&amp;lt;-- B : Complete

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./refer.puml&#34;&gt;&lt;img src=&#34;./refer.png&#34; srcset=&#34;./refer.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;これでシーケンス図を機能ごとに分解することが可能になる。&lt;/p&gt;

&lt;h2 id=&#34;オブジェクトの生成と消滅&#34;&gt;オブジェクトの生成と消滅&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;destroy&lt;/code&gt; を使って以下のようにオブジェクトの生成と消滅を記述できる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

== Create Object ==

A -&amp;gt; B: Create Object C
activate B

&lt;span class=&#34;hl&#34;&gt;create C
&lt;/span&gt;B-&amp;gt;C: Create

ref over B, C : Initialize

A &amp;lt;&amp;lt;-- B: Success
deactivate B

|||
== Destroy Object ==

A -&amp;gt; B: Destroy Object C
activate B

B-&amp;gt;C: Destroy
activate C

B&amp;lt;&amp;lt;--C: Done
deactivate C
&lt;span class=&#34;hl&#34;&gt;destroy C
&lt;/span&gt;
A &amp;lt;&amp;lt;-- B: Success
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./create.puml&#34;&gt;&lt;img src=&#34;./create.png&#34; srcset=&#34;./create.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;んー。
バツの付く位置が違うような気がするが，まぁいいか。&lt;/p&gt;

&lt;p&gt;今日のところはこれで。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;Sequence Diagram syntax and features&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/sequence.html&#34;&gt;シーケンス図(Sequence Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample&#34;&gt;GitHub - spiegel-im-spiegel/plantuml-sample: Samples for PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:obj1&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では記述のかなりの部分を省略できるが，そのせいで文脈依存にならざるを得ない。たとえば &lt;code&gt;Alice-&amp;gt;Bob&lt;/code&gt; とだけ記述した場合，それがシーケンス図を表すのかクラス図なのか，あるいは他の図なのか分かりにくい（&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; はシーケンス図判定の優先度が高いようだが仕様として明記されていない）。そこで &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; でオブジェクトを定義する際は “&lt;code&gt;actor Alice&lt;/code&gt;” のように常に種別を明記する癖をつけておくと（後に再利用する上でも）いいだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:obj1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>真面目に PlantUML (1) : PlantUML のインストール - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-1/" />
		<id>tag:text.Baldanders.info,2018-12-27:/remark/2018/12/plantuml-1/</id>
		<published>2018-12-27T19:55:14+09:00</published>
		<updated>2018-12-30T16:08:46+09:00</updated>
		<summary> せっかく時間ができたのだから PlantUML についてちゃんと調べてみることにした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;1年ほど前に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタを使って &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使って UML で遊んだのだが， &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は「とりあえず動かしてみた」というレベルできちんと調べていなかった。
せっかく時間ができたのだから，この機会にちゃんと調べてみることにした。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;plantuml-のインストール&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では UML 2.0 のうち以下の図（Diagrams）を作成できるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt; ※同じ機能でパッケージ図も作成可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt; ※ベータ版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは Java の jar ファイルで提供されているため，あらかじめ Java の実行環境を用意する必要がある（最新の &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; で問題ない）。
また&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図&lt;/a&gt;と&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図&lt;/a&gt;以外は &lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT 言語&lt;/a&gt;にトランス・コンパイルされるため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; もインストールする必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは&lt;a href=&#34;http://plantuml.com/download&#34;&gt;ダウンロードページ&lt;/a&gt;から最新の &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルをダウンロードすれば大丈夫。
&lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; も&lt;a href=&#34;http://graphviz.org/download/&#34;&gt;ダウンロードページ&lt;/a&gt;等から取得できる。
たとえば Windows であれば “Stable 2.38 Windows install packages” をダウンロードしてインストールすればよい。&lt;/p&gt;

&lt;p&gt;用意ができたら &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルのあるフォルダで以下のコマンドを入力し動作確認する（以下は Windows 7 環境下での例）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -version
PlantUML version 1.2018.14 (Sat Dec 22 01:33:16 JST 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.1+13
Operating System: Windows 7
OS Version: 6.1
Default Encoding: MS932
Language: ja
Country: JP
Machine: ********
PLANTUML_LIMIT_SIZE: 4096
Processors: 4
Max Memory: 2,065,694,720
Total Memory: 130,023,424
Free Memory: 123,436,232
Used Memory: 6,587,192
Thread Active Count: 1

The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;GRAPHVIZ_DOT&lt;/code&gt; 環境変数がないよ，と言っているが &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドにパスが通っていれば無問題。
念のため dot コマンドとの連携を確認しておこう。
以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -testdot
The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;コマンドライン-オプション&#34;&gt;コマンドライン・オプション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコマンドライン・オプションは以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -h
Usage: java -jar plantuml.jar [options] -gui
        (to execute the GUI)
        or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
        (to process files or directories)

You can use the following wildcards in files/dirs:
        *       means any characters but &amp;#39;\&amp;#39;
        ?       one and only one character but &amp;#39;\&amp;#39;
        **      means any characters (used to recurse through directories)

where options include:

        -gui                To run the graphical user interface
        -tpng               To generate images using PNG format (default)
        -tsvg               To generate images using SVG format
        -teps               To generate images using EPS format
        -tpdf               To generate images using PDF format
        -tvdx               To generate images using VDX format
        -txmi               To generate XMI file for class diagram
        -tscxml             To generate SCXML file for state diagram
        -thtml              To generate HTML file for class diagram
        -ttxt               To generate images with ASCII art
        -tutxt              To generate images with ASCII art using Unicode characters
        -tlatex             To generate images using LaTeX/Tikz format
        -tlatex:nopreamble  To generate images using LaTeX/Tikz format without preamble
        -o[utput] &amp;#34;dir&amp;#34;     To generate images in the specified directory
        -DVAR1=value        To set a preprocessing variable as if &amp;#39;!define VAR1 value&amp;#39; were used
        -Sparam1=value      To set a skin parameter as if &amp;#39;skinparam param1 value&amp;#39; were used
        -r[ecurse]          recurse through directories
        -I\path\to\file     To include file as if &amp;#39;!include file&amp;#39; were used
        -I\path\to\*.puml   To include files with pattern
        -charset xxx        To use a specific charset (default is windows-31j)
        -e[x]clude pattern  To exclude files that match the provided pattern
        -metadata           To retrieve PlantUML sources from PNG images
        -nometadata         To NOT export metadata in PNG/SVG generated files
        -checkmetadata      Skip PNG files that don&amp;#39;t need to be regenerated
        -version            To display information about PlantUML and Java versions
        -checkversion       To check if a newer version is available for download
        -v[erbose]          To have log information
        -quiet              To NOT print error message into the console
        -debugsvek          To generate intermediate svek files
        -h[elp]             To display this help message
        -testdot            To test the installation of graphviz
        -graphvizdot &amp;#34;exe&amp;#34;  To specify dot executable
        -p[ipe]             To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
        -encodesprite 4|8|16[z] &amp;#34;file&amp;#34;      To encode a sprite at gray level (z for compression) from an image
        -computeurl|-encodeurl      To compute the encoded URL of a PlantUML source file
        -decodeurl          To retrieve the PlantUML source from an encoded URL
        -syntax             To report any syntax error from standard input without generating images
        -language           To print the list of PlantUML keywords
        -checkonly          To check the syntax of files without generating images
        -failfast           To stop processing as soon as a syntax error in diagram occurs
        -failfast2          To do a first syntax check before processing files, to fail even faster
        -pattern            To print the list of Regular Expression used by PlantUML
        -duration           To print the duration of complete diagrams processing
        -nbthread N         To use (N) threads for processing
        -nbthread auto      To use 4 threads for processing
        -timeout N          Processing timeout in (N) seconds. Defaults to 15 minutes (900 seconds).
        -author[s]          To print information about PlantUML authors
        -overwrite          To allow to overwrite read only files
        -printfonts         To print fonts available on your system
        -enablestats        To enable statistics computation
        -disablestats       To disable statistics computation (default)
        -htmlstats          To output general statistics in file plantuml-stats.html
        -xmlstats           To output general statistics in file plantuml-stats.xml
        -realtimestats      To generate statistics on the fly rather than at the end
        -loopstats          To continuously print statistics about usage
        -splash             To display a splash screen with some progress bar
        -progress           To display a textual progress bar in console
        -pipeimageindex N   To generate the Nth image with pipe option
        -stdlib             To print standart library info
        -extractstdlib      To extract PlantUML Standard Library into stdlib folder
        -filename &amp;#34;example.puml&amp;#34;    To override %filename% variable
        -preproc            To output preprocessor text of diagrams
        -cypher             To cypher texts of diagrams so that you can share them

If needed, you can setup the environment variable GRAPHVIZ_DOT.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;かなりの数のオプションがあるが，よく使うのは以下のものだろうか。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpng&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG 形式で出力（既定値）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tsvg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SVG 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-teps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EPS 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PDF 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex:nopreamble&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力（プリアンブルなし）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-o[utput] &amp;quot;dir&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したフォルダに出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-charset xxx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字エンコーディングの指定&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-nometadata&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG/SVG 出力にメタデータを含めない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p[ipe]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力をパイプで行う&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;みんな大好き-hello-world&#34;&gt;みんな大好き Hello World&lt;/h2&gt;

&lt;p&gt;では簡単なコードを処理してみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello.puml&lt;/code&gt; という名前のファイルを用意して以下のように入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ではドキュメントの中にコードを埋め込むことを想定して &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 内の記述のみが処理の対象となる。&lt;/p&gt;

&lt;p&gt;ではこのファイルを処理してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;hello.puml&lt;/code&gt; と同じフォルダに &lt;code&gt;hello.png&lt;/code&gt; ファイルが出力される。
&lt;code&gt;hello.png&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;って，ちっちゃ！
じゃあ，解像度を調節してもう少し大きくしてみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理するとこうなる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello2.puml&#34;&gt;&lt;img src=&#34;./hello2.png&#34; srcset=&#34;./hello2.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
おっきくなった。&lt;/p&gt;

&lt;h2 id=&#34;見た目の調整&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;上の例で示したように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;skinparam&lt;/code&gt; コマンドを使って見た目の調整ができる。
では，もう少し調整を入れて UML っぽい図にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam backgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam arrow {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Serif JP
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Color Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Thickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam participant {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Sans
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BackgroundColor WhiteSmoke
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Padding 20
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlignment center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;hide footbox
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam BoxPadding 10
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;フォントの変更と線の色と太さを調節してみた。
またライフラインの間隔も調整している。
以上を処理するとこんな図になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello3.puml&#34;&gt;&lt;img src=&#34;./hello3.png&#34; srcset=&#34;./hello3.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;見た目の指定を別ファイルに分離する&#34;&gt;見た目の指定を別ファイルに分離する&lt;/h2&gt;

&lt;p&gt;見た目の指定は別ファイルにして再利用したいところである。
そこで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを作成して &lt;code&gt;skinparam&lt;/code&gt; コマンドの内容をまるっと移動してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam backgroundColor transparent
skinparam dpi 300

skinparam arrow {
  FontColor Black
  FontName Noto Serif JP
  FontSize 10
  FontStyle plain
  Color Black
  Thickness 1
}
skinparam participant {
  FontColor Black
  FontName Noto Sans
  FontSize 14
  FontStyle plain
  BackgroundColor WhiteSmoke
  BorderColor Black
  BorderThickness 1
  Padding 20
}
skinparam sequence {
  LifeLineBackgroundColor transparent
  LifeLineBorderColor Black
  LifeLineBorderThickness 1
  MessageAlignment center
}
hide footbox
skinparam BoxPadding 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このファイルをインクルードする形でコードを修正する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;!include hello.iuml
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理すると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello4.puml&#34;&gt;&lt;img src=&#34;./hello4.png&#34; srcset=&#34;./hello4.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;先程と全く同じ結果が得られる。&lt;/p&gt;

&lt;p&gt;また最初の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;に対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 -config hello.iuml hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と &lt;code&gt;-config&lt;/code&gt; オプションで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを指定しても同じ結果が得られる。
これで再利用しやすくなっただろう。&lt;/p&gt;

&lt;h2 id=&#34;追記-plantuml-のコメント&#34;&gt;【追記】 &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコメント&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 領域内にコメントを記述する際には以下の２通りの書き方がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&amp;#39; 一行コメント

/&amp;#39;
複数行に渡る
コメント
&amp;#39;/

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお，行の途中に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

skinparam dpi 300 &amp;#39;解像度の設定

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のような記述はできない（しかもエラーにもならない）のでご注意を。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/command-line&#34;&gt;call it from your script using command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-152.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
</feed>
