<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/index.xml" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml/index.xml" />
	<id>tag:text.Baldanders.info,2016-11-05:/</id>
	<updated>2016-11-05T23:26:29+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.17</generator>

	
	<entry>
		<title>モンテカルロ法による円周率の推定（その1） - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/estimate-of-pi/" />
		<id>tag:text.Baldanders.info,2016-11-05:/golang/estimate-of-pi/</id>
		<published>2016-11-05T23:26:29+09:00</published>
		<updated>2016-11-05T23:26:29+09:00</updated>
		<summary>乱数（random number）についていい例題がないかなぁ，と考えて「円周率をモンテカルロ法で求めるやつやればいいぢゃん」と思いついた。ので早速試してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;乱数（random number）についていい例題がないかなぁ，と考えて「円周率をモンテカルロ法で求めるやつやればいいぢゃん」と思いついた。
ので早速試してみる。
ちなみに「モンテカルロ法」というのは数値計算やシミュレーションに乱数を用いる手法をさす。&lt;/p&gt;

&lt;h2 id=&#34;モンテカルロ法による円周率の推定&#34;&gt;モンテカルロ法による円周率の推定&lt;/h2&gt;

&lt;p&gt;では乱数を使ってどうやって円周率を求めるのか。
まずは以下のように原点を中心とした半径 $1$ の円を考える。
ただしここでは第一象限のみを対象とする。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;img srcset=&#34;http://text.baldanders.info/images/circle.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;

&lt;/figure&gt;

&lt;p&gt;そして $0 \le y \le 1$ および $0 \le y \le 1$ の範囲でランダムに点をプロットしていく。
（以下の&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Pi_30K.gif&#34; title=&#34;File:Pi 30K.gif - Wikimedia Commons&#34;&gt;図は Wikimedia Commons のもの&lt;/a&gt;を拝借した。 &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons — Attribution 3.0 Unported — CC BY 3.0&#34;&gt;CC-BY-3.0&lt;/a&gt; で公開されている）&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Pi_30K.gif&#34;&gt;&lt;img srcset=&#34;https://upload.wikimedia.org/wikipedia/commons/8/84/Pi_30K.gif 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;From Wikimedia Commons&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Pi_30K.gif&#34;&gt;From Wikimedia Commons&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;全ての点 $n$ が領域内に均等にプロットされていれば，円の内側に入る点の数 $m$ は以下の式のようになることが期待できる。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
m \simeq \frac{1}{4}{\pi}n
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;この式を $\pi$ を求める形に変形すると&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
\pi \simeq \frac{4m}{n}
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;となる。
プロットした点が円の内側かどうかは原点からの距離で判定できる。
すなわち&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
\sqrt{x^2 + y^2} \le 1
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;を満たしていればよい。&lt;/p&gt;

&lt;h2 id=&#34;math-rand-パッケージ&#34;&gt;math/rand パッケージ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; にはコア・パッケージとして &lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; が用意されていて，このパッケージを使って擬似乱数を発生させることができる。
今回は $0 \le r \le 1.0$ の範囲で乱数を発生させればいいのだが，生憎そのものズバリな関数が用意されていない。
たとえば &lt;code&gt;rand.Float64()&lt;/code&gt; が吐く値の範囲は $0 \le r \lt 1.0$ なのでそのままでは使えないのだ。&lt;/p&gt;

&lt;p&gt;そこで，こんなコードを考えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	rand.Seed(time.Now().UnixNano())
	for i := 0; i &amp;lt; 10; i++ {
		fmt.Println(float64(rand.Int63n(10000001)) / float64(10000000))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rand.Int63n(n)&lt;/code&gt; 関数は $0 \le i \lt n$ の範囲で整数を吐く。
$n=10,000,001$ なら $0 \le i \le 10,000,000$ の範囲になる。
これを $10,000,000$ で割って $0 \le r \le 1.0$ の範囲の乱数を作るのである。&lt;/p&gt;

&lt;p&gt;実際には2次元座標なので複素数（&lt;a href=&#34;https://golang.org/ref/spec#Complex_numbers&#34; title=&#34;Manipulating complex numbers&#34;&gt;complex&lt;/a&gt;）表現にして&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/cmplx&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	rand.Seed(time.Now().UnixNano())
	for i := 0; i &amp;lt; 10; i++ {
		c := complex(float64(rand.Int63n(10000001))/float64(10000000), float64(rand.Int63n(10000001))/float64(10000000))
		fmt.Printf(&amp;quot;%v (%v)\n&amp;quot;, c, cmplx.Abs(c))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればよい。
ちなみに &lt;code&gt;cmplx.Abs()&lt;/code&gt; 関数は複素数の絶対値を取るもので， $\sqrt{x^2 + y^2}$ と同じである。&lt;/p&gt;

&lt;p&gt;では，以上を踏まえてランダムな点を生成する &lt;code&gt;gencmplx&lt;/code&gt; パッケージを作ってみよう。
こんな感じかな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package gencmplx

import &amp;quot;math/rand&amp;quot;

//New returns generator of random complex number
func New(s rand.Source, count int64) &amp;lt;-chan complex128 {
	ch := make(chan complex128)
	r := rand.New(s)
	go func(r *rand.Rand, count int64) {
		for i := int64(0); i &amp;lt; count; i++ {
			ch &amp;lt;- complex(float64(r.Int63n(10000001))/float64(10000000), float64(r.Int63n(10000001))/float64(10000000))
		}
		close(ch)
	}(r, count)
	return ch
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後々のことを考えて，乱数の &lt;code&gt;rand.Source&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; と生成する点の個数は引数で指定するようにした。&lt;/p&gt;

&lt;p&gt;いっぽう， &lt;code&gt;gencmplx&lt;/code&gt; パッケージの呼び出し側はこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/pi/gencmplx&amp;quot;
)

func main() {
	c := gencmplx.New(rand.NewSource(time.Now().UnixNano()), int64(10000))
	for p := range c {
		fmt.Printf(&amp;quot;%v\t%v\n&amp;quot;, real(p), imag(p))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは少なめに1万個の点を生成している。
早速これを動かしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go &amp;gt; plot-1.dat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで1万個の点を &lt;code&gt;plot-1.dat&lt;/code&gt; に格納したことになる。
&lt;code&gt;plot-1.dat&lt;/code&gt; を &lt;a href=&#34;http://www.gnuplot.info/&#34; title=&#34;gnuplot homepage&#34;&gt;gnuplot&lt;/a&gt; に食わせてみるとこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;img srcset=&#34;http://text.baldanders.info/images/random-plot-1.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;

&lt;/figure&gt;

&lt;p&gt;うーん。
一様？ なのかなぁ。
まぁ，この辺の評価については後ほど。&lt;/p&gt;

&lt;p&gt;最後に，生成した点の集合から円周率を推定するところまでやってみよう。
&lt;code&gt;main()&lt;/code&gt; 関数はこのように変える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/cmplx&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/pi/gencmplx&amp;quot;
)

func main() {
	c := gencmplx.New(rand.NewSource(time.Now().UnixNano()), int64(100000))
	n := int64(0) // total
	m := int64(0) // plot in circle
	for p := range c {
		n++
		if cmplx.Abs(p) &amp;lt;= float64(1) {
			m++
		}
	}
	fmt.Printf(&amp;quot;n = %v, m = %v, 4m/n = %v\n&amp;quot;, n, m, float64(4*m)/float64(n))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点の数は10万個まで増やしている。
実行結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main2.go
n = 100000, m = 78397, 4m/n = 3.13588
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と，まぁそれっぽい値が出てきた。&lt;/p&gt;

&lt;p&gt;今回はここまで。
次回は実際に値の評価を行ってみる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby.kyoto-wu.ac.jp/info-com/NumericalModels/RandomProcess/montecarlo.html&#34;&gt;モンテカルロ法入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/intelfike/items/039eccffd422321ec6dd&#34;&gt;golang complex(複素数)型を使う - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/intelfike/items/f92f5c9ff2e515e16d47&#34;&gt;golang complex(複素数)型の計算をする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cse.kyoto-su.ac.jp/~oomoto/lecture/program/gnuplot/gnuplot.html&#34;&gt;GNUPLOTを用いたグラフ作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:s&#34;&gt;&lt;code&gt;rand.Source&lt;/code&gt; は &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt; として定義されていて，これを満たす &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; であれば他の擬似乱数アルゴリズムも使えるようになっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>“The Shadow Web” （再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/the-shadow-web/" />
		<id>tag:text.Baldanders.info,2016-11-05:/remark/2016/11/the-shadow-web/</id>
		<published>2016-11-05T14:06:16+09:00</published>
		<updated>2016-11-05T14:06:16+09:00</updated>
		<summary>「インターネットは検閲をダメージであると解釈し，それを回避する」（John Gilmore）</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は&lt;a href=&#34;http://www.baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;本家サイト&lt;/a&gt;で2012年に公開した「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000599.shtml&#34;&gt;“The Shadow Web”&lt;/a&gt;」を加筆・修正して再掲載したものです。
なお，本文中で紹介している記事「&lt;a href=&#34;http://www.nikkei-science.com/201206_074.html&#34; title=&#34;介入されないもうひとつのウェブ | 日経サイエンス&#34;&gt;介入されないもうひとつのウェブ&lt;/a&gt;」は今年出た&lt;a href=&#34;http://www.nikkei-science.com/page/sci_book/bessatu/51212.html&#34;&gt;別冊日経サイエンス『サイバーセキュリティ』&lt;/a&gt;に再録されています。
興味のある方は是非どうぞ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nikkei-science.com/page/magazine/201206.html&#34; title=&#34;2012年6月号 | 日経サイエンス&#34;&gt;『日経サイエンス』2012年6月号&lt;/a&gt;の「&lt;a href=&#34;http://www.nikkei-science.com/201206_074.html&#34; title=&#34;介入されないもうひとつのウェブ | 日経サイエンス&#34;&gt;介入されないもうひとつのウェブ&lt;/a&gt;」が面白そうだったので買ってみた。
原題は “The Shadow Web” （SCIENTIFIC AMERICAN March 2012）で著者はサイエンスライターの Julian Dibbell 氏。&lt;/p&gt;

&lt;p&gt;インターネットはもともと障害や（国家などによる）検閲に強いシステムとして開発されてきた。
「インターネットは検閲をダメージであると解釈し，それを回避する」（John Gilmore）のである。
しかし現状のインターネットはこのようには機能していない。
昨年（2011年）1月末。市民運動で揺れるエジプトではたった5本の電話で8000万人のインターネット・アクセスが遮断された。
中国ではもう長いこと「グレート・ファイアウォール」が稼働している。
日本でだって無線通信業者がユーザ端末に勝手に ID を付与したりユーザの行動を追跡したり特定のサービスをブロックしたりしている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし今日のインターネットが実際にこの理論に近い状態であれば，メッシュネットワークは余計ものだったろう。
だがインターネットが当初の学術目的から踏み出して現在のような誰でも使える商業サービスになってから20年以上が経つうちに，そうした蓄積伝送の原理が果たす役割は，一貫して縮小していった。&lt;br /&gt;
　この間，ネットワークに加わる新たなノードの圧倒的多数はISPを介してネットに接続する家庭や企業のコンピューターだった。
ISPの接続モデルでは，利用者のコンピューターはデータの中継はしない。
それはネットワークの端末，つまりデータの送受信だけを，常にISPのコンピューターを介して行うターミナル・ノードだ。
言い換えれば，インターネットの爆発的な成長はネットワーク地図に行き止まりのルートを増やしただけで，新たなルートを加えることはほとんどなかった。&lt;br /&gt;
　そしてISPなど大量の情報ルートを持つ者は，彼らがルートを提供している何百万ものノードを支配下におくこととなった。
これらのノードは，もしISPがダウンしたり，ネットから遮断されたりすると，その障害を回避する方法がない。
ISPはインターネットが停止しないようにするどころか，実効上は停止スイッチになってしまった。&lt;/q&gt;
（p.77）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.nikkei-science.com/201206_074.html&#34;&gt;介入されないもうひとつのウェブ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;こうした問題に対処するために「無線メッシュネットワーク」の利用が進んでいる。
「無線メッシュネットワーク」ではユーザのノードは「ターミナル・ノード」ではなく中継ノードとして機能する。
このノードが増えれば増えるほどネットワークは自律的に機能し，遮断や検閲を回避できるようになる。&lt;/p&gt;

&lt;p&gt;どうも日本ではメッシュネットワークはスマートグリッドの文脈で語られることが多いようである。
しかし，メッシュネットワークの本領は，少数の ISP による中央集権型ネットワークを補完する手段，まさに “The Shadow Web” として機能しうる点にあるように思える。&lt;/p&gt;

&lt;p&gt;メッシュネットワークがうまくいくかどうかは参加するユーザの規模にかかっている。
メッシュネットワークが社会的に効果のあるレベルまで普及するには市場の15%を大幅に超える浸透率が必要になるそうだ。
しかし実際にそこまで行くかどうかは疑問らしい。
いっぽう為政者から見れば，現状でさえインターネットのコントロールを握ろうと躍起になってるのに，それをチャラにしてしまうような仕組みに対していい顔はしないだろう。
少なくともメッシュネットワークの構築について何らかの介入をしてくる可能性はある。
となれば市民運動レベルで普及を図っていくしかないということになるだろう。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;人はとかく，プライバシーの死という環境破壊によってどれだけの被害をうけるかを過小評価してしまう。
通常の環境破壊行動，例えばゴミのポイ捨てや環境汚染が引き起こす，倍々に増えていく桁外れの被害を過小評価しがちなのとよく似ている&lt;/q&gt;
（p.81）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.nikkei-science.com/201206_074.html&#34;&gt;介入されないもうひとつのウェブ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;個人的には，日本で考えた場合，メッシュネットワークがどの程度効果的なのかよく分からない。
例えば災害時にネットワークを早く再構築するためにメッシュネットワークを使うというのはあるだろう（海外では既に事例がある）。
しかし “The Shadow Web” としてのメッシュネットワークがうまくいくのかどうかは疑問がある。
この辺は今後も情報を追いかけていきたいと思う。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4532512123/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51gurnOqhiL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4532512123/baldandersinf-22/&#34;&gt;サイバーセキュリティ (別冊日経サイエンス)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;日経サイエンス編集部 &lt;/dd&gt;&lt;dd&gt;日本経済新聞出版社 2016-04-22&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320009061/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320009061.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;サイバーセキュリティ入門: 私たちを取り巻く光と闇 (共立スマートセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4905318416/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4905318416.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2016&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822237656/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822237656.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;すべてわかるセキュリティ大全2017 (日経BPムック)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01G5SQLQC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01G5SQLQC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日経サイエンス2016年9月号&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4478083908/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4478083908.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;CxO(経営層)のための情報セキュリティ―――経営判断に必要な知識と心得&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822237982/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822237982.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;あなたのセキュリティ対応間違っています&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4339028533/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4339028533.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;実践サイバーセキュリティモニタリング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4802090927/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4802090927.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;IT管理者のための情報セキュリティガイド (NextPublishing)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822237788/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822237788.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;セキュリティ 最強の指南書(日経BPムック) (日経ITエンジニアスクール)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798145629/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798145629.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Webセキュリティ担当者のための脆弱性診断スタートガイド 上野宣が教える情報漏えいを防ぐ技術&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ここ5,6年ほどのセキュリティ・プライバシー関連の記事を集めたもの。俯瞰するにはちょうどいいと思う。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-05&#34;&gt;2016-11-05&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「ネットが蝕むプライバシー」を読む（再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/the-end-of-privacy/" />
		<id>tag:text.Baldanders.info,2016-11-05:/remark/2016/11/the-end-of-privacy/</id>
		<published>2016-11-05T11:46:10+09:00</published>
		<updated>2016-11-05T11:46:10+09:00</updated>
		<summary>キーワードは「公開されたプライバシー」である。つまり，公開された私的情報であってもプライバシー権は失われることはなく，そのコントロールは情報へのアクセス性にある，という考え方だ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は&lt;a href=&#34;http://www.baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;本家サイト&lt;/a&gt;で2008年に公開した「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000415.shtml&#34;&gt;「ネットが蝕むプライバシー」を読む&lt;/a&gt;」を加筆・修正して再掲載したものです。
なお，本文中で紹介している記事「&lt;a href=&#34;http://www.nikkei-science.com/page/magazine/0812/200812_088.html&#34; title=&#34;プライバシーに無分別な若者 | 日経サイエンス&#34;&gt;プライバシーに無分別な若者&lt;/a&gt;」は今年出た&lt;a href=&#34;http://www.nikkei-science.com/page/sci_book/bessatu/51212.html&#34;&gt;別冊日経サイエンス『サイバーセキュリティ』&lt;/a&gt;に「プライバシーの終焉？」と原題に近いタイトルで再録されています。
興味のある方は是非どうぞ。&lt;/p&gt;

&lt;p&gt;そして「公開されたプライバシー」というキーワードに興味を持っていただけたなら，次に Danah Boyd さんの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0125TZSZ0/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの 電子書籍: ダナ・ボイド, 野中 モモ: Kindleストア&#34;&gt;つながりっぱなしの日常を生きる&lt;/a&gt;』を読むことを強くお勧めします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/its-complicated/&#34;&gt;『つながりっぱなしの日常を生きる』を読む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nikkei-science.com/page/magazine/200812.html&#34; title=&#34;2008年12月号 | 日経サイエンス&#34;&gt;『日経サイエンス』 2008年12月号&lt;/a&gt;の特集記事「ネットが蝕むプライバシー」を読む。
『日経サイエンス』とプライバシー特集ってなんか毛色が違う感じがしたが，この特集記事ではプライバシーの問題をコンピュータ･サイエンスとして扱っているようだ。
したがって，内容的にはコンピュータやネットワークのセキュリティに関する記事が多い（のでプライバシー問題の特集だと思って読むと拍子抜けするかもしれない）。
この分野に関心のある方は手にとって読んでみることをお薦めする。
個人的には最初の「プライバシー2.0を考える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」以外は面白かった。&lt;/p&gt;

&lt;p&gt;一番面白かったのは「&lt;a href=&#34;http://www.nikkei-science.com/page/magazine/0812/200812_088.html&#34; title=&#34;プライバシーに無分別な若者 | 日経サイエンス&#34;&gt;プライバシーに無分別な若者&lt;/a&gt;」という記事。
結構アレなタイトルだが&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;多くの若者が，日常生活のきわめて私的な内容を&lt;br /&gt;
ソーシャルネットワーキングのウェブサイトで公開している&lt;br /&gt;
これはプライベートとパブリックの境界線が大きく変化する前触れだ&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.nikkei-science.com/page/magazine/0812/200812_088.html&#34;&gt;プライバシーに無分別な若者&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;という要約文が示す通り特定の世代をバッシングする記事ではない（原題は “The End of Privacy?” なので，これは日本語タイトルが悪い）。
この記事は Facebook を例にして書かれているため日本ではピンと来ないかもしれないが，底にあるものは共通していると思う。&lt;/p&gt;

&lt;p&gt;キーワードは「公開されたプライバシー」である。
つまり，公開された私的情報であってもプライバシー権は失われることはなく，そのコントロールは情報へのアクセス性にある，という考え方だ。&lt;/p&gt;

&lt;p&gt;もともとのプライバシーは空間概念と一体になっている。
つまり私的領域と公的領域を区別することである。
しかしインターネット（特に Web 2.0 以降）は情報は空間概念から切り離される。
場所が不定になるのだ。
だから，それをコントロールしたければ情報へのアクセス性を対象にせざるを得なくなる。
感覚的には分かっていても，改めて「公開されたプライバシー」という言葉を与えられると少し見方が変わってくる。&lt;/p&gt;

&lt;p&gt;例えば（2008年当時の）旬の GSV 問題だが，これまで私は「GSV にはプライバシー問題はない」と書いてきた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
日本は私的領域と公的領域の区別が曖昧なことが多く日常生活が（たとえそれが公道であっても）生活道路にまで漏れ出てしまう（日本以外はどうかというのは&lt;a href=&#34;http://takagi-hiromitsu.jp/diary/20081026.html#p01&#34; title=&#34;高木浩光＠自宅の日記 - 住宅ストリートビューの国際比較 アメリカ・フランス・日本, 修正（27日）&#34;&gt;高木浩光さんがまとめておられる&lt;/a&gt;）。
これを「公開されたプライバシー」の問題として捉えるのなら前言は撤回しなければならない。&lt;/p&gt;

&lt;p&gt;あと，ちょっとぎょっとなったのが特集記事のあとの茂木健一郎さんと木村忠正さんの対談記事（茂木健一郎さんのこの連載記事自体はあまり面白くないんだけどね）。
この部分も少し引用してみる。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;日本，韓国，フィンランドで行った調査項目で「インターネット空間というのはパブリックなものか，プライベートなものか」と質問しました。
するとパブリックだという答えは日本の男性がいちばん少ない。
フィンランドでは男女とも8割以上がパブリックだと答えていますが，日本の男性では38.6%と4割を切っています。&lt;/q&gt; （p.99-100）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.nikkei-science.com/page/magazine/0812/200812_088.html&#34;&gt;『日経サイエンス』 2008年12月号 「日本のネット文化を変えるには」&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ調査方法とか分からないので鵜呑みにしていいかどうか分からないけど，これってやっぱりケータイというデバイスの影響とかあるのだろうか。
WIRED VISION に「&lt;a href=&#34;http://wired.jp/2008/10/31/%e5%ae%9f%e3%81%af%e3%83%8d%e3%83%83%e3%83%88%e3%83%96%e3%83%83%e3%82%af%e3%81%a0%e3%81%a3%e3%81%9f%e3%80%8eiphone%e3%80%8f%ef%bc%9f%e2%80%95%e2%80%95%e5%b9%b3%e5%9d%87%e4%bb%a5%e4%b8%8b%e6%89%80/&#34;&gt;実はネットブックだった『iPhone』？――平均以下所得層の購入が急増&lt;/a&gt;」という記事があるけど，向こうで iPhone のみでネットに繋がる人が増えるとネットを公衆空間だと思わない人が増えたりするのだろうか。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4532512123/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51gurnOqhiL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4532512123/baldandersinf-22/&#34;&gt;サイバーセキュリティ (別冊日経サイエンス)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;日経サイエンス編集部 &lt;/dd&gt;&lt;dd&gt;日本経済新聞出版社 2016-04-22&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320009061/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320009061.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;サイバーセキュリティ入門: 私たちを取り巻く光と闇 (共立スマートセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4905318416/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4905318416.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2016&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822237656/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822237656.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;すべてわかるセキュリティ大全2017 (日経BPムック)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01G5SQLQC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01G5SQLQC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日経サイエンス2016年9月号&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4478083908/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4478083908.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;CxO(経営層)のための情報セキュリティ―――経営判断に必要な知識と心得&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822237982/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822237982.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;あなたのセキュリティ対応間違っています&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4339028533/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4339028533.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;実践サイバーセキュリティモニタリング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4802090927/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4802090927.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;IT管理者のための情報セキュリティガイド (NextPublishing)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822237788/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822237788.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;セキュリティ 最強の指南書(日経BPムック) (日経ITエンジニアスクール)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798145629/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798145629.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Webセキュリティ担当者のための脆弱性診断スタートガイド 上野宣が教える情報漏えいを防ぐ技術&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ここ5,6年ほどのセキュリティ・プライバシー関連の記事を集めたもの。俯瞰するにはちょうどいいと思う。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-05&#34;&gt;2016-11-05&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0125TZSZ0/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/616sjle5ITL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0125TZSZ0/baldandersinf-22/&#34;&gt;つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ダナ・ボイド 野中 モモ &lt;/dd&gt;&lt;dd&gt;草思社 2014-10-09&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0141TUJHY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0141TUJHY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;角川インターネット講座５　ネットコミュニティの設計と力　つながる私たちの時代&lt;角川インターネット講座&gt; (角川学芸出版全集)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01CZK0B2Y/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01CZK0B2Y.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;これからの世界をつくる仲間たちへ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01B1CKZQO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01B1CKZQO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ForbesJapan (フォーブスジャパン) 2016年 03月号 [雑誌]&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B010LYGB34/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B010LYGB34.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;「炎上」と「拡散」の考現学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0191AIN6W/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0191AIN6W.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ぼくらの仮説が世界をつくる&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-10&#34;&gt;2016-05-10&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;「&lt;a href=&#34;http://www.nikkei-science.com/page/sci_book/bessatu/51212.html&#34; title=&#34;サイバーセキュリティー | 日経サイエンス&#34;&gt;サイバーセキュリティ&lt;/a&gt;」には「プライバシー2.0を考える」は収録されていない。さすがに内容がアレだったか（笑） その代わりなのか Jaron Lanier さんの「&lt;a href=&#34;http://www.nikkei-science.com/201411_086.html&#34;&gt;プライバシーをどう考えるべきか（How Should We Think about Privacy ?）&lt;/a&gt;」が収録されている。こちらはお勧め。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000404.shtml&#34;&gt;Street View のアレ&lt;/a&gt;」および「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000406.shtml&#34;&gt;Street View のアレ 2&lt;/a&gt;」。そういえば当時 GSV を使った窃盗団がどうとかほざいていた人がいたが，あの人は今（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>鬼（もの）のインターネット - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/internet-of-mono/" />
		<id>tag:text.Baldanders.info,2016-11-03:/remark/2016/11/internet-of-mono/</id>
		<published>2016-11-03T22:18:00+09:00</published>
		<updated>2016-11-03T22:18:00+09:00</updated>
		<summary>つまり，今のインターネットでは，結果的に，より多くの「モノ」を自分たちの陣営に「包摂」した者こそが「覇権」を握るのである。量こそ正義！ まさに民主主義の典型ではないか（笑）</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;もともとの Internet of Things はいわゆる &lt;a href=&#34;http://www.yamdas.org/column/technique/sensor.html&#34;&gt;Sensorware&lt;/a&gt; の文脈で語られたもののようだが，2010年代に入って定義が変質する（よくある話）。&lt;/p&gt;

&lt;p&gt;たとえば「&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/H02/H02HO035.html&#34;&gt;特定通信・放送開発事業実施円滑化法&lt;/a&gt;」には以下の記述がある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;インターネット・オブ・シングスの実現（インターネットに多様かつ多数の物が接続され、及びそれらの物から送信され、又はそれらの物に送信される大量の情報の円滑な流通が国民生活及び経済活動の基盤となる社会の実現をいう。）&lt;/q&gt;
（第五条 ２ 一）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/H02/H02HO035.html&#34;&gt;特定通信・放送開発事業実施円滑化法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;また経産省の「&lt;span&gt;&lt;a href=&#34;http://www.meti.go.jp/press/2016/07/20160705002/20160705002-1.pdf&#34;&gt;IoTセキュリティガイドライン ver1.0&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」では ITU の定義を引いて&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;IoT とは”Internet of Things”の略であり、ITU（国際電気通信連合）の勧告（ITU-T Y.2060(Y.4000)）では、「情報社会のために、既存もしくは開発中の相互運用可能な情報通信技術により、物理的もしくは仮想的なモノを接続し、高度なサービスを実現するグローバルインフラ」とされ&lt;/q&gt;
（p.7，「1.3.1 IoT とは」）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.meti.go.jp/press/2016/07/20160705002/20160705002-1.pdf&#34;&gt;IoTセキュリティガイドライン ver1.0&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と記してある。&lt;/p&gt;

&lt;p&gt;ポイントは「モノ（things）」自体は単なる PC (Programmable Controller) に過ぎず（intelligent ではない），その制御は主にインターネット側の「（intelligent な）誰か」が行う点にある。
問題は「モノ」を制御する「誰か」も programmable （というか hackable）であることで，更にその「モノ」が無数（それこそ何億という単位で）にネットに繋がってしまっていることだ。
まるで「蛍火の光く神」の如く（笑）&lt;/p&gt;

&lt;p&gt;つまり，今のインターネットでは，手段の如何に関わらず，より多くの「モノ」を自分たちの陣営に「包摂」した者こそが「覇権」を握るのである。
量こそ正義！ まさに近代の夢，民主主義の典型ではないか（笑）&lt;/p&gt;

&lt;p&gt;先日の DDoS のように，包摂された「モノ」が犯罪に使われれば確かにセキュリティ問題と言えるが，一方でこれが政治宣伝に利用されれば政治問題だし，軍事作戦に使われれば軍事問題である。
あるいはもっとつつましく家中のスマート家電を操って特定のお店でしか買い物をしないよう仕向ける，なんてなこともできるかもしれない。&lt;/p&gt;

&lt;p&gt;まったく “&lt;a href=&#34;https://krebsonsecurity.com/2016/09/the-democratization-of-censorship/&#34;&gt;The Democratization of Censorship&lt;/a&gt;” とはよく言ったものである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35051376/&#34;&gt;「モノのインターネット」&amp;ndash;定義はどこまで拡散するのか - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yamdas.org/column/technique/sensor.html&#34;&gt;Sensorware（前編）&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yamdas.org/column/technique/sensor2.html&#34;&gt;Sensorware（後編）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://archive.wiredvision.co.jp/blog/yomoyomo/200905/200905141600.html&#34;&gt;Sensorwareふたたび | ワイアードビジョン アーカイブ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50744439.html&#34;&gt;エフセキュアブログ : スマートホームの安全を保つ方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unixuser.org/~euske/doc/tiotiwiaou/index.html&#34;&gt;モノのインターネットはすさまじく危険だ - そして多くはパッチ不可能である by Bruce Schneier (The Internet of Things Is Wildly Insecure - And Often Unpatchable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.business.f-secure.com/the-simple-reason-iot-devices-are-so-hackable/&#34;&gt;IoTデバイスがハッキングされやすい簡単な理由 | Business Security Insider Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20161030/iotsecurity&#34;&gt;我々は「モノのインターネット」からインターネットを守る必要がある、ところまで来てしまったのか - YAMDAS現更新履歴&lt;/a&gt; ： この記事のリンク先も必見&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書？&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/456008193X/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/315iNBEKHLL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/456008193X/baldandersinf-22/&#34;&gt;鬼と天皇（新装版）&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;大和 岩雄 &lt;/dd&gt;&lt;dd&gt;白水社 2012-01-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4584393788/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4584393788.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;もうひとつの日本史 闇の修験道 異端の古代史5 (ワニ文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309226159/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4309226159.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;諏訪の神: 封印された縄文の血祭り&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4908117039/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4908117039.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天皇と鬼&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/499065692X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/499065692X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;失われた十部族の足跡　イスラエルの地から日本まで　－新書版－&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480083774/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480083774.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;雨月物語 (ちくま学芸文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4054061605/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4054061605.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日本とユダヤ 聖徳太子の謎 (ムー・スーパー・ミステリー・ブックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4884698207/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4884698207.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;富士山、2200年の秘密 なぜ日本最大の霊山は古事記に無視されたのか&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「鬼は天皇の影法師であり，両者の関係は「かくれんぼう遊び」に喩えることができる」（当時の帯より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-03&#34;&gt;2016-11-03&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Error の構造化 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/error-handling2/" />
		<id>tag:text.Baldanders.info,2016-11-03:/golang/error-handling2/</id>
		<published>2016-11-03T20:51:00+09:00</published>
		<updated>2016-11-03T20:51:00+09:00</updated>
		<summary>エラーハンドリングのために error を構造化する手段として github.com/pkg/errors というパッケージがあるそうだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」の続き。
とりあえず，エラーハンドリングのデモ用にこんなパッケージを考える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package errdemo1

import &amp;quot;os&amp;quot;

// F returns error.
func F() error {
	file, err := os.Open(&amp;quot;not-exist.txt&amp;quot;)
	if err != nil {
		return err
	}
	defer file.Close()

	return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;呼び出し側の &lt;code&gt;main()&lt;/code&gt; 関数では，このパッケージを以下のようにハンドリングする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;errdemo/errdemo1&amp;quot;
)

func main() {
	if err := errdemo1.F(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}

	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;not-exist.txt&lt;/code&gt; が存在しない場合，実行結果は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main1.go
open not-exist.txt: The system cannot find the file specified.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁハンドリングというか &lt;code&gt;Error()&lt;/code&gt; 関数が吐くエラー内容（文字列）を垂れ流してるだけだけど。
もし &lt;code&gt;errdemo1.F()&lt;/code&gt; 関数が返す &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; を知りたければ &lt;a href=&#34;https://golang.org/ref/spec#Conversions&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;Conversion&lt;/a&gt; 構文を使って&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;errdemo/errdemo1&amp;quot;
)

func main() {
	if err := errdemo1.F(); err != nil {
		switch err.(type) {
		case *os.PathError:
			fmt.Fprintln(os.Stderr, &amp;quot;*os.PathError&amp;quot;)
		default:
		}
        fmt.Fprintln(os.Stderr, err)
		return
	}

	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書ける&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
実行結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main2.go
*os.PathError
open not-exist.txt: The system cannot find the file specified.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;p&gt;この方法の欠点は大元の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を吐いた位置と &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の伝達経路が分かりにくい点である。
&lt;code&gt;errdemo1.F()&lt;/code&gt; 関数で &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を拾ったら &lt;code&gt;errdemo1&lt;/code&gt; パッケージ専用の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; に差し替えて呼び出し側に返す方法もあるが，単に &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を差し替えただけでは大元の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; 情報が消失してしまう。
このようなことが起きるのは &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; 情報が構造化されていないことに原因がある。&lt;/p&gt;

&lt;p&gt;エラーハンドリングのために &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を構造化する手段として &lt;a href=&#34;https://github.com/pkg/errors&#34; title=&#34;pkg/errors: Simple error handling primitives&#34;&gt;&lt;code&gt;github.com/pkg/errors&lt;/code&gt;&lt;/a&gt; というパッケージがあるそうだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2016/04/25/go-pkg-errors/&#34;&gt;Golangのエラー処理とpkg/errors | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/pkg/errors&#34; title=&#34;pkg/errors: Simple error handling primitives&#34;&gt;&lt;code&gt;github.com/pkg/errors&lt;/code&gt;&lt;/a&gt; パッケージは &lt;code&gt;go get&lt;/code&gt; コマンドで導入できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get -v github.com/pkg/errors
github.com/pkg/errors (download)
github.com/pkg/errors
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あるパッケージで大元の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; 情報を含んだ &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; をセットする場合は &lt;code&gt;errors.Wrap()&lt;/code&gt; 関数を使う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package errdemo2

import (
	&amp;quot;os&amp;quot;

	&amp;quot;github.com/pkg/errors&amp;quot;
)

// F returns error.
func F() error {
	file, err := os.Open(&amp;quot;not-exist.txt&amp;quot;)
	if err != nil {
		return errors.Wrap(err, &amp;quot;Error by F() function&amp;quot;)
	}
	defer file.Close()

	return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この &lt;code&gt;errdemo2&lt;/code&gt; パッケージを呼び出す側を以下のように書けば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;errdemo/errdemo2&amp;quot;
)

func main() {
	if err := errdemo2.F(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}

	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main3.go
Error by F() function: open not-exist.txt: The system cannot find the file specified.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また大元の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を取得したければ &lt;code&gt;errors.Cause()&lt;/code&gt; 関数を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;errdemo/errdemo2&amp;quot;

	&amp;quot;github.com/pkg/errors&amp;quot;
)

func main() {
	if err := errdemo2.F(); err != nil {
		switch errors.Cause(err).(type) {
		case *os.PathError:
			fmt.Fprintln(os.Stderr, &amp;quot;*os.PathError&amp;quot;)
		default:
		}
		fmt.Fprintln(os.Stderr, err)
		return
	}

	return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合の実行結果は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main4.go
*os.PathError
Error by F() function: open not-exist.txt: The system cannot find the file specified.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;errors.Cause()&lt;/code&gt; 関数の中身はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Cause returns the underlying cause of the error, if possible.
// An error value has a cause if it implements the following
// interface:
//
//     type causer interface {
//            Cause() error
//     }
//
// If the error does not implement Cause, the original error will
// be returned. If the error is nil, nil will be returned without further
// investigation.
func Cause(err error) error {
	type causer interface {
		Cause() error
	}

	for err != nil {
		cause, ok := err.(causer)
		if !ok {
			break
		}
		err = cause.Cause()
	}
	return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり &lt;code&gt;Cause()&lt;/code&gt; 関数を持つ &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスであれば &lt;code&gt;Cause()&lt;/code&gt; 関数を辿って大元の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスを返すが， &lt;code&gt;Cause()&lt;/code&gt; 関数がない場合はそのまま引数の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスを返す。&lt;/p&gt;

&lt;p&gt;このように &lt;a href=&#34;https://github.com/pkg/errors&#34; title=&#34;pkg/errors: Simple error handling primitives&#34;&gt;&lt;code&gt;github.com/pkg/errors&lt;/code&gt;&lt;/a&gt; パッケージを使えば &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を構造的に，かつ手軽に扱うことができる。
とても便利なパッケージなので是非活用したいところである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;実際にはこのような &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; の判別はパッケージ側で提供すべきなのだろうが，今回はコードの比較のためにこんな書き方をしている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;追加する文字列部分を書式文字列とパラメータで指定する &lt;code&gt;errors.Wrapf()&lt;/code&gt; 関数も用意されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Dart 言語に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/programming-language-dart/" />
		<id>tag:text.Baldanders.info,2016-10-30:/remark/2016/10/programming-language-dart/</id>
		<published>2016-10-30T01:39:04+09:00</published>
		<updated>2016-10-30T01:39:04+09:00</updated>
		<summary>個人的に TypeScript や CoffeeScript の構文は好みじゃないし（もちろん仕事ならやりますよ）， Dart でそういったものの代わりになるのなら悪くないと思ったのだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;最初の頃は Dash とか呼ばれていたこの言語だが，正直に言ってあまり関心は高くなかった。
昔 Microsoft が JScript/VBScript や ActiveX で似たようなことをやろうとして大失敗したのを見ていたので「大失敗の2番煎じとか（笑）」という感じだったのだ。&lt;/p&gt;

&lt;p&gt;でも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/10/26/20161026googles-dart-programming-language-returns-to-the-spotlight/&#34;&gt;GoogleのDartプログラミング言語に再びスポットライトが…その高い生産性にまず社内で人気が盛り上がる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を見てちょっと調べてみることにした。
個人的に TypeScript や CoffeeScript の構文は好みじゃないし（もちろん仕事ならやりますよ）， &lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; でそういったものの代わりになるのなら悪くないと思ったのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; 環境は以下から取得できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dartlang.org/install&#34;&gt;Install Dart | Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows の場合は Chocolatey 経由で導入するかサード・パーティのインストーラが用意されている。
今回はサード・パーティのインストーラを使ってみた。
インストール後にコマンドプロンプト等で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart --version
Dart VM version: 1.20.1 (Wed Oct 12 15:07:45 2016) on &amp;quot;windows_x64&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じになれば成功である。
さっそく，みんな大好き “Hello World” から&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {
    print(&#39;Hello World!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを DartVM 上で実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart hello.dart
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;p&gt;じゃあ，これを JavaScript コードに変換してみようか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart2js -ohello.js hello.dart
Dart file (hello.dart) compiled to JavaScript: hello.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うひゃ！ なんか凄いコード吐いたな。
元の3行のコードに対して300行くらいあるぞ。
でも node.js&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:n&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:n&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に食わせると一応ちゃんと出力される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ node hello.js
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力された JavaScript コードの一部を抜粋するとこんな感じのコードを吐いている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var dart = [[&amp;quot;dart2js._js_primitives&amp;quot;, &amp;quot;dart:_js_primitives&amp;quot;,, H, {
  &amp;quot;^&amp;quot;: &amp;quot;&amp;quot;,
  printString: function(string) {
    if (typeof dartPrint == &amp;quot;function&amp;quot;) {
      dartPrint(string);
      return;
    }
    if (typeof console == &amp;quot;object&amp;quot; &amp;amp;&amp;amp; typeof console.log != &amp;quot;undefined&amp;quot;) {
      console.log(string);
      return;
    }
    if (typeof window == &amp;quot;object&amp;quot;)
      return;
    if (typeof print == &amp;quot;function&amp;quot;) {
      print(string);
      return;
    }
    throw &amp;quot;Unable to print message: &amp;quot; + String(string);
  }
}], [&amp;quot;&amp;quot;, &amp;quot;hello.dart&amp;quot;,, G, {
  &amp;quot;^&amp;quot;: &amp;quot;&amp;quot;,
  main: function() {
    H.printString(&amp;quot;Hello World!&amp;quot;);
  }
}, 1]];
setupProgram(dart, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いや，うーん。
いいのか，これ。
“Hello World” ごときでこれって，もう少しスリムなコードを吐けないのだろうか。&lt;/p&gt;

&lt;p&gt;たとえば仕事で &lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; を使うようなプロジェクトでもあれば面白そうだが，それ以外で積極的に使おうという気にはならないかなぁ，これは。
制御用の言語を統一するのなら JavaScript (ES6) で十分だし，バックエンド側のみということであれば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のほうがよさ気だし。
うーん。&lt;/p&gt;

&lt;p&gt;というわけで，もう少し様子見。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dartlang.org/&#34;&gt;Dart programming language | Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang&#34;&gt;Dart · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cresc.co.jp/tech/java/Google_Dart/DartLanguageSpecification_about.html&#34;&gt;Dartプログラミング言語仕様書邦訳版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/dartrefjp/&#34;&gt;dartrefjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1208/29/news120.html&#34;&gt;小山博史のJavaを楽しむ（16）：JavaとJavaScriptの良いとこ取り？ 「Dart」超入門 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/alucky0707/items/76aaf819a86eda7d6c4d&#34;&gt;Dart入門してみる。インストール～ブラウザでHelloWorldまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takyam/items/3dd2c1948f1fa7968a01&#34;&gt;2015年にDart言語はどう変わってどこに向かっていってるのか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sh4869/items/55d1ad5cd011113ed543&#34;&gt;Dart 1.19リリースノート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:n&#34;&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; は最近 v7.0.0 が出ている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:n&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>【ATOM Editor】 EditorConfig を使うなら Whitespace は不要 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/warnig-from-editorconfig-at-atom/" />
		<id>tag:text.Baldanders.info,2016-10-29:/remark/2016/10/warnig-from-editorconfig-at-atom/</id>
		<published>2016-10-29T22:27:00+09:00</published>
		<updated>2016-10-29T22:27:00+09:00</updated>
		<summary>EditorConfig と Whitespace のどちらを優先するかは人によって違うだろうが，少なくともコード書きなら EditorConfig を優先することを強くお勧めする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;日本シリーズ楽しんでますか？ やっぱ日ハムは強いねぇ。
指揮官が無能で選手の勢いだけで優勝したどこぞのチームとは格が違う。
まぁ，最初の2連勝で夢を見させていただいただけでもよしとしましょう。&lt;/p&gt;

&lt;p&gt;ところで &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; が 1.7 になって面白いワーニングを吐くようになった。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/30550165591/&#34;&gt;&lt;img srcset=&#34;https://c2.staticflickr.com/6/5761/30550165591_c0ca944e12_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;warning from editorconfig @atom&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/30550165591/&#34;&gt;warning from editorconfig @atom&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;どうやら &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; と &lt;code&gt;insert_final_newline&lt;/code&gt; に対応したらしいんだけど， Core Package の &lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; と conflict しているようだ。
この場合は &lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; を Disable にすれば解消する（&lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; は Core Package なので削除できない）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; と &lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; のどちらを優先するかは人によって違うだろうが，少なくともコード書きなら &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; を優先することを強くお勧めする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は入力テキストの文字エンコーディングや改行コードなどを設定する機能で，プロジェクトのルート・フォルダに &lt;code&gt;.editorconfig&lt;/code&gt; ファイルを設置しておけば &lt;strong&gt;利用環境に関係なく&lt;/strong&gt; 設定を統一できる。
対応しているエディタも多く， Vim や Emacs や Notepad++, Sublime Text といった定番のテキストエディタはもちろん， Eclipse, Visual Studio (Code), IntelliJ IDEA, WebStorm といった IDE (Integrated Development Environment) でも対応している。
もちろん &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; も&lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;対応している&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;設定可能な項目は以下の6つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt; はインデントのスタイルを指定する。 &lt;code&gt;tab&lt;/code&gt; または &lt;code&gt;space&lt;/code&gt; を指定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt; はインデントの幅を指定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt; は改行コードを指定する。 &lt;code&gt;lf&lt;/code&gt;, &lt;code&gt;cr&lt;/code&gt;, &lt;code&gt;crlf&lt;/code&gt; から選択できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chaset&lt;/code&gt; は文字エンコーディングを指定する。 &lt;code&gt;latin1&lt;/code&gt;, &lt;code&gt;utf-8&lt;/code&gt;, &lt;code&gt;utf-8-bom&lt;/code&gt;, &lt;code&gt;utf-16be&lt;/code&gt; or &lt;code&gt;utf-16le&lt;/code&gt; から選択できる。残念ながらこれ以外の文字エンコーディングについては動作不定（エディタ側の実装による）である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:u&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:u&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にすると行末の空白文字を削除してくれる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert_final_newline&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にするとファイルの末尾が改行文字ではない場合に補完してくれる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらの項目をファイルの種別ごとに設定できる。
ちなみに私が仕事以外でよく使う設定はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;root = true

[*]
end_of_line = lf
charset = utf-8
indent_style = tab
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true

[*.html]
insert_final_newline = false

[*.md]
indent_style = space
indent_size = 4
trim_trailing_whitespace = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;チームでこうした設定を決めてプロジェクトに組み込んでおけば文字エンコーディングや改行コードやインデント幅といった馬鹿らしいことで悩むことなく作業に専念できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:u&#34;&gt;まぁ Unicode が使えない国と地域以外で今更 Unicode を使わない手はないと思うけどね。&lt;a href=&#34;http://qiita.com/kawasima/items/41632dbd423dc0445e14&#34; title=&#34;Shift_JIS文化からUTF-8への移行ガイド - Qiita&#34;&gt;面倒なことも多い&lt;/a&gt;けど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:u&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>パズルと水素水 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/puzzle-and-hydrogen-water/" />
		<id>tag:text.Baldanders.info,2016-10-25:/remark/2016/10/puzzle-and-hydrogen-water/</id>
		<published>2016-10-25T22:23:35+09:00</published>
		<updated>2016-10-25T22:23:35+09:00</updated>
		<summary>こういうパズルのような問題は個人的に大好物である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;まずはこちらをどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/1040337&#34;&gt;文系と理系で買い物おつりの計算は分かれる？ある問題の答えが話題に - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;問題はこう。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ある日300円を持ってコンビニにパンを買いに行きました。170円の焼きそばパンを買った場合のおつりは幾らでしょう&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;まぁよく見る小学校低学年レベルの算数の計算問題である。
私もそう思ってとっさに「130円」と考えた。&lt;/p&gt;

&lt;p&gt;でもおつりを「30円」とする解があるなら単なる算数ではなくもう一歩踏み込んだ問題と考えられる。
つまり&lt;a href=&#34;https://twitter.com/7ibx/status/790145337042149376&#34;&gt;元の問題&lt;/a&gt;からの逸脱がないようにいくつかの推定を重ねる必要がある。&lt;/p&gt;

&lt;p&gt;ひとつめの推定。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
所持金300円を100円，50円，10円，5円，1円の硬貨の組み合わせと考える
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;もうひとつの推定。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
所持金と支払金額は異なっても構わない
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;いずれも推定としては妥当といえる。
これなら「所持金が100円硬貨3枚で200円払っておつりを30円もらう」という解もあり得ることになる。&lt;/p&gt;

&lt;p&gt;そして，これを推し進めるなら&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
支払金額は170円から300円の間である
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;ということになる。&lt;/p&gt;

&lt;p&gt;170円未満なら取引が成立しないし，所持金300円より大きな金額は払えない。
更に支払い金額に関してこれ以上の制約はない。
ここがポイント。&lt;/p&gt;

&lt;p&gt;たとえば299円払っておつりを129円もらうというのも正しい解である。
実際にこんな不合理な支払い方をする人はあまりいないだろうが，それを制限する条件は&lt;a href=&#34;https://twitter.com/7ibx/status/790145337042149376&#34;&gt;元の問題&lt;/a&gt;からは読み取れない。&lt;/p&gt;

&lt;p&gt;結局，解を満たす集合は&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
0円から130円の間（1円単位）
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;ということになる。&lt;/p&gt;

&lt;p&gt;ちなみにリンク先では消費税の話題も出ている。
消費税は&lt;a href=&#34;https://twitter.com/7ibx/status/790145337042149376&#34;&gt;元の問題&lt;/a&gt;とは独立した変数である。
たとえば消費税が内税方式なら税率がどうであろうと商品の価格は170円のままでありインパクトはない。
逆に外税方式で税率100%なら所持金では買えないことになり問題が成立しない。&lt;/p&gt;

&lt;p&gt;消費税に関する変数の記述は&lt;a href=&#34;https://twitter.com/7ibx/status/790145337042149376&#34;&gt;元の問題&lt;/a&gt;にはないため問題成立可能な範囲で値を振ると，消費税分を加算した価格の範囲は「170円から300円の間」となり，支払金額を300円としてもおつりは「0円から130円の間」で消費税を加味しなかった場合の解集合に含まれる。&lt;/p&gt;

&lt;p&gt;問題を「算数」と考えれば計算して終わりだが，問題を読み解く，すなわち「読解力」の演習問題だと考えれば思考の幅が広がる。
こういうパズルのような問題は個人的に大好物である。&lt;/p&gt;

&lt;p&gt;ところで&lt;a href=&#34;https://twitter.com/7ibx/status/790145337042149376&#34;&gt;元の問題&lt;/a&gt;には続きがある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;理系「130円」 文系「30円」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この断定の根拠についてはさっぱり分からないが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，これを見て「私は文系だな」とか「俺は理系か」とか思ったなら気を付けたほうがいい。
たぶんオレオレ詐欺でついお金を振り込んでしまうお年寄りを笑えない。
あるいは要りもしないのに高級布団や水素水を買わされたり Phishing メールのリンクを思わずポチってしまう可能性もある。&lt;/p&gt;

&lt;p&gt;これは最後の一文まで「読解力」を問われる問題なのである。
コワイコワイ（笑）&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;それを算数の問題ととらえるか別の何かととらえるかは修めている学問分野に関係がない。日本の学校教育における理系・文系の分類には&lt;a href=&#34;http://text.baldanders.info/remark/2016/07/math-allergie/&#34; title=&#34;「「私は数式アレルギーの文系でして」とへらへら笑う大人に耳を貸すな」は正しい&#34;&gt;いろいろ考える部分もある&lt;/a&gt;のだが，それはまたいつかどこかで。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>STAP 教と「説教サイト」 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/cult-of-stap/" />
		<id>tag:text.Baldanders.info,2016-10-20:/remark/2016/10/cult-of-stap/</id>
		<published>2016-10-20T21:45:45+09:00</published>
		<updated>2016-10-20T21:45:45+09:00</updated>
		<summary>ちょっと訳あって昔の自分の記事を掘り返してたら懐かしいものを見つけた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;ちょっと訳あって昔の自分の記事を掘り返してたら懐かしいものを見つけた。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;多分，件の研究者は理研内で失脚後独立して，数年後には（「水が日本語を理解する」とか「ゲームをやると脳がいかれる」とか言ってた人みたいに）「私は波動で万能細胞を作った」とか言って本を出して，小学校の道徳の時間に紹介されるですよ。めでたしめでたし（笑）&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000683.shtml&#34;&gt;紅塵の巷の錬金術師&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;もちろん冗談で書いたのだが，なんだか着々と実現してるっぽくて怖いよ，おじさんは（笑）&lt;/p&gt;

&lt;p&gt;学術レベルの STAP 論争については，ちょうど1年前に当のハーバード大学医学大学院（Harvard Medical School）によってトドメが刺されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hms.harvard.edu/news/final-word-stap&#34;&gt;The Final Word on STAP | HMS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;“Ultimately, we need to have more checks and balances in science,” said Daley, who is also an investigator of the Howard Hughes Medical Institute. “Incentives in the system are so stacked toward being productive and publishing and getting grants that it can lead even very well-intentioned people into too easily accepting their own cognitive biases.”&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://hms.harvard.edu/news/final-word-stap&#34;&gt;The Final Word on STAP | HMS&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるように，真っ当な研究者でも簡単に認知バイアスの罠に陥ってしまうことがある。
これを避けるためにはもっと “checks and balances” が必要だよね，というよくある話でオチがついた。&lt;/p&gt;

&lt;p&gt;一方の日本では（今年の春だったかな）特許申請がどうとかドイツで STAP 細胞が再現されたとか今だに騒いでるようで，私の Facebook の TL にもちょろちょろ流れてきていた。&lt;/p&gt;

&lt;p&gt;ちなみに特許申請が云々というのはこの辺の話だろうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bylines.news.yahoo.co.jp/kuriharakiyoshi/20160510-00057539/&#34;&gt;STAP出願は特許化されてしまうのか？(栗原潔) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここでも書かれている通り特許申請の有無と STAP 細胞存在の有無は基本的に関係がない。
しかも STAP 細胞は再現されていないのだから（少なくとも日本や米国などでは）申請は通らないだろう。
まっ，通ったとしても誰も再現できないのだから意味ないけど。&lt;/p&gt;

&lt;p&gt;で，ドイツで STAP 細胞が再現された云々ってのはこの論文のことを指すらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sciencedirect.com/science/article/pii/S0006291X16303448&#34;&gt;Modified STAP conditions facilitate bivalent fate decision between pluripotency and apoptosis in Jurkat T-lymphocytes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でもこの論文には STAP 細胞が再現されたとは一言も書かれてない。
ちょろんと眺めてみれば Highlights に&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;T-lymphocytes&#39; responses to acidic stress were irrelevant to OCT4A or OCT4B.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.sciencedirect.com/science/article/pii/S0006291X16303448&#34;&gt;Modified STAP conditions facilitate bivalent fate decision between pluripotency and apoptosis in Jurkat T-lymphocytes&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とキッパリ書かれているし  Abstract でも&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;In general, acidic treatment led to an apoptotic condition for Jurkat T-lymphocytes, which occurred independent of OCT4 induction.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.sciencedirect.com/science/article/pii/S0006291X16303448&#34;&gt;Modified STAP conditions facilitate bivalent fate decision between pluripotency and apoptosis in Jurkat T-lymphocytes&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と締めくくられている。
なんでこれで「STAP 細胞が再現された」という騒ぎになるのかよく分からん。&lt;/p&gt;

&lt;p&gt;そういえば『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EUVZHX0/baldandersinf-22/&#34;&gt;神道入門&lt;/a&gt;』では宗教や信仰についてマスメディアの影響を指摘している。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;宗教団体がテレビに登場することに対しては厳しい倫理コードを示すテレビ局であるが、こうした霊能者たちには、かなり自由に番組を開放しているように見える。教団宗教には警戒するが、呪術的行為や観念には極めて寛容という原則をみてとれる。（p.263）&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EUVZHX0/baldandersinf-22/&#34;&gt;神道入門 日本人にとって神とは何か&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おそらく「そういう人たち」というのは「芸人」とさして変わらないとみなされているのだろう。
テレビで行う呪術的行為を芸の一種と見なしているわけだ。
おそらく STAP 論争もメディアから見れば「バラエティ枠」なんだと思う。&lt;/p&gt;

&lt;p&gt;そういや10年近く前に「あるある某」とかいう捏造番組があったな。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;そもそも「メディアリテラシー」なるものが高い人は「あるある...」なんか見ない。それを見るのは（「あるある...」をネタとして楽しんでいる人を除けば）「メディアリテラシー」が低い人なのだ。つまり包含関係が逆。「視聴者が無批判に番組情報を受け入れる」のではなく「無批判に番組情報を受け入れる」タイプの視聴者が「あるある...」のような&lt;a href=&#34;http://www.baldanders.info/spiegel/log/nikki-s/200206.html#2303&#34;&gt;説教番組&lt;/a&gt;を見るのである。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000307.shtml&#34;&gt;「テレビという共同体」&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;もうテレビ自体見なくなったのですっかり忘れていたが，私が「&lt;a href=&#34;http://www.baldanders.info/spiegel/log/nikki-s/200206.html#2303&#34; title=&#34;せち日記 - 2002年06月分&#34;&gt;説教番組&lt;/a&gt;」と名付けたのも，その番組スタイルがいかにも「説教」だったからだ。
日本の STAP 論争がカルトっぽく見えてしまうのもネット上のメディアが「&lt;a href=&#34;http://www.baldanders.info/spiegel/log/nikki-s/200206.html#2303&#34; title=&#34;せち日記 - 2002年06月分&#34;&gt;説教番組&lt;/a&gt;」のスタイルを取り入れていっているのだろう。&lt;/p&gt;

&lt;p&gt;ちうわけで，この手のアレな情報をいかにもそれらしく「説教」のように垂れ流すサイトをこれから「説教サイト」と呼ぶことにする。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EUVZHX0/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41iDCgh1k%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EUVZHX0/baldandersinf-22/&#34;&gt;神道入門 日本人にとって神とは何か (平凡社新書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;井上 順孝 &lt;/dd&gt;&lt;dd&gt;平凡社 2006-01-12&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00D2NVP88/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00D2NVP88.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;国家が個人資産を奪う日 (平凡社新書 681)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I7PNRL4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I7PNRL4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;競争社会アメリカ (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EPVI9VW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00EPVI9VW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日本の15大同族企業 (平凡社新書 516)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00C2GW6DE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00C2GW6DE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;現代政治学の名著 (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00IE7L1WW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00IE7L1WW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;哲学マップ (ちくま新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;Kindle 版登場。日本の神道の系譜が網羅的に書かれている。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-22&#34;&gt;2015/03/22&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「PHOTO METI PROJECT」の利用規約が変わっていた - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/photo-meti-project-2/" />
		<id>tag:text.Baldanders.info,2016-10-20:/remark/2016/10/photo-meti-project-2/</id>
		<published>2016-10-20T19:14:24+09:00</published>
		<updated>2016-10-23T17:20:29+09:00</updated>
		<summary>「規約」にまつわるこの手のミスは昔からある話だし，経産省ともあろうところがこんな頭の悪いミスをいつまでも放置するとは思えなかったので，私としては書くだけ書いて知らんぷりしてたのだが，この前 PHOTO METI PROJECT のサイトを覗いたら利用規約が変わってたのでひと安心である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;先月書いた「&lt;a href=&#34;http://text.baldanders.info/remark/2016/09/photo-meti-project/&#34;&gt;経産省は CC Licenses を知らない？&lt;/a&gt;」は微妙に反響があったようで恐縮です。&lt;/p&gt;

&lt;p&gt;「規約」にまつわるこの手のミスは昔からある話だし，経産省ともあろうところがこんな頭の悪いミスをいつまでも放置するとは思えなかったので，私としては書くだけ書いて知らんぷりしてたのだが，この前 &lt;a href=&#34;https://photo.kankouyohou.com/&#34;&gt;PHOTO METI PROJECT&lt;/a&gt; のサイトを覗いたら&lt;a href=&#34;https://photo.kankouyohou.com/terms.html&#34; title=&#34;PHOTO METI PROJECT 利用規約&#34;&gt;利用規約&lt;/a&gt;が変わってたのでひと安心である。&lt;/p&gt;

&lt;p&gt;どう変わったかは「&lt;a href=&#34;http://text.baldanders.info/remark/2016/09/photo-meti-project/&#34;&gt;経産省は CC Licenses を知らない？&lt;/a&gt;」の追記部分を見ていただくとして，ここでは一点だけ「禁止事項」について言及しておく。
&lt;a href=&#34;https://photo.kankouyohou.com/terms.html&#34; title=&#34;PHOTO METI PROJECT 利用規約&#34;&gt;利用規約&lt;/a&gt;の「禁止事項」は以下の6項目になっている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;軍事目的での使用&lt;/li&gt;
&lt;li&gt;公序良俗に反する目的での使用&lt;/li&gt;
&lt;li&gt;日本国、他国または第三者の名誉または信用を毀損する目的での使用&lt;/li&gt;
&lt;li&gt;写真素材の撮影者の名誉又は声望を害する方法での使用&lt;/li&gt;
&lt;li&gt;犯罪的行為目的での使用&lt;/li&gt;
&lt;li&gt;本サービスの円滑な提供を妨げる目的での使用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まず「自由のライセンス」においては利用目的や利用者自身を差別してはならないという大原則がある。
それがたとえ悪意によるものであっても。&lt;/p&gt;

&lt;p&gt;たとえば数多ある「オープンソース」を定義する &lt;a href=&#34;http://www.opensource.jp/osd/osd-japanese.html&#34; title=&#34;The Open Source Initiative: オープンソースの定義 日本語&#34;&gt;OSD (Open Source Definition)&lt;/a&gt; では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;個人やグループに対する差別の禁止&lt;/li&gt;
&lt;li&gt;利用する分野(fields of endeavor)に対する差別の禁止&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が掲げられている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:osd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:osd&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
CC Licenses でも（特に Free Culture License に分類される &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34; title=&#34;Creative Commons — CC0 1.0 Universal&#34;&gt;CC0&lt;/a&gt;, &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons — Attribution 4.0 International — CC BY 4.0&#34;&gt;BY&lt;/a&gt;, &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;BY-SA&lt;/a&gt; では）この考え方は尊重されている。
「表現」「創作」に関する問題ではないことを著作権で制限しようというのは「弾圧」と同義である。&lt;/p&gt;

&lt;p&gt;先の禁止事項で言うと「軍事目的での使用」「日本国、他国または第三者の名誉または信用を毀損する目的での使用」は明らかに外交問題あるいは軍事問題であり，著作権ライセンスの出る幕ではない。
これは経産省ではなく外務省や防衛省のお仕事である。
「公序良俗に反する目的での使用」「犯罪的行為目的での使用」「本サービスの円滑な提供を妨げる目的での使用」も同様で，これは警察のお仕事である。&lt;/p&gt;

&lt;p&gt;犯罪が行われることと犯罪のために某かの「表現が利用される」ことは全く別の問題なのである。
そもそも犯罪者に「あなたがたがそのコンテンツを利用するのは利用規約に反するので止めなさい」と言ったところで何の意味があるというのだろう。
ケーサツは罪状が増えて喜ぶかもしれないが抑止力にはならない。&lt;/p&gt;

&lt;p&gt;問題は「写真素材の撮影者の名誉又は声望を害する方法での使用」の部分。
これは恐らく著作者人格権を指しているものと思われる。&lt;/p&gt;

&lt;p&gt;実は CC Licenses の Version 3 までは，ある程度は著作者人格権を認める傾向にあった。
たとえば Version 2.1 日本版では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;原著作者及び実演家の名誉又は声望を害する方法で原著作物を改作、変形もしくは翻案して生じる著作物は、この利用許諾の目的においては、二次的著作物に含まれない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ リーガル・コード — 表示-継承 2.1 日本版&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあり，原著作者の名誉・声望を害する改変は二次的著作物に含めない，としている。
また 3.0 Unported でも同様に&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Except as otherwise agreed in writing by the Licensor or as may be otherwise permitted by applicable law, if You Reproduce, Distribute or Publicly Perform the Work either by itself or as part of any Adaptations or Collections, You must not distort, mutilate, modify or take other derogatory action in relation to the Work which would be prejudicial to the Original Author&#39;s honor or reputation.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/legalcode&#34;&gt;Creative Commons Legal Code — Attribution-ShareAlike 3.0 Unported&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;となっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;これが Version 4.0 International では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;同一性保持の権利のような著作者人格権は、本パブリック・ライセンスのもとではライセンスされません。パブリシティ権、プライバシー権、および／または他の類似した人格権も同様です。ただし、可能なかぎり、許諾者は、あなたがライセンスされた権利を行使するために必要とされる範囲内で、また、その範囲内でのみ、許諾者の保持する、いかなるそのような権利を放棄し、および／または主張しないことに同意します。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と記述が変わっていて「原著作者の名誉・声望」の部分が抜け落ちている。
私はこの辺の議論の詳細を知らないのだが（英語不得手なので大まかにしか追ってない）&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The 4.0 license suite uniformly and explicitly waives moral rights held by the licensor where possible to the limited extent necessary to enable reuse of the content in the manner intended by the license. Publicity, privacy, and personality rights held by the licensor are expressly waived to the same limited extent. While many understand these rights to be waived when held by the licensor in 3.0 and earlier versions, version 4.0’s treatment makes the intended outcome clear.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;#39;s New in 4.0 - Creative Commons&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるので意図的に記述から外しているのかもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:faq&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:faq&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ただし「可能なかぎり」という部分がポイントで，実際に訴訟問題になった場合にどのような司法判断になるのかは分からない（邪推だが経産省が写真素材の著作者に CC Licenses についてきちんと説明しないで「名誉・声望を害する利用については規約で禁止してますから」とか言ってるかもしれない）。&lt;/p&gt;

&lt;p&gt;もちろんそれが本当に著作者の名誉・声望を害するものであるなら，ライセンス云々に関係なく，「名誉毀損」に該当する事案だし，その過程で名誉回復のために該当する写真を含むコンテンツが削除されることもあると思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/&#34;&gt;改訂3版： CC Licenses について&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/03-moral-rights/&#34;&gt;人格権と CC Licenses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:osd&#34;&gt;何故このようなことになっているかについては歴史的経緯とか色々あるのだが，私はうまく言語化して説明できないので&lt;a href=&#34;http://www.mhatta.org/&#34; title=&#34;Masayuki Hatta a.k.a. mhatta&#34;&gt;八田真行&lt;/a&gt;さんあたりに質問するといいかもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:osd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c2&#34;&gt;CC Licenses 3.0 では著作者人格権に関する議論が国際的にも行われたようだ。くわしくは「&lt;a href=&#34;http://creativecommons.jp/2006/11/15/ccplv3-discussion/&#34;&gt;著作者人格権（同一性保持権）に関する議論&lt;/a&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:faq&#34;&gt;&lt;a href=&#34;https://creativecommons.jp/faq/&#34; title=&#34;FAQ　よくある質問と回答 | クリエイティブ・コモンズ・ジャパン&#34;&gt;CCjp の FAQ&lt;/a&gt; にはこの辺の微妙な文言の違いについて記述がない。まぁ CCjp （つか commonsphere）にしてみれば 2.1 日本版が大事で国際版や Free Culture など「知ったこっちゃない」のかもしれないが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:faq&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
