<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-21T23:08:07+0900:/</id>
	<updated>2015-09-21T23:08:07+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」 （プレ・オープン中）</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>文字列連結はどれが速い？ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/join-strings/" />
		<id>tag:text.Baldanders.info,2015-09-21T23:08:07+0900:/golang/join-strings/</id>
		<published>2015-09-21T23:08:07+0900</published>
		
		<summary>Go 言語で文字列の連結を行う際にどうやるのが一番速いか，という話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/16ab7dabbd0749281227&#34;&gt;Golang の文字列連結はどちらが速い？ - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34; title=&#34;String と Rune&#34;&gt;前回&lt;/a&gt;につづき &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の話題。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で文字列の連結を行う際にどうやるのが一番速いか，という話。&lt;/p&gt;

&lt;h2 id=&#34;文字列連結を行う4つの方法:53cbada6770de764fdec60b0362267fb&#34;&gt;文字列連結を行う4つの方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で文字列の連結を行う際には概ね以下の4つの方法がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;“&lt;code&gt;+&lt;/code&gt;” 演算子で連結する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Join&lt;/code&gt; で連結する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; は「不変（immutable）」なので，最初の2つが高コストになるだろうことはすぐに想像がつく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/2bb83b29baeae2433a79&#34;&gt;Goでは文字列連結はコストの高い操作 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atotto.hatenadiary.jp/entry/2013/04/26/202701&#34;&gt;Go言語で効率良く文字列を連結する話 #golang - memoメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では残りの2つはどうなのかというと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37&#34;&gt;Goの文字列結合のパフォーマンス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;によると最後のが一番速いらしい。ほんじゃまぁ，確かめてみるか。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコードを用意:53cbada6770de764fdec60b0362267fb&#34;&gt;サンプルコードを用意&lt;/h2&gt;

&lt;p&gt;以下のコード &lt;code&gt;join.go&lt;/code&gt; を使って評価してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;bytes&amp;quot;
	&amp;quot;io&amp;quot;
)

//Read content (text data) from buffer
func ContentText(inStream io.Reader) ([]string, error) {
	scanner := bufio.NewScanner(inStream)
	list := make([]string, 0)
	for scanner.Scan() {
		list = append(list, scanner.Text())
	}
	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return list, nil
}

//Write content (text data) to buffer
func WriteBuffer1(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0)
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer
func WriteBuffer1Cap128(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0, 128) //128 bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer
func WriteBuffer1Cap1K(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0, 1024) //1K bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0))
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2Cap128(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0, 128)) //128 bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2Cap1K(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0, 1024)) //1K bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストコード &lt;code&gt;join_test.go&lt;/code&gt; はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;os&amp;quot;
	&amp;quot;testing&amp;quot;
)

func readFile() []string {
	file, err := os.Open(&amp;quot;CollisionsForHashFunctions.txt&amp;quot;) //maybe file path
	if err != nil {
		panic(err)
	}
	defer file.Close()
	list, err := ContentText(file)
	if err != nil {
		panic(err)
	}
	return list
}

func BenchmarkWriteBuffer1(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1(list)
		_ = content
	}
}

func BenchmarkWriteBuffer1Cap128(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1Cap128(list)
		_ = content
	}
}

func BenchmarkWriteBuffer1Cap1K(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1Cap1K(list)
		_ = content
	}
}

func BenchmarkWriteBuffer2(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2(list)
		_ = content
	}
}

func BenchmarkWriteBuffer2Cap128(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2Cap128(list)
		_ = content
	}
}

func BenchmarkWriteBuffer2Cap1K(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2Cap1K(list)
		_ = content
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のテストについては&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34;&gt;以前紹介した&lt;/a&gt;が，同じ要領で &lt;code&gt;Benchmark&lt;/code&gt; から始まる名前の関数を作るとベンチマーク用のコードとして認識される。
引数には &lt;code&gt;b *testing.B&lt;/code&gt; を指定する。&lt;/p&gt;

&lt;p&gt;ベンチマークの内訳は以下のとおり。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;ベンチマーク名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;処理内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1Cap128&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する（ capacity 128B）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1Cap1K&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する（ capacity 1KB）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2Cap128&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する（ capacity 128B）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2Cap1K&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する（ capacity 1KB）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;入力テキストだが，小さいファイルではテストにならない気がしたので，大昔に書いたテキスト &lt;a href=&#34;http://www.baldanders.info/spiegel/archive/CollisionsForHashFunctions.txt&#34;&gt;&lt;code&gt;CollisionsForHashFunctions.txt&lt;/code&gt;&lt;/a&gt; を使うことにした。
サイズは70行，7KB ほど。&lt;/p&gt;

&lt;h2 id=&#34;テスト結果:53cbada6770de764fdec60b0362267fb&#34;&gt;テスト結果&lt;/h2&gt;

&lt;p&gt;結果は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go test -bench WriteBuffer -benchmem
testing: warning: no tests to run
PASS
BenchmarkWriteBuffer1-4           100000         14140 ns/op       28864 B/op     11 allocs/op
BenchmarkWriteBuffer1Cap128-4     100000         13440 ns/op       28800 B/op     10 allocs/op
BenchmarkWriteBuffer1Cap1K-4      100000         13020 ns/op       27904 B/op      7 allocs/op
BenchmarkWriteBuffer2-4           100000         13890 ns/op       25568 B/op      9 allocs/op
BenchmarkWriteBuffer2Cap128-4     100000         18131 ns/op       26800 B/op      8 allocs/op
BenchmarkWriteBuffer2Cap1K-4      200000         11785 ns/op       17520 B/op      5 allocs/op
ok      join    13.016s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ありゃりゃ。 &lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; を使ったほうが速いみたい（capacity を大きくとれば）。&lt;/p&gt;

&lt;p&gt;それなら，入力テキストを切り詰めて10行，0.3KB にしてやってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go test -bench WriteBuffer -benchmem
testing: warning: no tests to run
PASS
BenchmarkWriteBuffer1-4          2000000           742 ns/op         960 B/op      4 allocs/op
BenchmarkWriteBuffer1Cap128-4    2000000           719 ns/op         896 B/op      3 allocs/op
BenchmarkWriteBuffer1Cap1K-4     2000000           591 ns/op        1024 B/op      1 allocs/op
BenchmarkWriteBuffer2-4          1000000          1579 ns/op        1248 B/op      5 allocs/op
BenchmarkWriteBuffer2Cap128-4    1000000          1402 ns/op        1328 B/op      4 allocs/op
BenchmarkWriteBuffer2Cap1K-4     2000000           863 ns/op        1136 B/op      2 allocs/op
ok      join    12.061s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度は &lt;code&gt;[]byte&lt;/code&gt; の方が速くなった。&lt;/p&gt;

&lt;p&gt;まぁでも予想通りかな。
データのサイズが大きくなればバッファ操作のほうが有利になるのは分かりやすいっちゃあ分かりやすい。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:53cbada6770de764fdec60b0362267fb&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>「暦」日本史 （再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/japanese-koyomi/" />
		<id>tag:text.Baldanders.info,2015-09-21T21:43:15+0900:/remark/2015/japanese-koyomi/</id>
		<published>2015-09-21T21:43:15+0900</published>
		
		<summary>この記事は2004年初出の記事を再構成したものです。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000045.shtml&#34;&gt;2004年初出の記事&lt;/a&gt;を再構成したものです。
記事中の知見や意見は現在のものとは異なる可能性があります。&lt;/p&gt;

&lt;h2 id=&#34;万有こよみ百科:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;『万有こよみ百科』&lt;/h2&gt;

&lt;p&gt;実家の私の本棚を整理していたら懐かしい冊子が出てきました。
『歴史読本』 ’73年12月 臨時増刊号と書かれています。
タイトルは『万有こよみ百科』。&lt;/p&gt;

&lt;p&gt;ただ冊子には見覚えがあるものの，どうやって手に入れたのか覚えてなかったりします。
古本屋で買ったのか。
もしかしたら天文研の BOX から借りたまま忘れているのかもしれません。（だとしたらヤバイなぁ）&lt;/p&gt;

&lt;p&gt;1973年は明治の改暦から100周年にあたる年で，この冊子はその記念として作られたもののようです。
せっかくなので，この冊子の中から面白そうな内容をいくつか紹介してみましょう。
なお現在はこの冊子が発行されてから30年経っています&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
よって最近の知見とは異なる可能性もありますがご容赦を。&lt;/p&gt;

&lt;h3 id=&#34;勅令第90号:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;勅令第90号&lt;/h3&gt;

&lt;p&gt;皆さんは日本の暦がどのような暦法でどのように定められているのかご存知ですか？
現在の日本の暦は明治31年5月10日の「勅令第90号」と呼ばれる勅令で定められています。
内容は以下のとおりです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;神武天皇即位紀元年数ノ四ヲ以テ整除スヘキ年ヲ閏年トス。
但シ紀元年数ヨリ六百六十ヲ減シテ百ヲ以テ整除シ得ヘキモノノ中更ニ四ヲ以テ其ノ商ヲ整除シ得サル年ハ平年トス&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これはグレゴリオ暦と実質的に同じですが，
「神武天皇即位紀元」が紀元になっている点が異なります。
つまり現在においても日本では「神武天皇即位紀元」は生きているのです。&lt;/p&gt;

&lt;p&gt;日本で最も古い暦は西暦554年頃から使われていた元嘉暦であろうと言われています。
つまりそれ以前は「伝説の時代」であり暦は存在していなかったのです。
もちろん神武天皇の時代にも暦は存在していませんでした。
（暦が存在していない時代に紀元を求めるなどナンセンスですが，これについては後述します）&lt;/p&gt;

&lt;h3 id=&#34;暦以前:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;暦以前&lt;/h3&gt;

&lt;p&gt;暦以前の日本はどうしていたのでしょう。
暦（こよみ）という言葉の起源は「日読（かよみ）」であるという説があります。
また万葉集には「月読」という語句があり月日を数える程度のことはされていたようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;月読めばいまだ冬なり しかすがに霞たなびく春立ちぬとか（巻二十の四四九二）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ただし古代の日本ではまだ「年」の概念がなかったようで，魏志倭人伝によると倭人は「其の俗正歳四時を知らず、ただ春耕秋収を記し、年紀と為すのみ」だったと書かれています。&lt;/p&gt;

&lt;p&gt;また万葉集にも&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;わが欲りし雨は降り来ぬ かくしあらば 言挙げせずとも年は栄えむ（巻十八の四一二四）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあり，年（とし）は稲穀の意味で用いられていたようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;暦の輸入と日本独自の暦の開発:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;暦の輸入と日本独自の暦の開発&lt;/h3&gt;

&lt;p&gt;日本で暦が導入されたのは先ほど述べたとおり西暦554年頃からですが，当時の暦は中国から輸入されたものでした。
これらの暦は「漢暦五伝」と呼ばれ，導入された順に「元嘉暦」「儀鳳暦」「大衍暦」「五紀暦」「宣明暦」と呼ばれています。
最後の宣明暦は800年以上も用いられました。&lt;/p&gt;

&lt;p&gt;日本人の手による暦法が用いられるようになったのは江戸時代に入ってからです。
これが保井春海によって作られた「貞亨暦」です。
後に天文観測等により修正が加えられ「宝暦暦」「寛政暦」「天保暦」が生まれます。
天保暦は太陰太陽暦としては世界的にも完成度が高いものです。
現在のいわゆる「旧暦」も天保暦の暦法を基に計算されているようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;漢暦五伝および貞亨暦（とその改良版）は本来の「日読」的な役割よりも，もっと宗教的・呪術的なものとして用いられていたようです。
例えば当時の江戸幕府は貞亨暦への改暦に積極的ではなかったと言われています。
当時の現行暦である宣明暦や試験的に導入された授時暦・大統暦が実際の暦象（日食や月食などの天文現象）から外れているのにもかかわらず貞亨暦への改暦を渋ったのは，暦の持つ宗教的・呪術的なものへの執着だったのかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;地方歴や民間歴:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;地方歴や民間歴&lt;/h3&gt;

&lt;p&gt;一方，為政者による暦とは別に地方の豪族や民衆が作成・使用した地方暦や民間暦も数多く存在していたそうです。
明治5年の改暦直前の時点でも「京暦」「伊勢暦」「南都暦」「丹生暦」「三島暦」「江戸暦」「会津暦」などの暦が存在していたようです。
変わったところでは「田山暦&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;」「盛岡盲暦&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;」などがあり，これらの暦の中には現在も継続されているものもある，と『万有こよみ百科』には記されています。&lt;/p&gt;

&lt;h3 id=&#34;明治の改暦:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;明治の改暦&lt;/h3&gt;

&lt;p&gt;このような状況の中で明治の改暦を迎えるのですが，『万有こよみ百科』の記事のいくつかは明治の改暦における政治的・儀式的な側面を指摘しています。&lt;/p&gt;

&lt;p&gt;まず政治的な側面としては，日本の国際化・近代化（いわゆる文明開花）にとって太陽暦（グレゴリオ暦）への改暦は不可欠であるという現実と，時の明治政府の切迫した財政状況（天保暦のまま明治6年を続けると閏月を含む13ヶ月分の給料を払わなければならなかったそうです）にあったと言われています。
この辺は結構有名な話ですね。&lt;/p&gt;

&lt;p&gt;一方で，こちらの方がより重要なのですが，明治の改暦は「正朔を奉ず」儀式でもありました。
つまり「明治維新」という易姓革命を正当化するためには「正朔を奉ず」儀式が必要不可欠だったということです。
当時の日本にとってもっとも近代的な暦法であるグレゴリオ暦と神武天皇即位紀元との歪なマッチングは「明治維新」そのものの歪さを象徴するものなのかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;暦支配への欲望とサマータイム:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;暦支配への欲望とサマータイム&lt;/h2&gt;

&lt;p&gt;さて，ここ数年「サマータイム導入」の是非が話題になっていますね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
私にはこれが「授時」または「正朔を奉ず」儀式であるように思えてなりません。
現代において暦法や時制を為政者が勝手に変更できるという発想はあまりにもナンセンスです。&lt;/p&gt;

&lt;p&gt;私達は為政者につかえる「臣民」ではありません。
政治的な思惑だけで議論される「サマータイム」も暦のない「伝説の時代」に紀元をもとめる「神武天皇即位紀元」もナンセンスで歪な発想です。&lt;/p&gt;

&lt;p&gt;この機会に「暦」について「時間」について考えてみませんか。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www1.kaiho.mlit.go.jp/KOHO/faq/reki/kyuureki.html&#34;&gt;旧暦のあれこれ｜天文・暦情報｜海上保安庁海洋情報部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www1.kaiho.mlit.go.jp/KOHO/faq/reki/shinreki.html&#34;&gt;現行の暦法｜天文・暦情報｜海上保安庁海洋情報部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nao.ac.jp/faq/a0304.html&#34;&gt;質問3-4）「旧暦」ってなに？ | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/topics/html/topics2014.html&#34;&gt;旧暦2033年問題について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%A5%9E%E6%AD%A6%E5%A4%A9%E7%9A%87%E5%8D%B3%E4%BD%8D%E7%B4%80%E5%85%83&#34;&gt;神武天皇即位紀元 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000784.shtml&#34;&gt;朔旦冬至と授時 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000840.shtml&#34;&gt;暦の改訂（DE405 から DE430 へ） — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;2004年当時の話です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;正月の歳神（としがみ）様も本来は米の神だったという説もあるそうです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;ただし，いわゆる「旧暦」は日本の公式な暦ではありません。「旧暦」と言われているものの多くは，現行暦の暦象をベースに天保暦のルールを当てはめていったもののようです。したがって「&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/topics/html/topics2014.html&#34;&gt;2033年問題&lt;/a&gt;」のようなことも起こりえます。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;&lt;a href=&#34;http://www.nao.ac.jp/gallery/weekly/2015/20150203-koyomi.html&#34;&gt;「田山暦」（「東遊録後編」収録） | 国立天文台(NAOJ)&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;「&lt;a href=&#34;http://www.nao.ac.jp/gallery/weekly/2014/20141111-morioka-calendar.html&#34;&gt;盛岡暦 | 国立天文台(NAOJ)&lt;/a&gt;」によると現在も発行されているそうです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;しつこいですが，2004年当時の話です。現在でも時々話題になりますが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『暗号技術入門 第3版』をななめ読み - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/cryptography-introduction/" />
		<id>tag:text.Baldanders.info,2015-09-20T21:43:17+0900:/remark/2015/cryptography-introduction/</id>
		<published>2015-09-20T21:43:17+0900</published>
		
		<summary>今回は大幅改訂版なので，以前のを持ってる人も買っておいて損はない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;結城浩さんの『&lt;a href=&#34;http://www.hyuki.com/cr/&#34;&gt;暗号技術入門 第3版&lt;/a&gt;』がついに登場。
前の第2版のときは細々した追記が主だったような気がするが，今回は大幅改訂版なので，以前のを持ってる人も買っておいて損はない。
主な改訂内容としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SHA-3 について詳しく解説&lt;/li&gt;
&lt;li&gt;HeartBleed や POODLE など，最近の攻撃手法について言及&lt;/li&gt;
&lt;li&gt;付録で楕円曲線暗号（Elliptic Curve Cryptography）について詳しく解説&lt;/li&gt;
&lt;li&gt;Bitcoin というか Bitcoin の中の重要な技術要素である Block Chain について詳しく解説&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも &lt;a href=&#34;https://www.gnupg.org/&#34;&gt;GnuPG&lt;/a&gt; の記述が modern version に対応してたり，認証つき暗号（AEAD; Authenticated Encryption with Associated Data）およびその実装である GCM (Galois/Counter Mode) への言及があったり，いろいろ細かく手直しされている。&lt;/p&gt;

&lt;p&gt;特に楕円曲線暗号の解説は秀逸で，入門レベルでの解説の中では一番分かりやすかった。
あと Block Chain の解説もお勧め。
Bitcoin や Block Chain に関する解説本はすでにたくさん出ているが，暗号技術の観点からきちんと解説しているものは少なく，「信用モデル」にまで話を展開しているものは更に少ない。&lt;/p&gt;

&lt;p&gt;結局，暗号システムの実装というのは究極的には「信用モデル」の開発であると言える。
問題は「信用モデル」はロジックだけでは成立しない，ということだ。
『&lt;a href=&#34;http://www.hyuki.com/cr/&#34;&gt;暗号技術入門 第3版&lt;/a&gt;』では信用モデルの例として hierarchical PKI の典型である X.509 と OpenPGP の Web of Trust，そして Block Chain を挙げているが，それぞれ特徴があって比較すると面白い。
たとえば Block Chain はユーザ間に働く経済的 incentive を巧妙に使うが，それだけにパラメータの調整が難しいし， Mt. Gox のような経済リスクも考慮しなくてはならない。&lt;/p&gt;

&lt;p&gt;そもそも信用というのは過去の事実に対してのみ評価可能なのに，実際に評価したいのは現在及び未来についてなのだ。
これって本来は不能解だよね。
でも信用が評価できなくては世の中は回らない。
だから，どうにかして実用可能なレベルにまで近似できないか，と専門家やエンジニアは頭を悩ますわけ。&lt;/p&gt;

&lt;p&gt;そういったことを頭の隅に入れながら読めば，この本は単なるリファレンス本ではないことに気づくと思う。&lt;/p&gt;

&lt;p&gt;最後にちょっとだけ注文をつけるなら「前方秘匿性（PFS; Perfect Forward Secrecy）」および OTR (Off-the-Record) Messaging の肝である「否認可能（Deniability）」についても言及が欲しかった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bb61903cf045c2e66950873376fa2076:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bb61903cf045c2e66950873376fa2076:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
メッセージングの世界においてはこのふたつが重要な要件になってきているからだ。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;第3版出た！ てか，もう Kindle 版出てるのか。紙の本買うのはやまったかなぁ。 SHA-3 や BitCoin/BlockChain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 山形 浩生 &lt;/dd&gt;&lt;dd&gt;エヌティティ出版 2013-12-24&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622078007/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4622078007.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;殺人ザルはいかにして経済に目覚めたか?―― ヒトの進化からみた経済学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4620323098/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4620323098.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リベラルのことは嫌いでも、リベラリズムは嫌いにならないでください－－井上達夫の法哲学入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4152094362/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4152094362.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;楽観主義者の未来予測(上): テクノロジーの爆発的進化が世界を豊かにする&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/413052027X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/413052027X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;社会調査の考え方　下&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4326302402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4326302402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;歴史から理論を創造する方法: 社会科学と歴史学を統合する&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ゴメン。途中まで読んで積読中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bb61903cf045c2e66950873376fa2076:1&#34;&gt;PFS についてはもしかしたら見落としてるかもしれないが。なにせ斜め読みだったから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bb61903cf045c2e66950873376fa2076:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言：週末は掃除三昧 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/0920-diary/" />
		<id>tag:text.Baldanders.info,2015-09-20T18:33:08+0900:/remark/2015/0920-diary/</id>
		<published>2015-09-20T18:33:08+0900</published>
		
		<summary>仕事部屋が広くなった orz / 国勢調査を片付けた / Git for Windows 2.5.3</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;世間ではシルバーウィークとかなんとか言うらしいですが，私には関わりのねぇこってござんす。&lt;/p&gt;

&lt;h2 id=&#34;仕事部屋が広くなった-orz:2fb21705604ae2347e0f287e22b99865&#34;&gt;仕事部屋が広くなった orz&lt;/h2&gt;

&lt;p&gt;ついに実家の親から仕事（魔窟）部屋をかたせ，と命令が下りまして（他にも色々大変だったんだけど），泣く泣く本を手放した。&lt;/p&gt;

&lt;p&gt;今の場所に引っ越してきたのは16年ほど前だけど，主に漫画本が溜まりまくってて。
軽トラ1台分の単行本を処分。
まぁ，最近は Kindle で買えるし，いいんだけどね。
15年くらい前は4コマで人気だったのに，今ではさっぱり名前を聞かない作家さんの本とかもあって，惜しむ気持ちはあったんだけど，命令には逆らえません。&lt;/p&gt;

&lt;p&gt;でも好きな作家さんの本はどうしても捨てられませんでした。
というわけで&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21549048532/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/570/21549048532_5205dd7322.jpg&#34; alt=&#34;竹本泉エリア。整理したら３段ぶち抜きになってしまった&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21549048532/&#34;&gt;竹本泉エリア。整理したら３段ぶち抜きになってしまった&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;漫画本の本棚が大変なことに。&lt;/p&gt;

&lt;p&gt;仕事関係の本は今回は手付かず。
（Kindle 含め） E ブックで買えるなら，これこそ紙で買う必要はないんだけどね。&lt;/p&gt;

&lt;p&gt;ラノベで紙の本で買ってたものは全て処分した。
Kindle で買えるし。&lt;/p&gt;

&lt;h2 id=&#34;国勢調査を片付けた:2fb21705604ae2347e0f287e22b99865&#34;&gt;国勢調査を片付けた&lt;/h2&gt;

&lt;p&gt;国勢調査の回答をネットで片付けた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.e-kokusei.go.jp/&#34;&gt;国勢調査オンライン窓口 - 総務省統計局&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Symantic の証明書かぁ。
いや，まぁ，いいんだけどね。
そういや，偽サイト作って怒られてた人いたな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1509/15/news083.html&#34;&gt;国勢調査の“偽サイト”作った意図は？　総務省から削除依頼……「騒ぎになり深く反省」と制作者 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常識だと思うが， Phishing サイト自体は誰でも作れる。
昔は日本語が怪しかったりして，ひと目でわかるようなものが多かったが，今の職業犯罪者は明確に「憐れな日本人」ユーザをターゲットにしているので，見た目ではわからないことも多い。
従って，そのサイトまたはページが本物かどうかは URI と証明書で判断するしかない。&lt;/p&gt;

&lt;p&gt;幸い今回は調査員がマニュアルとアカウント情報を手渡しでくれるので（調査員が信用できるのなら）それほど問題ではないだろう。
怪しい電子メールに書いてある URL や 検索サービスの検索結果に表示されているページをそのまま開くのでないなら，ね。&lt;/p&gt;

&lt;h2 id=&#34;git-for-windows-2-5-3:2fb21705604ae2347e0f287e22b99865&#34;&gt;Git for Windows 2.5.3&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git-for-windows/git/releases/tag/v2.5.3.windows.1&#34;&gt;Release Git for Windows 2.5.3 · git-for-windows/git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows 版 git が MSYS2 ベースになって，本家のアップデートに素早く対応できるようになったのはいいんだけど，アップデートのペースが速いよ。
もうちょっとなんとかならんのん，これ。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>内容に関係のない広告で掠りをとるやり方はゼロ年代で終わってる - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/adblock/" />
		<id>tag:text.Baldanders.info,2015-09-20T14:11:36+0900:/remark/2015/adblock/</id>
		<published>2015-09-20T14:11:36+0900</published>
		
		<summary>ユーザはバカではない。Web 上にあるものの何に価値があるのか既に知っている。価値の無いものにいくら広告を付けても，その事自体が忌避の対象になるだけだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;何故だかよく分からないのだが，私の観測範囲で広告ブロックアプリが話題になっているようなので，便乗して書いておく。&lt;/p&gt;

&lt;p&gt;ちなみに私は広告ブロックツール自体は使ってない。
そのツールを使うこと自体が鬱陶しいし，セキュリティ上ヤバそうな場所（アダルトサイトや儲け話をするサイト）には行かないことにしている。
しかし，私が携帯端末で使っている VPN アプリ &lt;a href=&#34;https://www.f-secure.com/en/web/home_global/freedome&#34;&gt;Freedome&lt;/a&gt; は追跡用のコードをブロックしているため，追跡型広告は事実上ブロックしていることになる。
実際 &lt;a href=&#34;https://www.f-secure.com/en/web/home_global/freedome&#34;&gt;Freedome&lt;/a&gt; だけでかなりの数をブロックしているようだ。&lt;/p&gt;

&lt;p&gt;追跡コードをブロックするとトラフィックが改善するという報告はある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50754459.html&#34;&gt;エフセキュアブログ : 新たな調査で、オンライントラッキングがWebブラウジングを遅延させることが判明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50754721.html&#34;&gt;エフセキュアブログ : Freedomeの追跡保護を比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サイト運営者はこのことをもっと重く捉えるべきだと思う。
その追跡コードは本当に必要なのですか？&lt;/p&gt;

&lt;p&gt;広告の是非については Web 2.0 から言われていることで今更感が漂う話ではあるが，ひとつ言えるのは「内容に関係のない広告で掠りをとるやり方はゼロ年代で終わってる」ということだ。&lt;/p&gt;

&lt;p&gt;「広告がユーザを追い回す」現代では，（追跡型）広告は，ユーザから見て明確にリスクである。
ユーザが広告をコントロールできるのでなければ「広告がユーザを追い回す」ことを喜ぶのは，その筋の方々だけだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
故にユーザが広告をブロックすることに対しサイト運営者が文句や愚痴を言うのは，全く以て言いがかりである。&lt;/p&gt;

&lt;p&gt;最近は&lt;a href=&#34;http://qiita.com/osamu1203/items/c0e92b3ac661046dfd79&#34;&gt;ユーザが広告をブロックすると内容を見せなくするツール&lt;/a&gt;があるそうだが，わざわざブロック・アプリを導入している人が，内容が見れないからといって広告ブロックを解除しようなどとは普通は考えないだろう。&lt;/p&gt;

&lt;p&gt;現在はクリエイターが自身の activity を通してコンテンツの価値を上げマネタイズしていく時代である。
日本の &lt;a href=&#34;https://note.mu/&#34;&gt;note.nu&lt;/a&gt; なんてまんまその発想だし，もっと広く見回してみれば platisher (platform＋publisher) の議論なども当てはまるだろう。&lt;/p&gt;

&lt;p&gt;ユーザはバカではない。
Web 上にあるものの何に価値があるのか既に知っている。
価値の無いものにいくら広告を付けても，その事自体が忌避の対象になるだけだ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;これを比較的うまくやっているのが，実は Facebook である。  Facebook ではタイムライン上に現れる広告をある程度（いや，かなり）&lt;a href=&#34;http://blog.f-secure.jp/archives/50750076.html&#34;&gt;チューニングできる&lt;/a&gt;。完全にコントロールできるわけではないのが惜しいけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>String と Rune - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/string-and-rune/" />
		<id>tag:text.Baldanders.info,2015-09-19T23:45:56+0900:/golang/string-and-rune/</id>
		<published>2015-09-19T23:45:56+0900</published>
		<updated>2015-09-21T09:21:00+0900</updated>
		<summary>今回は文字列について。短めにさくっと。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/556166b6631c0369754f&#34;&gt;はじめての Go 言語 (on Windows) その4 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;文字列を示す &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; は不変（immutable）なオブジェクトだが，中身は byte 配列である。
したがって以下のように&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	size := len(nihongo)

	fmt.Printf(&amp;quot;nihongo = %d bytes :&amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot; %x&amp;quot;, nihongo[i])
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; をダンプすると以下の結果になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string01.go
nihongo = 9 bytes : e6 97 a5 e6 9c ac e8 aa 9e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; なんて名前なのに）文字単位で情報を保持しているわけではないため，最初の2文字を取り出すつもりでうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, nihongo[:2])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんてなコードを書くと以下の結果になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02.go
nihongo = 日本語
nippon = ��
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列を文字単位で扱うには &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; を使う。
いや，ルーンってどんだけ厨二&amp;hellip; ゲフンゲフン。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	nihongoRune := []rune(nihongo)
	size := len(nihongoRune)

	fmt.Printf(&amp;quot;nihongo = %d characters : &amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot;%#U &amp;quot;, nihongoRune[i])
	}
	fmt.Printf(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03.go
nihongo = 3 characters : U+65E5 &#39;日&#39; U+672C &#39;本&#39; U+8A9E &#39;語&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または， &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; に対して &lt;a href=&#34;http://golang.org/ref/spec#For_statements&#34;&gt;for range 構文&lt;/a&gt;を使ってループを回すと文字（&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt;）単位で取得できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	for pos, runeValue := range nihongo {
		fmt.Printf(&amp;quot;%#U starts at byte position %d\n&amp;quot;, runeValue, pos)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03b.go
U+65E5 &#39;日&#39; starts at byte position 0
U+672C &#39;本&#39; starts at byte position 3
U+8A9E &#39;語&#39; starts at byte position 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; の実体は int32 で，内部表現は Unicode になっている。
&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; 配列は相互変換できるので，文字列を切り取る場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, string([]rune(nihongo)[:2]))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; → []&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; → &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と変換していけば安全に処理できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02b.go
nihongo = 日本語
nippon = 日本
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう少し細かい処理が必要なら &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:22aba2fd29e0e069728fb8201971f262&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;Strings, bytes, runes and characters in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knightso.hateblo.jp/entry/2014/06/24/090719&#34;&gt;Go言語のstring, runeの正体とは？ - golang - The Round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hokaccha/items/3d3f45b5927b4584dbac&#34;&gt;golang - Goでマルチバイトが混在した文字列をtruncateする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で取り扱う文字列の文字エンコーディングは UTF-8 が既定である。他の文字エンコーディングで書かれた文字列を扱うには，一度 UTF-8 に変換する処理が必要になる。文字エンコーディングの変換については別の記事で改めて紹介する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;ちなみに &lt;a href=&#34;http://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; パッケージは内部で &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使っているようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語のドキュメント・フレームワーク - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/document/" />
		<id>tag:text.Baldanders.info,2015-09-19T23:43:25+0900:/golang/document/</id>
		<published>2015-09-19T23:43:25+0900</published>
		
		<summary>パッケージ化したのならドキュメントを書きましょう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5f9e96f226f46089388f&#34;&gt;はじめての Go 言語 (on Windows) その8 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34; title=&#34;Go 言語のテスト・フレームワーク&#34;&gt;前回&lt;/a&gt;の続き。
パッケージ化したのならドキュメントを書きましょう。&lt;/p&gt;

&lt;h2 id=&#34;godoc-のインストール:7445d9e511c27034085e252d0df49931&#34;&gt;godoc のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/golang.org/x/tools/cmd/godoc&#34; title=&#34;godoc - GoDoc&#34;&gt;&lt;code&gt;godoc&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のドキュメント化ツールです。
&lt;code&gt;go get&lt;/code&gt; コマンドで導入できます。（&lt;code&gt;go get&lt;/code&gt; コマンドについては「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を参照）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\godoc

C:&amp;gt;cd C:\workspace\godoc

C:\workspace\godoc&amp;gt;SET GOPATH=C:\workspace\godoc

C:\workspace\godoc&amp;gt;go get -v golang.org/x/tools/cmd/godoc
Fetching https://golang.org/x/tools/cmd/godoc?go-get=1
Parsing meta tags from https://golang.org/x/tools/cmd/godoc?go-get=1 (status code 200)
get &amp;quot;golang.org/x/tools/cmd/godoc&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/tools&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/tools&amp;quot;} at https://golang.org/x/tools/cmd/godoc?go-get=1
get &amp;quot;golang.org/x/tools/cmd/godoc&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
golang.org/x/tools/blog/atom
golang.org/x/tools/present
golang.org/x/tools/go/ast/astutil
golang.org/x/tools/go/exact
golang.org/x/tools/go/buildutil
golang.org/x/tools/go/types
golang.org/x/tools/container/intsets
golang.org/x/tools/blog
golang.org/x/tools/godoc/vfs
golang.org/x/tools/godoc/redirect
golang.org/x/tools/godoc/static
golang.org/x/tools/playground
golang.org/x/tools/godoc/util
golang.org/x/tools/go/types/typeutil
golang.org/x/tools/go/loader
golang.org/x/tools/godoc/vfs/httpfs
golang.org/x/tools/godoc/vfs/gatefs
golang.org/x/tools/godoc/vfs/mapfs
golang.org/x/tools/godoc/vfs/zipfs
golang.org/x/tools/go/ssa
golang.org/x/tools/go/callgraph
golang.org/x/tools/go/ssa/ssautil
golang.org/x/tools/go/pointer
golang.org/x/tools/godoc/analysis
golang.org/x/tools/godoc
golang.org/x/tools/cmd/godoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;godoc&lt;/code&gt; の実行モジュールは &lt;code&gt;%GOPATH\bin&lt;/code&gt; フォルダではなく &lt;code&gt;%GOROOT%\bin&lt;/code&gt; フォルダに格納されます。
これで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;godoc time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかやるとパッケージ（この場合は &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージ）のドキュメントが表示されるのですが，さすがにコマンドプロンプトでこれを見るのは辛いので， HTTP サービスを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;godoc -http=&amp;quot;:3000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでブラウザで &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; にアクセスするとドキュメントを見ることができます。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18026303435/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8788/18026303435_7b136c64bb.jpg&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18026303435/&#34;&gt;godoc&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;たとえば &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージはこんなふうに表示されます。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023061102/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8847/18023061102_e5474f1ddc.jpg&#34; alt=&#34;godoc: time package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023061102/&#34;&gt;godoc: time package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;本家サイトと同じですね。&lt;/p&gt;

&lt;h3 id=&#34;godoc-で-modjulian-パッケージを見てみる:7445d9e511c27034085e252d0df49931&#34;&gt;godoc で modjulian パッケージを見てみる&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;機能のパッケージ化&lt;/a&gt;」で作った &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34;&gt;&lt;code&gt;github.com/spiegel-im-spiegel/astrocalc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/modjulian&lt;/code&gt; はどうなっているでしょう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023689372/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8831/18023689372_08795d4e8e.jpg&#34; alt=&#34;godoc: package list&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023689372/&#34;&gt;godoc: package list&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17839022348/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8835/17839022348_4315878c95.jpg&#34; alt=&#34;godoc: modjulian package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17839022348/&#34;&gt;godoc: modjulian package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;全くコメントがないので，さすがに一覧には何もないですが，個別ページには最小限の情報が載っています。凄いなぁ。&lt;/p&gt;

&lt;h2 id=&#34;modjulian-パッケージにドキュメント用のコメントを追記する:7445d9e511c27034085e252d0df49931&#34;&gt;modjulian パッケージにドキュメント用のコメントを追記する&lt;/h2&gt;

&lt;p&gt;では，ソースコードを少しいじってドキュメント用のコードを追記してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/**
 * Astronomical calculation for Golang.
 * These codes are licensed under CC0.
 * http://creativecommons.org/publicdomain/zero/1.0/deed.ja
 */

// modjulian パッケージは
// 修正ユリウス日（Modified Julian Date）の計算を行います。
package modjulian

import &amp;quot;time&amp;quot;

// DayNumber は
// 日付から修正ユリウス通日を取得します。
//
//   t := time.Date(2015, 1, 1, 0, 0, 0, 0, time.UTC)
//   fmt.Print(modjulian.DayNumber(t)) //57023
//
// 時刻（時分秒）は無視します。
// 1970年1月1日以前のグレゴリオ暦では Fliegel の公式を使って計算します。
// 1970年1月1日以降は UNIX Time を用いて通日を取得します。
func DayNumber(t time.Time) int64 {
	if t.Sub(time.Unix(0, 0)) &amp;gt;= 0 {
		return dnUnix(t)
	} else {
		return dnGregorian(t)
	}
}

// dnGregorian は
// Fliegel の公式を使い，日付から修正ユリウス通日を計算します。
//
// 時刻（時分秒）は無視します。
func dnGregorian(t time.Time) int64 {
	y := int64(t.Year())
	m := int64(t.Month())
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := int64(t.Day()) - 1
	return (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
}

// dnUnix は
// UNIX Time で1970年1月1日からの通日を取得し，修正ユリウス通日を計算します。
//
// 時刻（時分秒）は無視します。
// 1970年1月1日以前の日付では正しく計算できません。
func dnUnix(t time.Time) int64 {
	const (
		onday   = int64(86400) //seconds
		baseDay = int64(40587) //Modified Julian Date at January 1, 1970
	)
	return (t.Unix())/onday + baseDay
}
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18002607746/&#34;&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7732/18002607746_9990483503.jpg&#34; alt=&#34;godoc: package list&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18002607746/&#34;&gt;godoc: package list&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17408544863/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8897/17408544863_f0f5649e32.jpg&#34; alt=&#34;godoc: modjulian 2&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17408544863/&#34;&gt;godoc: modjulian 2&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;日本語ですみません。
英語不得手なもので。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;パッケージのコメントは &lt;code&gt;package&lt;/code&gt; 指定の直前のコメントが有効になる。（ファイル先頭のコメントは反映されない）&lt;/li&gt;
&lt;li&gt;パッケージリストの説明はパッケージ・コメントの最初の1文のみ表示される（日本語の句読点も理解しているらしい）&lt;/li&gt;
&lt;li&gt;関数等のコメントはそれぞれの記述の直前のコメントが有効になる。&lt;/li&gt;
&lt;li&gt;基本的に改行は無視される。ただし空行があれば別のパラグラフと理解しているようだ。&lt;/li&gt;
&lt;li&gt;空白文字2文字のインデントでコード記述領域（HTML 的には &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 要素）とみなしているらしい。コードを書く必要はないけど。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上の例では説明のためにコメント内にサンプルコードを載せましたが，サンプルコードを記述するのであればもっとスマートな方法があります。
それはテストにサンプルコードを含める方法です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian_test

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func ExampleDayNumber() {
	t := time.Date(2015, 1, 1, 0, 0, 0, 0, time.UTC)
	fmt.Print(modjulian.DayNumber(t))
	// Output:
	// 57023
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなテスト &lt;code&gt;example_test.go&lt;/code&gt; を作ると，ドキュメントが以下のようになります。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17843944479/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5327/17843944479_024f2f4073.jpg&#34; alt=&#34;godoc: modjulian 3&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17843944479/&#34;&gt;godoc: modjulian 3&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;もちろん，テストもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
=== RUN   ExampleDayNumber
--- PASS: ExampleDayNumber (0.00s)
PASS
ok      github.com/spiegel-im-spiegel/astrocalc/modjulian       2.755s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この仕組みを使えばサンプルコードを常に最新の仕様にマッチさせることが可能になります。
プログラマにとってドキュメントで一番欲しいのはサンプルコードなので，サンプルコードさえ正しければ，他はそれほど詳細に書かなくても推測できます。
そういう意味で，このようなテストと連動したドキュメント・フレームワークはなかなかおもしろいと思います。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:7445d9e511c27034085e252d0df49931&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/megu_ma/items/2066aef2f8c7f0ce2cc3&#34;&gt;Go で godoc を使えるようにする〜godoc のインストール〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/26/go-code-review/&#34;&gt;Go言語のコードレビュー | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://papaeye.tumblr.com/post/92328649161/go&#34;&gt;Go コードのレビュー時によくされるコメント - build error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20131101/1383285018&#34;&gt;testingパッケージのExamplesについて - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swdyh.tumblr.com/post/55771477125/go-example&#34;&gt;GoのExampleテストが便利 : swdyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20140225/1393302743&#34;&gt;godoc.org への掲載方法を調べた - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語のテスト・フレームワーク - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/testing/" />
		<id>tag:text.Baldanders.info,2015-09-19T23:40:43+0900:/golang/testing/</id>
		<published>2015-09-19T23:40:43+0900</published>
		
		<summary>パッケージ化したのならテストをしましょう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/64224f22ef17d916dc2d&#34;&gt;はじめての Go 言語 (on Windows) その7 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34; title=&#34;機能のパッケージ化&#34;&gt;前回&lt;/a&gt;の続き。&lt;/p&gt;

&lt;h2 id=&#34;テストコードを書く:3047d71ccf1370a2898eb92c70273f56&#34;&gt;テストコードを書く&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では最初からテスト・フレームワークが同梱されています。
いまどきの言語はみんなそうですよね。
テストコードを書くには対象のソースファイルと同じフォルダに &lt;code&gt;*_test.go&lt;/code&gt; という名前のファイルを用意します。
まぁ，説明するより書いた方が早いですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian

import (
	&amp;quot;os&amp;quot;
	&amp;quot;testing&amp;quot;
	&amp;quot;time&amp;quot;
)

type mjdnTest struct { //test case for DayNumber
	in time.Time //input data
	out int64 //expected result
}

var mjdnTests []mjdnTest  //test cases for DayNumber

func TestMain(m *testing.M) {
	//initialization
 	mjdnTests = []mjdnTest {  //test cases for DayNumber
		{time.Date(1969, 12, 31, 0, 0, 0, 0, time.UTC), int64(40586)},
		{time.Date(1970,  1,  1, 0, 0, 0, 0, time.UTC), int64(40587)},
		{time.Date(2015,  1,  1, 0, 0, 0, 0, time.UTC), int64(57023)},
	}

	//start test
    code := m.Run()

	//termination
    os.Exit(code)
}

func TestModifiedJulianDayNumber(t *testing.T) {
	for _, testCase := range mjdnTests {
		result := DayNumber(testCase.in)
		if result != testCase.out {
			t.Errorf(&amp;quot;DayNumber of \&amp;quot;%v\&amp;quot; = %d, want %d.&amp;quot;, testCase.in, result, testCase.out)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt; にはテスト対象のパッケージを指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt; には &lt;a href=&#34;http://golang.org/pkg/testing/&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; パッケージを含めます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Test...&lt;/code&gt; で始まる関数名がテスト実行用の関数です。引数には &lt;code&gt;t *testing.T&lt;/code&gt; を指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TestMain()&lt;/code&gt; は特別な関数です。テストの最初に呼び出され， &lt;code&gt;Run()&lt;/code&gt; で他のテスト関数群をキックします。引数には &lt;code&gt;m *testing.M&lt;/code&gt; を指定します。 &lt;code&gt;TestMain()&lt;/code&gt; 内で初期化や条件を変えたテストの繰り返しや後始末処理などを行うことができます。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/testing/&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; パッケージには，他の言語のテスト・フレームワークによくある &lt;a href=&#34;http://golang.jp/go_faq#assertions&#34;&gt;assertion 関数がありません&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。 &lt;a href=&#34;http://golang.jp/go_faq#testing_framework&#34;&gt;FAQ&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; によると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一般的なテストフレームワークにおいて条件・制御・出力機構を持つ専用のミニ言語が用意される傾向がありますが、Go言語にはすでにこれらが備わっています。これらを再び作成するより、我々はGo言語のテストを進めたかったのです。このようにしたことで余計な言語を覚える必要がなくなり、テストを直接的かつ理解しやすくしています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあります。
テスト駆動型開発の場合，テストコードはそれ自体が設計書として機能しますので，この割り切りは妥当と言えます&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
その代わりテストコードを（ドキュメントとして）きちんと書くのは骨が折れますが（笑）&lt;/p&gt;

&lt;p&gt;テストコードが書けたので早速動かしてみましょう。
環境は&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34; title=&#34;機能のパッケージ化&#34;&gt;前回&lt;/a&gt;の最後の状態をそのまま引き継ぎます。&lt;/p&gt;

&lt;p&gt;テストを行うには &lt;code&gt;go test&lt;/code&gt; コマンドを使います。
以下の例ではパッケージを指定していますが， &lt;code&gt;./...&lt;/code&gt; と指定すれば全てのパッケージのテストが対象になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
PASS
ok      github.com/spiegel-im-spiegel/astrocalc/modjulian       0.229s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは成功例。じゃあ，&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/blob/master/modjulian/modjulian.go&#34;&gt;元のコード&lt;/a&gt;を少しいじってわざと失敗させてみましょうか（なんだかなぁ）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- FAIL: TestDayNumber (0.00s)
        modjulian_test.go:35: DayNumber of &amp;quot;1969-12-31 00:00:00 +0000 UTC&amp;quot; = 40587, want 40586.
FAIL
exit status 1
FAIL    github.com/spiegel-im-spiegel/astrocalc/modjulian       1.566s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーレポートを吐く &lt;code&gt;Errorf()&lt;/code&gt; は内部で &lt;code&gt;Fail()&lt;/code&gt; を呼び出し，テスト自体は続行します。
一方 &lt;code&gt;Errorf()&lt;/code&gt; の代わりに &lt;code&gt;Fatalf()&lt;/code&gt; を使うと，内部で &lt;code&gt;FailNow()&lt;/code&gt; を呼び出しテストを中断します。&lt;/p&gt;

&lt;p&gt;Go 言語のテスト・フレームワークでは benchmark や coverage もサポートしてますが，今回は割愛します。&lt;/p&gt;

&lt;h2 id=&#34;テストの自動化-continuous-integration:3047d71ccf1370a2898eb92c70273f56&#34;&gt;テストの自動化（Continuous Integration）&lt;/h2&gt;

&lt;p&gt;今回のコードは自動化するほどの規模でもないですが，話のついでに &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; で自動化しちゃいましょう。
えっと，今回は &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; の説明は割愛します。
興味のある方は「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;ブックマーク&lt;/a&gt;」の項を参考にして下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; でビルド・テストを行うためには &lt;code&gt;.travis.yml&lt;/code&gt; を書く必要がありますが，テストを行うだけなら &lt;code&gt;.travis.yml&lt;/code&gt; の記述は簡単です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go

go:
  - 1.4
  - 1.5

script:
 - go test -v ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は&lt;a href=&#34;https://travis-ci.org/spiegel-im-spiegel/astrocalc&#34;&gt;ここ&lt;/a&gt;を参照して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/document/&#34; title=&#34;Go 言語のドキュメント・フレームワーク&#34;&gt;次回&lt;/a&gt;はドキュメントの話。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:3047d71ccf1370a2898eb92c70273f56&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/8717a5982547cfa54ebc&#34;&gt;Go の Test に対する考え方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://straitwalk.hatenablog.com/entry/2014/09/18/232810&#34;&gt;Goでテストを書く - 成らぬは人の為さぬなりけり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/0d589cca7e89b89c29a8&#34;&gt;golang 1.4で追加されたtestingの便利機能(テストの初期化とお片づけ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dmnlk/items/3fb4e0abb98e39fee275&#34;&gt;Go + Travis CI + Coveralls でCI環境を作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sue445.hatenablog.com/entry/2013/06/01/170607&#34;&gt;GithubにあるリポジトリをTravis CI連携する手順 #junitbook - くりにっき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uchimanajet7.hatenablog.com/entry/2015/03/20/211352&#34;&gt;golangでTravis CIを使ってクロスコンパイルするときにハマったところ #golang #travisci - uchimanajet7のメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atotto/items/b796c31c1755dbec13db&#34;&gt;Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;オリジナルは &lt;a href=&#34;http://golang-jp.org/doc/faq#assertions&#34;&gt;http://golang-jp.org/doc/faq#assertions&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;オリジナルは &lt;a href=&#34;http://golang-jp.org/doc/faq#testing_framework&#34;&gt;http://golang-jp.org/doc/faq#testing_framework&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;私は組み込みエンジニアなので，プログラミングで assert を多用するのは，エンジニアの怠慢だと思ってしまいます。まぁ，ベクタ・テーブルからゴリゴリ書くってのなら別ですが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>機能のパッケージ化 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/packaging/" />
		<id>tag:text.Baldanders.info,2015-09-19T22:41:30+0900:/golang/packaging/</id>
		<published>2015-09-19T22:41:30+0900</published>
		<updated>2015-09-21T10:43:00+0900</updated>
		<summary>今後のことを考えてパッケージ化の作業を行うことにします。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/404871d2bafd22bdbb90&#34;&gt;はじめての Go 言語 (on Windows) その6 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/julian-day-number/&#34; title=&#34;「ユリウス日」で遊ぶ&#34;&gt;前回&lt;/a&gt;の続き。
なんだけど，今回はパッケージのお話。
ユリウス日の計算なんて簡単なので今まで &lt;code&gt;main()&lt;/code&gt; 関数の中にゴリゴリ書いてましたが，今後のことを考えて，これを使ってパッケージ化の作業を行うことにします。&lt;/p&gt;

&lt;h2 id=&#34;ユリウス日計算のパッケージ化:bf561d8ea0bbb40075d9094acab07703&#34;&gt;ユリウス日計算のパッケージ化&lt;/h2&gt;

&lt;p&gt;まずは，&lt;a href=&#34;http://text.baldanders.info/golang/julian-day-number/&#34; title=&#34;「ユリウス日」で遊ぶ&#34;&gt;前回&lt;/a&gt;のコードから計算処理部分をきちんと分離します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;
)

func ModifiedJulianDayNumber(t time.Time) int64 {
	if t.Sub(time.Unix(0, 0)) &amp;gt;= 0 {
		return mjdnUnix(t)
	} else {
		return mjdnGregorian(t)
	}
}

func mjdnGregorian(t time.Time) int64 {
	y := int64(t.Year())
	m := int64(t.Month())
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := int64(t.Day()) - 1
	return (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
}

func mjdnUnix(t time.Time) int64 {
	const (
		onday   = int64(86400) //seconds
		baseDay = int64(40587) //Modified Julian Date at January 1, 1970
	)
	return (t.Unix())/onday + baseDay
}

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, ModifiedJulianDayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run julian-day-4.go 1969 12 31
1969-12-31 00:00:00 +0000 UTC
MJD = 40586日

C:&amp;gt;go run julian-day-4.go 1970 1 1
1970-01-01 00:00:00 +0000 UTC
MJD = 40587日

C:&amp;gt;go run julian-day-4.go 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ユリウス日の端数が鬱陶しいので修正ユリウス日の整数部分のみ計算しています。
あと1970年1月1日を境界として計算方法を変えています。
本当はユリウス暦の場合の計算も含めるべきなんでしょうけど，今回は割愛します。&lt;/p&gt;

&lt;p&gt;さて，上のコードのうち修正ユリウス日計算関数を別ファイルにしてパッケージ化します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian

import &amp;quot;time&amp;quot;

func DayNumber(t time.Time) int64 {
	if t.Sub(time.Unix(0, 0)) &amp;gt;= 0 {
		return dnUnix(t)
	} else {
		return dnGregorian(t)
	}
}

func dnGregorian(t time.Time) int64 {
	y := int64(t.Year())
	m := int64(t.Month())
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := int64(t.Day()) - 1
	return (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
}

func dnUnix(t time.Time) int64 {
	const (
		onday   = int64(86400) //seconds
		baseDay = int64(40587) //Modified Julian Date at January 1, 1970
	)
	return (t.Unix())/onday + baseDay
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージ名は &lt;code&gt;modjulian&lt;/code&gt; としました。
ちなみにパッケージ内の関数等は名前の先頭が大文字のものだけが外部から参照可能です。&lt;/p&gt;

&lt;h3 id=&#34;go-言語における名前の問題:bf561d8ea0bbb40075d9094acab07703&#34;&gt;Go 言語における名前の問題&lt;/h3&gt;

&lt;p&gt;Go 言語およびそのコミュニティは名前にうるさいようです。
たとえば「&lt;a href=&#34;http://golang.jp/effective_go&#34;&gt;実践Go言語&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」によると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;慣例では，パッケージ名は小文字でひとつの単語です。アンダースコアや大文字が混ざって(mixedCaps)はいけません。パッケージ使用者がその名前をタイプすることを考慮して，簡潔すぎるぐらいにしてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なんだそうで，本当はパッケージ名を &lt;code&gt;julianDate&lt;/code&gt; としたかったんだけど，それでは筋が悪いらしい。&lt;/p&gt;

&lt;p&gt;もうひとつ。&lt;/p&gt;

&lt;p&gt;もう一つの慣例は，パッケージ名がそのソースディレクトリのベース名であるということです。たとえば&lt;code&gt;src/pkg/encoding/base64&lt;/code&gt;に置かれているパッケージは，“&lt;code&gt;encoding/base64&lt;/code&gt;”としてインポートし，名前は&lt;code&gt;base64&lt;/code&gt;となります。&lt;code&gt;encoding_base64&lt;/code&gt;や&lt;code&gt;encodingBase64&lt;/code&gt;とはなりません。&lt;/p&gt;

&lt;p&gt;なのでパッケージの指定はハンガリアン記法とかではなく単語をディレクトリで区切って階層化することで整理できそうです。
これって Java とかに慣れてる人には比較的とっつきやすい仕組みかもしれません。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;長い名前は，慣れたとしても読みやすくなることはありません。複雑もしくは微妙なニュアンスを持つものに名前をつけるときは，すべての情報を名前で表現しようとするより，通常は役立つドキュメントコメントを書いたほうがよいでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;パッケージの配置と呼び出し:bf561d8ea0bbb40075d9094acab07703&#34;&gt;パッケージの配置と呼び出し&lt;/h2&gt;

&lt;p&gt;パッケージを呼び出すのには（標準のパッケージと同じく） &lt;code&gt;import&lt;/code&gt; を使えばいいのですが，記述によってパッケージをどこに配置するかが変わります。&lt;/p&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;./modjulian&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と相対パスで記述した場合は，呼び出し元のファイルの場所にある &lt;code&gt;modjulian&lt;/code&gt; フォルダを探します。
以下はパッケージが見つからなくてエラーになってる例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\jd\src\julian-day-4b&amp;gt;go build julian-day-4b.go
julian-day-4b.go:10:2: open C:\workspace\jd\src\julian-day-4b\modjulian: The system cannot find the file specified.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一方&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;modjulian&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述した場合には，環境変数 &lt;code&gt;GOROOT&lt;/code&gt; および &lt;code&gt;GOPATH&lt;/code&gt; で指定されるフォルダ以下を探すようです。
以下もパッケージが見つからなくてエラーになってる例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd\src\julian-day-4b&amp;gt;go build julian-day-4b.go
julian-day-4b.go:10:2: cannot find package &amp;quot;modjulian&amp;quot; in any of:
        C:\Go\src\modjulian (from $GOROOT)
        C:\Gopath\src\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではパッケージを相対パスで指定するのは（デバッグ時などを除いて）良くないと言われています。
これは &lt;code&gt;go get&lt;/code&gt; コマンドでパッケージをビルドする際，相対パスを解釈しないようにしているからのようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;パッケージを-github-上に配置する:bf561d8ea0bbb40075d9094acab07703&#34;&gt;パッケージを GitHub 上に配置する&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」でも紹介しましたが，インターネット上の repository にあるパッケージを&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/username/package&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように指定することで，任意に取り込むことが可能です。
そこで今回のパッケージを &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; 上に公開しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34;&gt;&lt;code&gt;github.com/spiegel-im-spiegel/astrocalc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/modjulian&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このパッケージを使って書いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintf(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintf(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このソースファイル &lt;code&gt;julian-day-4b.go&lt;/code&gt; と &lt;code&gt;modjulian&lt;/code&gt; パッケージを以下のように配置してビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;SET GOPATH=C:\workspace\jd

C:&amp;gt;cd C:\workspace\jd

C:\workspace\jd&amp;gt;tree /f .
C:\WORKSPACE\JD
│
└─src
    └─julian-day-4b
            julian-day-4b.go

C:\workspace\jd&amp;gt;go get -v github.com/spiegel-im-spiegel/astrocalc/modjulian
github.com/spiegel-im-spiegel/astrocalc (download)
github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\jd&amp;gt;go install ./...

C:\workspace\jd&amp;gt;tree /f .
C:\WORKSPACE\JD
│
├─bin
│      julian-day-4b.exe
│
├─pkg
│  └─windows_amd64
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day-4b
            julian-day-4b.go

C:\workspace\jd&amp;gt;bin\julian-day-4b.exe 1969 12 31
1969-12-31 00:00:00 +0000 UTC
MJD = 40586日

C:\workspace\jd&amp;gt;bin\julian-day-4b.exe 1970 1 1
1970-01-01 00:00:00 +0000 UTC
MJD = 40587日

C:\workspace\jd&amp;gt;bin\julian-day-4b.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだまだ続くよ。
&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34; title=&#34;Go 言語のテスト・フレームワーク&#34;&gt;次回&lt;/a&gt;はテストについて。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:bf561d8ea0bbb40075d9094acab07703&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;オリジナルは “&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt;”
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;これについてはいろいろな意見があるようですが，妥当な割り切りだと思います。特にコードを CI (Continuous Integration) によって管理している場合は重要なポイントです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「ユリウス日」で遊ぶ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/julian-day-number/" />
		<id>tag:text.Baldanders.info,2015-09-19T21:23:33+0900:/golang/julian-day-number/</id>
		<published>2015-09-19T21:23:33+0900</published>
		<updated>2015-09-21T11:43:51+0900</updated>
		<summary>今回は暦で遊びます。とりあえず，簡単なところで「ユリウス日」をいってみるか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/e743d63ef5165d750eff&#34;&gt;はじめての Go 言語 (on Windows) その5 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;今回は暦で遊びます。
とりあえず，簡単なところで「ユリウス日（Julian Date または Julian Day Number&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;）」をいってみるか。&lt;/p&gt;

&lt;h2 id=&#34;ユリウス日の定義:dce87c312b9004de93da86b8c547be13&#34;&gt;ユリウス日の定義&lt;/h2&gt;

&lt;p&gt;ユリウス日とは紀元前4713年1月1日正午&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を起点とした通日のことです。
たとえば2015年1月1日零時はユリウス日では2,457,023.5日になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/cgi-bin/koyomi/cande/date2jd.cgi&#34;&gt;ユリウス日&lt;/a&gt; （&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/&#34;&gt;国立天文台暦計算室&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage1.nifty.com/manome/astrology/julian.html&#34;&gt;ユリウス日(Julian Day)&lt;/a&gt; : 暦にまつわるエピソードを含めて参考になります&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tondering.dk/claus/cal/julperiod.php&#34;&gt;The Julian Period&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この際，いくつか気を付ける点があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;紀元前（BC）1年の翌年は紀元後（AD）1年。つまり AD1年を $1$ とするなら BC1年は $0$，BC2年は $-1$ となります。紀元前4713年は $-4712$ です。&lt;/li&gt;
&lt;li&gt;ユリウス暦は紀元前45年から開始されたと言われています。つまりそれ以前は異なる暦だったわけです。しかしユリウス日では紀元前45年より前の日付もユリウス暦と見なして取り扱います。&lt;/li&gt;
&lt;li&gt;欧州では西暦（紀元後）1582年に当時のローマ法王グレゴリオ13世によって（現在言われるところの）グレゴリオ暦が布告されましたが，この際に1582年10月4日の翌日を10月15日としたためギャップが生じました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;年月日から-修正-ユリウス日を求める:dce87c312b9004de93da86b8c547be13&#34;&gt;年月日から（修正）ユリウス日を求める&lt;/h2&gt;

&lt;p&gt;というわけで大昔のユリウス日を求めるのは西暦を使う場合でもちょっと面倒くさいのですが，範囲をグレゴリオ暦に限るなら便利な式があります。&lt;/p&gt;

&lt;p&gt;グレゴリオ暦のある日を「$Y$ 年 $M$ 月 $D$ 日」で表せるとすると&lt;/p&gt;

&lt;blockquote&gt;
\begin{aligned}
    y   &amp; = Y + \left\lfloor \frac{M - 3}{12} \right\rfloor \\
    m   &amp; = \left( 12 + \left( M - 3 \right) \right) \bmod 12 \\
    d   &amp; = D - 1 \\
    MJD &amp; = \left\lfloor 365.25y \right\rfloor + \left\lfloor \frac{y}{400} \right\rfloor - \left\lfloor \frac{y}{100} \right\rfloor + \left\lfloor 30.60m + 0.5 \right\rfloor + d - 678881 \\
    JD  &amp; = MJD + 2400000.5
\end{aligned}
&lt;/blockquote&gt;

&lt;p&gt;でユリウス日 $JD $ を求めることができます&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ちなみに $MJD$ は修正ユリウス日（Modified Julian Date）と呼ばれるものです。
定義は上の式の通りで，ユリウス日から240万日分をカットして日付の起点を正午から（私たちになじみのある）正子&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; にずらしています。&lt;/p&gt;

&lt;p&gt;$ \left\lfloor x \right\rfloor $ は床関数と呼ばれるもので「実数 $x$ に対して $x$ 以下の最大の整数」と定義されます。
例えば&lt;/p&gt;

&lt;blockquote&gt;
\begin{aligned}
    \left\lfloor 1.0 \right\rfloor &amp; = 1 \\
    \left\lfloor 0.7 \right\rfloor &amp; = 0 \\
    \left\lfloor -0.5 \right\rfloor &amp; = -1 \\
    \left\lfloor -2.0 \right\rfloor &amp; = -2 \\
\end{aligned}
&lt;/blockquote&gt;

&lt;p&gt;となります。
単に小数点を取るだけではないということです。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の &lt;a href=&#34;http://golang.org/pkg/math/&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; パッケージには，そのものずばりの &lt;code&gt;math.Floor()&lt;/code&gt; 関数があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
)

func main() {
	fmt.Printf(&amp;quot;[1.0] = %v\n&amp;quot;, math.Floor(1.0))
	fmt.Printf(&amp;quot;[0.7] = %v\n&amp;quot;, math.Floor(0.7))
	fmt.Printf(&amp;quot;[-0.5] = %v\n&amp;quot;, math.Floor(-0.5))
	fmt.Printf(&amp;quot;[-2.0] = %v\n&amp;quot;, math.Floor(-2.0))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run floor.go
[1.0] = 1
[0.7] = 0
[-0.5] = -1
[-2.0] = -2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では換算式を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で実装してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
)

func main() {
	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	mm := float64(month - 3)
	y := float64(year) + math.Floor(mm/12.0)
	m := math.Mod(12.0+mm, 12.0)
	d := float64(day - 1)
	fmt.Printf(&amp;quot;y = %f\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %f\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %f\n\n&amp;quot;, d)

	mjd := math.Floor(365.25*y) + math.Floor(y/400.0) - math.Floor(y/100.0) + math.Floor(30.60*m+0.5) + d - 678881.0
	fmt.Printf(&amp;quot;MJD = %f日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, mjd+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-1.go
2015年1月1日

y = 2014.000000
m = 10.000000
d = 0.000000

MJD = 57023.000000日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と，これではあまりにひどいので，少し変形。&lt;/p&gt;

&lt;p&gt;床関数は正の値に対しては小数点以下の切り捨てと同じ。
Go 言語では int 型の除算には int 型の結果が返り小数点以下が切り捨てられることを利用して&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	y := 1
	m := 1
	if month &amp;lt; 3 {
		y = year - 1
		m = month + 9
	} else {
		y = year
		m = month - 3
	}
	d := day - 1
	fmt.Printf(&amp;quot;y = %d\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %d\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %d\n\n&amp;quot;, d)

	mjd := (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-2.go
2015年1月1日

y = 2014
m = 10
d = 0

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これなら &lt;a href=&#34;http://golang.org/pkg/math/&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; パッケージ自体不要になります。グレゴリオ暦は1582年より前では適用できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; のでこれで必要十分です。
以降で使いやすくするために，ここから更に変形して年月日を引数から取得するようにします（引数の Validation は省いています。ゴメンペコン）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int64, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.ParseInt(argsStr[i], 10, 64)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, args[0], args[1], args[2])

	y := args[0]
	m := args[1]
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := args[2] - 1
	fmt.Printf(&amp;quot;y = %d\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %d\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %d\n\n&amp;quot;, d)

	mjd := (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run julian-day-2b.go 2015 1 1
2015年1月1日

y = 2014
m = 10
d = 0

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unix-time-からユリウス日を求める:dce87c312b9004de93da86b8c547be13&#34;&gt;UNIX Time からユリウス日を求める&lt;/h2&gt;

&lt;p&gt;さて，これでグレゴリオ暦の任意の日付からユリウス日を求めることができるようになりました。
これを踏まえて，もう少し簡単にユリウス日を得る方法を考えてみます。&lt;/p&gt;

&lt;p&gt;Go 言語で時刻情報を取得・操作するために &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージが用意されています。
&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージをつらつら眺めてみると &lt;code&gt;Unix()&lt;/code&gt; 関数を使って UNIX Time を得ることができるようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unix returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということは，1970年1月1日零時 UTC のユリウス日が分かれば，そこを起点に UNIX Time を加算すればいいことになります。
簡単！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-2b.go 1970 1 1
1970年1月1日

y = 1969
m = 10
d = 0

MJD = 40587日
JD = 2440587.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので，こうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	const onday = int64(86400)   //seconds
	const baseDay = int64(40587) //Modified Julian Date at January 1, 1970

	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	tm := time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	ut := tm.Unix()
	fmt.Printf(&amp;quot;UNIX Time = %v seconds = %v days and %v seconds\n\n&amp;quot;, ut, ut/onday, ut%onday)

	mjd := ut/onday + baseDay
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-3.go
2015年1月1日

2015-01-01 00:00:00 +0000 UTC
UNIX Time = 1420070400 seconds = 16436 days and 0 seconds

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;えーっと。
コードを見ればお分かりと思いますが，これだと1970年1月1日より前の日付では正しく動きません。
任意の日付&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:8&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; で正しく動かすには床関数を使う必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;次回&lt;/a&gt;は，これをパッケージ化してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:dce87c312b9004de93da86b8c547be13&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:1&#34;&gt;ちなみに1日未満の端数を含む場合を「ユリウス日（Julian Date）」，端数を含まない場合を「ユリウス通日（Julian Day Number）」と呼び分けているようです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:2&#34;&gt;もともと太陽暦は「子午線から太陽までの時角」が時刻のベースになってるため，ユリウス日を考えた人は正午を起点にすべきと考えたのでしょう。日常生活で昼に日付が変わったら色々面倒そうですが。あぁでも， B な企業に勤めている人には日付の起点とか関係ないかな（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:3&#34;&gt;この式は「Fliegel の公式」などと呼ばれることがありますが，厳密には Fliegel の公式を電卓向けに分かりやすく展開したもので，初等天文学の教科書などでよく登場する式です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:4&#34;&gt;月の値から2を引くのは暦計算の基本的なテクニックだったります（今回の式では月を0基点にするために3を引いてますが）。現在の1月（Ianuarius または January）を年初としたのはユリウス暦以降からで，それまでは現在の3月（Martius または March）が年初でした。だから2月だけちょっと特殊なんですねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:5&#34;&gt;余談ですが365.25日を「ユリウス年」と呼びます。天文学では1年の長さが年によって変わるのは困るので，一様な長さの「年」を考えたわけです。つまりこの式はユリウス年にうるう年の補正をかけてるわけですね。ちなみに「ユリウス世紀」は36525日です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:6&#34;&gt;耳慣れないかもしれないですが，夜中の12時のことです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:7&#34;&gt;もちろんこれはキリスト教圏の国や地域での話です。例えば，日本でグレゴリオ暦が適用されたのは1873年（明治6年）なので，1873年以前は別の暦になり換算方法も変わります。もっと言うと，日本の現行暦は厳密にはグレゴリオ暦ではなくグレゴリオ暦互換の独自の暦です（参考： &lt;a href=&#34;http://text.baldanders.info/remark/2015/japanese-koyomi/&#34;&gt;「暦」日本史&lt;/a&gt;）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:8&#34;&gt;とはいえ UNIX Time の取りうる値の範囲内での話ですが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
