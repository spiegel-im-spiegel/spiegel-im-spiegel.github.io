<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>プログラミング言語 Go — text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/golang/index.xml" />
	<id>tag:text.Baldanders.info,2015-11-21:/hugo</id>
	<updated>2015-11-21T14:19:02+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>ATOM で Go — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/golang-with-atom/" />
		<id>tag:text.Baldanders.info,2015-11-21:/golang/golang-with-atom/</id>
		<published>2015-11-21T14:19:02+09:00</published>
		<updated>2015-11-21T14:19:02+09:00</updated>
		<summary>ATOM Editor で Go 言語のコーディング環境を整える。 go-plus パッケージの導入について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回もまた横道に逸れてツールの話。
&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコーディング環境を整える。
環境を作る度に「どうだったっけ」とあちこちサイトを巡るので，覚え書きとしてまとめておく。&lt;/p&gt;

&lt;p&gt;例によって Windows 環境を前提にしているので，他の環境の方は適当に脳内補完してください。&lt;/p&gt;

&lt;h2 id=&#34;開発支援ツールの導入:19f55614c00d490a9959ede6566335af&#34;&gt;開発支援ツールの導入&lt;/h2&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援ツールを導入する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; go get -v golang.org/x/tools/cmd/vet
C:&amp;gt; go get -v golang.org/x/tools/cmd/goimports
C:&amp;gt; go get -v github.com/golang/lint/golint
C:&amp;gt; go get -v github.com/nsf/gocode
C:&amp;gt; go get -v github.com/rogpeppe/godef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/lint&#34; title=&#34;golang/lint&#34;&gt;golint&lt;/a&gt; は，いわゆる lint ツール。
&lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; もコードの静的検査ツール。
両方あると幸せになれる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; はコード整形ツールで，標準の &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; を置き換えることができ，かつ &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; よりも若干かしこい。
&lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; は入力補完ツール。
&lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; は指定したシンボルの定義定義元情報を出力するツール（タグジャンプに使う）。
いずれも vim や emacs などでは有名だが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; でも使える。&lt;/p&gt;

&lt;p&gt;言わずもがなだが，これらのツールには PATH を通しておくこと。
&lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダにパスを通しておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;go-plus-パッケージの導入:19f55614c00d490a9959ede6566335af&#34;&gt;go-plus パッケージの導入&lt;/h2&gt;

&lt;p&gt;では，上述のツールを操作できる &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを導入する。
やり方は Setting から Install してもいいし &lt;code&gt;apm&lt;/code&gt; コマンドを使ってもよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; には設定項目がいくつかあるが，ほとんど既定値のままで使える。
コマンドパレットから &lt;code&gt;golang&lt;/code&gt; をキーワードに検索すると山程機能があるのが分かるだろう。&lt;/p&gt;

&lt;p&gt;既定ではソースファイルを保存する度にコード整形や lint 等が走る。
これを制御したい場合はパッケージの Setting で以下の項目を調整すればよい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/735/22767398347_ed9329653a.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;定義ファイルへのジャンプと復帰は &lt;code&gt;alt-cmd-g&lt;/code&gt; および &lt;code&gt;alt-shift-cmd-G&lt;/code&gt; にバインドされているが Windows 環境では動かないので（コマンドパレットから起動してもいいのだが）適当なキーに再割当てするといいだろう。
ファンクションキーは結構空いてるので，たとえば&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keystroke&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Selector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef-return&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;とアサインするなら &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&#39;:
  &#39;f12&#39;: &#39;golang:godef&#39;
  &#39;shift-f12&#39;: &#39;golang:godef-return&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と設定すればいい。&lt;/p&gt;

&lt;p&gt;lint や定義ファイルのジャンプは &lt;code&gt;GOPATH&lt;/code&gt; や &lt;code&gt;GOROOT&lt;/code&gt; を見て外部パッケージを判断しているのだが， &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなツールでは &lt;code&gt;GOPATH&lt;/code&gt; をコマンド内部で書き換えて実行するので lint ツールとは整合性が取れなくなる。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定では &lt;code&gt;GOPATH&lt;/code&gt; を上書き可能なので，とりあえずこれで回避する方法もある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; への対応は “Planned Features” に挙がってるので，将来的には小細工しなくても &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; ベースの開発ができるようになるかもしれない。
てか，なってほしい。&lt;/p&gt;

&lt;h2 id=&#34;go-find-references-パッケージが惜しい:19f55614c00d490a9959ede6566335af&#34;&gt;go-find-references パッケージが惜しい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-find-references&#34; title=&#34;go-find-references&#34;&gt;go-find-references&lt;/a&gt; パッケージは &lt;a href=&#34;https://github.com/redefiance/go-find-references&#34;&gt;redefiance/go-find-references&lt;/a&gt; を使って指定したシンボルを参照しているファイルを列挙してくれる便利ツールだが， Windows 環境ではタグジャンプが上手く動かない。
どうやら &lt;code&gt;C:&lt;/code&gt; などのドライブレターを上手く処理できないようだ。
とほほ。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:19f55614c00d490a9959ede6566335af&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>パッケージ外部からの呼び出しを禁止する Internal Packages — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/internal-packages/" />
		<id>tag:text.Baldanders.info,2015-11-07:/golang/internal-packages/</id>
		<published>2015-11-07T10:38:20+09:00</published>
		<updated>2015-11-17T10:46:12+09:00</updated>
		<summary>Internal Packages の仕組みは 1.4 から存在したが標準パッケージのみの適用だった。 1.5 からは GOPATH 配下のパッケージまで拡張される。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/baa3671c7e1b8a6594a9&#34;&gt;そろそろ真面目に Golang 開発環境について考える — Internal Packages と Vendoring - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で言及しそこねたので，今回は軽く。&lt;/p&gt;

&lt;p&gt;Internal Packages の仕組みは 1.4 から存在したが標準パッケージのみの適用だった。
1.5 からは &lt;code&gt;GOPATH&lt;/code&gt; 配下のパッケージまで拡張される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1e8kOo3r51b2BWtTs_1uADIA5djfXhPT36s6eHVRIvaU/edit&#34;&gt;Go 1.4 &amp;ldquo;Internal&amp;rdquo; Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要するに &lt;code&gt;internal&lt;/code&gt; フォルダ以下のパッケージは外部から参照できない。
例として &lt;a href=&#34;https://golang.org/pkg/net/&#34; title=&#34;net - The Go Programming Language&#34;&gt;&lt;code&gt;net&lt;/code&gt;&lt;/a&gt; パッケージを挙げてみる。
&lt;a href=&#34;https://golang.org/pkg/net/&#34; title=&#34;net - The Go Programming Language&#34;&gt;&lt;code&gt;net&lt;/code&gt;&lt;/a&gt; パッケージのソースコードの構成は以下のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Go\src\net&amp;gt; tree .
C:\GO\SRC\NET
├─http
│  ├─cgi
│  │  └─testdata
│  ├─cookiejar
│  ├─fcgi
│  ├─httptest
│  ├─httputil
│  ├─internal
│  ├─pprof
│  └─testdata
├─internal
│  └─socktest
├─mail
├─rpc
│  └─jsonrpc
├─smtp
├─testdata
├─textproto
└─url
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/net/http/internal/&#34;&gt;&lt;code&gt;net/http/internal&lt;/code&gt;&lt;/a&gt; パッケージには &lt;code&gt;chunked.go&lt;/code&gt; ファイルが含まれる。
&lt;code&gt;chunked.go&lt;/code&gt; は &lt;a href=&#34;https://en.wikipedia.org/wiki/Chunked_transfer_encoding&#34;&gt;chunked transfer encoding&lt;/a&gt; の仕組みを実装したもののようだが， &lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; およびその配下のパッケージ以外では使えない。
また &lt;code&gt;net/internal&lt;/code&gt; フォルダ以下には socket テスト用の &lt;a href=&#34;https://golang.org/pkg/net/internal/socktest/&#34; title=&#34;socktest - The Go Programming Language&#34;&gt;&lt;code&gt;net/internal/socktest&lt;/code&gt;&lt;/a&gt; パッケージがあるが，これも外部から再利用できない。&lt;/p&gt;

&lt;p&gt;これは再利用の難しいパッケージを配置する場合にはよい仕掛けである。
ビジネスロジックには再利用が難しいものが多いので，そういったものを &lt;code&gt;internal&lt;/code&gt; フォルダ以下に置けば，うっかり他所で使われるといったこともなく安全である。
なお， Internal Packages の制約から外すには &lt;code&gt;internal&lt;/code&gt; フォルダの外側にパッケージを再配置すればよい。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:8a2f576149aff665b4e8707fdb13643d&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>パッケージの依存状況の視覚化 — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/package-visualization-tool/" />
		<id>tag:text.Baldanders.info,2015-10-15:/golang/package-visualization-tool/</id>
		<published>2015-10-15T20:32:32+09:00</published>
		<updated>2015-10-15T20:32:32+09:00</updated>
		<summary>今回はちょっと横道にそれて，パッケージの依存状況を視覚化するツールをご紹介。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回はちょっと横道にそれて，パッケージの依存状況を視覚化するツールをご紹介。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hirokidaichi/goviz&#34; title=&#34;hirokidaichi/goviz&#34;&gt;hirokidaichi/goviz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goviz-のインストール:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;goviz のインストール&lt;/h2&gt;

&lt;p&gt;導入は &lt;code&gt;go get&lt;/code&gt; でOK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;go get -v github.com/hirokidaichi/goviz
github.com/hirokidaichi/goviz (download)
github.com/jessevdk/go-flags (download)
github.com/hirokidaichi/goviz/dotwriter
github.com/jessevdk/go-flags
github.com/hirokidaichi/goviz/goimport
github.com/hirokidaichi/goviz/metrics
github.com/hirokidaichi/goviz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;パッケージ依存状況の視覚化:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;パッケージ依存状況の視覚化&lt;/h2&gt;

&lt;p&gt;では，早速動かしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -i github.com/hirokidaichi/goviz
digraph main{
	edge[arrowhead=vee]
	graph [rankdir=LR,compound=true,ranksep=1.0];
	/* plot github.com/hirokidaichi/goviz */
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;main|github.com/hirokidaichi/goviz|goviz.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[dir=forward]
	/* plot github.com/hirokidaichi/goviz/dotwriter */
	&amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;dotwriter|github.com/hirokidaichi/goviz/dotwriter|dotwriter.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/goimport&amp;quot;[dir=forward]
	/* plot github.com/hirokidaichi/goviz/goimport */
	&amp;quot;github.com/hirokidaichi/goviz/goimport&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;goimport|github.com/hirokidaichi/goviz/goimport|import.go\nimport_factory.go\nsource.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz/goimport&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[dir=forward]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/metrics&amp;quot;[dir=forward]
	/* plot github.com/hirokidaichi/goviz/metrics */
	&amp;quot;github.com/hirokidaichi/goviz/metrics&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;metrics|github.com/hirokidaichi/goviz/metrics|metrics.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz/metrics&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[dir=forward]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/jessevdk/go-flags&amp;quot;[dir=forward]
	/* plot github.com/jessevdk/go-flags */
	&amp;quot;github.com/jessevdk/go-flags&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;flags|github.com/jessevdk/go-flags|arg.go\nclosest.go\ncommand.go\ncommand_private.go\ncompletion.go\nconvert.go\nerror.go\nflags.go\ngroup.go\ngroup_private.go\nhelp.go\nini.go\nini_private.go\nman.go\nmultitag.go\noption.go\noption_private.go\noptstyle_other.go\noptstyle_windows.go\nparser.go\nparser_private.go\ntermsize.go\ntermsize_linux.go\ntermsize_nosysioctl.go\ntermsize_other.go\ntermsize_unix.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おー。
なんだか凄いコードが出力されました。
じつはこれ &lt;a href=&#34;https://ja.wikipedia.org/wiki/DOT%E8%A8%80%E8%AA%9E&#34;&gt;DOT というデータ記述言語&lt;/a&gt;で書かれたものです。
なので，この出力を &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; のツールに通すことで最終的な出力を得ます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -i github.com/hirokidaichi/goviz | dot.exe -Tpng -o goviz.png
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21563262573/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5782/21563262573_630b0eed8a.jpg&#34; alt=&#34;output by goviz &amp;#43; graphviz&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21563262573/&#34;&gt;output by goviz &amp;#43; graphviz&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;パッケージ依存度の評価:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;パッケージ依存度の評価&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;-m&lt;/code&gt; オプションを指定するとパッケージ依存度（結合度）の評価ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -i github.com/hirokidaichi/goviz -m
Inst:1.000 Ca(  0) Ce(  4)      github.com/hirokidaichi/goviz
Inst:0.500 Ca(  1) Ce(  1)      github.com/hirokidaichi/goviz/goimport
Inst:0.500 Ca(  1) Ce(  1)      github.com/hirokidaichi/goviz/metrics
Inst:0.000 Ca(  3) Ce(  0)      github.com/hirokidaichi/goviz/dotwriter
Inst:0.000 Ca(  1) Ce(  0)      github.com/jessevdk/go-flags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Inst&lt;/code&gt; は Instability， &lt;code&gt;Ca&lt;/code&gt; は Afferent Couplings， &lt;code&gt;Ce&lt;/code&gt; は Efferent Couplings かな。&lt;/p&gt;

&lt;p&gt;Afferent Couplings は，そのパッケージに依存しているパッケージがいくつあるか，を示すものです。
Efferent Couplings は，逆にそのパッケージが依存しているパッケージがいくつあるか，を示すものです。
Instability は $Inst = Ce / (Ce + Ca)$ で算出される値で，この値が大きいほど他パッケージへの依存度が高いと評価できます。
共通ライブラリとして運用したいパッケージはなるべく Instability を低く抑えたいところです。
またソースコードを読む場合は Instability の高いパッケージから優先的にみるといいかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;goviz-の起動オプション:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;goviz の起動オプション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hirokidaichi/goviz&#34; title=&#34;hirokidaichi/goviz&#34;&gt;hirokidaichi/goviz&lt;/a&gt; のオプションは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -h
Usage:
  goviz.exe [OPTIONS]

Application Options:
  /i, /input:    intput ploject name
  /o, /output:   output file (default: STDOUT)
  /d, /depth:    max plot depth of the dependency tree (default: 128)
  /f, /focus:    focus on the specific module
  /s, /search:   top directory of searching
  /l, /leaf      whether leaf nodes are plotted (default: false)
  /m, /metrics   display module metrics (default: false)

Help Options:
  /?             Show this help message
  /h, /help      Show this help message
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bookmark:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hirokidaichi/items/52fc6286c9e432792a07&#34;&gt;そろそろ理解しておきたいのでDockerのソースコードをビジュアルに読む！ - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/hirokidaichi/goviz&#34; title=&#34;hirokidaichi/goviz&#34;&gt;hirokidaichi/goviz&lt;/a&gt; : 作者による解説&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.showa-corp.jp/special/graphtools/graphviz.html&#34;&gt;データのビジュアル化を最少の労力で: Graphviz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>エラー・ハンドリングについて（追記あり） — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/error-handling/" />
		<id>tag:text.Baldanders.info,2015-09-30:/golang/error-handling/</id>
		<published>2015-09-30T00:27:48+09:00</published>
		<updated>2015-10-15T22:43:00+09:00</updated>
		<summary>C&#43;&#43; や Java のような言語圏から来た（私のような）人間にとって Go 言語の「オブジェクト指向」はかなり異質なのだが，慣れてみると逆にとても合理的に見えてくる。この最たるものが error 型である。（追記あり）</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;C++ や Java のような言語圏から来た（私のような）人間にとって &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の「オブジェクト指向」はかなり異質なのだが，慣れてみると逆にとても合理的に見えてくる。
なんで C++ や Java はこのようなアプローチをとらなかったのか不思議なほどである。&lt;/p&gt;

&lt;p&gt;この最たるものがエラー・ハンドリングだ。&lt;/p&gt;

&lt;h2 id=&#34;go-言語には-例外-がない:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;Go 言語には「例外」がない&lt;/h2&gt;

&lt;p&gt;「例外（exception）」は本来の処理の流れをぶった切って「大域脱出」するための仕組みである。
でも考えてみれば例外というのはかなり微妙な言語仕様だ。&lt;/p&gt;

&lt;p&gt;例外が抱える問題というのは本質的に &lt;code&gt;goto&lt;/code&gt; 文の問題と同じ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
オブジェクトの状態ごと脱出するため，（脱出前ではなく）脱出後にオブジェクトの後始末を記述せざるを得ないし，記述するためには脱出前の状態（の可能性）を「知識」として知っていなければならない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
もし後始末をきちんとしないと，それがバグやリークやその他の脆弱性のもとになる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はそんな面倒くさいことは考えない。
どうするかというと，普通に返り値に &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を返す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, err := os.Open(filename)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は無視することもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, _ := os.Open(filename)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検出した &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; はその場で処理して抜けてしまえばよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, err := os.Open(filename)
if err != nil {
    fmt.Fprintln(os.Stderr, err)
    return false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;開始処理と終了（後始末）処理が対になっている場合（&lt;code&gt;Open&lt;/code&gt;/&lt;code&gt;Close&lt;/code&gt; とは限らない）は &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文で終了処理を保証する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;file, err := os.Open(filename)
if err != nil {
    fmt.Fprintln(os.Stderr, err)
    return false
}
defer file.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の基本的な書き方。
特徴的なのは，ある処理に纏わる処理をセットで記述できる点である。
&lt;code&gt;try&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; と &lt;code&gt;finally&lt;/code&gt; の間で目線を行ったり来たりさせなくても，「そこ」だけを見れば把握できる。
ある意味でとても文芸的なコード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; であると言える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;error:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;error&lt;/h2&gt;

&lt;p&gt;ここで &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; について改めて説明しておく。
&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は以下の形式で表現できる &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt; 型のひとつである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type error interface {
	Error() string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり &lt;code&gt;Error()&lt;/code&gt; 関数を持つオブジェクトなら &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; として使える。
これのいちばん簡単な実装が &lt;a href=&#34;https://golang.org/pkg/errors/&#34; title=&#34;errors - The Go Programming Language&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; パッケージである。
&lt;a href=&#34;https://golang.org/pkg/errors/&#34; title=&#34;errors - The Go Programming Language&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; パッケージの中身は以下のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package errors

// New returns an error that formats as the given text.
func New(text string) error {
	return &amp;amp;errorString{text}
}

// errorString is a trivial implementation of error.
type errorString struct {
	s string
}

func (e *errorString) Error() string {
	return e.s
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは実体として &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; 型の property がひとつだけあって &lt;code&gt;Error()&lt;/code&gt; 関数で property をそのまま返すというものだ。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準パッケージの多くはこの &lt;a href=&#34;https://golang.org/pkg/errors/&#34; title=&#34;errors - The Go Programming Language&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; パッケージを使って &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を定義している。
たとえば &lt;a href=&#34;https://golang.org/pkg/os/&#34; title=&#34;os - The Go Programming Language&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; パッケージの最下位の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は以下のように定義されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package os

import (
	&amp;quot;errors&amp;quot;
)

// Portable analogs of some common system call errors.
var (
	ErrInvalid    = errors.New(&amp;quot;invalid argument&amp;quot;)
	ErrPermission = errors.New(&amp;quot;permission denied&amp;quot;)
	ErrExist      = errors.New(&amp;quot;file already exists&amp;quot;)
	ErrNotExist   = errors.New(&amp;quot;file does not exist&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう少し複雑な &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; では，以下のように詳細情報を持つものもある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// PathError records an error and the operation and file path that caused it.
type PathError struct {
	Op   string
	Path string
	Err  error
}

func (e *PathError) Error() string { return e.Op + &amp;quot; &amp;quot; + e.Path + &amp;quot;: &amp;quot; + e.Err.Error() }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3つのエラー-ハンドリング:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;3つのエラー・ハンドリング&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を判別する方法としては以下の3つがある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスを比較する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の型を判別する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error()&lt;/code&gt; 関数で出力される文字列を解釈する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;インスタンスを比較する:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;インスタンスを比較する&lt;/h3&gt;

&lt;p&gt;あらかじめ定義済みの &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスがあれば，インスタンスの比較で判別できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    switch err {
    case os.ErrInvalid:
        fmt.Fprintln(os.Stderr, &amp;quot;引数が不正&amp;quot;)
    case os.ErrPermission:
        fmt.Fprintln(os.Stderr, &amp;quot;アクセスは許可できない&amp;quot;)
    case os.ErrExist:
        fmt.Fprintln(os.Stderr, &amp;quot;そのファイルは既にある&amp;quot;)
    case os.ErrNotExist:
        fmt.Fprintln(os.Stderr, &amp;quot;ファイルが存在しない&amp;quot;)
    default:
        fmt.Fprintln(os.Stderr, err)
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;単純にエラーの種類が分かればいいのであれば，この方法が最もシンプル。&lt;/p&gt;

&lt;h3 id=&#34;型を判別する:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;型を判別する&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt; 型なので &lt;a href=&#34;https://golang.org/ref/spec#Conversions&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;Conversion&lt;/a&gt; 構文で判別できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    switch e := err.(type) {
    case *os.PathError:
        if errno, ok := e.Err.(syscall.Errno); ok {
            switch errno {
            case syscall.ENOENT:
                fmt.Fprintln(os.Stderr, &amp;quot;ファイルが存在しない&amp;quot;)
            case syscall.ENOTDIR:
                fmt.Fprintln(os.Stderr, &amp;quot;ディレクトリが存在しない&amp;quot;)
            default:
                fmt.Fprintln(os.Stderr, &amp;quot;Errno =&amp;quot;, errno)
            }
        } else {
            fmt.Fprintln(os.Stderr, &amp;quot;その他の PathError&amp;quot;)
        }
    default:
        fmt.Fprintln(os.Stderr, &amp;quot;その他のエラー&amp;quot;)
    }
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; に状態（status）を持たせる必要がある場合は，この方法を使うべき。&lt;/p&gt;

&lt;h3 id=&#34;文字列を比較する:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;文字列を比較する&lt;/h3&gt;

&lt;p&gt;上述の方法で判別できない場合は &lt;code&gt;Error()&lt;/code&gt; 関数で出力される文字列を解釈して処理するしかない。
&lt;a href=&#34;http://0xcc.net/misc/bad-knowhow.html&#34;&gt;バッドノウハウ&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;エラー-ハンドリングの設計:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;エラー・ハンドリングの設計&lt;/h2&gt;

&lt;p&gt;エラー・ハンドリングの方針としては，以下の2つのうちのどちらかだろう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を下位ロジックから上位ロジックまで持ち回し，最上位ロジックで最終的な判定と処理を行う&lt;/li&gt;
&lt;li&gt;下位ロジックの &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; をカプセル化した新たなインスタンスを生成し上位ロジックに渡す。上位ロジックは直近のロジックの &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; のみが見える&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最初のやり方は一見よさげだが，この方針では上位ロジックが下位ロジックの全ての &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を把握している必要があり現実的でない。
またオブジェクト指向設計では “Don&amp;rsquo;t talk to strangers” の原則があり，いわゆる「友達の友達」のことは知らないふりをするのがよい設計と言われている。&lt;/p&gt;

&lt;p&gt;こう考えると文字列での比較は最も下策であると言える。
また，型を判別する場合でも，下位レイヤの状態を生のまま見せるのではなく，必要な情報のみを返す関数を実装するほうが上策と言えるだろう。&lt;/p&gt;

&lt;p&gt;もうひとつ考慮すべき点としてエラー・メッセージの設計が挙げられるだろう。
&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; に対するメッセージをどのように設計するかは（大規模アプリケーションでは特に）重要である。&lt;/p&gt;

&lt;h2 id=&#34;追記-panic-と-recover:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;【追記】 Panic と Recover&lt;/h2&gt;

&lt;p&gt;たとえばゼロ除算を行った場合や配列などで領域外を参照・設定しようとした場合，あるいは allocation に失敗した場合など，致命的なエラーが発生する場合がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	f()
}

func f() {
	numbers := []int{0, 1, 2}

	fmt.Println(numbers[3])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\go-practice\src\panic01&amp;gt;go run panic01.go
panic: runtime error: index out of range

goroutine 1 [running]:
main.f()
        C:/workspace/go-practice/src/panic01/panic01.go:12 +0x14a
main.main()
        C:/workspace/go-practice/src/panic01/panic01.go:6 +0x1b
exit status 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，大域脱出させてアプリケーションを強制終了させているのが分かる。
この仕組みを &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; と呼ぶ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; は意図的に発生させることもできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

func main() {
	f()
}

func f() {
	panic(&amp;quot;Panic!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\go-practice\src\panic02&amp;gt;go run panic02.go
panic: Panic!

goroutine 1 [running]:
main.f()
        C:/workspace/go-practice/src/panic02/panic02.go:8 +0x6c
main.main()
        C:/workspace/go-practice/src/panic02/panic02.go:4 +0x1b
exit status 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;p&gt;一方で， &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; を &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; することもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:e&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	err := r()
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(&amp;quot;Normal End.&amp;quot;)
	}
}

func r() (err error) {
	defer func() {
		if rec := recover(); rec != nil {
			err = fmt.Errorf(&amp;quot;Recovered from: %v&amp;quot;, rec)
		}
	}()

	f()
	err = nil
	return
}

func f() {
	panic(&amp;quot;Panic!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\go-practice\src\panic03&amp;gt;go run panic03.go
Recovered from: Panic!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
&lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; を &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; で捕まえて通常の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; として返しているのがお分かりだろうか。&lt;/p&gt;

&lt;p&gt;一般的に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; はアプリケーション内で続行不可能な致命的エラーが発生した場合に投げられる。
例えばゼロ除算や領域外アクセスのようなエラーは &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; が発生する前に回避するコードにすべきだ。
Allocation エラーのような回避不能かつアプリケーション続行不可能なエラーの場合は &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; が投げられるのもやむを得ないが， &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; することにほとんど意味はない。&lt;/p&gt;

&lt;p&gt;例外的な使い方として &lt;a href=&#34;https://golang.org/pkg/bytes/&#34; title=&#34;bytes - The Go Programming Language&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Buffer&lt;/code&gt; では，メモリ確保で panic が発生した際に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; で捕まえ， &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; インスタンスを入れ替えて &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; を投げ直している。
このような用途で &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; を使うことはあり得る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// makeSlice allocates a slice of size n. If the allocation fails, it panics
// with ErrTooLarge.
func makeSlice(n int) []byte {
	// If the make fails, give a known error.
	defer func() {
		if recover() != nil {
			panic(ErrTooLarge)
		}
	}()
	return make([]byte, n)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また再帰処理中に続行不能なエラーが発生した場合に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; を投げてトップレベルの関数に一気に復帰するような使い方をする場合もある。
この場合は，トップレベルの関数は通常の &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を返すことになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:94adf3c4c1b9841365d464e984a9ce2f:f&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:94adf3c4c1b9841365d464e984a9ce2f:f&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;いずれにしろ，いわゆる「例外処理」的なハンドリングを &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt;/&lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; で行うべきではない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:94adf3c4c1b9841365d464e984a9ce2f&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20140416212413.htm&#34;&gt;Big Sky :: golang で複数のエラーをハンドリングする方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dsas.blog.klab.org/archives/go-errors.html&#34;&gt;DSAS開発者の部屋:Go ではエラーを文字列比較する？という話について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/ff98ded599d97cf6646e&#34;&gt;panicはともかくrecoverに使いどころはほとんどない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の &lt;code&gt;goto&lt;/code&gt; や ラベル付きの &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; は&lt;a href=&#34;https://golang.org/test/goto.go&#34;&gt;飛び先に制約&lt;/a&gt;があり，どこにでもジャンプできるわけではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:aa&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;例外を備える言語でこれを緩和する仕様はいくつかある。例えば Java は 1.7 から &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34;&gt;try-with-resources 構文&lt;/a&gt;を導入した。もちろんこの構文を有効にするためには対象となるオブジェクトがこの構文に対応した作りになっていなければならない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;いや，ファイル・オープンのエラーを無視したらダメです（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;&lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文で指定された処理は &lt;code&gt;return&lt;/code&gt; 時に起動することが保証される。したがって，エラー発生時にはその都度 &lt;code&gt;return&lt;/code&gt; で抜けて問題ない。むしろ &lt;code&gt;goto&lt;/code&gt; や &lt;code&gt;break&lt;/code&gt; で強制的に処理を抜けるよりは処理を分割して &lt;code&gt;return&lt;/code&gt; で安全に処理を抜ける方法がないか検討すべきである。なお &lt;code&gt;os.Exit()&lt;/code&gt; などで強制終了した場合は， &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文で指定した処理は起動しないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;いわゆる「文芸的プログラミング」とは異なるけど。紛らわしくてゴメン。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;これからのコードは「文芸的」であることが必要条件だと思う。何故ならエンジニアにとって最も信頼できる「設計書」は（動いている）コードだからだ。コードをひとりで考えてひとりで書いてひとりで使ってひとりでメンテナンスするなら（本人さえ理解していれば）文芸的である必要はないかもしれない。が，実用的なコードでそんな状況はもはやありえない。コードにおいても暗黙知をできるだけ排除していくことが重要。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:bb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は組み込み型なので，実際にこのような定義が標準パッケージにあるわけではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:e&#34;&gt;&lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; は &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文とともに使用する。つまり &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Panic&lt;/a&gt; 発生時でも &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Defer&lt;/a&gt; 構文で予約された処理は実行される。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:94adf3c4c1b9841365d464e984a9ce2f:f&#34;&gt;これ以外にサーバ用途などでプロセスを落とせない場合に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;Recover&lt;/a&gt; で回避することもあるが，既に続行不可能な状態で無理やりプロセスを続行するのが正しい動きなのかどうかは疑問が残る。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:94adf3c4c1b9841365d464e984a9ce2f:f&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GOPATH 汚染問題 — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/gopath-pollution/" />
		<id>tag:text.Baldanders.info,2015-09-29:/golang/gopath-pollution/</id>
		<published>2015-09-29T23:40:59+09:00</published>
		<updated>2015-11-07T10:42:54+09:00</updated>
		<summary>go get コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。GOPATH 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する場合があり，管理が煩雑になってしまう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/73ebc684b5807277b7e2&#34;&gt;そろそろ真面目に Golang 開発環境について考える — GOPATH 汚染問題 - Qiita&lt;/a&gt;，&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/baa3671c7e1b8a6594a9&#34;&gt;そろそろ真面目に Golang 開発環境について考える — Internal Packages と Vendoring - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; コマンドはとても強力な機能で，私のように Windows と UNIX 系環境の間を渡り歩いてる身としては， make などの tool chain に大きく依存することなく， &lt;code&gt;go get&lt;/code&gt; コマンドだけで repository の fetch からビルド・インストールまで出来てしまうのは非常にありがたい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;しかし， &lt;code&gt;go get&lt;/code&gt; コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。
ひとつの環境でひとつのプロジェクトを管理していくのならこれでも何とかならないこともないが， &lt;code&gt;GOPATH&lt;/code&gt; 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する可能性があり，管理が煩雑になってしまう。&lt;/p&gt;

&lt;p&gt;しかも困ったことに &lt;code&gt;GOPATH&lt;/code&gt; 環境変数は複数のプロジェクト管理を想定していないため，全てのパッケージをひとつのフォルダに入れようとする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;対策1-プロジェクトごとに-gopath-を設定し直す:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策1】 プロジェクトごとに GOPATH を設定し直す&lt;/h2&gt;

&lt;p&gt;この問題に対する一番安直な答えは「プロジェクトごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定し直す」である。例えば&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; をビルドする場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\gb

C:&amp;gt;SET GOPATH=C:\workspace\gb

C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは &lt;code&gt;GOPATH&lt;/code&gt; 直下の &lt;code&gt;bin&lt;/code&gt; フォルダにパスを通すか，パスの通ってるフォルダに実行ファイルをコピーすればよい。
実行履歴はバッチファイル（UNIX 系なら shell スクリプト）に保存しておけばいつでも復元できる。&lt;/p&gt;

&lt;p&gt;毎回環境をセットアップしないといけないのは面倒だが，プロジェクト管理のためのツールも必要なく， Go コンパイラの標準機能のみで管理できる。
標準機能のみで管理できるというのは結構重要で，たとえば CI ツールを使っている場合は，設定を単純にできるので管理しやすいといえる。&lt;/p&gt;

&lt;p&gt;UNIX 系の環境であれば &lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; を使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;code&gt;cd&lt;/code&gt; をフックし，ディレクトリごとに環境変数を書き換えることができる。
この機能を使ってプロジェクト・フォルダごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定できる。&lt;/p&gt;

&lt;h2 id=&#34;対策2-プロジェクト-ベースの管理ツールを使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策2】 プロジェクト・ベースの管理ツールを使う&lt;/h2&gt;

&lt;p&gt;もうひとつは &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなプロジェクト・ベースでコード管理のできるツールを使う方法である。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; については&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介したので，そちらを参照のこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; で作った開発環境はフォルダ構成を丸ごと開発メンバに配布・同期することが可能になるため，複数人で環境を合わせることが容易になる。&lt;/p&gt;

&lt;h2 id=&#34;対策3-go-1-5-の-vendoring-機能を使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策3】 Go 1.5 の Vendoring 機能を使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のバージョン 1.5 から Vendoring 機能が使えるようになった。&lt;/p&gt;

&lt;p&gt;Vendoring 機能を使うと，外部パッケージを &lt;code&gt;GOPATH&lt;/code&gt; とは独立に管理できるようになる。
この機能を使うには環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; に 1 をセットする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;Go 1.5 Vendor Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vendoring 機能が有効な状態では &lt;code&gt;vendor&lt;/code&gt; フォルダが特別な意味を持つ。
たとえば &lt;code&gt;mypackage&lt;/code&gt; パッケージに対して &lt;code&gt;mypackage/vendor/vpackage&lt;/code&gt; と配置した場合， &lt;code&gt;import &amp;quot;vpackage&amp;quot;&lt;/code&gt; と記述すれば &lt;code&gt;mypackage/vendor&lt;/code&gt; フォルダ以下の &lt;code&gt;vpackage&lt;/code&gt; も探してくれる。&lt;/p&gt;

&lt;p&gt;では，&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;作ったコードを流用して確かめてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;SET GOPATH=C:\workspace\vdemo

C:\workspace\vdemo&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)

C:\workspace\vdemo&amp;gt;mkdir src\julian-day\vendor

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor


C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\workspace\vdemo\src\julian-day\vendor\github.com\spiegel-im-spiegel\astrocalc\modjulian (vendor tree)
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダを追加したことで Go コンパイラの挙動が変わったことがお分かりだろうか。
目的のパッケージを vendor tree → &lt;code&gt;GOROOT&lt;/code&gt; → &lt;code&gt;GOPATH&lt;/code&gt; の順で捜索している。&lt;/p&gt;

&lt;p&gt;では &lt;code&gt;vendor&lt;/code&gt; フォルダに外部パッケージを導入してビルドしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;pushd src\julian-day\vendor

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;popd

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows_amd64
│      └─julian-day
│          └─vendor
│              └─github.com
│                  └─spiegel-im-spiegel
│                      └─astrocalc
│                              modjulian.a
│
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下にパッケージがフルパスで入ってしまうため階層が深くなりがちなのが「玉に瑕」だが，それ以外は特に問題はない。
あるいは &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージは &lt;code&gt;go get&lt;/code&gt; の制約から外れているので，呼び出し側を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;astrocalc/modjulian&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として以下のフォルダ構成にする手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─astrocalc
                │  .editorconfig
                │  .gitignore
                │  .travis.yml
                │  LICENSE
                │  README.md
                │
                └─modjulian
                        example_test.go
                        LICENSE
                        modjulian.go
                        modjulian_test.go


C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意が必要なのは， &lt;code&gt;go get&lt;/code&gt; は git の submodule を上手く扱えないため， &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージを submodule として配置している場合はビルドに失敗することだ。
この場合は &lt;code&gt;-d&lt;/code&gt; オプションで &lt;code&gt;go get&lt;/code&gt; がビルドまで行わないようにし，手動で submodule の &lt;code&gt;init&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; を行う必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -d project/...
C:&amp;gt;git submodule init
C:&amp;gt;git submodule update
C:&amp;gt;go install ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/06/18/010449&#34;&gt;direnvで解決するGOPATHの3つの問題点 - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aminamid/items/5a0e9461385c80d0c8a6&#34;&gt;さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;それでも git などのコード管理ツールへの依存はどうしても残るのだけれど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;具体的には &lt;code&gt;GOPATH&lt;/code&gt; で列挙されるパスのリストのうち先頭のパスにインストールされる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の開発・管理主体は Google だが，こんな構成で Google は困らないのかと思ったのだが，実は Google は全てのコードを単一の repository で管理しているらしい。（参考： &lt;a href=&#34;http://www.publickey1.jp/blog/15/2045000google.html&#34;&gt;20億行のコードを保存し、毎日4万5000回のコミットを発行しているGoogleが、単一のリポジトリで全社のソースコードを管理している理由&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で組まれている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;パッケージのパスが変わるとテストが通らなくなる場合があるので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>プロジェクト・ベースの開発環境をつくる — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/project-based-development/" />
		<id>tag:text.Baldanders.info,2015-09-28:/golang/project-based-development/</id>
		<published>2015-09-28T20:38:45+09:00</published>
		<updated>2015-09-28T20:38:45+09:00</updated>
		<summary>今回は gb を使ってプロジェクト・ベースで Golang のコードを管理してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/ef15a48542e043b32c99&#34;&gt;はじめての Go 言語 (on Windows) その9 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;今回は &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; を使ってプロジェクト・ベースで Golang のコードを管理してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getgb.io/&#34;&gt;gb - A project based build tool for Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gb-の導入:6e131725c8916e09bb821f8d42f65641&#34;&gt;gb の導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; の導入は &lt;code&gt;go get&lt;/code&gt; でできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows の場合，環境変数 &lt;code&gt;GOPATH&lt;/code&gt; で指定するフォルダ配下の &lt;code&gt;bin&lt;/code&gt; フォルダに &lt;code&gt;gb.exe&lt;/code&gt; および &lt;code&gt;gb-vendor.exe&lt;/code&gt; が生成される。
このフォルダにパスを通しておく（またはパスの通っているフォルダに実行ファイルをコピーする）。&lt;/p&gt;

&lt;h2 id=&#34;プロジェクトの構築とビルド:6e131725c8916e09bb821f8d42f65641&#34;&gt;プロジェクトの構築とビルド&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;機能のパッケージ化&lt;/a&gt;」で最後に作ったコードを使って実際に &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; でプロジェクトを作成しビルドを行ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ソース-ファイルの配置:6e131725c8916e09bb821f8d42f65641&#34;&gt;ソース・ファイルの配置&lt;/h3&gt;

&lt;p&gt;プロジェクト・フォルダを &lt;code&gt;C:\workspace\gbdemo&lt;/code&gt; とし，ソース・ファイル用のフォルダ &lt;code&gt;src\julian-day&lt;/code&gt; を作成する。
このフォルダに上述のコードを記述したソース・ファイルを配置する。
フォルダ構成は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルドするには &lt;code&gt;gb build&lt;/code&gt; コマンドを実行すればいいのだが，このままでは &lt;code&gt;modjulian&lt;/code&gt; パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
FATAL command &amp;quot;build&amp;quot; failed: failed to resolve import path &amp;quot;julian-day&amp;quot;: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\gbdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
        C:\workspace\gbdemo\vendor\src\github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクト・フォルダ以下を &lt;code&gt;GOPATH&lt;/code&gt; として &lt;code&gt;modjulian&lt;/code&gt; パッケージを探しているのがお分かりだろうか。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; では，実行時に既存の &lt;code&gt;GOPATH&lt;/code&gt; を上書きするようである。
またプロジェクト・フォルダ配下の &lt;code&gt;vendor&lt;/code&gt; フォルダを探しているのにも注目してほしい。&lt;/p&gt;

&lt;h3 id=&#34;外部パッケージの導入:6e131725c8916e09bb821f8d42f65641&#34;&gt;外部パッケージの導入&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; では外部パッケージを &lt;code&gt;gb vendor&lt;/code&gt; コマンドで管理できる。
外部パッケージの導入には &lt;code&gt;gb vendor fetch&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor fetch github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─src
│  └─julian-day
│          julian-day.go
│
└─vendor
    │  manifest
    │
    └─src
        └─github.com
            └─spiegel-im-spiegel
                └─astrocalc
                    └─modjulian
                            example_test.go
                            LICENSE
                            modjulian.go
                            modjulian_test.go

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクト・フォルダ以下に &lt;code&gt;vendor&lt;/code&gt; フォルダが作成され，パッケージのソースファイルが展開されている。&lt;/p&gt;

&lt;p&gt;今回 &lt;code&gt;gb vendor fetch&lt;/code&gt; で取得したパッケージは &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; のリポジトリから取ってきたものだが， &lt;code&gt;git clone&lt;/code&gt; ではなく，フォルダ・ファイル構成ごとコピーしてきたもののようである。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gb vendor fetch&lt;/code&gt; コマンドでは &lt;code&gt;-branch&lt;/code&gt; や &lt;code&gt;-tag&lt;/code&gt; や &lt;code&gt;-revision&lt;/code&gt; オプションでリポジトリのブランチやタグまたはリビジョンを指定できる。
このとき，導入したパッケージのリポジトリ情報は &lt;code&gt;vender\manifest&lt;/code&gt; ファイルに格納されている（中身は JSON 形式）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;version&amp;quot;: 0,
	&amp;quot;dependencies&amp;quot;: [
		{
			&amp;quot;importpath&amp;quot;: &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;,
			&amp;quot;repository&amp;quot;: &amp;quot;https://github.com/spiegel-im-spiegel/astrocalc&amp;quot;,
			&amp;quot;revision&amp;quot;: &amp;quot;c9f5fb495e67b868a2b3f0e16c38282095fe5033&amp;quot;,
			&amp;quot;branch&amp;quot;: &amp;quot;master&amp;quot;,
			&amp;quot;path&amp;quot;: &amp;quot;/modjulian&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに外部パッケージをアップデートする場合は &lt;code&gt;gb vendor update&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor update github.com/spiegel-im-spiegel/astrocalc/modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor update -all
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プロジェクトのビルド:6e131725c8916e09bb821f8d42f65641&#34;&gt;プロジェクトのビルド&lt;/h3&gt;

&lt;p&gt;では，この状態でもう一回ビルドしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
julian-day

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows-amd64
│      │  julian-day.a
│      │
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
├─src
│  └─julian-day
│          julian-day.go
│
└─vendor
    │  manifest
    │
    └─src
        └─github.com
            └─spiegel-im-spiegel
                └─astrocalc
                    └─modjulian
                            example_test.go
                            LICENSE
                            modjulian.go
                            modjulian_test.go

C:\workspace\gbdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度は上手くいったようだ。
&lt;code&gt;gb build&lt;/code&gt; コマンドのオプションは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb help build
usage: gb build [build flags] [packages]

Build compiles the packages named by the import paths, along with their
dependencies.

Flags:

        -f
                ignore cached packages if present, new packages built will overwrite
                any cached packages. This effectively disables incremental
                compilation.
        -F
                do not cache packages, cached packages will still be used for
                incremental compilation. -f -F is advised to disable the package

                caching system.
        -q
                decreases verbosity, effectively raising the output level to ERROR.
                In a successful build, no output will be displayed.
        -P
                The number of build jobs to run in parallel, including test execution.
                By default this is the number of CPUs visible to gb.
        -R
                sets the base of the project root search path from the current working
                directory to the value supplied. Effectively gb changes working
                directory to this path before searching for the project root.
        -v
                increases verbosity, effectively lowering the output level from INFO
                to DEBUG.
        -dotfile
                if provided, gb will output a dot formatted file of the build steps to
                be performed.
        -ldflags &#39;flag list&#39;
                arguments to pass on each linker invocation.
        -gcflags &#39;arg list&#39;
                arguments to pass on each compile invocation.
        -tags &#39;tag list&#39;
                additional build tags.

The list flags accept a space-separated list of strings. To embed spaces in an
element in the list, surround it with either single or double quotes.

For more about specifying packages, see &#39;gb help packages&#39;. For more about
where packages and binaries are installed, run &#39;gb help project&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-ldflags&lt;/code&gt; や &lt;code&gt;-gcflags&lt;/code&gt; オプションが使えるのはありがたいかな。&lt;/p&gt;

&lt;h2 id=&#34;複数パッケージを含めたプロジェクト管理:6e131725c8916e09bb821f8d42f65641&#34;&gt;複数パッケージを含めたプロジェクト管理&lt;/h2&gt;

&lt;p&gt;複数のパッケージをまとめて管理したい場合もある。
例えば以下のような構成を考えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\gbdemo&amp;gt;pushd src

C:\workspace\gbdemo\src&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\gbdemo\src&amp;gt;popd

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態でビルドを実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows-amd64
│      │  julian-day.a
│      │
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day
            julian-day.go

C:\workspace\gbdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; ではプロジェクト・フォルダ以下にあるパッケージを自動で検索してビルドしてくれる。
もちろんパッケージを指定してビルドすることも可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build github.com/spiegel-im-spiegel/astrocalc/modjulian
github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\gbdemo&amp;gt;gb build julian-day
julian-day
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらにテストもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\gbdemo&amp;gt;gb test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
=== RUN   ExampleDayNumber
--- PASS: ExampleDayNumber (0.00s)                  
PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージによっては &lt;code&gt;go test&lt;/code&gt; の結果と &lt;code&gt;gb test&lt;/code&gt; の結果が異なる場合があるので注意が必要。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:6e131725c8916e09bb821f8d42f65641&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/ac0591fef95c2c6e936e&#34;&gt;golang - gbを知ったのでgojiを使ったWEBアプリケーションプロジェクトを管理してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;code&gt;go get&lt;/code&gt; の使い方については「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;テストについては「&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34;&gt;Go 言語のテスト・フレームワーク&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>文字エンコーディング変換 — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/transform-character-encoding/" />
		<id>tag:text.Baldanders.info,2015-09-23:/golang/transform-character-encoding/</id>
		<published>2015-09-23T20:04:00+09:00</published>
		<updated>2015-09-24T12:30:00+09:00</updated>
		<summary>文字エンコーディング変換に関してはあちこちに記事があるのだが，微妙に古い気がするので，メモとして書き記しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/2e475b48226330aa5570&#34;&gt;Golang による文字エンコーディング変換 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;文字エンコーディング変換に関してはあちこちに記事があるのだが，微妙に古い気がするので，メモとして書き記しておく。&lt;/p&gt;

&lt;h2 id=&#34;go-言語の文字エンコーディング変換:8c97bc776007d33febbab020a38c72f3&#34;&gt;Go 言語の文字エンコーディング変換&lt;/h2&gt;

&lt;p&gt;Go 言語では Unicode が既定となっている。
そもそもソースコードが UTF-8 前提になっているし，文字の単位である &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; の実体は UTF-32 相当である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;したがって UTF-8 以外の文字エンコーディングを扱う場合は何らかの変換処理を挟む必要がある。
そのためのパッケージが &lt;a href=&#34;https://godoc.org/golang.org/x/text/transform&#34; title=&#34;transform - GoDoc&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt; である。
また&lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding&#34;&gt;エンコーディング&lt;/a&gt;についても各種そろっていて，日本語の場合は &lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding/japanese&#34; title=&#34;japanese - GoDoc&#34;&gt;&lt;code&gt;encoding/japanese&lt;/code&gt;&lt;/a&gt; パッケージを使う。
&lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding/japanese&#34; title=&#34;japanese - GoDoc&#34;&gt;&lt;code&gt;encoding/japanese&lt;/code&gt;&lt;/a&gt; パッケージでは Shift-JIS, EUC-JP, ISO-2202-JP を扱える。&lt;/p&gt;

&lt;h3 id=&#34;パッケージの導入:8c97bc776007d33febbab020a38c72f3&#34;&gt;パッケージの導入&lt;/h3&gt;

&lt;p&gt;日本語が必要なだけなら &lt;code&gt;golang.org/x/text/encoding/japanese&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を &lt;code&gt;go get&lt;/code&gt; すれば全てインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -v golang.org/x/text/encoding/japanese
Fetching https://golang.org/x/text/encoding/japanese?go-get=1
Parsing meta tags from https://golang.org/x/text/encoding/japanese?go-get=1 (status code 200)
get &amp;quot;golang.org/x/text/encoding/japanese&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/text&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/text&amp;quot;} at https://golang.org/x/text/encoding/japanese?go-get=1
get &amp;quot;golang.org/x/text/encoding/japanese&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/text?go-get=1
Parsing meta tags from https://golang.org/x/text?go-get=1 (status code 200)
golang.org/x/text (download)
golang.org/x/text/transform
golang.org/x/text/encoding/internal/identifier
golang.org/x/text/encoding
golang.org/x/text/encoding/internal
golang.org/x/text/encoding/japanese
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;変換ロジック-サンプルコード:8c97bc776007d33febbab020a38c72f3&#34;&gt;変換ロジック（サンプルコード）&lt;/h3&gt;

&lt;p&gt;変換ロジックのサンプルを以下に示す（thanks &lt;a href=&#34;http://qiita.com/mattn&#34;&gt;@mattn&lt;/a&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;golang.org/x/text/encoding/japanese&amp;quot;
	&amp;quot;golang.org/x/text/transform&amp;quot;
)

func main() {
	reader := NewDecoder(os.Stdin)
	writer := NewEncoder(os.Stdout)
	if _, err := io.Copy(writer, reader); err != nil {
		fmt.Fprintln(os.Stderr, err)
	}
}

func NewDecoder(reader io.Reader) *transform.Reader {
	return transform.NewReader(reader, japanese.ShiftJIS.NewDecoder())
}

func NewEncoder(writer io.Writer) *transform.Writer {
	return transform.NewWriter(writer, japanese.EUCJP.NewEncoder())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UTF-8 以外の文字エンコーディングから UTF-8 への変換は decode と呼ばれている。
一方， UTF-8 から UTF-8 以外の文字エンコーディングへの変換は encode と呼ばれている。&lt;/p&gt;

&lt;p&gt;上のサンプルでは Shift-JIS →（Decoder）→ UTF-8 →（Encoder）→ EUC-JP の手順で変換していることがお分かりであろうか。
では実際に動かしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;echo Go言語で行こう | go run transform.go &amp;gt; euc.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;euc.txt&lt;/code&gt; に「Go言語で行こう」と EUC-JP で書き込まれていたら成功である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
今回は標準入出力を使ったが， Reader/Writer の stream で表せるものなら同様の処理でできるはずである。&lt;/p&gt;

&lt;h2 id=&#34;文字エンコーディング変換に関する注意点:8c97bc776007d33febbab020a38c72f3&#34;&gt;文字エンコーディング変換に関する注意点&lt;/h2&gt;

&lt;p&gt;Shift-JIS/EUC-JP と UTF-8/UTF-32 ではベースとなっている文字集合（文字エンコーディングではない）が異なる。
Shift-JIS/EUC-JP の文字集合は基本的に JIS 規格だが UTF-8/UTF-32 は Unicode であり，両者は非対称の関係である。
このため，今回のような異なる文字集合を跨ぐ変換を行うと変換が正しく行われない場合もあり得る（要検証）。&lt;/p&gt;

&lt;p&gt;更に困ったことに，歴史的経緯（便利な言葉だw）から Shift-JIS や EUC-JP の実装にはいくつかバリエーションがあるため，実装間の差異が問題になる場合もある。
&lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding/japanese&#34; title=&#34;japanese - GoDoc&#34;&gt;&lt;code&gt;encoding/japanese&lt;/code&gt;&lt;/a&gt; パッケージはこの実装上の差異を考慮してはいないようである。&lt;/p&gt;

&lt;p&gt;更に更に言えば，汎用機などは旧JIS＋外字の構成になっていることが多く，このような需要に応えるなら独自の変換ロジックを開発するしかない。&lt;/p&gt;

&lt;h3 id=&#34;変換ロジックの別解:8c97bc776007d33febbab020a38c72f3&#34;&gt;変換ロジックの別解&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/transform&#34; title=&#34;transform - GoDoc&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt; を使った変換でうまくいかない場合は &lt;a href=&#34;https://github.com/djimenez/iconv-go&#34; title=&#34;djimenez/iconv-go&#34;&gt;&lt;code&gt;djimenez/iconv-go&lt;/code&gt;&lt;/a&gt; パッケージを使う手もある。
ただし， &lt;a href=&#34;https://github.com/djimenez/iconv-go&#34; title=&#34;djimenez/iconv-go&#34;&gt;&lt;code&gt;djimenez/iconv-go&lt;/code&gt;&lt;/a&gt; パッケージのビルドには &lt;code&gt;libiconv&lt;/code&gt; および &lt;code&gt;glibc&lt;/code&gt; が必要である（クロス環境では注意）。
このパッケージを使うことで &lt;code&gt;iconv&lt;/code&gt; 相当の処理が可能になる。&lt;/p&gt;

&lt;p&gt;（別の変換パッケージとして &lt;a href=&#34;https://godoc.org/code.google.com/p/mahonia&#34;&gt;&lt;code&gt;mahonia&lt;/code&gt;&lt;/a&gt; を紹介しているところがいくつか見られたが，ドキュメントを見る限り DEPRECATED となっていて使えないようだ。また repository にもアクセスできない）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:8c97bc776007d33febbab020a38c72f3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.stackoverflow.com/questions/6120/go%E3%81%A7byte%E3%82%92shift-jis%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B&#34;&gt;go - Goで[]byteをshift-jisの文字列に変換する - スタック・オーバーフロー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/irugo/items/390bd187871c7716a1e1&#34;&gt;GO言語で文字コードを扱うライブラリの使用例 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nobuhito/items/ff782f64e32f7ed95e43&#34;&gt;Golangで文字コード判定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34;&gt;String と Rune&lt;/a&gt;」参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;かつてパッケージの場所は &lt;code&gt;code.google.com/p/go.text/transform&lt;/code&gt; および &lt;code&gt;code.google.com/p/go.text/encoding/japanese&lt;/code&gt; だったが，ここの repository は今は存在しないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;もちろんこれは Windows のコマンドプロンプトで動かした場合の話。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>文字列連結はどれが速い？ — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/join-strings/" />
		<id>tag:text.Baldanders.info,2015-09-21:/golang/join-strings/</id>
		<published>2015-09-21T23:08:07+09:00</published>
		<updated>2015-09-23T20:00:00+09:00</updated>
		<summary>Go 言語で文字列の連結を行う際にどうやるのが一番速いか，という話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/16ab7dabbd0749281227&#34;&gt;Golang の文字列連結はどちらが速い？ - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34; title=&#34;String と Rune&#34;&gt;前回&lt;/a&gt;につづき &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の話題。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で文字列の連結を行う際にどうやるのが一番速いか，という話。&lt;/p&gt;

&lt;h2 id=&#34;文字列連結を行う4つの方法:53cbada6770de764fdec60b0362267fb&#34;&gt;文字列連結を行う4つの方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で文字列の連結を行う際には概ね以下の4つの方法がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;“&lt;code&gt;+&lt;/code&gt;” 演算子で連結する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Join&lt;/code&gt; で連結する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; は「不変（immutable）」なので，最初の2つが高コストになるだろうことはすぐに想像がつく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/2bb83b29baeae2433a79&#34;&gt;Goでは文字列連結はコストの高い操作 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atotto.hatenadiary.jp/entry/2013/04/26/202701&#34;&gt;Go言語で効率良く文字列を連結する話 #golang - memoメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では残りの2つはどうなのかというと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37&#34;&gt;Goの文字列結合のパフォーマンス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;によると最後のが一番速いらしい。ほんじゃまぁ，確かめてみるか。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコードを用意:53cbada6770de764fdec60b0362267fb&#34;&gt;サンプルコードを用意&lt;/h2&gt;

&lt;p&gt;以下のコード &lt;code&gt;join.go&lt;/code&gt; を使って評価してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;bytes&amp;quot;
	&amp;quot;io&amp;quot;
)

//Read content (text data) from buffer
func ContentText(inStream io.Reader) ([]string, error) {
	scanner := bufio.NewScanner(inStream)
	list := make([]string, 0)
	for scanner.Scan() {
		list = append(list, scanner.Text())
	}
	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return list, nil
}

//Write content (text data) to buffer
func WriteBuffer1(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0)
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer
func WriteBuffer1Cap128(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0, 128) //128 bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer
func WriteBuffer1Cap1K(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0, 1024) //1K bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0))
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2Cap128(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0, 128)) //128 bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2Cap1K(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0, 1024)) //1K bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストコード &lt;code&gt;join_test.go&lt;/code&gt; はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;os&amp;quot;
	&amp;quot;testing&amp;quot;
)

func readFile() []string {
	file, err := os.Open(&amp;quot;CollisionsForHashFunctions.txt&amp;quot;) //maybe file path
	if err != nil {
		panic(err)
	}
	defer file.Close()
	list, err := ContentText(file)
	if err != nil {
		panic(err)
	}
	return list
}

func BenchmarkWriteBuffer1(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer1Cap128(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1Cap128(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer1Cap1K(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1Cap1K(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer2(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer2Cap128(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2Cap128(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer2Cap1K(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2Cap1K(list)
		_ = string(content)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のテストについては&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34;&gt;以前紹介した&lt;/a&gt;が，同じ要領で &lt;code&gt;Benchmark&lt;/code&gt; から始まる名前の関数を作るとベンチマーク用のコードとして認識される。
引数には &lt;code&gt;b *testing.B&lt;/code&gt; を指定する。&lt;/p&gt;

&lt;p&gt;ベンチマークの内訳は以下のとおり。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;ベンチマーク名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;処理内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1Cap128&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する（ capacity 128B）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1Cap1K&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する（ capacity 1KB）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2Cap128&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する（ capacity 128B）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2Cap1K&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する（ capacity 1KB）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;入力テキストだが，小さいファイルではテストにならない気がしたので，大昔に書いたテキスト &lt;a href=&#34;http://www.baldanders.info/spiegel/archive/CollisionsForHashFunctions.txt&#34;&gt;&lt;code&gt;CollisionsForHashFunctions.txt&lt;/code&gt;&lt;/a&gt; を使うことにした。
サイズは70行，7KB ほど。&lt;/p&gt;

&lt;h2 id=&#34;テスト結果:53cbada6770de764fdec60b0362267fb&#34;&gt;テスト結果&lt;/h2&gt;

&lt;p&gt;結果は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go test -bench WriteBuffer -benchmem
testing: warning: no tests to run
PASS
BenchmarkWriteBuffer1-8           100000         17831 ns/op       37056 B/op     12 allocs/op
BenchmarkWriteBuffer1Cap128-8     100000         20321 ns/op       36992 B/op     11 allocs/op
BenchmarkWriteBuffer1Cap1K-8      100000         19301 ns/op       36096 B/op      8 allocs/op
BenchmarkWriteBuffer2-8           100000         17300 ns/op       33760 B/op     10 allocs/op
BenchmarkWriteBuffer2Cap128-8     100000         19451 ns/op       34992 B/op      9 allocs/op
BenchmarkWriteBuffer2Cap1K-8      100000         15490 ns/op       25712 B/op      6 allocs/op
ok      join    12.659s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ありゃりゃ。 &lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; を使ったほうが速いみたい（capacity を大きくとれば）。&lt;/p&gt;

&lt;p&gt;それなら，入力テキストを切り詰めて10行，0.3KB にしてやってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go test -bench WriteBuffer -benchmem
testing: warning: no tests to run
PASS
BenchmarkWriteBuffer1-8          2000000           859 ns/op        1312 B/op      5 allocs/op
BenchmarkWriteBuffer1Cap128-8    2000000           707 ns/op        1248 B/op      4 allocs/op
BenchmarkWriteBuffer1Cap1K-8     2000000           796 ns/op        1376 B/op      2 allocs/op
BenchmarkWriteBuffer2-8          1000000          1686 ns/op        1600 B/op      6 allocs/op
BenchmarkWriteBuffer2Cap128-8    1000000          1411 ns/op        1680 B/op      5 allocs/op
BenchmarkWriteBuffer2Cap1K-8     2000000           980 ns/op        1488 B/op      3 allocs/op
ok      join    13.589s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度は &lt;code&gt;[]byte&lt;/code&gt; の方が速くなった。&lt;/p&gt;

&lt;p&gt;まぁでも予想通りかな。
データのサイズが大きくなればバッファ操作のほうが有利になるのは分かりやすいっちゃあ分かりやすい。&lt;/p&gt;

&lt;p&gt;注目すべきは &lt;code&gt;BenchmarkWriteBuffer1Cap128&lt;/code&gt; と &lt;code&gt;BenchmarkWriteBuffer1Cap1K&lt;/code&gt; で， capacity を 1KB 取ったほうが若干遅くなっている。この辺のチューニングをどうするか，というところなのだろう（実はこれ，環境によって微妙に順位が変わるんだよなぁ）。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:53cbada6770de764fdec60b0362267fb&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20131123/1385189088&#34;&gt;Go でベンチマーク - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Mulyu/items/ed585f2777496f29a725&#34;&gt;go言語でベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>String と Rune — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/string-and-rune/" />
		<id>tag:text.Baldanders.info,2015-09-19:/golang/string-and-rune/</id>
		<published>2015-09-19T23:45:56+09:00</published>
		<updated>2015-11-08T18:20:27+09:00</updated>
		<summary>今回は文字列について。短めにさくっと。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/556166b6631c0369754f&#34;&gt;はじめての Go 言語 (on Windows) その4 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;文字列を示す &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; は不変（immutable）なオブジェクトだが，中身は byte 配列である。
したがって以下のように&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	size := len(nihongo)

	fmt.Printf(&amp;quot;nihongo = %d bytes :&amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot; %x&amp;quot;, nihongo[i])
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; をダンプすると以下の結果になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string01.go
nihongo = 9 bytes : e6 97 a5 e6 9c ac e8 aa 9e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; なんて名前なのに）文字単位で情報を保持しているわけではないため，最初の2文字を取り出すつもりでうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, nihongo[:2])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんてなコードを書くと以下の結果になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02.go
nihongo = 日本語
nippon = ��
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列を文字単位で扱うには &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; を使う。
いや，ルーンってどんだけ厨二&amp;hellip; ゲフンゲフン。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	nihongoRune := []rune(nihongo)
	size := len(nihongoRune)

	fmt.Printf(&amp;quot;nihongo = %d characters : &amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot;%#U &amp;quot;, nihongoRune[i])
	}
	fmt.Printf(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03.go
nihongo = 3 characters : U+65E5 &#39;日&#39; U+672C &#39;本&#39; U+8A9E &#39;語&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または， &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; に対して &lt;a href=&#34;http://golang.org/ref/spec#For_statements&#34;&gt;for range 構文&lt;/a&gt;を使ってループを回すと文字（&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt;）単位で取得できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	for pos, runeValue := range nihongo {
		fmt.Printf(&amp;quot;%#U starts at byte position %d\n&amp;quot;, runeValue, pos)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03b.go
U+65E5 &#39;日&#39; starts at byte position 0
U+672C &#39;本&#39; starts at byte position 3
U+8A9E &#39;語&#39; starts at byte position 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; の実体は int32 で，内部表現は Unicode になっている。
&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; 配列は相互変換できるので，文字列を切り取る場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, string([]rune(nihongo)[:2]))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; → []&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; → &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と変換していけば安全に処理できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02b.go
nihongo = 日本語
nippon = 日本
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう少し細かい処理が必要なら &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:22aba2fd29e0e069728fb8201971f262&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;Strings, bytes, runes and characters in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knightso.hateblo.jp/entry/2014/06/24/090719&#34;&gt;Go言語のstring, runeの正体とは？ - golang - The Round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hokaccha/items/3d3f45b5927b4584dbac&#34;&gt;Goでマルチバイトが混在した文字列をtruncateする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakielastic/items/01a4fb691c572dd71a19&#34;&gt;Go で UTF-8 の文字列を扱う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で取り扱う文字列の文字エンコーディングは UTF-8 が既定である。他の文字エンコーディングで書かれた文字列を扱うには，一度 UTF-8 に変換する処理が必要になる。文字エンコーディングの変換については&lt;a href=&#34;http://text.baldanders.info/golang/transform-character-encoding/&#34;&gt;別の記事&lt;/a&gt;で改めて紹介する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;ちなみに &lt;a href=&#34;http://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; パッケージは内部で &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使っているようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語のドキュメント・フレームワーク — プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/document/" />
		<id>tag:text.Baldanders.info,2015-09-19:/golang/document/</id>
		<published>2015-09-19T23:43:25+09:00</published>
		<updated>2015-09-23T19:57:00+09:00</updated>
		<summary>パッケージ化したのならドキュメントを書きましょう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5f9e96f226f46089388f&#34;&gt;はじめての Go 言語 (on Windows) その8 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34; title=&#34;Go 言語のテスト・フレームワーク&#34;&gt;前回&lt;/a&gt;の続き。
パッケージ化したのならドキュメントを書きましょう。&lt;/p&gt;

&lt;h2 id=&#34;godoc-のインストール:7445d9e511c27034085e252d0df49931&#34;&gt;godoc のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/golang.org/x/tools/cmd/godoc&#34; title=&#34;godoc - GoDoc&#34;&gt;&lt;code&gt;godoc&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のドキュメント化ツールです。
&lt;code&gt;go get&lt;/code&gt; コマンドで導入できます。（&lt;code&gt;go get&lt;/code&gt; コマンドについては「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を参照）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\godoc

C:&amp;gt;cd C:\workspace\godoc

C:\workspace\godoc&amp;gt;SET GOPATH=C:\workspace\godoc

C:\workspace\godoc&amp;gt;go get -v golang.org/x/tools/cmd/godoc
Fetching https://golang.org/x/tools/cmd/godoc?go-get=1
Parsing meta tags from https://golang.org/x/tools/cmd/godoc?go-get=1 (status code 200)
get &amp;quot;golang.org/x/tools/cmd/godoc&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/tools&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/tools&amp;quot;} at https://golang.org/x/tools/cmd/godoc?go-get=1
get &amp;quot;golang.org/x/tools/cmd/godoc&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
golang.org/x/tools/blog/atom
golang.org/x/tools/present
golang.org/x/tools/go/ast/astutil
golang.org/x/tools/go/exact
golang.org/x/tools/go/buildutil
golang.org/x/tools/go/types
golang.org/x/tools/container/intsets
golang.org/x/tools/blog
golang.org/x/tools/godoc/vfs
golang.org/x/tools/godoc/redirect
golang.org/x/tools/godoc/static
golang.org/x/tools/playground
golang.org/x/tools/godoc/util
golang.org/x/tools/go/types/typeutil
golang.org/x/tools/go/loader
golang.org/x/tools/godoc/vfs/httpfs
golang.org/x/tools/godoc/vfs/gatefs
golang.org/x/tools/godoc/vfs/mapfs
golang.org/x/tools/godoc/vfs/zipfs
golang.org/x/tools/go/ssa
golang.org/x/tools/go/callgraph
golang.org/x/tools/go/ssa/ssautil
golang.org/x/tools/go/pointer
golang.org/x/tools/godoc/analysis
golang.org/x/tools/godoc
golang.org/x/tools/cmd/godoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;godoc&lt;/code&gt; の実行モジュールは &lt;code&gt;%GOPATH\bin&lt;/code&gt; フォルダではなく &lt;code&gt;%GOROOT%\bin&lt;/code&gt; フォルダに格納されます。
これで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;godoc time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかやるとパッケージ（この場合は &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージ）のドキュメントが表示されるのですが，さすがにコマンドプロンプトでこれを見るのは辛いので， HTTP サービスを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;godoc -http=&amp;quot;:3000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでブラウザで &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; にアクセスするとドキュメントを見ることができます。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18026303435/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8788/18026303435_7b136c64bb.jpg&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18026303435/&#34;&gt;godoc&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;たとえば &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージはこんなふうに表示されます。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023061102/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8847/18023061102_e5474f1ddc.jpg&#34; alt=&#34;godoc: time package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023061102/&#34;&gt;godoc: time package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;本家サイトと同じですね。&lt;/p&gt;

&lt;h3 id=&#34;godoc-で-modjulian-パッケージを見てみる:7445d9e511c27034085e252d0df49931&#34;&gt;godoc で modjulian パッケージを見てみる&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;機能のパッケージ化&lt;/a&gt;」で作った &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34;&gt;&lt;code&gt;github.com/spiegel-im-spiegel/astrocalc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/modjulian&lt;/code&gt; はどうなっているでしょう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023689372/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8831/18023689372_08795d4e8e.jpg&#34; alt=&#34;godoc: package list&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023689372/&#34;&gt;godoc: package list&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17839022348/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8835/17839022348_4315878c95.jpg&#34; alt=&#34;godoc: modjulian package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17839022348/&#34;&gt;godoc: modjulian package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;全くコメントがないので，さすがに一覧には何もないですが，個別ページには最小限の情報が載っています。凄いなぁ。&lt;/p&gt;

&lt;h2 id=&#34;modjulian-パッケージにドキュメント用のコメントを追記する:7445d9e511c27034085e252d0df49931&#34;&gt;modjulian パッケージにドキュメント用のコメントを追記する&lt;/h2&gt;

&lt;p&gt;では，ソースコードを少しいじってドキュメント用のコードを追記してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/**
 * Astronomical calculation for Golang.
 * These codes are licensed under CC0.
 * http://creativecommons.org/publicdomain/zero/1.0/deed.ja
 */

// modjulian パッケージは
// 修正ユリウス日（Modified Julian Date）の計算を行います。
package modjulian

import &amp;quot;time&amp;quot;

// DayNumber は
// 日付から修正ユリウス通日を取得します。
//
//   t := time.Date(2015, 1, 1, 0, 0, 0, 0, time.UTC)
//   fmt.Print(modjulian.DayNumber(t)) //57023
//
// 時刻（時分秒）は無視します。
// 1970年1月1日以前のグレゴリオ暦では Fliegel の公式を使って計算します。
// 1970年1月1日以降は UNIX Time を用いて通日を取得します。
func DayNumber(t time.Time) int64 {
	if t.Sub(time.Unix(0, 0)) &amp;gt;= 0 {
		return dnUnix(t)
	} else {
		return dnGregorian(t)
	}
}

// dnGregorian は
// Fliegel の公式を使い，日付から修正ユリウス通日を計算します。
//
// 時刻（時分秒）は無視します。
func dnGregorian(t time.Time) int64 {
	y := int64(t.Year())
	m := int64(t.Month())
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := int64(t.Day()) - 1
	return (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
}

// dnUnix は
// UNIX Time で1970年1月1日からの通日を取得し，修正ユリウス通日を計算します。
//
// 時刻（時分秒）は無視します。
// 1970年1月1日以前の日付では正しく計算できません。
func dnUnix(t time.Time) int64 {
	const (
		onday   = int64(86400) //seconds
		baseDay = int64(40587) //Modified Julian Date at January 1, 1970
	)
	return (t.Unix())/onday + baseDay
}
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18002607746/&#34;&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7732/18002607746_9990483503.jpg&#34; alt=&#34;godoc: package list&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18002607746/&#34;&gt;godoc: package list&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17408544863/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8897/17408544863_f0f5649e32.jpg&#34; alt=&#34;godoc: modjulian 2&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17408544863/&#34;&gt;godoc: modjulian 2&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;日本語ですみません。
英語不得手なもので。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;パッケージのコメントは &lt;code&gt;package&lt;/code&gt; 指定の直前のコメントが有効になる。（ファイル先頭のコメントは反映されない）&lt;/li&gt;
&lt;li&gt;パッケージリストの説明はパッケージ・コメントの最初の1文のみ表示される（日本語の句読点も理解しているらしい）&lt;/li&gt;
&lt;li&gt;関数等のコメントはそれぞれの記述の直前のコメントが有効になる。&lt;/li&gt;
&lt;li&gt;基本的に改行は無視される。ただし空行があれば別のパラグラフと理解しているようだ。&lt;/li&gt;
&lt;li&gt;空白文字2文字のインデントでコード記述領域（HTML 的には &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 要素）とみなしているらしい。コードを書く必要はないけど。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上の例では説明のためにコメント内にサンプルコードを載せましたが，サンプルコードを記述するのであればもっとスマートな方法があります。
それはテストにサンプルコードを含める方法です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian_test

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func ExampleDayNumber() {
	t := time.Date(2015, 1, 1, 0, 0, 0, 0, time.UTC)
	fmt.Print(modjulian.DayNumber(t))
	// Output:
	// 57023
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなテスト &lt;code&gt;example_test.go&lt;/code&gt; を作ると，ドキュメントが以下のようになります。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17843944479/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5327/17843944479_024f2f4073.jpg&#34; alt=&#34;godoc: modjulian 3&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17843944479/&#34;&gt;godoc: modjulian 3&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;もちろん，テストもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
=== RUN   ExampleDayNumber
--- PASS: ExampleDayNumber (0.00s)
PASS
ok      github.com/spiegel-im-spiegel/astrocalc/modjulian       2.755s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この仕組みを使えばサンプルコードを常に最新の仕様にマッチさせることが可能になります。
プログラマにとってドキュメントで一番欲しいのはサンプルコードなので，サンプルコードさえ正しければ，他はそれほど詳細に書かなくても推測できます。
そういう意味で，このようなテストと連動したドキュメント・フレームワークはなかなかおもしろいと思います。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:7445d9e511c27034085e252d0df49931&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/megu_ma/items/2066aef2f8c7f0ce2cc3&#34;&gt;Go で godoc を使えるようにする〜godoc のインストール〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/26/go-code-review/&#34;&gt;Go言語のコードレビュー | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://papaeye.tumblr.com/post/92328649161/go&#34;&gt;Go コードのレビュー時によくされるコメント - build error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20131101/1383285018&#34;&gt;testingパッケージのExamplesについて - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swdyh.tumblr.com/post/55771477125/go-example&#34;&gt;GoのExampleテストが便利 : swdyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20140225/1393302743&#34;&gt;godoc.org への掲載方法を調べた - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
</feed>
