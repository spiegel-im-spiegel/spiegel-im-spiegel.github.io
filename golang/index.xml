<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>プログラミング言語 Go - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/golang/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-13T22:16:34+0900:/hugo</id>
	<updated>2015-09-13T22:16:34+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>go get コマンドでパッケージを管理する - プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/go-get-package/" />
		<id>tag:text.Baldanders.info,2015-09-13T22:16:34+0900:/golang/go-get-package/</id>
		<published>2015-09-13T22:16:34+0900</published>
		
		<summary>今回は Go 言語のパッケージ管理について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/a52a47942fd3946bb583&#34;&gt;はじめての Go 言語 (on Windows) その3 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;package:8b97edd0464c06b0047a48749e4a869e&#34;&gt;Go のパッケージ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/hello/&#34; title=&#34;インストールから Hello World まで&#34;&gt;前回&lt;/a&gt;の最後に載せた hello.go をもう一度を挙げてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	fmt.Println(&amp;quot;Hello World!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初の宣言文 &lt;code&gt;package main&lt;/code&gt; はこのファイルが &lt;code&gt;main&lt;/code&gt; パッケージに属することを示している。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では &lt;code&gt;main&lt;/code&gt; パッケージにある &lt;code&gt;main&lt;/code&gt; 関数がプログラム実行時の起点となる。
C 言語などと異なり， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では &lt;code&gt;main&lt;/code&gt; 関数に渡す引数はなく  &lt;code&gt;main&lt;/code&gt; 関数が返す返り値もない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import &amp;quot;fmt&amp;quot;&lt;/code&gt; はパッケージ &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt; を呼び出すもので，ソースファイルの最初の方でまとめて呼び出す。
複数のパッケージを呼び出す場合は以下のように&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと &lt;code&gt;( )&lt;/code&gt; で囲む。
ちなみに，パッケージ &lt;a href=&#34;https://golang.org/pkg/flag/&#34; title=&#34;flag - The Go Programming Language&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt; はコマンドライン引数を処理するためのパッケージである（これがあるので &lt;code&gt;main&lt;/code&gt; 関数に引数は要らないわけ）。&lt;/p&gt;

&lt;p&gt;パッケージの関数等を使う際は &lt;code&gt;fmt.Println&lt;/code&gt; のように &lt;code&gt;packagename.&lt;/code&gt; を名前の前に付ける。&lt;/p&gt;

&lt;h3 id=&#34;gofmt:8b97edd0464c06b0047a48749e4a869e&#34;&gt;gofmt&lt;/h3&gt;

&lt;p&gt;余談だが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではソースコードを整形するための &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;&lt;code&gt;gofmt&lt;/code&gt;&lt;/a&gt; コマンドが存在する。
このコマンドはコンパイラからも &lt;code&gt;go fmt&lt;/code&gt; で呼び出すことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go help fmt
usage: go fmt [-n] [-x] [packages]

Fmt runs the command &#39;gofmt -l -w&#39; on the packages named
by the import paths.  It prints the names of the files that are modified.

For more about gofmt, see &#39;go doc cmd/gofmt&#39;.
For more about specifying packages, see &#39;go help packages&#39;.

The -n flag prints commands that would be executed.
The -x flag prints commands as they are executed.

To run gofmt with specific options, run gofmt itself.

See also: go fix, go vet.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は比較的冗長な表現を許容している。
こういうタイプの言語にはとっつきやすい利点はあるが，記述形式を巡って宗教論争が起きることも多い（あるいはソースの品質を落とすコーディングというのも存在する）。
そこで &lt;code&gt;gofmt&lt;/code&gt; コマンドを使ってある程度記述形式を統一することで，この手の混乱を避ける狙いがある。&lt;/p&gt;

&lt;h2 id=&#34;external:8b97edd0464c06b0047a48749e4a869e&#34;&gt;外部パッケージ&lt;/h2&gt;

&lt;p&gt;パッケージの import は &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt; のような標準ライブラリの他に任意のライブラリをパッケージとして含めることができる。
またインターネット上の GitHub などにある repository からパッケージを取得することもできる。
外部パッケージを取り込むために &lt;code&gt;go get&lt;/code&gt; コマンドが用意されている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go help get
usage: go get [-d] [-f] [-fix] [-insecure] [-t] [-u] [build flags] [packages]

Get downloads and installs the packages named by the import paths,
along with their dependencies.

The -d flag instructs get to stop after downloading the packages; that is,
it instructs get not to install the packages.

The -f flag, valid only when -u is set, forces get -u not to verify that
each package has been checked out from the source control repository
implied by its import path. This can be useful if the source is a local fork
of the original.

The -fix flag instructs get to run the fix tool on the downloaded packages
before resolving dependencies or building the code.

The -insecure flag permits fetching from repositories and resolving
custom domains using insecure schemes such as HTTP. Use with caution.

The -t flag instructs get to also download the packages required to build
the tests for the specified packages.

The -u flag instructs get to use the network to update the named packages
and their dependencies.  By default, get uses the network to check out
missing packages but does not use it to look for updates to existing packages.

Get also accepts build flags to control the installation. See &#39;go help build&#39;.

When checking out or updating a package, get looks for a branch or tag
that matches the locally installed version of Go. The most important
rule is that if the local installation is running version &amp;quot;go1&amp;quot;, get
searches for a branch or tag named &amp;quot;go1&amp;quot;. If no such version exists it
retrieves the most recent version of the package.

If the vendoring experiment is enabled (see &#39;go help gopath&#39;),
then when go get checks out or updates a Git repository,
it also updates any git submodules referenced by the repository.

For more about specifying packages, see &#39;go help packages&#39;.

For more about how &#39;go get&#39; finds source code to
download, see &#39;go help importpath&#39;.

See also: go build, go install, go clean.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば &lt;a href=&#34;https://github.com/mitchellh/cli&#34;&gt;https://github.com/mitchellh/cli&lt;/a&gt; にあるパッケージを取得する場合には以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -v github.com/mitchellh/cli
github.com/mitchellh/cli (download)
Fetching https://golang.org/x/crypto/ssh/terminal?go-get=1
Parsing meta tags from https://golang.org/x/crypto/ssh/terminal?go-get=1 (status code 200)
get &amp;quot;golang.org/x/crypto/ssh/terminal&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/crypto&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/crypto&amp;quot;} at https://golang.org/x/crypto/ssh/terminal?go-get=1
get &amp;quot;golang.org/x/crypto/ssh/terminal&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/crypto?go-get=1
Parsing meta tags from https://golang.org/x/crypto?go-get=1 (status code 200)
golang.org/x/crypto (download)
golang.org/x/crypto/ssh/terminal
github.com/mitchellh/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もし取得するパッケージが別のパッケージを呼び出している場合でも，依存関係ごとまとめて取得できる。
取得したパッケージをソースコード上で呼び出すには&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/mitchellh/cli&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述する。
URL（の scheme を除いた部分）をそのまま記述するのがポイントである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では， &lt;code&gt;import&lt;/code&gt; で指定するパッケージの path と repository の URL がそのまま連動していて， &lt;code&gt;go get&lt;/code&gt; コマンドでパッケージ内の依存関係を解決する際にもパッケージの path を URL と解釈してパッケージを取得しようとする。&lt;/p&gt;

&lt;p&gt;実際にコード上でパッケージを使用する際はパッケージの path のベース名がコード上のパッケージ名になる。
&lt;code&gt;github.com/mitchellh/cli&lt;/code&gt; パッケージなら &lt;code&gt;cli.Run()&lt;/code&gt; のように記述する。
このパッケージ名が被る場合などは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import mcli &amp;quot;github.com/mitchellh/cli&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとする。&lt;/p&gt;

&lt;h2 id=&#34;gopath-環境変数:8b97edd0464c06b0047a48749e4a869e&#34;&gt;GOPATH 環境変数&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; コマンドでは，環境変数 &lt;code&gt;GOPATH&lt;/code&gt; に取得したソースコードやコンパイル後のモジュールを格納する。
&lt;code&gt;GOPATH&lt;/code&gt; 環境変数がないと以下のように怒られる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go get -v github.com/mitchellh/cli
package github.com/mitchellh/cli: cannot download, $GOPATH not set. For more details see: go help gopath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と怒られる。
&lt;code&gt;GOPATH&lt;/code&gt; の詳しい解説は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go help gopath
The Go path is used to resolve import statements.
It is implemented by and documented in the go/build package.

The GOPATH environment variable lists places to look for Go code.
On Unix, the value is a colon-separated string.
On Windows, the value is a semicolon-separated string.
On Plan 9, the value is a list.

GOPATH must be set to get, build and install packages outside the
standard Go tree.

Each directory listed in GOPATH must have a prescribed structure:

The src directory holds source code.  The path below src
determines the import path or executable name.

The pkg directory holds installed package objects.
As in the Go tree, each target operating system and
architecture pair has its own subdirectory of pkg
(pkg/GOOS_GOARCH).

If DIR is a directory listed in the GOPATH, a package with
source in DIR/src/foo/bar can be imported as &amp;quot;foo/bar&amp;quot; and
has its compiled form installed to &amp;quot;DIR/pkg/GOOS_GOARCH/foo/bar.a&amp;quot;.

The bin directory holds compiled commands.
Each command is named for its source directory, but only
the final element, not the entire path.  That is, the
command with source in DIR/src/foo/quux is installed into
DIR/bin/quux, not DIR/bin/foo/quux.  The &amp;quot;foo/&amp;quot; prefix is stripped
so that you can add DIR/bin to your PATH to get at the
installed commands.  If the GOBIN environment variable is
set, commands are installed to the directory it names instead
of DIR/bin.

Here&#39;s an example directory layout:

    GOPATH=/home/user/gocode

    /home/user/gocode/
        src/
            foo/
                bar/               (go code in package bar)
                    x.go
                quux/              (go code in package main)
                    y.go
        bin/
            quux                   (installed command)
        pkg/
            linux_amd64/
                foo/
                    bar.a          (installed package object)

Go searches each directory listed in GOPATH to find source code,
but new packages are always downloaded into the first directory
in the list.

See https://golang.org/doc/code.html for an example.

Internal Directories

Code in or below a directory named &amp;quot;internal&amp;quot; is importable only
by code in the directory tree rooted at the parent of &amp;quot;internal&amp;quot;.
Here&#39;s an extended version of the directory layout above:

    /home/user/gocode/
        src/
            crash/
                bang/              (go code in package bang)
                    b.go
            foo/                   (go code in package foo)
                f.go
                bar/               (go code in package bar)
                    x.go
                internal/
                    baz/           (go code in package baz)
                        z.go
                quux/              (go code in package main)
                    y.go


The code in z.go is imported as &amp;quot;foo/internal/baz&amp;quot;, but that
import statement can only appear in source files in the subtree
rooted at foo. The source files foo/f.go, foo/bar/x.go, and
foo/quux/y.go can all import &amp;quot;foo/internal/baz&amp;quot;, but the source file
crash/bang/b.go cannot.

See https://golang.org/s/go14internal for details.

Vendor Directories

Go 1.5 includes experimental support for using local copies
of external dependencies to satisfy imports of those dependencies,
often referred to as vendoring. Setting the environment variable
GO15VENDOREXPERIMENT=1 enables that experimental support.

When the vendor experiment is enabled,
code below a directory named &amp;quot;vendor&amp;quot; is importable only
by code in the directory tree rooted at the parent of &amp;quot;vendor&amp;quot;,
and only using an import path that omits the prefix up to and
including the vendor element.

Here&#39;s the example from the previous section,
but with the &amp;quot;internal&amp;quot; directory renamed to &amp;quot;vendor&amp;quot;
and a new foo/vendor/crash/bang directory added:

    /home/user/gocode/
        src/
            crash/
                bang/              (go code in package bang)
                    b.go
            foo/                   (go code in package foo)
                f.go
                bar/               (go code in package bar)
                    x.go
                vendor/
                    crash/
                        bang/      (go code in package bang)
                            b.go
                    baz/           (go code in package baz)
                        z.go
                quux/              (go code in package main)
                    y.go

The same visibility rules apply as for internal, but the code
in z.go is imported as &amp;quot;baz&amp;quot;, not as &amp;quot;foo/vendor/baz&amp;quot;.

Code in vendor directories deeper in the source tree shadows
code in higher directories. Within the subtree rooted at foo, an import
of &amp;quot;crash/bang&amp;quot; resolves to &amp;quot;foo/vendor/crash/bang&amp;quot;, not the
top-level &amp;quot;crash/bang&amp;quot;.

Code in vendor directories is not subject to import path
checking (see &#39;go help importpath&#39;).

When the vendor experiment is enabled, &#39;go get&#39; checks out
submodules when checking out or updating a git repository
(see &#39;go help get&#39;).

The vendoring semantics are an experiment, and they may change
in future releases. Once settled, they will be on by default.

See https://golang.org/s/go15vendor for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のバージョン 1.5 から Internal Packages や Vendoring の機能が追加された。これについてはいずれ紹介する予定）&lt;/p&gt;

&lt;p&gt;また &lt;code&gt;go get&lt;/code&gt; コマンドでは内部でソースコード管理ツールを呼び出す。
呼び出される可能性のあるツールは以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;svn : &lt;a href=&#34;http://subversion.apache.org/&#34; title=&#34;Apache Subversion&#34;&gt;Subversion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hg : &lt;a href=&#34;http://mercurial.selenic.com/&#34; title=&#34;Mercurial SCM&#34;&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git : &lt;a href=&#34;http://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bzr : &lt;a href=&#34;http://bazaar.canonical.com/&#34; title=&#34;Bazaar&#34;&gt;Bazaar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば get コマンド実行時に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go get -v github.com/spf13/hugo
go: missing Mercurial command. See http://golang.org/s/gogetcmd
package github.com/spf13/hugo/commands
        imports bitbucket.org/pkg/inflect: exec: &amp;quot;hg&amp;quot;: executable file not found in %PATH%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとエラーが出たらいずれかのバージョン管理ツール（この場合は &lt;a href=&#34;http://mercurial.selenic.com/&#34; title=&#34;Mercurial SCM&#34;&gt;Mercurial&lt;/a&gt;）がないことになる。
必要に応じてインストールしておくとよい。&lt;/p&gt;

&lt;h3 id=&#34;proxy-設定:8b97edd0464c06b0047a48749e4a869e&#34;&gt;Proxy 設定&lt;/h3&gt;

&lt;p&gt;GitHub や Bitbucket 等のよく知られた repository から取得する場合は直に上記のコマンドを起動するが，それ以外のサイトでは HTTP/HTTPS でいったん fetch してから，どのコマンドで取得するか判断してるようだ。
このとき Firewall/Proxy で阻まれている環境ではエラーになってしまう。&lt;/p&gt;

&lt;p&gt;この場合は Proxy の設定が必要。
設定には &lt;code&gt;http_proxy&lt;/code&gt; および &lt;code&gt;https_proxy&lt;/code&gt; 環境変数をセットする。たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;SET http_proxy=http://username:password@proxy.exsample.com:8080/
SET https_proxy=%http_proxy%
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;go-get-コマンドでツールをインストールする:8b97edd0464c06b0047a48749e4a869e&#34;&gt;go get コマンドでツールをインストールする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; ではライブラリだけではなく，ツールそのものもパッケージとしてダウンロード→インストールできる。&lt;/p&gt;

&lt;p&gt;たとえば静的サイト・ジェネレータの &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; は以下のように &lt;code&gt;go get&lt;/code&gt; コマンド一発で依存関係ごとパッケージを取得しインストールまで自動で行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace&amp;gt;mkdir hugo

C:\workspace&amp;gt;cd hugo

C:\workspace\hugo&amp;gt;SET GOPATH=C:\workspace\hugo

C:\workspace\hugo&amp;gt;go get -v github.com/spf13/hugo
github.com/spf13/hugo (download)
github.com/kardianos/osext (download)
github.com/spf13/afero (download)
github.com/spf13/cast (download)
github.com/spf13/jwalterweatherman (download)
github.com/spf13/cobra (download)
github.com/cpuguy83/go-md2man (download)
github.com/russross/blackfriday (download)
github.com/shurcooL/sanitized_anchor_name (download)
github.com/inconshreveable/mousetrap (download)
github.com/spf13/pflag (download)
github.com/spf13/fsync (download)
github.com/PuerkitoBio/purell (download)
github.com/opennota/urlesc (download)
github.com/miekg/mmark (download)
github.com/BurntSushi/toml (download)
Fetching https://gopkg.in/yaml.v2?go-get=1
Parsing meta tags from https://gopkg.in/yaml.v2?go-get=1 (status code 200)
get &amp;quot;gopkg.in/yaml.v2&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;gopkg.in/yaml.v2&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://gopkg.in/yaml.v2&amp;quot;} at https://gopkg.in/yaml.v2?go-get=1
gopkg.in/yaml.v2 (download)
github.com/spf13/viper (download)
github.com/kr/pretty (download)
github.com/kr/text (download)
github.com/magiconair/properties (download)
github.com/mitchellh/mapstructure (download)
Fetching https://golang.org/x/text/transform?go-get=1
Parsing meta tags from https://golang.org/x/text/transform?go-get=1 (status code 200)
get &amp;quot;golang.org/x/text/transform&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/text&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/text&amp;quot;} at https://golang.org/x/text/transform?go-get=1
get &amp;quot;golang.org/x/text/transform&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/text?go-get=1
Parsing meta tags from https://golang.org/x/text?go-get=1 (status code 200)
golang.org/x/text (download)
Fetching https://golang.org/x/text/unicode/norm?go-get=1
Parsing meta tags from https://golang.org/x/text/unicode/norm?go-get=1 (status code 200)
get &amp;quot;golang.org/x/text/unicode/norm&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/text&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/text&amp;quot;} at https://golang.org/x/text/unicode/norm?go-get=1
get &amp;quot;golang.org/x/text/unicode/norm&amp;quot;: verifying non-authoritative meta tag
bitbucket.org/pkg/inflect (download)
github.com/dchest/cssmin (download)
github.com/eknkc/amber (download)
github.com/yosssi/ace (download)
github.com/spf13/nitro (download)
github.com/gorilla/websocket (download)
Fetching https://gopkg.in/fsnotify.v1?go-get=1
Parsing meta tags from https://gopkg.in/fsnotify.v1?go-get=1 (status code 200)
get &amp;quot;gopkg.in/fsnotify.v1&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;gopkg.in/fsnotify.v1&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://gopkg.in/fsnotify.v1&amp;quot;} at https://gopkg.in/fsnotify.v1?go-get=1
gopkg.in/fsnotify.v1 (download)
github.com/shurcooL/sanitized_anchor_name
github.com/spf13/afero
github.com/inconshreveable/mousetrap
github.com/spf13/hugo/bufferpool
github.com/kr/text
github.com/kardianos/osext
github.com/spf13/jwalterweatherman
github.com/spf13/pflag
github.com/russross/blackfriday
github.com/opennota/urlesc
github.com/BurntSushi/toml
github.com/PuerkitoBio/purell
gopkg.in/yaml.v2
github.com/spf13/cast
github.com/kr/pretty
github.com/magiconair/properties
github.com/spf13/fsync
github.com/cpuguy83/go-md2man/md2man
github.com/spf13/hugo/hugofs
github.com/mitchellh/mapstructure
golang.org/x/text/transform
bitbucket.org/pkg/inflect
github.com/dchest/cssmin
github.com/miekg/mmark
github.com/eknkc/amber/parser
github.com/spf13/cobra
github.com/yosssi/ace
golang.org/x/text/unicode/norm
github.com/spf13/nitro
github.com/spf13/hugo/parser
github.com/spf13/viper
github.com/eknkc/amber
github.com/gorilla/websocket
github.com/spf13/hugo/utils
gopkg.in/fsnotify.v1
github.com/spf13/hugo/transform
github.com/spf13/hugo/watcher
github.com/spf13/hugo/livereload
github.com/spf13/hugo/helpers
github.com/spf13/hugo/source
github.com/spf13/hugo/target
github.com/spf13/hugo/tpl
github.com/spf13/hugo/hugolib
github.com/spf13/hugo/create
github.com/spf13/hugo/commands
github.com/spf13/hugo

C:\workspace\hugo&amp;gt;bin\hugo.exe version
Hugo Static Site Generator v0.15-DEV BuildDate: 2015-09-05T13:45:44+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行モジュールは &lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダに置かれる。
実際に使う場合は， &lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダに &lt;code&gt;PATH&lt;/code&gt; を通すか， &lt;code&gt;PATH&lt;/code&gt; の通った場所にコピーすればよい。&lt;/p&gt;

&lt;p&gt;パッケージをアップデートする場合は &lt;code&gt;-u&lt;/code&gt; オプションを組み合わせる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\hugo&amp;gt;go get -u -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:8b97edd0464c06b0047a48749e4a869e&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/doc/code.html&#34;&gt;How to Write Go Code - The Go Programming Language&lt;/a&gt; （&lt;a href=&#34;http://golang-jp.org/doc/code.html&#34;&gt;日本語版&lt;/a&gt;は情報が少し古いので注意）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>インストールから Hello World まで - プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/hello/" />
		<id>tag:text.Baldanders.info,2015-09-12T11:26:44+0900:/golang/hello/</id>
		<published>2015-09-12T11:26:44+0900</published>
		<updated>2015-09-12T11:26:44+0900</updated>
		<summary>みんなだいすき Hello World!</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/dca0df389df1470bdbfa&#34;&gt;はじめての Go 言語 (on Windows) - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;最初に言い訳しておくと，現時点での私の主要マシンは Windows 機なため， Windows 上での動作を前提としている。
ただし Go 言語コンパイラはマルチプラットフォームに対応しているため，操作に関してはほぼ同じと考えてよい。
Linux 等のマシンを使っている方は適当に読み替えて欲しい（簡単でしょ）。&lt;/p&gt;

&lt;h2 id=&#34;go-コンパイラのインストール-on-windows:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;Go コンパイラのインストール（on Windows）&lt;/h2&gt;

&lt;p&gt;Go言語はコンパイル言語である。
プラットフォームとして FreeBSD, Lunux, Mac OS X, Windows などがある。
また，クロスコンパイルが比較的容易なことでも知られている。&lt;/p&gt;

&lt;p&gt;現時点（2015-09-08）での Go コンパイラの最新版は 1.5.1。
Windows 版では&lt;a href=&#34;https://golang.org/dl/&#34;&gt;ダウンロードページ&lt;/a&gt;にインストール・パッケージが用意されているので，ダウンロードしてインストールすればよい。&lt;/p&gt;

&lt;p&gt;Go コンパイラが最低限動作するのに必要な環境変数は（&lt;code&gt;PATH&lt;/code&gt; を除けば） &lt;code&gt;GOROOT&lt;/code&gt; のみである。
Windows 版の場合は，インストール・パッケージからインストールすれば自動的に環境変数もセットされる。
セットされていない場合は手動で &lt;code&gt;GOROOT&lt;/code&gt; にインストール先のフォルダを指定すればいい。
（参考： &lt;a href=&#34;http://qiita.com/rohinomiya/items/cf5236678b3459da9017&#34;&gt;Windows - SETX コマンドで環境変数を永続的に設定する - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;インストールができたら動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go version
go version go1.5 windows/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;みんなだいすき-hello-world:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;みんなだいすき Hello World!&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	fmt.Println(&amp;quot;Hello World!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このソースコード &lt;code&gt;hello.go&lt;/code&gt; を compile and run。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run hello.go
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおっ，動いた動いた。じゃあこれを build して，実行モジュールを起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go build hello.go

C:&amp;gt;hello.exe
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よし。ちゃんと動くようだな。
今回はここまで。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-1-5-系へのアップグレードに関する注意点:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;【おまけ】 1.5 系へのアップグレードに関する注意点&lt;/h2&gt;

&lt;p&gt;Windows 版（64bit）のインストールパッケージで 1.4 系から 1.5 系へ上書きインストールしようとしたらエラーになった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/20692976166/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5759/20692976166_a38bee50d8_o.png&#34; alt=&#34;Install Error&#34; title=&#34;Install Error&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この場合は，コントロールパネルの「プログラムと機能」で既存のバージョンをアンインストールしてから最新バージョンをインストールし直せば OK。&lt;/p&gt;

&lt;p&gt;1.5 系から Go コンパイラ自身で自身をコンパイルできるようになった。
この影響で， Linux 環境などでは 1.5 系を導入するために 1.4 系の Go コンパイラをあらかじめインストールする必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taji-taji/items/4c43e126e67d65a219e3&#34;&gt;Go 1.3 から 1.5 へのアップデートでエラー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ブックマーク:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;The Go Programming Language&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/&#34;&gt;git repositories (Google)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang&#34;&gt;git repositories (GitHub)&lt;/a&gt; : mirror&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/&#34;&gt;golang-jp - The Go Programming Language&lt;/a&gt; : 本家の日本語訳サイト（一部のみ）。（&lt;a href=&#34;http://golang.jp/&#34;&gt;golang.jp&lt;/a&gt; は古いので参考にしない方がいい，らしい）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語に関するブックマーク - プログラミング言語 Go</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/bookmark/" />
		<id>tag:text.Baldanders.info,2015-09-11T17:58:42+0900:/golang/bookmark/</id>
		<published>2015-09-11T17:58:42+0900</published>
		<updated>2015-09-12T10:20:00+0900</updated>
		<summary>本業が忙しくて Go 言語をかまってあげる暇がないのだが，ブックマークばっかり溜まっていくので，定期的に吐き出しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/98d49ac456485b007a15&#34;&gt;Go 言語に関するブックマーク - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;本業が忙しくて Go 言語をかまってあげる暇がないのだが，ブックマークばっかり溜まっていくので，定期的に吐き出しておく。&lt;/p&gt;

&lt;h2 id=&#34;official:9bacfa348e5fe42acc9342a16675997d&#34;&gt;公式サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;The Go Programming Language&lt;/a&gt; : 2015年9月8日時点での最新は 1.5.1

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/&#34;&gt;git repositories (Google)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang&#34;&gt;git repositories (GitHub)&lt;/a&gt; : mirror&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/&#34;&gt;golang-jp - The Go Programming Language&lt;/a&gt; : 本家の日本語訳サイト。（&lt;a href=&#34;http://golang.jp/&#34;&gt;golang.jp&lt;/a&gt; は参考にしない方がいい，らしい）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 1.5 Released.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.5&#34;&gt;Go 1.5 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.5&#34;&gt;Go 1.5 Release Notes - The Go Programming Language&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1e8kOo3r51b2BWtTs_1uADIA5djfXhPT36s6eHVRIvaU/edit&#34;&gt;Go 1.4 &amp;ldquo;Internal&amp;rdquo; Packages&lt;/a&gt; : Internal Packages は 1.5 で GOPATH まで拡張された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;Go 1.5 Vendor Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;spec:9bacfa348e5fe42acc9342a16675997d&#34;&gt;言語仕様に関すること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kazusa-qooq/items/40f9ea3e72406d845b10&#34;&gt;Golangの基本文法をおさえてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tanaka0325/items/9c61a022cd32be0c65a6&#34;&gt;Golang の 数値型 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/makoto_kw/items/0638c0af1002647e3f7a&#34;&gt;忙しい人のためのA Tour of Go - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/modal_soul/items/e49480e5692597fda975&#34;&gt;Goのfor rangeで思った値が取れなかった話 - Qiita&lt;/a&gt; : ちょっとしたミス&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kwi/items/185bb3fe0d60ca765ab0&#34;&gt;Go - unsafe が unsafe なケース (1) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20130919023425.htm&#34;&gt;Big Sky :: Go言語でインタフェースの変更がそれ程問題にならない理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taji-taji/items/5a4f17bcf5b819954cc1&#34;&gt;import 書き方まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;string:9bacfa348e5fe42acc9342a16675997d&#34;&gt;文字列操作または変換&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt;, &lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;rune&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;Strings, bytes, runes and characters in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knightso.hateblo.jp/entry/2014/06/24/090719&#34;&gt;Go言語のstring, runeの正体とは？ - golang - The Round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Sheile/items/ba51ac9091e09927b95c&#34;&gt;Go言語は空文字に対してstrings.splitを掛けると1要素の配列を返す - Qiita&lt;/a&gt; : コメントに別解あり&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hokaccha/items/3d3f45b5927b4584dbac&#34;&gt;golang - Goでマルチバイトが混在した文字列をtruncateする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matope.hatenablog.com/entry/2014/04/22/101127&#34;&gt;Golangでの文字列・数値変換 - 小野マトペの納豆ペペロンチーノ日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/540c2af34b1c381c37c1&#34;&gt;Go で euc-jp や sjis の csv ファイルを読み込むには変換用のリーダーを1つかませるだけでよかった - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/2bb83b29baeae2433a79&#34;&gt;Goでは文字列連結はコストの高い操作 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37&#34;&gt;Goの文字列結合のパフォーマンス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yoya/items/23ac2c490625c5d47ad9&#34;&gt;Go言語で SplitMultiSep (複数種の区切り文字列で分解) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文字列型と他の型との相互変換を覚えておけば，案外どうにかなるものである。（文字列操作が処理のメインならスクリプト言語のほうが有利だけどね）&lt;/p&gt;

&lt;h3 id=&#34;slice:9bacfa348e5fe42acc9342a16675997d&#34;&gt;配列&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Making_slices_maps_and_channels&#34;&gt;make&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/golang-slice-internals2&#34;&gt;Go のスライスでハマッたところ - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, および後述の &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; は組み込みの型だが内部構造と状態を持つため， &lt;a href=&#34;http://golang.org/ref/spec#Allocation&#34;&gt;new&lt;/a&gt; ではなく &lt;a href=&#34;http://golang.org/ref/spec#Making_slices_maps_and_channels&#34;&gt;make&lt;/a&gt; を使う。&lt;/p&gt;

&lt;h3 id=&#34;goroutine:9bacfa348e5fe42acc9342a16675997d&#34;&gt;並行処理と並列処理&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20130414/1365960707&#34;&gt;Go の並行処理 - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/eca21ed935115e5da2e8&#34;&gt;Go: 計算なしのFizzBuzz - Qiita&lt;/a&gt; : channel の説明するのにいいかも&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuki2006/items/3f90e53ce74c6cff1608&#34;&gt;Goのchannelの送受信用の型について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/c0ffdd28001ee0e9320d&#34;&gt;golang - x/net/context の実装パターン - Qiita&lt;/a&gt; : &lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;golang.org/x/net/context&lt;/a&gt; を使って並行処理を細かく制御。 Domain-Driven あるいは Context-Driven な設計でも使えそう。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 言語で複数 CPU を使った並列処理を行うには明示的な設定が必要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/07/30/golang-parallel-by-cpu/&#34;&gt;Go言語でCPU数に応じて並列処理数を制限する | SOTA&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ymko/items/554e3630fefdc29393a8&#34;&gt;やはり俺のgolangがCPUを一つしか使わないのはまちがっている。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;proc:9bacfa348e5fe42acc9342a16675997d&#34;&gt;プロセス間同期&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shanxia1218/items/7fb15f50ec645f114bc7&#34;&gt;Go言語でプロセス間同期処理 - Qiita&lt;/a&gt; : Windows の Mutex を使ってプロセス間通信を行う&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-code:9bacfa348e5fe42acc9342a16675997d&#34;&gt;パッケージやサンプルコード&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sago35/items/cc9ed3dc38d0b2f19bf9&#34;&gt;Go用のGoogle製のGUIツールキットgxuiのインストール(Windows版) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/bfc1eb6407cbdfebbd18&#34;&gt;goでLチカの練習　その２ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/rubytomato@github/items/638299aabb7922cbef59&#34;&gt;Go - Revel templatesを使ったサンプルアプリケーション - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/20bc61175ce4a33b7365&#34;&gt;goでwindowsでwindow - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.daisukeyamashita.com/post/1209.html&#34;&gt;Go言語でパッケージを作成して世界に公開する方法 at ミネルヴァの梟は黄昏とともに飛び始める（山下 大介 公式ブログ）&lt;/a&gt; : パッケージの作り方なんだけど、情報が古すぎた orz&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/e6fa2bd1527c257bb9c9&#34;&gt;goでwindowsでRS232C - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohisama/serial&#34;&gt;ohisama/serial&lt;/a&gt; (forkd from &lt;a href=&#34;https://github.com/lnmx/serial&#34;&gt;lnmx/serial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/12dccdcdfc5082c22e72&#34;&gt;goでwindowsでRS232C その２ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/9f05679f25cfc9c3ecfc&#34;&gt;goでwindowsでキースキャン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/modal_soul/items/83b0930d90d44e006768&#34;&gt;Goのencoding/jsonでタグが反映されなくてハマったしょうもない話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mitsuse/items/8669bf54d2310b3e68a1&#34;&gt;gocron でジョブスケジューリング - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/carlescere/scheduler&#34;&gt;gcarlescere/scheduler&lt;/a&gt; のほうがおすすめらしいw&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/51b0f45496e5143e2e63&#34;&gt;Google ChromeのテキストエリアをEmacsで編集する&amp;rsquo;Edit with Emacs&amp;rsquo;から任意のエディタを起動するデーモンをGo 1.4 for Windowsで書いてみたわけだが、エディタがブラウザの後ろに出てしまってダメかもしれない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/9db22c9684cc0586b737&#34;&gt;golangでprivateなエイリアスのポインタを元の型に戻す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/8f56f663d6da4dee9f64&#34;&gt;Go の expvar パッケージを使ってアプリケーションのメトリクスを公開する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minodisk/items/d96a0673223f36315ce7&#34;&gt;ジェネレートしたコードを gofmt / goimports する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/b9c0f92851454dc6d461&#34;&gt;Go言語: ファイルの存在をちゃんとチェックする実装? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/e5e78e6864a60dc851a6&#34;&gt;Golangで、ファイル一覧取得（最新順出力） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/d8aaaf5442d84a7961e1&#34;&gt;golang - Go小ネタ: 正規表現を全角半角問わずマッチするよう変換する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/c542e1b59bc94dc741e3&#34;&gt;Goのバッチで統計を取得するAPIを用意しておくと便利 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masatsugumatsus/items/e28254ff52963705ce7f&#34;&gt;Mithril＋golang Gin を試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/c47b9e3ea8d028e95588&#34;&gt;大学入試問題をGoで解いてみる - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/math/big/&#34;&gt;math/big&lt;/a&gt; パッケージを使って大きな数を計算する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yodatomato/items/8013f728bbf4358e9425&#34;&gt;GoでGoogleCalendarAPIv3を叩く（APIキー） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cli:9bacfa348e5fe42acc9342a16675997d&#34;&gt;コマンドライン・ツール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yuuki.hatenablog.com/entry/go-cli-unix&#34;&gt;Go言語によるCLIツール開発とUNIX哲学について - ゆううきブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tellme.tokyo/post/2015/06/23/unix_cli_tool_go/&#34;&gt;開発者から見た UNIX 哲学とコマンドラインツールと Go言語 - TELLME.TOKYO&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/b4b4r07/items/df660d82e2de715acda5&#34;&gt;Qiita 版&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/flag/&#34;&gt;flag&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uokada/items/f0e069a751679dcf616d&#34;&gt;Go - コマンドライン引数 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/04/17/232753&#34;&gt;Go言語のflagパッケージを使う - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/flaflasun/items/df5ebb057697da062a08&#34;&gt;Go を使ってコマンドラインツール wordc を作ってみた - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;codegangsta/cli&lt;/a&gt; についての言及あり&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/isaoshimizu/items/71dd2ca2a08ddb607e31&#34;&gt;golang - GoでCLIツール作るのに便利そうなパッケージを集めてみました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/07/15/232207&#34;&gt;C言語とGo言語で標準出力が端末を参照しているかどうかを判定する - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/04/17/panicwrap/&#34;&gt;Go言語のCLIツールのpanicをラップしてクラッシュレポートをつくる | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;io:9bacfa348e5fe42acc9342a16675997d&#34;&gt;入出力処理&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/io/&#34;&gt;io&lt;/a&gt;, &lt;a href=&#34;http://golang.org/pkg/bufio/&#34;&gt;bufio&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/a53b701c8827fe4bfec7&#34;&gt;Go ファイルや標準入力から一行ずつ読み込む - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/5c8cfce81933c5eb9fd0&#34;&gt;Goでファイルを読んで別のgoroutineに渡す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kroton/items/431e6dad9e5e4dbc44cf&#34;&gt;「連結されたgzipを1行ずつ見る」をgolangでやったらハマった - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34;&gt;compress/gzip&lt;/a&gt; と入出力処理の関係&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/curious-eyes/items/2d4b6c20ea47e3efc47b&#34;&gt;bufio.Scannerのend-of-line判断を変更してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kobegdg.blogspot.jp/2013/05/go.html&#34;&gt;KOBE GDG: Go言語　バイナリファイルを扱う&lt;/a&gt; : 任意のオブジェクトをバイト列に変換してファイルに格納&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cgo:9bacfa348e5fe42acc9342a16675997d&#34;&gt;cgo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/cmd/cgo/&#34; title=&#34;cgo - The Go Programming Language&#34;&gt;cgo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2014/c-in-golang-with-cgo.html&#34;&gt;cgoでGoのコードからCの関数を利用する - 1000ch.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://beatsync.net/main/log20141022.html&#34;&gt;cgoでGolangとC++ライブラリをリンクするとき、何が起きているのか - beatsync.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logging:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Logging&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kosuda/items/988c505c2abc5321aba8&#34;&gt;Golang logging library - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.satotaichi.info/logging-frameworks-for-go/&#34;&gt;go言語におけるロギングについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Ets/items/49e8f781990a3b0b3821&#34;&gt;Golangで簡単にログを吐くことを考える - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/cihub/seelog&#34;&gt;seelog&lt;/a&gt; について解説している。私は XML には全くアレルギーがないので無問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sbjib/items/2cef51e572eef0795bc2&#34;&gt;Go言語でdebugログの実現方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;framework:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Web Microframework for Golang&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goji.io/&#34;&gt;Goji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20141021134209.htm&#34;&gt;Big Sky :: golang で最近お気に入りの WAF「Goji」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/a038f1b99e0caee97d3e&#34;&gt;gojiのMiddlewareの使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sys_cat/items/1b8581de1344cc5db6bb&#34;&gt;golang - Gojiを使ってWebビーコン作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/845fcfc58cfd0b30020a&#34;&gt;Google App EngineでGoのウェブアプリケーションをまず動かしてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/45ab414fc11959fc27c7&#34;&gt;Go言語(Go-Json-Rest)でAPIサーバーを立てるときのCORS設定 (Basic認証機能付きも) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/e6597c66c3494d545686&#34;&gt;Goでwebサーバー作るときに考えたこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tchssk/items/cb208f9ccd0a1819bbfa&#34;&gt;Golang の net/url で # を含む文字列を Parse() する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kkdd/items/bd653e3d02546d1aa340&#34;&gt;Golang で OpenStreetMap ファイル（osm.pbf）の読み込み（osmpbf 利用） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masahikoofjoyto/items/f60188f4252e455541d4&#34;&gt;golang - GoのWEBアプリケーション運用について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hachi8833/items/315642ceecb378cabcb4&#34;&gt;golang - go-qmlのWebViewでローカルWebサイトを表示するときの注意 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/2e5fabb707355253b187&#34;&gt;http.Clientのタイムアウトの時間を変更 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kenjiszk/items/7ae842415ec392822612&#34;&gt;golangでhttpを監視するscriptを書いて結果をslackにpostする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/65c4a473a1fdbbf931f0&#34;&gt;Go言語(Go-Json-Rest)のCORSでのハマり。Safariだけでハマった話。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;embed:9bacfa348e5fe42acc9342a16675997d&#34;&gt;ビルド時に情報を各種埋め込みたい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/d643a0ccb6270e8e3734&#34;&gt;Go言語: ビルド時にバージョン情報を埋め込みたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/09/08/211626&#34;&gt;Golangビルド時に、サブパッケージ内の変数をいじる - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/c02d84cfd00f8f442500&#34;&gt;go-bindata でコンパイル時にリソースを埋め込んじゃおう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6b32370532c3eafe1f0e&#34;&gt;golang - Goでビルドバージョン情報を参照できるようにする(Go1.5) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;testing:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Go 言語のテスト・フレームワーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/8717a5982547cfa54ebc&#34;&gt;Go の Test に対する考え方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://straitwalk.hatenablog.com/entry/2014/09/18/232810&#34;&gt;Goでテストを書く - 成らぬは人の為さぬなりけり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/0d589cca7e89b89c29a8&#34;&gt;golang 1.4で追加されたtestingの便利機能(テストの初期化とお片づけ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/11897f6284159919f65a&#34;&gt;gojiのレスポンス結果をテストする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/24fc34ec0c31f6474e6d&#34;&gt;Go Mockでインタフェースのモックを作ってテストする #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20131123/1385189088&#34;&gt;Go でベンチマーク - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Mulyu/items/ed585f2777496f29a725&#34;&gt;go言語でベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ci:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Continuous Integration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dmnlk/items/3fb4e0abb98e39fee275&#34;&gt;Go + Travis CI + Coveralls でCI環境を作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sue445.hatenablog.com/entry/2013/06/01/170607&#34;&gt;GithubにあるリポジトリをTravis CI連携する手順 #junitbook - くりにっき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uchimanajet7.hatenablog.com/entry/2015/03/20/211352&#34;&gt;golangでTravis CIを使ってクロスコンパイルするときにハマったところ #golang #travisci - uchimanajet7のメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atotto/items/b796c31c1755dbec13db&#34;&gt;Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;godoc:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Go 言語のドキュメント・フレームワーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/golang.org/x/tools/cmd/godoc&#34; title=&#34;godoc - GoDoc&#34;&gt;godoc&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/megu_ma/items/2066aef2f8c7f0ce2cc3&#34;&gt;Go で godoc を使えるようにする〜godoc のインストール〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/26/go-code-review/&#34;&gt;Go言語のコードレビュー | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://papaeye.tumblr.com/post/92328649161/go&#34;&gt;Go コードのレビュー時によくされるコメント - build error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20131101/1383285018&#34;&gt;testingパッケージのExamplesについて - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swdyh.tumblr.com/post/55771477125/go-example&#34;&gt;GoのExampleテストが便利 : swdyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20140225/1393302743&#34;&gt;godoc.org への掲載方法を調べた - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;refactoring:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Refactoring&lt;/h2&gt;

&lt;p&gt;リファクタリングには gofmt よりも gorename が使えるという話。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20150113141338.htm&#34;&gt;Big Sky :: golang のリファクタリングには gofmt ではなく、gorename を使おう。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;environment:9bacfa348e5fe42acc9342a16675997d&#34;&gt;開発環境など&lt;/h2&gt;

&lt;h3 id=&#34;integrated-development-environment:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Integrated Development Environment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codezine.jp/article/detail/8374&#34;&gt;EclipseでGoプログラミング！ GoClipseのインストールとGojiフレームワークを使ったWeb APIの作成 （1/6）：CodeZine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ngsm3/items/67620fc4e39219235a23&#34;&gt;WindowsでGolang開発環境構築　IntelliJ IDEA - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/dev/serial/01/android_studio/0001&#34;&gt;第1回　Android Studio，そしてベースとなる「IntelliJ IDEA」とは何か？：Android Studio最速入門～効率的にコーディングするための使い方｜gihyo.jp … 技術評論社&lt;/a&gt; : IntelliJ IDEA についての解説&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/makoto2468/items/3ced77de947ea997e72f&#34;&gt;Go入門@環境構築編(IntelliJ IDEA 14.1.4) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;debug:9bacfa348e5fe42acc9342a16675997d&#34;&gt;デバッガ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tetsuok.hatenablog.com/entry/2012/07/01/062325&#34;&gt;golang でビルド時に最適化をオフにする - tetsuok の旅 blog&lt;/a&gt; : gdb でデバッグする際は最適化を off にするといいという話&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom:9bacfa348e5fe42acc9342a16675997d&#34;&gt;ATOM で Go&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://notchained.hatenablog.com/entry/2014/09/20/104829&#34;&gt;AtomでGoを書く環境を整える（Windows） - Technically, technophobic.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vscode:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Visual Studio Code で Go&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/evalphobia/items/f68396d573c7caf2065b&#34;&gt;VisualStudioCode - Visual Studio CodeでGo言語の設定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/llaughlin/16305f0b91356e93a1c4&#34;&gt;VSCode+Golang&lt;/a&gt; : task.json の設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gb:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Build Tool for Golang&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/constabulary/gb&#34;&gt;constabulary/gb&lt;/a&gt; を使ってプロジェクトベースの環境構築&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/ac0591fef95c2c6e936e&#34;&gt;golang - gbを知ったのでgojiを使ったWEBアプリケーションプロジェクトを管理してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://walledcity.com/supermighty/building-go-projects-with-gb&#34;&gt;Building Go projects with gb - Supermighty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cross:9bacfa348e5fe42acc9342a16675997d&#34;&gt;クロス環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://unknownplace.org/archives/golang-cross-compiling.html&#34;&gt;Goはクロスコンパイルが簡単 - unknownplace.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/02185f51162e92759ebe&#34;&gt;Go のクロスコンパイル環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2015/03/06/&#34;&gt;golang でのクロスコンパイルの留意事項 — KaoriYa&lt;/a&gt; : Windows 環境でクロス環境を構築する際の注意点。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yanolab/items/5a6dfb3c07c94f7c760d&#34;&gt;Golang + Raspberry Pi + LPS331AP で気圧・温度を測定してみた - Qiita&lt;/a&gt; : Raspberry Pi 用のクロス環境例。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gobot.io/&#34;&gt;Gobot - Golang framework for robotics, physical computing, and the Internet of Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/07/22/go1_5-cross-compile/&#34;&gt;Go1.5はクロスコンパイルがより簡単 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ttsuzo/items/64e29dd7caa635ac7863&#34;&gt;MacOS X でGo言語のクロスコンパイルを試したらハマった - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/mitchellh/gox&#34;&gt;gox&lt;/a&gt; を使う方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/e44961a8bcbb2578cfe7&#34;&gt;Goで64bitと32bitの実行ファイルを同一Windows機で作成するために講じたこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;remark:9bacfa348e5fe42acc9342a16675997d&#34;&gt;その他 四方山話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/22662f43b6a6e8728798&#34;&gt;動的言語だけやってた僕が、38日間Go言語を書いて学んだこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ksato9700/items/6228d4eb6d5b282f82f6&#34;&gt;golang - Go言語で幸せになれる10のテクニック - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.wacul.co.jp/blog/2014/08/22/go/&#34;&gt;これからGoを始める人のためのTips集 | The Wacul Blog&lt;/a&gt; : ちゃんと開発環境を整備したい場合には参考になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mrpepper/items/95c428f2b3c25be6b3e2&#34;&gt;Golang ファーストインプレッション - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kayac.com/news/2014/07/golang&#34;&gt;2014年夏、カヤックは、Go言語を積極的に推進していきます。 ｜ニュース｜面白法人カヤック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akiradeveloper.hatenadiary.com/entry/2014/07/22/205515&#34;&gt;(go report) Goが本当はすごかったので, 謝罪する - テストステ論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TakaakiFuruse/items/0fec78e5ecbcbe4337e8&#34;&gt;Golang のインスコでハマった件 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/a5d1a309733e765533ce&#34;&gt;Go Conference 2015 summer - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yamadagenki/items/5032cf853f6b136b533f&#34;&gt;最新versionのgolangをぶち込む方法について - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hostingadvice.com/how-to/install-golang-on-ubuntu/&#34;&gt;7 Easy Steps to Install Go (Golang) on Ubuntu - HostingAdvice.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/herokugo.html&#34;&gt;Heroku、Go言語の正式サポートを発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;最近ではGo言語の採用例が増えてきており、例えばDropboxは性能が重要な部分ではPythonに代わりGoで記述することを昨年11月に表明しており、オープンソースのPaaS基盤であるCloud Foundryも主要部分での開発でGo言語の採用を進めていると言われています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/google_app_enginego_1.html&#34;&gt;Google App Engineも「Go言語」の正式サポートを発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hiconyan/items/7656e9fb2d5bf5c794be&#34;&gt;Sensuでネットワーク監視やってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/open/i18n4go/&#34;&gt;i18n4go - developerWorks Open&lt;/a&gt; : IBM の &lt;a href=&#34;https://developer.ibm.com/open/&#34;&gt;developerWorks Open&lt;/a&gt; プロジェクトのひとつ。「&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1507/23/news058.html&#34;&gt;プログラムを国際化するための汎用ツール&lt;/a&gt;」らしい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go15:9bacfa348e5fe42acc9342a16675997d&#34;&gt;Go 1.5 に関する話題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/msaito3/items/3aef86e9864990b16b4c&#34;&gt;GVM で go1.5rc1 のインストール - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masahikoofjoyto/items/4ced298989e6ab346f15&#34;&gt;goを1.5にアップデートして1.4とベンチを取る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taji-taji/items/4c43e126e67d65a219e3&#34;&gt;Go 1.3 から 1.5 へのアップデートでエラー - Qiita&lt;/a&gt; : 古いバージョンからアップデートする際は，いったん 1.4 に上げてから 1.5 にアップデートするとよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20150820102400.htm&#34;&gt;Big Sky :: golang 1.5 の internal パッケージの使い方。&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qt-luigi/items/d0f52b3b0906b35e6027&#34;&gt;「golang 1.5 の internal パッケージの使い方。」を試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
</feed>
