<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>しっぽのさきっちょ | text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/remark/index.xml" />
	<id>tag:text.Baldanders.info,2021-03-22:/remark</id>
	<updated>2021-03-22T17:14:37+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」。とりとめのない四方山話。</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Hugo Markdown でブロック要素にクラス属性を付与する</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/add-attribute-in-hugo-markdown/" />
		<id>tag:text.Baldanders.info,2021-03-22:/remark/2021/03/add-attribute-in-hugo-markdown/</id>
		<published>2021-03-22T17:14:37+09:00</published>
		<updated>2021-03-22T08:16:13+00:00</updated>
		<summary>お手軽装飾</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 0.81 からの機能らしいのだが， markdown テキスト中のブロック要素に対して class 属性を付けられるようだ（&lt;a href=&#34;https://github.com/yuin/goldmark/&#34; title=&#34;yuin/goldmark: A markdown parser written in Go. Easy to extend, standard(CommonMark) compliant, well structured.&#34;&gt;goldmark&lt;/a&gt; パーサを使う場合）。
これを有効にするには &lt;code&gt;config.toml&lt;/code&gt; ファイルで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;markup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;goldmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と指定する（既定値は &lt;code&gt;false&lt;/code&gt;）。
YAML (&lt;code&gt;config.yaml&lt;/code&gt;) で書くなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;markup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;goldmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じかな。&lt;/p&gt;
&lt;p&gt;たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; One
&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Two
&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Three
{ .cloud .center }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と箇条書きブロックの最後に &lt;code&gt;{ .cloud .center }&lt;/code&gt; とクラス名を付けると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cloud center&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;One&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Two&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Three&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じに展開してくれる。
ここで CSS 側を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;cloud&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;list-style&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;cloud&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;inline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;rem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;center&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などと定義すれば&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;ul class=&#34;cloud center&#34;&gt;
&lt;li&gt;One&lt;/li&gt;
&lt;li&gt;Two&lt;/li&gt;
&lt;li&gt;Three&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;とできる。&lt;/p&gt;
&lt;p&gt;これは HTML のブロック要素に相当するものであれば何でも適用できるみたいで，通常の段落でも&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;*「人はなぜ大丈夫じゃないときに限って『大丈夫？』と訊くのだろう」*
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;br&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;（某ラノベ作品より）
{.center}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などと書けば&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p class=&#34;center&#34;&gt;&lt;em&gt;「人はなぜ大丈夫じゃないときに限って『大丈夫？』と訊くのだろう」&lt;/em&gt;
&lt;br&gt;（某ラノベ作品より）&lt;/div&gt;
&lt;p&gt;とできる。&lt;/p&gt;
&lt;p&gt;頻繁に使う表現なら &lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34; title=&#34;Shortcodes | Hugo&#34;&gt;shortcode&lt;/a&gt; を組んだほうがいいだろうが，ちょっとした装飾ならこちらのほうが手軽でいいかもしれない。&lt;/p&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>Go を褒め殺ししてみる</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/awesome-golang/" />
		<id>tag:text.Baldanders.info,2021-03-18:/remark/2021/03/awesome-golang/</id>
		<published>2021-03-18T20:16:13+09:00</published>
		<updated>2021-03-18T11:17:55+00:00</updated>
		<summary>はやく作って はやく改す</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;母国語としてのプログラム言語&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/programming-language/&#34; title=&#34;プログラミング言語との付き合い方&#34;&gt;以前紹介&lt;/a&gt;したのだが，&lt;a href=&#34;https://www.hyuki.com/&#34;&gt;結城浩&lt;/a&gt;さんの&lt;a href=&#34;https://rentwi.hyuki.net/?666213569055166464s&#34;&gt;過去の連ツイ&lt;/a&gt;に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;プログラミング言語との付き合い方というのはいろいろあってですね。自分の母国語という言語はある。それから現在学んでいる最中の言語というのもある。そして、仕事用の言語やら、他の人とのコミュニケーション用言語というのもある。そのあたりは、自然言語とちょっと似ている。&lt;/p&gt;
&lt;p&gt;ITな業界で仕事をしているひとというのは、だいたいそういう感じでプログラミング言語とつきあっていると思っている。たった一つしかプログラミング言語ができないという人は少なくて、二つくらいは読み書きできる。三つ四つくらいはなんとなく読むのはできる。五つ六つくらいは何のソースか言える。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;http://rentwi.hyuki.net/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という記述がある。&lt;/p&gt;
&lt;p&gt;まぁ「仕事用の言語」や「コミュニケーション用言語」ってのは独りで選ぶものではないので今回は除外するとして，「母国語」というのは上手い比喩だ。
自然言語と同じで「母国語」として定着しているプログラミング言語があればロジックや制御への理解も速いし，他言語を習得する際にも有利になる。&lt;/p&gt;
&lt;p&gt;でも最初から「◯◯言語を母国語として習得するぞ」とかいう人はいないだろう。
使い込んで手に馴染んでいって初めて「母国語」になり得る。
問題は「どの言語か」ではなく「手に馴染むまで使い込むほどの動機があるか」だと思う。&lt;/p&gt;
&lt;p&gt;「これからプログラミングを始めるならどの言語にすればいいか」という問いは今の季節の風物詩みたいなものだが，この問いだけでは「始める」動機が見えないし，その人が既に「母国語」と言えるものを持っているか否かで話も変わってくる。&lt;/p&gt;
&lt;p&gt;先日見かけた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.quora.com/%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89%E5%8B%89%E5%BC%B7%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89Golang%E3%81%A8Rust%E3%81%AE%E3%81%A9%E3%81%A1%E3%82%89%E3%81%8C%E3%81%84%E3%81%84%E3%81%A7%E3%81%97%E3%82%87%E3%81%86&#34;&gt;これから勉強するならGolangとRustのどちらがいいでしょうか？難易度も含めて推奨お願いします。 - Quora&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という記事も似たような印象を受けたが，回答に挙がっている &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; と &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の比較はなかなか興味深く，また大いに共感した。
ただ，回答された方は &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; 寄りみたいなので，対抗して私は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; を褒め殺ししてみる（笑）&lt;/p&gt;
&lt;p&gt;なお，あらかじめ予防線を張っておくと，私は言語オタクでも文房具オタクでもないし，その手の宗教論争に巻き込まれたくないので，異論反論（当然あると思うけど）には反応しないのであしからず。&lt;/p&gt;
&lt;p&gt;（前説おわり）&lt;/p&gt;
&lt;h2&gt;はやく作って はやく改（なお）す&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;昔は「はやく作る」というのはスクリプト言語の独壇場だった。
近年のバズワードだった「AI」技術において Python が大きな牽引力として機能しているのは Python が「はやく作る」ことに特化した言語であることも大きいだろう。&lt;/p&gt;
&lt;p&gt;しかし &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; がこの状況を変えていく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; はコンパイル言語には珍しく（と言っていいのか分からないが）「はやく作る」ことに特化した言語と言っていい。
「はやく作る」というのは事前学習量やコンパイル速度やコード記述量を指しているのではなく「考えたことをそのまま書いて安全に組めるか」ということだ。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の言語仕様に組み込まれた簡便さも制約もこの目的のためにあると言ってよい。&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; は Java などの伝統的オブジェクト指向プログラミング言語とよく比較されるが，例外処理や継承など「考えたことをそのまま書く」ことにおいてノイズにしかならないギミックをあっさり捨て去っている。
Goroutine 間に優先順位が存在しないのも &lt;a href=&#34;https://golang.org/pkg/sync/&#34; title=&#34;sync - The Go Programming Language&#34;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Mutex&lt;/code&gt; が再入不可なのもちゃんと理由があるのだ（Generics は結局組み込むみたいだけどw）。&lt;/p&gt;
&lt;p&gt;ちなみに「はやく作る」ことは「雑に作る」ことではない。
近年の流行語である「&lt;a href=&#34;https://text.baldanders.info/remark/2020/12/technical-debt-and-hacker/&#34; title=&#34;技術的負債とハッカー&#34;&gt;技術的負債&lt;/a&gt;」の本来の意図は「はやく作る」ことと引き換えにしているものを金融用語の「負債」に喩えたことだそうだ。つまり技術的負債の「返済」とは，システムやプログラムを「直す」ことではなく「改（なお）す」つまりリファクタリングを指している。&lt;/p&gt;
&lt;p&gt;もうひとつの &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の特徴は，このリファクタリングに厚い言語であるということだ。
シンプルな言語仕様故に手を入れやすいし， interface 型による「&lt;a href=&#34;https://text.baldanders.info/remark/2020/04/subtyping/&#34; title=&#34;それは Duck Typing ぢゃない（らしい）&#34;&gt;構造型の部分型付け（structural subtyping）&lt;/a&gt;」によってオブジェクト間の関係を「疎」にできるため，再利用性の高い機能を別パッケージとして切り離したり，なんなら「出来のよくないパッケージを丸ごと入れ替える」なんてことも比較的容易だったりする。&lt;/p&gt;
&lt;p&gt;一言で言うなら「はやく作って はやく改せる」のが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 最大のメリットである。
道具に耽溺するのでなく振り回されるのでなく，自らのアイデアを「いい感じ」に実装する手段としてプログラミング言語を求めるのなら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; を選択するのは悪くない，と言っておこう。&lt;/p&gt;
&lt;h2&gt;「文」の制約&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;Go の言語仕様&lt;/a&gt;を読むところまで慣れた方なら気づいてると思うけど， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; は文（statement）の制約が強い言語である。
文の制約を強くすることで全体の言語仕様をシンプルにしている，とも言えるが。&lt;/p&gt;
&lt;p&gt;たとえば &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; といった制御文や &lt;code&gt;=&lt;/code&gt; などの代入文は式（expression）として評価できないため，式の一部または全部として組み込めない。
分かりやすい例としては C/C++ などでは悪名高いインクリメント&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; “&lt;code&gt;x++&lt;/code&gt;” は代入構文のバリエーションとして評価されるため，式の一部として組み込めない，とかいったことがある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// syntax error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あるいはもっと簡単に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// syntax error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とかも無理。&lt;/p&gt;
&lt;p&gt;こういった制約は，特に関数型プログラミング言語から来た人には大きな不満となるだろう。
この理由で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; に馴染めないというのであれば &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; のほうをお勧めする（笑）&lt;/p&gt;
&lt;h2&gt;富豪的プログラミングの代償&lt;/h2&gt;
&lt;p&gt;並列処理とメモリ管理はどんな言語でも悩ましい問題である。
特に両者が組み合わさると非常に厄介と言える。&lt;/p&gt;
&lt;p&gt;たとえばスクリプト言語や Virtual Machine 上の動作を前提とした処理系ではスクリプト・エンジンや VM が並列処理やメモリ管理の厄介な部分を引き受けてくれるが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; ではこれらを実行モジュールに組み込むことで高いパフォーマンス（とシングル・バイナリでのデプロイ）を可能としている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.pitecan.com/fugo.html&#34;&gt;富豪的プログラミング&lt;/a&gt;の観点からは，これらの仕組みはプログラマに有利に働く。
最初の節で紹介した Q&amp;amp;A の回答でも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;言語仕様が小さくて、コンパイルがとても速く、GC (Garbage Collector)を採用してメモリ管理の煩わしさをなくすとともに、並列実行を容易にしています。&lt;/p&gt;
&lt;p&gt;その分、単体での実行速度については妥協していますが、速度を求めるのなら処理を並列化しつつマシン側（実行環境）を増強すれば良い、というクラウド時代の解決策をとっています。つまり、コードのちまちまとした最適化で悩んでいる暇があるなら札束で殴ってさっさと解決しろ、ということですね。とても効率的な考え方です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://jp.quora.com/%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89%E5%8B%89%E5%BC%B7%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89Golang%E3%81%A8Rust%E3%81%AE%E3%81%A9%E3%81%A1%E3%82%89%E3%81%8C%E3%81%84%E3%81%84%E3%81%A7%E3%81%97%E3%82%87%E3%81%86&#34;&gt;これから勉強するならGolangとRustのどちらがいいでしょうか？難易度も含めて推奨お願いします。 - Quora&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と解説されている。まさに富豪的（笑）&lt;/p&gt;
&lt;p&gt;しかし，これと引き換えに「小さなシステム」に対しては無視できない代償を支払っている。
これは並列処理やメモリ管理を実行バイナリに埋め込むために POSIX への依存度が高くなっているためだ。&lt;/p&gt;
&lt;p&gt;小さなシステムやシビアなリアルタイム処理&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; には &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; は向かないだろう。ましてやデバイスドライバや pure &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; な OS カーネルなど夢のまた夢である。
そういうものに興味があるのであれば &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; のほうがお勧めだ。&lt;/p&gt;
&lt;p&gt;なお，個人的に興味を持っている &lt;a href=&#34;https://tinygo.org/&#34; title=&#34;TinyGo - Go on Microcontrollers and WASM&#34;&gt;TinyGo&lt;/a&gt; なら LLVM ベースの小さいバイナリを生成することができる。組み込み用途であればこういった選択肢はありだと思う。&lt;/p&gt;
&lt;p&gt;本当は WebAssembly に&lt;a href=&#34;https://text.baldanders.info/golang/webassembly-with-tinygo/&#34; title=&#34;TinyGo で WebAssembly&#34;&gt;興味がある&lt;/a&gt;のだが，少なくとも &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 側が WASI (WebAssembly System Interface) をサポートしてくれないと無理かなぁ。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4873118557?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51vpZLDJAAL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118557?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミングRust&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Jim Blandy (著), Jason Orendorff (著), 中田 秀基 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2018-08-10&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873118557 (ASIN), 9784873118550 (EAN), 4873118557 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873118550/&#34;&gt;Eブック版&lt;/a&gt;あり。&lt;a href=&#34;https://doc.rust-lang.org/book/&#34;&gt;公式ドキュメント&lt;/a&gt;よりも系統的に書かれているので痒いところに手が届く感じ。ただし量が多いので，一度斜め読みしたらあとは傍らに置いて必要に応じてつまみ食いしていくのがいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-03-08&#34;&gt;2020-03-08&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミングRust --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WZElZb9eL._SL160_.jpg&#34; width=&#34;128&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Joshua Bloch (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2018-10-30&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-17&#34;&gt;2021-03-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Effective Java 第3版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;「改す」を「なおす」と読むのは辞書的に正しい日本語ではありません。念のため（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;C/C++ ではインクリメント/デクリメント演算子は前置（++x）と後置（x++）があって機能が異なる。これに起因する不具合も多く，コーディング・ルールで「インクリメント/デクリメントの後置は禁止」とするところが多いらしい。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ここでいうリアルタイム処理とは「分割されたジョブを決められたタイミングで決められた期間内に完了すること」を指す。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>『再発見の発想法』は非エンジニアこそ読んで欲しい</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/the-essence-of-programming/" />
		<id>tag:text.Baldanders.info,2021-03-14:/remark/2021/03/the-essence-of-programming/</id>
		<published>2021-03-14T07:31:13+09:00</published>
		<updated>2021-03-13T22:31:32+00:00</updated>
		<summary>3月14日は「円周率の日」で「数学の日」でアインシュタイン博士の誕生日である。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;3月14日は「円周率の日」で「数学の日」でアインシュタイン博士の誕生日である。
世界の数学者と理学者と工学者は今日というめでたい日を盛大に祝うんだ！&lt;/p&gt;
&lt;p&gt;というわけで，今回は&lt;a href=&#34;http://hyuki.com/&#34;&gt;結城浩&lt;/a&gt;さん著作の『&lt;a href=&#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;再発見の発想法 | 結城 浩 | 産業研究 | Kindleストア | Amazon&#34;&gt;再発見の発想法&lt;/a&gt;』の感想文なんぞを書いてみる。
読書感想文は久しぶりだな（笑）&lt;/p&gt;
&lt;p&gt;ソフトウェエア・エンジニアというのは不思議な職業で，それ単体では成立し得ない。
何故ならソフトウェアを使う人の多くはソフトウェエア・エンジニア以外の人たちだからだ。&lt;/p&gt;
&lt;p&gt;たとえば&lt;ruby&gt;&lt;rb&gt;工場&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;こうば&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;の工員さんやコールセンターの中の人，役場のお役人様やタクシーや長距離トラックの運ちゃん，そういった人たちのために私達エンジニアは日々頭を悩ませている。&lt;/p&gt;
&lt;p&gt;特に悩ましいのは業種や職場によって独自の用語や隠語があることだ。
だから私達はシステムを作る際にはまず「用語集」を作る。&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;再発見の発想法 | 結城 浩 | 産業研究 | Kindleストア | Amazon&#34;&gt;再発見の発想法&lt;/a&gt;』6.2章に出てくる「ベンチマーク（benchmark）」という単語なんかが典型的だが，同じ言葉なのに業種によって少しずつ意味が異なることがある。
そうした言葉の背後にある差異に気づかず設計を推し進めると，後でとんでもないしっぺ返しを食らったりするのだ。&lt;/p&gt;
&lt;p&gt;でも，最初の段階でお互いに言葉をすり合わせて「用語集」を作っておくと，以後のコミュニケーションがスムーズになる。
特に考え方や手段といった目に見えないものに「名前」を付けることは重要で，名前を付けることで議論のアンカーもしくは原点として機能し始める。
私は名前の「正しさ」というものを全く信用していない不遜な人間だが，当事者がお互いに同じ言葉を同じ意味で話すことの重要性は理解しているつもりである。&lt;/p&gt;
&lt;p&gt;とはいえ，私達エンジニアが普段どんな言葉を喋ってどんな思考のもとに設計しコードを組み立てていくか知ってほしいというのも本音だ。&lt;/p&gt;
&lt;p&gt;そこで，いよいよ『&lt;a href=&#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;再発見の発想法 | 結城 浩 | 産業研究 | Kindleストア | Amazon&#34;&gt;再発見の発想法&lt;/a&gt;』の登場である。&lt;/p&gt;
&lt;p&gt;この本は&lt;a href=&#34;http://hyuki.com/&#34;&gt;結城浩&lt;/a&gt;さんによる「Software Design」誌上の同名連載をまとめたものだそうで，さまざまな「技術用語」について解説したものだ。
しかし，内容は技術系雑誌に掲載されていたとは思えないほど平易な言葉で書かれている。&lt;/p&gt;
&lt;p&gt;用語の意味とその背後にある考え方と日常生活になぞらえた例示が絶妙なバランスで配置されていて，この辺のさじ加減の上手さは流石&lt;a href=&#34;http://hyuki.com/&#34;&gt;結城浩&lt;/a&gt;さんと言うしかない。
やはり《例示は理解の試金石》（by 数学ガール）なんだねぇ。&lt;/p&gt;
&lt;p&gt;ソフトウェア・エンジニアリングの有名な格言（？）に「推測するな，計測せよ」というのがある。
『&lt;a href=&#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;再発見の発想法 | 結城 浩 | 産業研究 | Kindleストア | Amazon&#34;&gt;再発見の発想法&lt;/a&gt;』に出てくる技術用語の選択は，まさに 計測→評価→改修 というエンジニアリングの基本サイクルを意識している印象がある。&lt;/p&gt;
&lt;p&gt;技術系雑誌の連載が出自だし「再発見」というタイトルには私達エンジニアが普段使っている言葉を見直すという意味が含まれているのだろうが，私としてはこの本は非エンジニアの方々あるいはエンジニアを目指す若い方々にこそ読んで欲しい。
そして，本に出てくる言葉をエンジニアがつぶやいているときは「こういう風に考えてるんだなぁ」と感じていただければ幸いである。&lt;/p&gt;
&lt;p&gt;さて，積ん読状態の「数学ガール」シリーズも読み進めないとなぁ。
ようやく「本を読む」余裕が出てきたよ。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41zRoRvMCIL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;再発見の発想法&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2021-02-19 (Release 2021-02-20)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08S2LY9VG (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「Software Design」誌の同名連載の書籍化。「技術用語」の解説書だが，平易な内容で読みやすい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-14&#34;&gt;2021-03-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 再発見の発想法 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B079JLW5YN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51QDhrqqEtL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B079JLW5YN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラマの数学 第2版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2018-01-16 (Release 2018-02-08)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B079JLW5YN (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;タイトル通りプログラマ必読書。第2版では機械学習に関する章が付録に追加された。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-03-19&#34;&gt;2018-03-19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラマの数学 第2版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015SAFU42?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51Xgkj7WNdL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015SAFU42?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;イミテーション・ゲーム／エニグマと天才数学者の秘密(字幕版)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ベネディクト・カンバーバッチ (出演), キーラ・ナイトレイ (出演), マシュー・グード (出演), ロリー・キニア (出演), モルテン・ティルドゥム (監督), グラハム・ムーア (Writer)&lt;/dd&gt;
    &lt;dd&gt; (Release 2015-10-02)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B015SAFU42 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;主人公であるアラン・チューリングは今もなお「天才」と称される数学者であり，「コンピュータの父」と呼ばれるほどの偉人である。そしてチューリングの偉業のひとつが，旧ナチス・ドイツの暗号機械「エニグマ」の解読である。作品はそのエニグマの解読を主軸に物語を展開していく。感想は&lt;a href=&#34;https://baldanders.info/blog/000833/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-19&#34;&gt;2015-04-19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- イミテーション・ゲーム --&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>Baldanders.info サイトにおける OpenPGP 鍵管理の変更</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/changing-publickey-management/" />
		<id>tag:text.Baldanders.info,2021-03-06:/remark/2021/03/changing-publickey-management/</id>
		<published>2021-03-06T19:43:36+09:00</published>
		<updated>2021-03-06T10:47:09+00:00</updated>
		<summary>来年から本気出す（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;このブログを含む &lt;a href=&#34;https://baldanders.info/&#34; title=&#34;Baldanders.info&#34;&gt;Baldanders.info&lt;/a&gt; の各サイトでは，私個人の &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵を&lt;a href=&#34;https://baldanders.info/pubkeys/&#34; title=&#34;OpenPGP 公開鍵リスト | Baldanders.info&#34;&gt;公開&lt;/a&gt;している。
実は2013年から&lt;a href=&#34;https://baldanders.info/blog/000629/&#34;&gt;年次鍵の運用を止めて&lt;/a&gt;単一で永続的な鍵運用に切り替えたのだが，来年からまた短期の運用に戻すことにした。&lt;/p&gt;
&lt;p&gt;具体的には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;現行の公開鍵の有効期限を 2022-03-31 に変更する（変更済）&lt;/li&gt;
&lt;li&gt;2022年4月以降に使用する鍵は最長で2年の有効期限付きで作成する&lt;/li&gt;
&lt;li&gt;単一の鍵で運用するのではなく目的別に鍵を分ける
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; のクライアント認証鍵は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; ベースのものに切り替える&lt;/li&gt;
&lt;li&gt;鍵同士の相互署名はしない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という感じで行こうかと。&lt;/p&gt;
&lt;p&gt;理由のひとつは，現在&lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34; title=&#34;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&#34;&gt;ドラフト中の NIST FIPS 186-5&lt;/a&gt; から DSA が削除されるというもの。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34;&gt;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もうひとつの理由は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; において第3者による &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵への電子署名の社会的信頼度が下がってきたことだ。
もともと，第3者による &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵への電子署名は「小切手の裏書き」みたいなもので，多数の署名が永続的に存在することで鍵の信頼性が担保できていたのだが，その前提が崩れ去ってしまったのだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/07/openpgp-certificate-flooding/&#34;&gt;OpenPGP 公開鍵サーバにおける公開鍵の汚染問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こうなると従来の &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵サーバをベースにした鍵運用は大して意味がないし（せいぜい手渡しよりは便利という程度），単一の鍵を長期的に利用ドメインを跨いで使い回すのは却ってリスクになりかねない。&lt;/p&gt;
&lt;p&gt;さらに，強いて3つ目を挙げるなら「電子メールはオワコン」ということだろうか。
少なくとも署名・暗号化しないといけないようなメッセージ・データを電子メールで配送するというのはもうナシだろう。
&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/security-theater/&#34; title=&#34;劇場型セキュリティと PPAP&#34;&gt;PPAP&lt;/a&gt; 以前の問題。
&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/using-gnupg-in-thunderbird-78/&#34; title=&#34;Thunderbird 78 系で GnuPG を使う【ただし不完全】&#34;&gt;Thunderbird による OpenPGP 鍵利用が使いものにならない&lt;/a&gt;というのもあるが（笑）&lt;/p&gt;
&lt;p&gt;暗号鍵の運用については &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-5/final&#34; title=&#34;SP 800-57 Part 1 Rev. 5, Recommendation for Key Management: Part 1 – General | CSRC&#34;&gt;NIST SP 800-57&lt;/a&gt; が参考になるだろう。
この中で暗号鍵の使用期間と暗号期間について推奨値が示されている。
こんな感じ。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
	main table.cryptoperiod th  {
		vertical-align:middle;
		text-align: center;
	}
	main table.cryptoperiod td  {
		vertical-align:middle;
	}
&lt;/style&gt;
&lt;table class=&#34;cryptoperiod&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th rowspan=&#39;2&#39;&gt;Key Type&lt;/th&gt;
&lt;th colspan=&#39;2&#39;&gt;Cryptoperiod&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;th&gt;Originator-Usage&lt;br&gt;Period (OUP)&lt;/th&gt;
&lt;th&gt;Recipient-Usage&lt;br&gt;Period&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
	&lt;td&gt;1. Private Signature Key&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;1 to 3 years&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;−&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;2. Public Signature-VerificationKey&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;Several years (depends on key size)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;3. Symmetric Authentication Key&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;$\le 2$ years&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;$\le \mathrm{OUP}+3$ years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;4. Private Authentication Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;1 to 2 years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;5. Public Authentication Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;1 to 2 years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;6. Symmetric Data Encryption Keys&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;$\le 2$ years&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;$\le \mathrm{OUP}+3$ years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;7. Symmetric Key-Wrapping Key&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;$\le 2$ years&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;$\le \mathrm{OUP}+3$ years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;8. Symmetric RBG Keys&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;See SP 800-90&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;−&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;9. Symmetric Master Key/Key Derivation Key&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;About 1 year&lt;/td&gt;
	&lt;td class=&#34;center&#34;&gt;−&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;10. Private Key Transport Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;$\le 2$ years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;11. Public Key Transport Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;1 to 2 years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;12. Symmetric Key Agreement Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;1 to 2 years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;13. Private Static Key Agreement Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;1 to 2 years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;14. Public Static Key Agreement Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;1 to 2 years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;15. Private Ephemeral Key Agreement Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;One key-agreement transaction&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;16. Public Ephemeral Key Agreement Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;One key-agreement transaction&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;17. Symmetric Authorization Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;$\le 2$ years&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;18. Private Authorization Key&lt;/td&gt;
	&lt;td class=&#34;center&#34; colspan=&#34;2&#34;&gt;$\le 2$ years&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;uggested cryptoperiods for key types (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.3.6)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;p&gt;HTTPS など X.509 ベースで運用される公開鍵の有効期間が1年程度の短期運用に切り替わっているのに気付いている人も多いだろう。
&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵は ad hoc 運用だし合わせる必要はないと思っていたが，永続的な鍵運用に価値がないならこっちに合わせるべきだよね。&lt;/p&gt;
&lt;p&gt;とりあえず，現行の &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --fetch-keys https://baldanders.info/pubkeys/spiegel.asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で有効期限付きのものに更新できる。&lt;/p&gt;
&lt;p&gt;ぶっちゃけ個人で鍵を2,3年おきに更新するのって面倒くさいんだよね。
まぁ，実際の運用をどうするか（暗号デバイスの導入も含めて）これから3年以内には確立させる予定。
3年もあれば暗号界隈のシーンも変わっているだろうけど（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/v5.8/process/maintainer-pgp-guide.html&#34;&gt;Kernel Maintainer PGP guide — The Linux Kernel  documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/artizirk/d09ce3570021b0f65469cb450bee5e29&#34;&gt;OpenPGP SSH access with Yubikey and GnuPG · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/publications/nist/&#34;&gt;セキュリティ関連NIST文書：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000055490.pdf&#34;&gt;鍵管理における推奨事項 第一部：一般事項 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/&#34;&gt;OpenSSH の認証鍵を GunPG で作成・管理する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>RSA は砕けない（たぶん？）</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/rsa-is-unbreakable/" />
		<id>tag:text.Baldanders.info,2021-03-06:/remark/2021/03/rsa-is-unbreakable/</id>
		<published>2021-03-06T09:33:55+09:00</published>
		<updated>2021-03-06T00:44:23+00:00</updated>
		<summary>まだあわてるような時間じゃない（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;こっち方面のアンテナがすっかり鈍ってしまって，気付いたのがやっと昨日なのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eprint.iacr.org/2021/232&#34;&gt;Cryptology ePrint Archive: Report 2021/232 - Fast Factoring Integers by SVP Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という論文を巡ってちょっとした騒ぎになっていたらしい。
いや abstract に &lt;q lang=&#34;en&#34;&gt;This destroys the RSA cryptosystem&lt;/q&gt; とか書いてあるもんで，その筋の方々が色めき立っちゃたようだ（笑）&lt;/p&gt;
&lt;p&gt;これについて Bruce Schneier 先生も&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;It does not. At best, it’s an improvement in factoring — and I’m not sure it’s even that&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2021/03/no-rsa-is-not-broken.html&#34;&gt;No, RSA Is Not Broken - Schneier on Security&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とおっしゃっている。
論文自体の査読もまだだし，これから要検証という感じ。
少なくとも&lt;a href=&#34;https://text.baldanders.info/remark/2020/04/rsa-250-factored/&#34;&gt;2020年時点で RSA-250 の解読には成功&lt;/a&gt;してるんだから，それとの比較で評価できるだろう。&lt;/p&gt;
&lt;p&gt;要するに「&lt;a href=&#34;https://dic.nicovideo.jp/a/%E3%81%BE%E3%81%A0%E3%81%82%E3%82%8F%E3%81%A6%E3%82%8B%E3%82%88%E3%81%86%E3%81%AA%E6%99%82%E9%96%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84&#34;&gt;まだあわてるような時間じゃない&lt;/a&gt;」ということだ。
まぁ，でも，これから鍵を替えるなら ECC 鍵がいいんじゃないかな（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/&#34;&gt;SSH の認証鍵を GunPG で作成・管理する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://crypto.stackexchange.com/questions/88582/does-schnorrs-2021-factoring-method-show-that-the-rsa-cryptosystem-is-not-secur&#34;&gt;Does Schnorr&amp;rsquo;s 2021 factoring method show that the RSA cryptosystem is not secure? - Cryptography Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.letsencrypt.org/t/schnorrs-factorization-algorithm/146550&#34;&gt;Schnorr&amp;rsquo;s factorization algorithm - Issuance Policy - Let&amp;rsquo;s Encrypt Community Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>Markdown と VS Code</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/markdown-with-vscode/" />
		<id>tag:text.Baldanders.info,2021-02-28:/remark/2021/02/markdown-with-vscode/</id>
		<published>2021-02-28T12:45:02+09:00</published>
		<updated>2021-03-20T03:20:09+00:00</updated>
		<summary>Preview 機能は個人的に必要ないのでレビューしないが，仕事で使うようなことがあれば，そのうち記事にすることもあるだろう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; で markdown テキストを入出力する話。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&#34; title=&#34;Markdown All in One - Visual Studio Marketplace&#34;&gt;Markdown All in One&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension yzhang.markdown-all-in-one
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Markdown 関連の拡張機能は色々あるようだが，入力支援に関してはこれで必要十分ぽい。&lt;/p&gt;
&lt;p&gt;お気に入りはテーブル整形の機能で， Linux/Ubuntu なら &lt;code&gt;[Ctrl+Shift+I]&lt;/code&gt; キー（Format Document）押下で綺麗に整形してくれる。&lt;/p&gt;
&lt;p&gt;ところが Windows 版では &lt;code&gt;[Shift+Alt+F]&lt;/code&gt; キーが Format Document に割り当てられているようだ。
プラットフォームによって違うのかよ。&lt;/p&gt;
&lt;p&gt;というわけで Windows 版の方にキー割当を合わせることにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Place&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;your&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;defaults&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.formatDocument&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorHasDocumentFormattingProvider &amp;amp;&amp;amp; editorTextFocus &amp;amp;&amp;amp; !editorReadonly &amp;amp;&amp;amp; !inCompositeEditor&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+shift+i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.formatDocument&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorHasDocumentFormattingProvider &amp;amp;&amp;amp; editorTextFocus &amp;amp;&amp;amp; !editorReadonly &amp;amp;&amp;amp; !inCompositeEditor&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.formatDocument.none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus &amp;amp;&amp;amp; !editorHasDocumentFormattingProvider &amp;amp;&amp;amp; !editorReadonly&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+shift+i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.formatDocument.none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus &amp;amp;&amp;amp; !editorHasDocumentFormattingProvider &amp;amp;&amp;amp; !editorReadonly&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34; title=&#34;Prettier - Code formatter - Visual Studio Marketplace&#34;&gt;Prettier - Code formatter&lt;/a&gt; との競合&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension esbenp.prettier-vscode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Markdown 専用というわけではないが JavaScript/TypeScript, CSS/SCSS/Less, HTML, JSON, GraphQL, YAML など幅広い言語に対応している整形ツールで，しかも plugin 拡張もできるらしい。
もちろん markdown テキストにも対応している。&lt;/p&gt;
&lt;p&gt;で，これと &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&#34; title=&#34;Markdown All in One - Visual Studio Marketplace&#34;&gt;Markdown All in One&lt;/a&gt; の整形機能（Format Document）が被るわけですよ。
そこで，どちらの機能を使うか言語ごとに設定できるようになっている。
私は &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&#34; title=&#34;Markdown All in One - Visual Studio Marketplace&#34;&gt;Markdown All in One&lt;/a&gt; 優先でこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;[markdown]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.defaultFormatter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yzhang.markdown-all-in-one&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;さらにファイル保存時に変更した箇所だけを整形する，なんてな設定も言語ごとにできるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;[markdown]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.defaultFormatter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yzhang.markdown-all-in-one&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.formatOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.formatOnSaveMode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;modifications&amp;#34;&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみに &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34; title=&#34;EditorConfig for VS Code - Visual Studio Marketplace&#34;&gt;EditorConfig for VS Code&lt;/a&gt; が有効な場合は &lt;code&gt;.editorconfig&lt;/code&gt; の設定（インデントや改行コードなど）を考慮してくれるようだ。
これを無効にするには “Use Editor Config” の項目を OFF にする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;prettier.useEditorConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし， &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34; title=&#34;EditorConfig for VS Code - Visual Studio Marketplace&#34;&gt;EditorConfig&lt;/a&gt; が有効な場合でも &lt;code&gt;.prettierrc&lt;/code&gt; ファイルなどによる &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34; title=&#34;Prettier - Code formatter - Visual Studio Marketplace&#34;&gt;Prettier&lt;/a&gt; 独自の設定がある場合は，そちらのほうが優先されるようだ。
ややこしい&amp;hellip;&lt;/p&gt;
&lt;h2&gt;自動補完を有効にする&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; の売りのひとつはスニペットを含む強力な自動補完機能だが，何故か markdown ファイルには自動補完が効かない。
と思ったら，既定で無効になっているらしい。
いや，有効にしとけよ。&lt;/p&gt;
&lt;p&gt;というわけで &lt;code&gt;settings.json&lt;/code&gt; に以下の設定を手動で書き込む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;[markdown]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.quickSuggestions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.snippetSuggestions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでスニペットを優先して自動補完候補に挙げてくれる。&lt;/p&gt;
&lt;h2&gt;Markdown Preview 機能は必要か&lt;/h2&gt;
&lt;p&gt;私個人で言うなら No で，仕事なら場合によっては Yes かな。&lt;/p&gt;
&lt;p&gt;そもそも markdown テキストってのは，見出しや段落や箇条書き等の文書構造がそのままでも human-readable である点が利点と言える。
さらに言えば，ここのブログは &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; の shortcodes 等で入力自体をカスタマイズしまくってるので，ただの markdown preview なんか使いものにならないのだ（&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; はサーバ・モードで起動できるので，リアルタイムでブラウザ表示を確認しながら記事を書いている）。&lt;/p&gt;
&lt;p&gt;一方で， Office ツールなどレガシーな環境を捨てて markdown 等の構造化テキストをベースにしたドキュメンテーションをしようとするなら，それなりにリッチな markdown preview 機能と PDF 等へ「最終出力」するためのツールチェーンが必要となる。&lt;/p&gt;
&lt;p&gt;そのための手段（または道具立て）として &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; をベースに環境を整えるというのは合理的と言えるかもしれない。&lt;/p&gt;
&lt;p&gt;というわけで，以降では PDF 等への「最終出力」を念頭に置いたドキュメントツールとして幾つかの拡張機能を紹介してみる。
上述したように，私個人は全く必要ないのでレビューしないが，仕事で使うようなことがあれば，そのうち記事にすることもあるだろう。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced&#34; title=&#34;Markdown Preview Enhanced - Visual Studio Marketplace&#34;&gt;Markdown Preview Enhanced&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension shd101wyy.markdown-preview-enhanced
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TeX の数学記法あるいは &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; や &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 等の記法も認識して preview 表示できるらしい。
&lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT&lt;/a&gt; 言語も使えるのか。
CSS をカスタマイズ可能。&lt;/p&gt;
&lt;p&gt;HTML や PDF へ出力できるようだ（PDF 出力は Chrome 経由）。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf&#34; title=&#34;Markdown PDF - Visual Studio Marketplace&#34;&gt;Markdown PDF&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension yzane.markdown-pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コマンド一発で PDF 変換してくれる。
簡易的な出力しか出来ないのかと思ったら，意外にもかなりカスタマイズできるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/reona396/items/40b234108f7664267db8&#34;&gt;VSCode と Markdown で技術同人誌書いたので拡張機能とかまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://h-s-hige.hateblo.jp/entry/20190405/1554467885&#34;&gt;【Visual Studio Code】Markdown PDF のスタイル(CSS)を変える方法 - Nekonote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode&#34; title=&#34;Marp for VS Code - Visual Studio Marketplace&#34;&gt;Marp for VS Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension marp-team.marp-vscode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://marp.app/&#34; title=&#34;Marp: Markdown Presentation Ecosystem&#34;&gt;Marp&lt;/a&gt; を使って markdown テキストからスライドを生成する。
PDF へエクスポートできるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tomo_makes/items/aafae4021986553ae1d8&#34;&gt;【VS Code + Marp】Markdown から爆速・自由自在なデザインで、プレゼンスライドを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio&#34; title=&#34;Draw.io Integration - Visual Studio Marketplace&#34;&gt;Draw.io Integration&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension hediet.vscode-drawio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://app.diagrams.net/&#34;&gt;Draw.io (diagrams.net)&lt;/a&gt; を利用した作図ツール。
データはテキストで保持して PNG や SVG へエクスポート可能って感じなのかな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/riku-shiru/items/5ab7c5aecdfea323ec4e&#34;&gt;VSCode で Draw.io が使えるようになったらしい！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml&#34; title=&#34;PlantUML - Visual Studio Marketplace&#34;&gt;PlantUML&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension jebbs.plantuml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 作図・出力支援。
あらかじめ &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 作図環境を用意する必要がある（ただし &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルは拡張機能内にあらかじめ格納されている？）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;真面目に PlantUML (1) : PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/karaage0703/books/80b6999d429abc8051bb&#34;&gt;VS Code エディタ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tfukumori/items/0f2b52088cd39f5c124e&#34;&gt;(2020 年 12 月 8 日追記)VSCode で Draw.io Integration 使用時にエクスポートできないことがある問題への対処 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coffee-nominagara.com/2019-01-25-094628&#34;&gt;Visual Studio Code で markdown のスニペットを登録する  |  コーヒー飲みながら仕事したい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20200922-editorconfig&#34;&gt;インデントおよび行末は EditorConfig で始末する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51LziyyXRmL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Software Design 編集部 (編集)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-07-18 (Release 2020-07-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08CZ2C3NZ (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;特集記事は「Vim vs. Visual Studio Code」&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-02-28&#34;&gt;2021-02-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Software Design (2020年8月号) --&gt;
</content>
	</entry><entry>
		<title>Go と VS Code</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/golang-with-vscode/" />
		<id>tag:text.Baldanders.info,2021-02-27:/remark/2021/02/golang-with-vscode/</id>
		<published>2021-02-27T18:47:11+09:00</published>
		<updated>2021-03-02T21:31:16+00:00</updated>
		<summary>ぶっちゃけ ATOM の go-plus よりも出来がいいので，ゆるゆると移行していきますよっと。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どっちのセクションで書こう悩んだが，所詮ツールの話だし，こっち側で。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;それでは&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34; title=&#34;パソコンに Visual Studio Code を導入する（再チャレンジ）&#34;&gt;前回&lt;/a&gt;の続き。
&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;開発支援環境を入れる。
といっても一択だけどね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=golang.go&#34;&gt;Go - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールはこちら。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension golang.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一応 Google が公式に参加している拡張機能らしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/vscode-go&#34;&gt;The VS Code Go extension joins the Go project - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/blogs/2020/06/09/go-extension&#34;&gt;Visual Studio Code Go extension joins the Go project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかも最近，こちらも事実上のオフィシャルである &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/gopls&#34; title=&#34;gopls · pkg.go.dev&#34;&gt;gopls&lt;/a&gt; が，この拡張機能の既定の &lt;a href=&#34;https://langserver.org/&#34; title=&#34;Langserver.org&#34;&gt;language server&lt;/a&gt; となったようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/gopls-vscode-go&#34;&gt;Gopls on by default in the VS Code Go extension - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的にひとつだけ気に入らないところがあって，既定の設定のままではプロジェクト・フォルダを開いたときにトップに &lt;code&gt;go.mod&lt;/code&gt; ファイルがないと上手く動かないみたいなんだよね（&lt;a href=&#34;https://zenn.dev/spiegel/articles/20210223-go-module-aware-mode&#34; title=&#34;Go のモジュール管理【バージョン 1.16 改訂版】&#34;&gt;モジュール対応モード&lt;/a&gt;の場合）。&lt;/p&gt;
&lt;p&gt;最初は拡張機能側の問題かと思っていたが，どうも &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/gopls&#34; title=&#34;gopls · pkg.go.dev&#34;&gt;gopls&lt;/a&gt; の制限らしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/doc/workspace.md&#34;&gt;tools/workspace.md at master · golang/tools · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一応の回避策はあって &lt;code&gt;settings.json&lt;/code&gt; に以下の&lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/doc/settings.md#experimentalworkspacemodule-bool&#34;&gt;オプションを設定&lt;/a&gt;することでトップ以外の複数の &lt;code&gt;go.mod&lt;/code&gt; ファイルに対応できるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;gopls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;build.experimentalWorkspaceModule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし &lt;code&gt;go.mod&lt;/code&gt; ファイルで定義したモジュール名は開いたプロジェクト・フォルダ内で一意でなければならない。
名前が被ってるとめっさ怒られる。&lt;/p&gt;
&lt;p&gt;まぁ，理屈は分からんでもないが，私の場合，ブログなどのドキュメント環境でサンプルコードを書き散らしていて，それらのモジュール名が大抵 &amp;ldquo;&lt;code&gt;sample&lt;/code&gt;” だったりするので被りまくりなんだよなぁ sigh&amp;hellip;&lt;/p&gt;
&lt;p&gt;ちなみに，この &lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/doc/settings.md#experimentalworkspacemodule-bool&#34;&gt;&lt;code&gt;experimentalWorkspaceModule&lt;/code&gt; オプション&lt;/a&gt;は一時的な措置なので将来的にはなくなるようだ。
それまでには何とかするということだろう。&lt;/p&gt;
&lt;p&gt;それ以外の部分ではぶっちゃけ &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; よりも出来がいいので，ゆるゆると移行していきますよっと。&lt;/p&gt;
&lt;p&gt;現時点での &lt;code&gt;settings.json&lt;/code&gt; の内容はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.buildOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.autocompleteUnimportedPackages&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.formatTool&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;goimports&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.lintTool&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;golangci-lint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.gotoSymbol.includeGoroot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.testOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverageOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;showUncoveredCodeOnly&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverOnSingleTestFile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverageDecorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;gutter&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;gopls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;#34;build.experimentalWorkspaceModule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;【2021-03-02 追記】&lt;/h2&gt;
&lt;p&gt;書き忘れていたが，コマンドパレットから&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;gt;Go: Install/Update Tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と入力すると関連ツールのインストールおよびアップデートができる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./update-tools.png&#34;&gt;&lt;img src=&#34;./update-tools.png&#34; srcset=&#34;./update-tools.png 612w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Go: Install/Update Tools&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./update-tools.png&#34;&gt;Go: Install/Update Tools&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これを実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Tools environment: GOPATH=/home/username/go
Installing 9 tools at /home/username/go/bin in module mode.
  gopkgs
  go-outline
  gotests
  gomodifytags
  impl
  goplay
  dlv
  golangci-lint
  gopls

Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs (/home/username/go/bin/gopkgs) SUCCEEDED
Installing github.com/ramya-rao-a/go-outline (/home/username/go/bin/go-outline) SUCCEEDED
Installing github.com/cweill/gotests/... (/home/username/go/bin/gotests) SUCCEEDED
Installing github.com/fatih/gomodifytags (/home/username/go/bin/gomodifytags) SUCCEEDED
Installing github.com/josharian/impl (/home/username/go/bin/impl) SUCCEEDED
Installing github.com/haya14busa/goplay/cmd/goplay (/home/username/go/bin/goplay) SUCCEEDED
Installing github.com/go-delve/delve/cmd/dlv (/home/username/go/bin/dlv) SUCCEEDED
Installing github.com/golangci/golangci-lint/cmd/golangci-lint (/home/username/go/bin/golangci-lint) SUCCEEDED
Installing golang.org/x/tools/gopls (/home/username/go/bin/gopls) SUCCEEDED

All tools successfully installed. You are ready to Go :).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じで &lt;code&gt;go install&lt;/code&gt; してくれるようだ。
自動でアップデートしてくれるといいのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51LziyyXRmL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Software Design 編集部 (編集)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-07-18 (Release 2020-07-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08CZ2C3NZ (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;特集記事は「Vim vs. Visual Studio Code」&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-02-28&#34;&gt;2021-02-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Software Design (2020年8月号) --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>パソコンに Visual Studio Code を導入する（再チャレンジ）</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/installing-vscode-again/" />
		<id>tag:text.Baldanders.info,2021-02-27:/remark/2021/02/installing-vscode-again/</id>
		<published>2021-02-27T14:23:23+09:00</published>
		<updated>2021-03-20T03:29:57+00:00</updated>
		<summary>まずはインストールと初期設定</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今の職場では当然のように Windows 10 機を支給されていてテキスト・エディタ等の普段使いのツールであれば割と自由に使わせてくれるのはいいのだが，6 年ほど使い込んで手に馴染んでる筈の &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; が使えなくてねぇ。
理由は大きく 2 つ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;起動が遅すぎる（もともと遅いが堪えられないほど遅い）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 言語開発支援の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; が実質的に動かない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特に 2 番目が致命的。
私の観測範囲が狭いせいか，この手の話をほとんど聞かないのだが Windows で &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; で開発をしてる人はいないってことなのかねぇ。&lt;/p&gt;
&lt;p&gt;さらに言うと &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; を開発している GitHub が &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を開発している Microsoft に買収され，オフィシャルの Go Language Server である &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/gopls&#34; title=&#34;gopls · pkg.go.dev&#34;&gt;gopls&lt;/a&gt; が，これまた &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=golang.go&#34; title=&#34;Go - Visual Studio Marketplace&#34;&gt;Google オフィシャルの VS Code 用拡張機能&lt;/a&gt;の&lt;a href=&#34;https://blog.golang.org/gopls-vscode-go&#34; title=&#34;Gopls on by default in the VS Code Go extension - The Go Blog&#34;&gt;既定の Language Server になった&lt;/a&gt;というのも大きい。
&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; なんて今だに gocode 使ってるんだぜ。
完全に廃れているよなぁ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;というわけで，観念して &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を導入することにした。&lt;/p&gt;
&lt;p&gt;実は昨年 5 月に自宅の &lt;a href=&#34;https://text.baldanders.info/remark/2020/05/installing-vscode-in-ubuntu/&#34; title=&#34;Ubuntu に Visual Studio Code を導入する&#34;&gt;Ubuntu 機に VS Code を入れた&lt;/a&gt;んだけど，結局挫折して削除しちゃったんだよねぇ。
今回は職場の Windows 機で先行して導入している。
なので Windows 機と &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 機を比較しながら，何回かに分けて記事を書いていく予定である。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;Windows 版のインストールは&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;サイト&lt;/a&gt;からインストーラをダウンロードすればよい。&lt;/p&gt;
&lt;p&gt;問題は &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; だが Snap 版と APT 版がある。
昨年の話だが Snap 版を入れたら日本語入力が壊滅してたので，今回も選択肢には入れない。&lt;/p&gt;
&lt;p&gt;APT 版は Microsoft がリポジトリを公開しているので，これを設定してインストールする。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &amp;gt; microsoft.gpg
$ sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
$ sudo sh -c &amp;#39;echo &amp;#34;deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main&amp;#34; &amp;gt; /etc/apt/sources.list.d/vscode.list&amp;#39;
$ sudo apt update
$ sudo apt install -y code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/karaage0703/books/80b6999d429abc8051bb/viewer/5b814b&#34;&gt;VS Codeエディタ本体のインストール方法｜VS Codeエディタ入門&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;起動は Shell やコマンド・プロンプト等でファイル名またはディレクトリ名を指定して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば起動する&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
Windows 版の &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; はコマンド・プロンプトから任意の場所を開けなくて往生したんだよなぁ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; 本体以外の各種ファイルは以下のディレクトリに格納される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 版
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%USERPROFILE%\.vscode\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%APPDATA%\Code\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 版
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$HOME/.vscode/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HOME/.config/Code/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;settings.json&lt;/code&gt; や &lt;code&gt;keybindings.json&lt;/code&gt; といった設定ファイルやスニペットを格納する &lt;code&gt;snippets/&lt;/code&gt; ディレクトリは &lt;code&gt;Code/User/&lt;/code&gt; ディレクトリ直下にあるので，必要に応じてバックアップを取るのがいいだろう。&lt;/p&gt;
&lt;p&gt;ぶっちゃけ日本語化は不要。
つか，コマンドパレットや検索フィルタを常用するなら下手に日本語化しても混乱するだけだろう。&lt;/p&gt;
&lt;h2&gt;テレメトリの無効化&lt;/h2&gt;
&lt;p&gt;これは任意だが，ベンダ・メーカによるテレメトリを嫌うなら，最初の起動時に無効化の設定をしておく。
具体的には設定画面（&lt;code&gt;[Ctrl+,]&lt;/code&gt; 押下で起動）で &lt;code&gt;telemetry&lt;/code&gt; を入力し，出てきた項目のチェックを外す。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./telemetry.png&#34;&gt;&lt;img src=&#34;./telemetry.png&#34; srcset=&#34;./telemetry.png 1044w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;telemetry&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./telemetry.png&#34;&gt;telemetry&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;テレメトリを無効化すると &lt;code&gt;settings.json&lt;/code&gt; に以下の内容が書き込まれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;telemetry.enableCrashReporter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;telemetry.enableTelemetry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; の設定画面は拡張機能も含めて全てフラットに表示してしまうので，検索フィルタで絞り込まないとめちゃめちゃ使い辛い。
慣れるまでは設定画面で操作しながら &lt;code&gt;settings.json&lt;/code&gt; の内容を確認していく（必要に応じてバックアップ）のがいいだろう。&lt;/p&gt;
&lt;p&gt;こういのが面倒くさいんだよなぁ， &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; って。&lt;/p&gt;
&lt;h2&gt;キー設定&lt;/h2&gt;
&lt;p&gt;まずはキー設定を確認しておく。
キー割当の公式情報が PDF で公開されているので，参考にするとよいだろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&#34;&gt;Keyboard Shortcuts for Windows &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&#34;&gt;Keyboard Shortcuts for Linux &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拡張機能に「◯◯ エディタ風」とかまとめて設定できるものもあるが，歳をとるとそういうカスタマイズは面倒になってくる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
今回はできるだけキー割当を変えないで Linux 版と Windows 版で挙動が異なるもののみに注目してチューニングしていく。&lt;/p&gt;
&lt;p&gt;なお，キー割当は “Keyboard Shortcuts” 画面で変更するのが無難で安全である。
&lt;code&gt;settings.json&lt;/code&gt; と同じく，慣れるまでは &lt;code&gt;keybindings.json&lt;/code&gt; の内容を確認しながら必要に応じてバックアップをとるのがいいだろう。&lt;/p&gt;
&lt;h3&gt;コマンドパレット等&lt;/h3&gt;
&lt;p&gt;この辺は最低限おぼえておくべき。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Shift+P]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[F1]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show All Commands (コマンドパレット)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+,]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open Settings (UI)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+K]&lt;/code&gt; &lt;code&gt;[Ctrl+S]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open Keyboard Shortcuts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最初から &lt;code&gt;[F1]&lt;/code&gt; キーにコマンドパレットが割り当てられているのはありがたい。
まぁ，コマンドパレットさえ使えれば，あとはうろ覚えでも何とかなる（笑）&lt;/p&gt;
&lt;h3&gt;マルチカーソル&lt;/h3&gt;
&lt;p&gt;きょうびのテキスト・エディタでマルチカーソルが使えないのはク ◯ だろう（下品でごめん）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Alt+↑]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[Shift+Alt+↑]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Cursor Above&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Alt+↓]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[Shift+Alt+↓]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Cursor Below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+D]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Selection To Next Find Match&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Shift+L]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select All Occurrences of Find Match&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+F2]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Change All Occurrences&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Shift+Alt+I]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Cursors to Line Ends&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Windows 版ではマルチカーソルの追加（上の 2 つの機能ね）が&lt;code&gt;[Ctrl+Alt+↑]&lt;/code&gt; および &lt;code&gt;[Ctrl+Alt+↓]&lt;/code&gt; にしか割り当てられてないんだけど，それやったらうちの環境ではモニタ表示の向きが変わってしまうんだよね。
うちだけの現象なのだろうか。&lt;/p&gt;
&lt;p&gt;ちうわけで Windows 版では &lt;code&gt;[Shift+Alt+↑]&lt;/code&gt;, &lt;code&gt;[Shift+Alt+↓]&lt;/code&gt; に変更する。
&lt;code&gt;keybindings.json&lt;/code&gt; にはこんな感じに設定されるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Place&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;your&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;defaultsauto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.insertCursorAbove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+alt+up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.insertCursorAbove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.insertCursorBelow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+alt+down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.insertCursorBelow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;行の 2 重化&lt;/h3&gt;
&lt;p&gt;何故この機能がキーに割り当てられてないのだ！ というわけで &lt;code&gt;[Ctrl+F10]&lt;/code&gt; に割り当てた。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+F10]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duplicate Selection&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;keybindings.json&lt;/code&gt; にはこんな感じに設定される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Place&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;your&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;defaultsauto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+f10&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.duplicateSelection&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Integrated Terminal&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; には標準でターミナル機能が付いている。
ありがたや。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Shift+@]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle Integrated Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;この機能は頻繁に使うので &lt;code&gt;[Ctrl+F1]&lt;/code&gt; キーに割り当て直す。
&lt;code&gt;keybindings.json&lt;/code&gt; にはこんな感じに設定された。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Place&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;your&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;defaultsauto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+f1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;workbench.action.terminal.toggleTerminal&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+shift+[BracketLeft]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-workbench.action.terminal.toggleTerminal&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows 版なら &lt;a href=&#34;https://github.com/zetamatta/nyagos/&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid UNIXLike Commandline Shell for Windows&#34;&gt;NYAGOS&lt;/a&gt; を shell として使いたいものである。
そこで &lt;code&gt;settings.json&lt;/code&gt; に以下の設定を直接書き込む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;terminal.integrated.shell.windows&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\\Users\\username\\scoop\\apps\\nyagos\\current\\nyagos.exe&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（&lt;a href=&#34;https://text.baldanders.info/remark/2020/10/windows-terminal-and-nyagos-and-scoop/&#34; title=&#34;Windows Terminal × NYAGOS × Scoop ＝ ♥&#34;&gt;Scoop で NYAGOS をインストール&lt;/a&gt;した場合）&lt;/p&gt;
&lt;h3&gt;Search Editor&lt;/h3&gt;
&lt;p&gt;簡単な検索と置換は &lt;code&gt;[Ctrl+F]&lt;/code&gt; と &lt;code&gt;[Ctrl+H]&lt;/code&gt; で可能だがファイルを跨いだ grep や grep 置換を行う場合は &lt;code&gt;[Ctrl+Shift+F]&lt;/code&gt; または &lt;code&gt;[Ctrl+Shift+H]&lt;/code&gt; でサイドバーを検索に切り替えた上で &lt;code&gt;[Ctrl+Shift+J]&lt;/code&gt; で詳細項目を展開する。&lt;/p&gt;
&lt;p&gt;ただサイドバーの操作ってマウス前提だし使い勝手がよくないんだよねぇ。&lt;/p&gt;
&lt;p&gt;と思ったら設定に Search Editor という項目があって，“Search: Mode” 項目を変更することで &lt;code&gt;[Ctrl+Shift+F]&lt;/code&gt; キー押下時にどちらを起動するか選べるようだ。
これを &lt;code&gt;newEditor&lt;/code&gt; に変更したら &lt;code&gt;settings.json&lt;/code&gt; にはこんな感じに設定された。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;search.mode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;newEditor&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでサイドバーではなくエディタのタブとして検索画面が開く。
検索結果から検索元のファイル：行にジャンプするには &lt;code&gt;[F12]&lt;/code&gt; キー押下で OK（ソースコードのシンボル定義元へのジャンプと同じ）。&lt;/p&gt;
&lt;p&gt;Grep 置換機能には該当の項目がなくサイドバーから行うしかないようだ。
まぁ，ファイルを跨いでの一括置換処理は滅多にしないけどな（笑）&lt;/p&gt;
&lt;h2&gt;【2021-03-02 追記】ウィンドウの設定&lt;/h2&gt;
&lt;h3&gt;画面起動時のウィンドウ画面サイズ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を起動する際のウィンドウ画面は前回時の状態を継承するのだが，そのまま 2 つ目を起動すると何故かウィンドウサイズが既定で起動してしまう。
これがめちゃめちゃストレスだったのだが，何と設定で変えれるらしい。
具体的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;window.newWindowDimensions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inherit&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば 2 つ目以降もウィンドウの状態を「継承」してくれる。
つか，最初からこれを既定にしてくれよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;ウィンドウのタイトルバーを非表示にする&lt;/h3&gt;
&lt;p&gt;Windows 版は既定でウィンドウのタイトルバーが非表示になっている。
今どきの Windows アプリケーションって大抵そんな見た目なのでそれが普通だと思っていたが，なんか設定で変えれるらしい。
具体的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;window.titleBarStyle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;native&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば，タイトルバーが表示されるようになった（&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; 要再起動）。
まぁ，特に嬉しいわけではないのだけど。&lt;/p&gt;
&lt;p&gt;で，実は Linux 版でもこの値を &lt;code&gt;custom&lt;/code&gt; にすることでタイトルバーを非表示にできるようだ。
早速試してみた。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./custom-title-bar-style.png&#34;&gt;&lt;img src=&#34;./custom-title-bar-style.png&#34; srcset=&#34;./custom-title-bar-style.png 1024w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;タイトルバーを非表示に&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./custom-title-bar-style.png&#34;&gt;タイトルバーを非表示に&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;おー，ホンマじゃ。
これは嬉しい。&lt;/p&gt;
&lt;h2&gt;カラー・テーマは&amp;hellip; 入れなくてもいいか&lt;/h2&gt;
&lt;p&gt;歳をとるとだんだん目が弱くなってくる。
Windows にせよ Ubuntu にせよ，パソコンのデスクトップ画面は基本的にダーク・テーマにしているのだが， &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; もこれに合わせて自動的にダークテーマになるようだ。
これならカラー・テーマを別途入れる必要はないか。&lt;/p&gt;
&lt;p&gt;ただし標準のままではカーソル行が分かりにくいので &lt;code&gt;settings.json&lt;/code&gt; に以下の設定を直接書き込む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;workbench.colorCustomizations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.lineHighlightBackground&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#303030&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;必須の拡張機能&lt;/h2&gt;
&lt;p&gt;えっと，私にとって「ないと困る機能」だからね。
念のため。&lt;/p&gt;
&lt;p&gt;ちなみに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすることでも拡張機能をインストールできる。
Shell スクリプト（またはバッチ・ファイル）にまとめておけば再インストールの際にちょっとは楽になると思う。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34; title=&#34;EditorConfig for VS Code - Visual Studio Marketplace&#34;&gt;EditorConfig for VS Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension EditorConfig.EditorConfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コード書きなら &lt;a href=&#34;https://editorconfig.org/&#34;&gt;EditorConfig&lt;/a&gt; は MUST だろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20200922-editorconfig&#34;&gt;インデントおよび行末は EditorConfig で始末する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mosapride.zenkaku&#34; title=&#34;zenkaku - Visual Studio Marketplace&#34;&gt;zenkaku&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension mosapride.zenkaku
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全角空白を見やすく表示してくれる優れもの。
つか，滅びろ全角空白！&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=masakit.zenkaku-hankaku&#34; title=&#34;Zenkaku-Hankaku - Visual Studio Marketplace&#34;&gt;Zenkaku-Hankaku&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension masakit.zenkaku-hankaku
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全角半角変換。
日本語入力環境では必須。
というか半角カナとか全角英数とかマジで勘弁してほしい。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=medo64.render-crlf&#34; title=&#34;Render Line Endings - Visual Studio Marketplace&#34;&gt;Render Line Endings&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension medo64.render-crlf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改行コードの可視化。
色々あったけどユーザが多そうだったのでコレにした。
行末の余分な空白文字も目立たせてくれるスグレモノ。
つか，改行コードを表示するのに拡張機能が必要なのかよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;settings.json&lt;/code&gt; はこんな感じに設定している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;code-eol.highlightExtraWhitespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;code-eol.highlightNonDefault&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ついでに設定の “Render Control Characters” も ON にしている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.renderControlCharacters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate&#34; title=&#34;Duplicate action - Visual Studio Marketplace&#34;&gt;Duplicate action&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension mrmlnc.vscode-duplicate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; のファイル・エクスプローラー機能がショボい。
特にファイルの duplicate 機能がないのは不便って思ってたら拡張機能にあった。
何故これを標準装備しないのだ！&lt;/p&gt;
&lt;h2&gt;あるとよさげな拡張機能&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&#34; title=&#34;Material Icon Theme - Visual Studio Marketplace&#34;&gt;Material Icon Theme&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension PKief.material-icon-theme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よい。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2&#34; title=&#34;Bracket Pair Colorizer 2 - Visual Studio Marketplace&#34;&gt;Bracket Pair Colorizer 2&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension CoenraadS.bracket-pair-colorizer-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;括弧の対応を色付きで見やすくしてくれる。
ホンマに見やすいな。
2 のほうが出来がいいらしい。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph&#34; title=&#34;Git Graph - Visual Studio Marketplace&#34;&gt;Git Graph&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension mhutchie.git-graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; などの基本的なコマンドはコマンドパレットから簡単に呼び出せるが， GUI で操作したいときもあるので。
しかも以下のオプションを付ければ電子署名の検証も表示してくれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;git-graph.repository.commits.showSignatureStatus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というわけで採用。
つか，これがあれば他の git GUI ツール要らなくね？&lt;/p&gt;
&lt;p&gt;キーボードで操作しやすいよう &lt;code&gt;[Shift+F1]&lt;/code&gt; キー押下で表示するようにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Place&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;your&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;bindings&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;defaultss&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+f1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;git-graph.view&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode&#34; title=&#34;Visual Studio IntelliCode - Visual Studio Marketplace&#34;&gt;Visual Studio IntelliCode&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension VisualStudioExptTeam.vscodeintellicode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最初は「別になくてもいいや」と思っていたのだが，使ってみるとめがっさ便利。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&#34; title=&#34;GitLens — Git supercharged - Visual Studio Marketplace&#34;&gt;GitLens&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension eamodio.gitlens
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多分，チーム運用で相互レビューするときなんかには重宝するんだろう。
かなり詳細な情報が見れるんだけど，私個人にはちょっと過剰な機能なんだよなぁ。
とりあえず保留。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer&#34; title=&#34;Excel Viewer - Visual Studio Marketplace&#34;&gt;Excel Viewer&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension GrapeCity.gc-excelviewer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GrapeCity が公開してるのか。
どーりで（笑）&lt;/p&gt;
&lt;p&gt;仕事で使うならよさげだけど，個人レベルじゃ特に要らないかな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/review/1046119.html&#34;&gt;【レビュー】「Visual Studio Code」で Excel スプレッドシートや CSV データを表示「Excel Viewer」 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;現在日時を設定するスニペット&lt;/h2&gt;
&lt;p&gt;現在日時をセットする方法はいくつかあるようだが，スニペットを使うのがお手軽な感じである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Code/User/&lt;/code&gt; ディレクトリ直下に &lt;code&gt;snippets/datetime.code-snippets&lt;/code&gt; というファイルを作って&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，以下の内容をセットすれば OK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;today&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Today (RFC3339)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Now time (local time)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;TodayFull&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;todaytime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;$CURRENT_YEAR-$CURRENT_MONTH-${CURRENT_DATE}T$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND+09:00&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Today and time (RFC3339)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;today&lt;/code&gt;, &lt;code&gt;now&lt;/code&gt;, &lt;code&gt;todaytime&lt;/code&gt; の補完候補として表示される。
自動で表示されない場合は &lt;code&gt;[Ctrl+space]&lt;/code&gt; で候補一覧が出る。&lt;/p&gt;
&lt;p&gt;単純な置換ならスニペットのほうがお手軽なので積極的に使っていきたいところである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iucstscui.hatenablog.com/entry/2021/01/13/080000&#34;&gt;Visual Studio Code スニペットで簡単日付入力 - はんなりと、ゆるやかに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/xx2xyyy/items/fd333368db548167f15a&#34;&gt;VsCode のスニペットのススメ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/editor/userdefinedsnippets&#34;&gt;Snippets in Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/karaage0703/books/80b6999d429abc8051bb&#34;&gt;VS Code エディタ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/catnose99/scraps/36c04be9fb1209&#34;&gt;【随時更新】使ってる VSCode の拡張機能のまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eh-career.com/engineerhub/entry/2019/06/21/103000&#34;&gt;Visual Studio Code のうれしい機能を使いこなして、初心者を最速で脱出する！《VSCode 実践入門》 - エンジニア Hub ｜若手 Web エンジニアのキャリアを考える！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hirocks.jp/vscode-%e3%81%ab%e5%85%a5%e3%82%8c%e3%81%a6%e3%81%84%e3%82%8b%e6%8b%a1%e5%bc%b5%e6%a9%9f%e8%83%bd-2020%e5%b9%b4%e7%89%88/&#34;&gt;VSCode に入れている拡張機能 2020 年版 – 未来をデザインするマーケティング会社 -ハイロックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geekfeed.co.jp/geekblog/vscode_extension&#34;&gt;VSCode 使い必見！？使って便利な Visual Studio Code 拡張機能 10 選 | ソフトウェア開発のギークフィード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jsstudy.hatenablog.com/entry/How-to-set-a-shortcut-to-enter-the-current-date-and-time-in-Visual-Studio-Code&#34;&gt;Visual Studio Code で現在の日時を入力するショートカットを設定する方法 - JavaScript 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/y-tsutsu/items/cfe89c0168f40a8fb353&#34;&gt;VSCodeでなるべくマウスを使わない開発環境をがんばる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51LziyyXRmL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Software Design 編集部 (編集)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-07-18 (Release 2020-07-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08CZ2C3NZ (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;特集記事は「Vim vs. Visual Studio Code」&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-02-28&#34;&gt;2021-02-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Software Design (2020年8月号) --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows 版でコマンド・プロンプトから開くには，インストール時に PATH を通す設定をする必要がある。また Windows 版ではエクスプローラのコンテキスト・メニューから開くオプションもあるので積極的に利用していいだろう。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;大昔の Mifes や Vz Editor くらいしか選択肢がなかった頃ならともかく，今はいくらでも選択肢があるのにわざわざ「◯◯ エディタ風キーマップ」とかするくらいなら「◯◯ エディタ」を使えよ，と思うのは私だけだろうか。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;汎用で使うスニペットを定義する場合，拡張子が &lt;code&gt;.code-snippets&lt;/code&gt; なファイルであればいいらしい。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>DSA は NIST 電子署名標準から外れるようだ</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/dsa-deprecation/" />
		<id>tag:text.Baldanders.info,2021-02-17:/remark/2021/02/dsa-deprecation/</id>
		<published>2021-02-17T20:53:55+09:00</published>
		<updated>2021-02-17T12:01:33+00:00</updated>
		<summary>ドラフト版 FIPS 186-5 の DSA の節の内容がまるっと削られている。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/go1.16&#34; title=&#34;Go 1.16 Release Notes - The Go Programming Language&#34;&gt;Go 1.16 のリリースノート&lt;/a&gt;を眺めていて今さら気付いたのだが，いまだ&lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34; title=&#34;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&#34;&gt;ドラフト中の FIPS 186-5&lt;/a&gt; によると， DSA を「電子署名生成用途としては」電子署名標準（Digital Signature Standard; DSS）から外すつもりのようだ。
ドラフト版 &lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34; title=&#34;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&#34;&gt;FIPS 186-5&lt;/a&gt; の DSA の節はまるっと削られて以下の文章のみ掲載されている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Prior versions of this standard specified the DSA. This standard no longer approves DSA for digital signature generation. DSA may be used to verify signatures generated prior to the implementation date of this standard. See FIPS 186-4 [20] for the specifications for DSA&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34;&gt;FIPS 186-5 (Draft), Digital Signature Standard (DSS)&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;鍵長の問題（現在は鍵長を変数化することで対処している）以外はアルゴリズム自体に危殆化問題があるわけではないと思うが，出自がアレだし実装面の複雑さ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; もあって評判がよろしくないのは聞いていた。
まぁ「設計限界」というやつなんだろう。&lt;/p&gt;
&lt;p&gt;その代わりといってはナニだが楕円曲線暗号のひとつである EdDSA (楕円曲線 ed25519/ed488) が &lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34; title=&#34;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&#34;&gt;FIPS 186-5&lt;/a&gt; から電子署名標準のひとつとして加わることになっている。
これについては以前に記事を書いた（なんでそのときに DSA に気がつかなかったのか）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，時代は楕円曲線暗号ということなのだろう。
次期 &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; である &lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-openpgp-rfc4880bis/&#34; title=&#34;draft-ietf-openpgp-rfc4880bis - OpenPGP Message Format&#34;&gt;RFC 4880bis&lt;/a&gt; が正式にリリースされるタイミングでメインの鍵を替えようかと目論んでいるのだが，前倒ししたほうがいいのかねぇ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/40337&#34;&gt;crypto/dsa: deprecate and remove from crypto/x509 and x/crypto/ssh · Issue #40337 · golang/go · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://buttondown.email/cryptography-dispatches/archive/cryptography-dispatches-dsa-is-past-its-prime/&#34;&gt;Cryptography Dispatches: DSA Is Past Its Prime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2021/02/go-1_16-is-released/&#34;&gt;Go 1.16 がリリースされた&lt;/a&gt;： Go 1.16 では &lt;a href=&#34;https://golang.org/pkg/crypto/dsa/&#34; title=&#34;dsa - The Go Programming Language&#34;&gt;&lt;code&gt;crypto/dsa&lt;/code&gt;&lt;/a&gt; パッケージが非推奨になった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;DSA は実装に必要な要素技術が多く，そのうちのひとつでも瑕疵があれば全体のセキュリティ強度が下がってしまう。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>2022年の暦</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/ephemeris-in-2022/" />
		<id>tag:text.Baldanders.info,2021-02-07:/remark/2021/02/ephemeris-in-2022/</id>
		<published>2021-02-07T17:48:03+09:00</published>
		<updated>2021-02-07T09:00:17+00:00</updated>
		<summary>今年も国立天文台より翌年（2022年）の暦要項が公開された。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;先日の話だが，今年も国立天文台より翌年（2022年）の暦要項が公開された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eco.mtk.nao.ac.jp/koyomi/yoko/index.html&#34;&gt;暦要項 - 国立天文台暦計算室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nao.ac.jp/news/topics/2021/20210201-rekiyoko.html&#34;&gt;令和4（2022）年暦要項の発表 | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以降，いくつか抜粋してみる。&lt;/p&gt;
&lt;h2&gt;祝日・休日&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;2022年は振替休日なし。
今年みたいに急に変更されなければ，だけど（笑）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日付&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;曜日&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2022-01-01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;土&lt;/td&gt;
&lt;td&gt;元日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-01-10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;成人の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-02-11&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;金&lt;/td&gt;
&lt;td&gt;建国記念の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-02-23&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;水&lt;/td&gt;
&lt;td&gt;天皇誕生日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-03-21&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;春分の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-04-29&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;金&lt;/td&gt;
&lt;td&gt;昭和の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-05-03&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;火&lt;/td&gt;
&lt;td&gt;憲法記念日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-05-04&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;水&lt;/td&gt;
&lt;td&gt;みどりの日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-05-05&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;木&lt;/td&gt;
&lt;td&gt;こどもの日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-07-18&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;海の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-08-11&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;木&lt;/td&gt;
&lt;td&gt;山の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-09-19&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;敬老の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-09-23&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;金&lt;/td&gt;
&lt;td&gt;秋分の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-10-10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;スポーツの日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-11-03&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;木&lt;/td&gt;
&lt;td&gt;文化の日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-11-23&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;水&lt;/td&gt;
&lt;td&gt;勤労感謝の日&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;2022年の暦象&lt;/h2&gt;
&lt;p&gt;2022年には日食2回と月食2回がある。
ただし日本で見られるのは 2022-11-08 の皆既月食のみらしい。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日付&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;曜日&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2022-05-01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;日&lt;/td&gt;
&lt;td&gt;部分日食&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-05-16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;皆既月食&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-10-25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;火&lt;/td&gt;
&lt;td&gt;部分日食&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-11-08&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;火&lt;/td&gt;
&lt;td&gt;皆既月食&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;5月1日には部分日食がありますが、日本では見ることができません。&lt;/li&gt;
&lt;li&gt;5月16日には皆既月食がありますが、日本では見ることができません。&lt;/li&gt;
&lt;li&gt;10月25日には部分日食がありますが、日本では見ることができません。&lt;/li&gt;
&lt;li&gt;11月8日には皆既月食があり、日本では全国で皆既食を見ることができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.nao.ac.jp/news/topics/2021/20210201-rekiyoko.html&#34;&gt;令和4（2022）年暦要項の発表 | 国立天文台(NAOJ)&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;他にはこんな感じ。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日付&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;曜日&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2022-02-04&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;金&lt;/td&gt;
&lt;td&gt;立春&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-03-21&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;春分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-05-05&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;木&lt;/td&gt;
&lt;td&gt;立夏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-06-21&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;火&lt;/td&gt;
&lt;td&gt;夏至&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-08-07&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;日&lt;/td&gt;
&lt;td&gt;立秋&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-09-23&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;金&lt;/td&gt;
&lt;td&gt;秋分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-11-07&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td&gt;立冬&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022-12-22&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;木&lt;/td&gt;
&lt;td&gt;冬至&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ちなみに2022年の「&lt;a href=&#34;https://www.nao.ac.jp/faq/a0310.html&#34; title=&#34;質問3-10）伝統的七夕について教えて | 国立天文台&#34;&gt;伝統的七夕&lt;/a&gt;」は8月4日である。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/google-ephemeris/&#34;&gt;カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201205-koyomi&#34;&gt;国立天文台から最新の暦情報を取ってくる【広告記事】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4416620616?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/414Ar7oLWML._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4416620616?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;天文年鑑 2021年版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;天文年鑑編集委員会 (編集)&lt;/dd&gt;
    &lt;dd&gt;誠文堂新光社 2020-11-24&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4416620616 (ASIN), 9784416620618 (EAN), 4416620616 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;天文ファン必携。2021年版。なお，記載されている祝日・休日は改正前のものなのでご注意を。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-11-25&#34;&gt;2020-11-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 天文年鑑 2021年版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
